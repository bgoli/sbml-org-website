/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-fbc"><a href="group__fbc.html">fbc</a></span>
 Base extension class for the &ldquo;fbc&rdquo; package.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 */

public class FbcExtension extends SBMLExtension {
   private long swigCPtr;

   protected FbcExtension(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.FbcExtension_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(FbcExtension obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (FbcExtension obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_FbcExtension(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

	/**
         * @internal
         */
  public SBasePlugin DowncastSBasePlugin(long cPtr, boolean owner)
  {
    if (cPtr == 0) return null;

    SBasePlugin sbp = new SBasePlugin(cPtr, false);
    SBase sb = sbp.getParentSBMLObject();

    if (sb instanceof Model)
    {
      return new FbcModelPlugin(cPtr, owner);
    }
    
    switch( sb.getTypeCode() )
    {
      case (int) libsbml.SBML_SPECIES:
        return new FbcSpeciesPlugin(cPtr, owner);

      case (int) libsbml.SBML_MODEL:
        return new FbcModelPlugin(cPtr, owner);

      case (int) libsbml.SBML_REACTION:
        return new FbcReactionPlugin(cPtr, owner);

      case (int) libsbml.SBML_DOCUMENT:
        return new FbcSBMLDocumentPlugin(cPtr, owner);
        
      default:
        return new SBasePlugin(cPtr, owner);
    }
  }

	/**
         * @internal
         */
  public SBase DowncastSBase(long cPtr, boolean owner)
  {
    if (cPtr == 0) return null;

    SBase sb = new SBase(cPtr, false);
    switch( sb.getTypeCode() )
    {
      case (int) libsbml.SBML_LIST_OF:
        String name = sb.getElementName();
        if (name.equals("listOfFbcAssociations"))
        {
          return new ListOfFbcAssociations(cPtr, owner);
        }
        else if(name.equals("listOfFluxBounds"))
			     {
					return new ListOfFluxBounds(cPtr, owner);
                 }
        else if (name.equals("listOfFluxes") || name.equals("listOfFluxObjectives"))
        {
          return new ListOfFluxObjectives(cPtr, owner);
        }
        else if(name.equals("listOfGeneAssociations"))
			     {
		            return new ListOfGeneAssociations(cPtr, owner);
                 }
        else if (name.equals("listOfObjectives"))
        {
          return new ListOfObjectives(cPtr, owner);
        }
        else if (name.equals("listOfGeneProducts"))
        {
          return new ListOfGeneProducts(cPtr, owner);
        }

        return new ListOf(cPtr, owner);

      case (int) libsbml.SBML_FBC_ASSOCIATION:
        return new FbcAssociation(cPtr, owner);

			case (int) libsbml.SBML_FBC_V1ASSOCIATION:
				return new Association(cPtr, owner);
				
			case (int) libsbml.SBML_FBC_FLUXBOUND:
				return new FluxBound(cPtr, owner);

      case (int) libsbml.SBML_FBC_FLUXOBJECTIVE:
        return new FluxObjective(cPtr, owner);

      case (int) libsbml.SBML_FBC_GENEPRODUCTASSOCIATION:
        return new GeneProductAssociation(cPtr, owner);

			case (int) libsbml.SBML_FBC_GENEASSOCIATION:
				return new GeneAssociation(cPtr, owner);
				
      case (int) libsbml.SBML_FBC_OBJECTIVE:
        return new Objective(cPtr, owner);

      case (int) libsbml.SBML_FBC_GENEPRODUCT:
        return new GeneProduct(cPtr, owner);

      case (int) libsbml.SBML_FBC_GENEPRODUCTREF:
        return new GeneProductRef(cPtr, owner);

      case (int) libsbml.SBML_FBC_AND:
        return new FbcAnd(cPtr, owner);

      case (int) libsbml.SBML_FBC_OR:
        return new FbcOr(cPtr, owner);

      default:
        return new SBase(cPtr, owner);
    }
  }


  
/**
   * Returns the nickname of the SBML Level&nbsp;3 package implemented by
   * this libSBML extension.
   <p>
   * @return the package nickname, as a string.
   <p>
   * 
   */ public
 static String getPackageName() {
    return libsbmlJNI.FbcExtension_getPackageName();
  }

  
/**
   * Returns the default SBML Level used by this libSBML package extension.
   <p>
   * @return the SBML Level.
   <p>
   * 
   */ public
 static long getDefaultLevel() {
    return libsbmlJNI.FbcExtension_getDefaultLevel();
  }

  
/**
   * Returns the default SBML Version used by this libSBML package extension.
   <p>
   * @return the Version within the default SBML Level.
   <p>
   * 
   */ public
 static long getDefaultVersion() {
    return libsbmlJNI.FbcExtension_getDefaultVersion();
  }

  
/**
   * Returns the default version of the SBML Level&nbsp;3 package implemented
   * by this libSBML extension.
   <p>
   * @return the default version number of the SBML Level&nbsp;3 package
   * definition.
   <p>
   * 
   */ public
 static long getDefaultPackageVersion() {
    return libsbmlJNI.FbcExtension_getDefaultPackageVersion();
  }

  
/**
   * Returns the XML namespace URI of the SBML Level&nbsp;3 package
   * implemented by this libSBML extension.
   <p>
   * @return the XML namespace as a string.
   <p>
   * 
   */ public
 static String getXmlnsL3V1V1() {
    return libsbmlJNI.FbcExtension_getXmlnsL3V1V1();
  }

  
/**
   * Returns the XML namespace URI of the SBML Level&nbsp;3 package
   * implemented by this libSBML extension.
   <p>
   * @return the XML namespace as a string.
   <p>
   * 
   */ public
 static String getXmlnsL3V1V2() {
    return libsbmlJNI.FbcExtension_getXmlnsL3V1V2();
  }

  
/**
   * Creates a new {@link FbcExtension} instance.
   */ public
 FbcExtension() {
    this(libsbmlJNI.new_FbcExtension__SWIG_0(), true);
  }

  
/**
   * Copy constructor for {@link FbcExtension}.
   <p>
   * @param orig the {@link FbcExtension} instance to copy.
   */ public
 FbcExtension(FbcExtension orig) {
    this(libsbmlJNI.new_FbcExtension__SWIG_1(FbcExtension.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link FbcExtension} object.
   <p>
   * @return a (deep) copy of this {@link FbcExtension} object.
   */ public
 FbcExtension cloneObject() {
    long cPtr = libsbmlJNI.FbcExtension_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new FbcExtension(cPtr, true);
  }

  
/**
   * Returns the name of this SBML Level&nbsp;3 package ('fbc').
   <p>
   * @return a string representing the name of this package ('fbc').
   */ public
 String getName() {
    return libsbmlJNI.FbcExtension_getName(swigCPtr, this);
  }

  
/**
   * Returns a string representing the SBML XML namespace of this
   * SBML Level&nbsp;3 package.
   <p>
   * The namespace URI constructed by this method corresponds to the
   * combination of the Level and Version of SBML, and the Version of the
   * SBML Level&nbsp;3 package.  (At the time of this writing, the only SBML
   * Level that supports packages is Level&nbsp;3, so the value of
   * <code>sbmlLevel</code> must necessarily always be <code>3</code>.)
   <p>
   * @param sbmlLevel the level of SBML.
   * @param sbmlVersion the version of SBML.
   * @param pkgVersion the version of the package.
   <p>
   * @return a string representing the package URI, or an empty string if no
   * corresponding URI exists.
   */ public
 String getURI(long sbmlLevel, long sbmlVersion, long pkgVersion) {
    return libsbmlJNI.FbcExtension_getURI(swigCPtr, this, sbmlLevel, sbmlVersion, pkgVersion);
  }

  
/**
   * Returns the SBML Level for the given URI of this package.
   <p>
   * @param uri a URI that represents a version of this package.
   <p>
   * @return the SBML Level for the given URI of this package, or <code>0</code> if the
   * given URI is invalid, or for a different package.
   */ public
 long getLevel(String uri) {
    return libsbmlJNI.FbcExtension_getLevel(swigCPtr, this, uri);
  }

  
/**
   * Returns the Version within the SBML Level for the given URI of this
   * package.
   <p>
   * @param uri a URI that represents a version of this package.
   <p>
   * @return the SBML Version within the SBML Level for the given URI of this
   * package, or <code>0</code> if the given URI is invalid, or for a different package.
   */ public
 long getVersion(String uri) {
    return libsbmlJNI.FbcExtension_getVersion(swigCPtr, this, uri);
  }

  
/**
   * Returns the SBML Level&nbsp;3 package version for the given URI of this
   * package.
   <p>
   * @param uri a URI that represents one of the valid versions of this
   * package.
   <p>
   * @return the version of the SBML Level&nbsp;3 package with the given URI,
   * or <code>0</code> if the given URI is invalid, or for a different package.
   */ public
 long getPackageVersion(String uri) {
    return libsbmlJNI.FbcExtension_getPackageVersion(swigCPtr, this, uri);
  }

  
/**
   * Returns an {@link FbcPkgNamespaces} object.
   <p>
   * @param uri a URI that represents one of the valid versions of the
   * &ldquo;fbc&rdquo; package.
   <p>
   * @return an {@link FbcPkgNamespaces} object corresponding to the given <code>uri</code>, or
   * <code>null</code> if the URI is not defined in the &ldquo;fbc&rdquo; package.
   */ public
 SBMLNamespaces getSBMLExtensionNamespaces(String uri) {
  return libsbml.DowncastSBMLNamespaces(libsbmlJNI.FbcExtension_getSBMLExtensionNamespaces(swigCPtr, this, uri), false);
}

  
/**
   * Takes a type code of the &ldquo;fbc&rdquo; package and returns a string
   * describing the code.
   <p>
   * @param typeCode a libSBML type code defined by the libSBML extension
   * implementing support for the SBML Level&nbsp;3 &ldquo;fbc&rdquo; package.
   <p>
   * @return a text string representing the type code given by <code>typeCode</code>.
   * If the type code is unrecognized for this implementation of the libSBML
   * &ldquo;fbc&rdquo; package, the string returned will be
   * <code>'(Unknown SBML Fbc Type)'</code>.
   */ public
 String getStringFromTypeCode(int typeCode) {
    return libsbmlJNI.FbcExtension_getStringFromTypeCode(swigCPtr, this, typeCode);
  }

  
/** * @internal */ public
 static void init() {
    libsbmlJNI.FbcExtension_init();
  }

  
/** * @internal */ public
 SWIGTYPE_p_packageErrorTableEntryV2 getErrorTableV2(long index) {
    return new SWIGTYPE_p_packageErrorTableEntryV2(libsbmlJNI.FbcExtension_getErrorTableV2(swigCPtr, this, index), true);
  }

  
/** * @internal */ public
 long getErrorTableIndex(long errorId) {
    return libsbmlJNI.FbcExtension_getErrorTableIndex(swigCPtr, this, errorId);
  }

  
/** * @internal */ public
 long getErrorIdOffset() {
    return libsbmlJNI.FbcExtension_getErrorIdOffset(swigCPtr, this);
  }

  
/** * @internal */ public
 boolean hasMutiplePackageVersions() {
    return libsbmlJNI.FbcExtension_hasMutiplePackageVersions(swigCPtr, this);
  }

}
