/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 A point with both absolute and relative values
 <p>
 * Render objects are often specified relative to the current viewport,
 * i.e. we need a way to specify relative coordinate values in curves. For
 * this we introduced the {@link RenderPoint} and the {@link RenderCubicBezier} class in the
 * render extension.  Those two classes are used to specify curve and polygon
 * elements.
 <p>
 * @see RenderCurve
 * @see Polygon
 */

public class RenderPoint extends SBase {
   private long swigCPtr;

   protected RenderPoint(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.RenderPoint_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(RenderPoint obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (RenderPoint obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_RenderPoint(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link RenderPoint} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link RenderPoint}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link RenderPoint}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link RenderPoint}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 RenderPoint(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderPoint__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link RenderPoint} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link RenderPoint}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link RenderPoint}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link RenderPoint}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 RenderPoint(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderPoint__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link RenderPoint} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link RenderPoint}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link RenderPoint}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link RenderPoint}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 RenderPoint(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderPoint__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link RenderPoint} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link RenderPoint}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link RenderPoint}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link RenderPoint}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 RenderPoint() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderPoint__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link RenderPoint} using the given {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param renderns the {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 RenderPoint(RenderPkgNamespaces renderns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderPoint__SWIG_4(RenderPkgNamespaces.getCPtr(renderns), renderns), true);
  }

  
/**
   * Creates a new point with the given coordinates.
   <p>
   * @param renderns the {@link RenderPkgNamespaces} object.
   * @param x x coordinate of the {@link RenderPoint} object
   * @param y y coordinate of the {@link RenderPoint} object
   * @param z z coordinate of the {@link RenderPoint} object
   * If the z value is omitted, it is set to 0.
   */ public
 RenderPoint(RenderPkgNamespaces renderns, RelAbsVector x, RelAbsVector y, RelAbsVector z) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderPoint__SWIG_5(RenderPkgNamespaces.getCPtr(renderns), renderns, RelAbsVector.getCPtr(x), x, RelAbsVector.getCPtr(y), y, RelAbsVector.getCPtr(z), z), true);
  }

  
/**
   * Creates a new point with the given coordinates.
   <p>
   * @param renderns the {@link RenderPkgNamespaces} object.
   * @param x x coordinate of the {@link RenderPoint} object
   * @param y y coordinate of the {@link RenderPoint} object
   * @param z z coordinate of the {@link RenderPoint} object
   * If the z value is omitted, it is set to 0.
   */ public
 RenderPoint(RenderPkgNamespaces renderns, RelAbsVector x, RelAbsVector y) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderPoint__SWIG_6(RenderPkgNamespaces.getCPtr(renderns), renderns, RelAbsVector.getCPtr(x), x, RelAbsVector.getCPtr(y), y), true);
  }

  
/**
   * Creates a new {@link RenderPoint} object from the given {@link XMLNode} object.
   * The {@link XMLNode} object has to contain a valid XML representation of a 
   * {@link RenderPoint} object as defined in the render extension specification.
   * This method is normally called when render information is read from a file and 
   * should normally not have to be called explicitly.
   <p>
   * @param node the {@link XMLNode} object reference that describes the {@link RenderPoint}
   * object to be instantiated.
   * @param l2version the version of SBML Level&nbsp;2 to target.
   */ public
 RenderPoint(XMLNode node, long l2version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderPoint__SWIG_7(XMLNode.getCPtr(node), node, l2version), true);
  }

  
/**
   * Creates a new {@link RenderPoint} object from the given {@link XMLNode} object.
   * The {@link XMLNode} object has to contain a valid XML representation of a 
   * {@link RenderPoint} object as defined in the render extension specification.
   * This method is normally called when render information is read from a file and 
   * should normally not have to be called explicitly.
   <p>
   * @param node the {@link XMLNode} object reference that describes the {@link RenderPoint}
   * object to be instantiated.
   * @param l2version the version of SBML Level&nbsp;2 to target.
   */ public
 RenderPoint(XMLNode node) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderPoint__SWIG_8(XMLNode.getCPtr(node), node), true);
  }

  
/**
   * Copy constructor for {@link RenderPoint}.
   <p>
   * @param orig the {@link RenderPoint} instance to copy.
   */ public
 RenderPoint(RenderPoint orig) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderPoint__SWIG_9(RenderPoint.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link RenderPoint} object.
   <p>
   * @return a (deep) copy of this {@link RenderPoint} object.
   */ public
 RenderPoint cloneObject() {
  return (RenderPoint) libsbml.DowncastSBase(libsbmlJNI.RenderPoint_cloneObject(swigCPtr, this), true);
}

  
/**
   * Sets the Z offset to 0.0.
   */ public
 void initDefaults() {
    libsbmlJNI.RenderPoint_initDefaults(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'x' element of this {@link RenderPoint}.
   <p>
   * @return the value of the 'x' element of this {@link RenderPoint} as a
   * {@link RelAbsVector}.
   */ public
 RelAbsVector getX() {
    return new RelAbsVector(libsbmlJNI.RenderPoint_getX__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns the x coordinate of the {@link RenderPoint} as a  reference.
   <p>
   * @return  reference to x coordinate.
   */ public
 RelAbsVector x() {
    return new RelAbsVector(libsbmlJNI.RenderPoint_x__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'y' element of this {@link RenderPoint}.
   <p>
   * @return the value of the 'y' element of this {@link RenderPoint} as a
   * {@link RelAbsVector}.
   */ public
 RelAbsVector getY() {
    return new RelAbsVector(libsbmlJNI.RenderPoint_getY__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns the y coordinate of the {@link RenderPoint} as a  reference.
   <p>
   * @return  reference to y coordinate.
   */ public
 RelAbsVector y() {
    return new RelAbsVector(libsbmlJNI.RenderPoint_y__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'z' element of this {@link RenderPoint}.
   <p>
   * @return the value of the 'z' element of this {@link RenderPoint} as a
   * {@link RelAbsVector}.
   */ public
 RelAbsVector getZ() {
    return new RelAbsVector(libsbmlJNI.RenderPoint_getZ__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns the z coordinate of the {@link RenderPoint} as a  reference.
   <p>
   * @return  reference to z coordinate.
   */ public
 RelAbsVector z() {
    return new RelAbsVector(libsbmlJNI.RenderPoint_z__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderPoint}'s 'x' element is set.
   <p>
   * @return <code>true</code> if this {@link RenderPoint}'s 'x' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetX() {
    return libsbmlJNI.RenderPoint_isSetX(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderPoint}'s 'y' element is set.
   <p>
   * @return <code>true</code> if this {@link RenderPoint}'s 'y' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetY() {
    return libsbmlJNI.RenderPoint_isSetY(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderPoint}'s 'z' element is set.
   <p>
   * @return <code>true</code> if this {@link RenderPoint}'s 'z' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetZ() {
    return libsbmlJNI.RenderPoint_isSetZ(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'x' element of this {@link RenderPoint}.
   <p>
   * @param x {@link RelAbsVector} value of the 'x' element to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setX(RelAbsVector x) {
    return libsbmlJNI.RenderPoint_setX(swigCPtr, this, RelAbsVector.getCPtr(x), x);
  }

  
/**
   * Sets the value of the 'y' element of this {@link RenderPoint}.
   <p>
   * @param y {@link RelAbsVector} value of the 'y' element to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setY(RelAbsVector y) {
    return libsbmlJNI.RenderPoint_setY(swigCPtr, this, RelAbsVector.getCPtr(y), y);
  }

  
/**
   * Sets the value of the 'z' element of this {@link RenderPoint}.
   <p>
   * @param z {@link RelAbsVector} value of the 'z' element to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setZ(RelAbsVector z) {
    return libsbmlJNI.RenderPoint_setZ(swigCPtr, this, RelAbsVector.getCPtr(z), z);
  }

  
/**
   * Sets the coordinates of the {@link RenderPoint} to the given values.
   <p>
   * @param x x coordinate to be set.
   * @param y y coordinate to be set.
   * @param z z coordinate to be set. If the z coordinate is omitted, it is set to 0.
   */ public
 void setCoordinates(RelAbsVector x, RelAbsVector y, RelAbsVector z) {
    libsbmlJNI.RenderPoint_setCoordinates__SWIG_0(swigCPtr, this, RelAbsVector.getCPtr(x), x, RelAbsVector.getCPtr(y), y, RelAbsVector.getCPtr(z), z);
  }

  
/**
   * Sets the coordinates of the {@link RenderPoint} to the given values.
   <p>
   * @param x x coordinate to be set.
   * @param y y coordinate to be set.
   * @param z z coordinate to be set. If the z coordinate is omitted, it is set to 0.
   */ public
 void setCoordinates(RelAbsVector x, RelAbsVector y) {
    libsbmlJNI.RenderPoint_setCoordinates__SWIG_1(swigCPtr, this, RelAbsVector.getCPtr(x), x, RelAbsVector.getCPtr(y), y);
  }

  
/**
   * Sets the coordinates of the {@link RenderPoint} to the given values.
   * This method is deprecated, please use setCoordinates. 
   <p>
   * @param x x coordinate to be set.
   * @param y y coordinate to be set.
   * @param z z coordinate to be set. If the z coordinate is omitted, it is set to 0.
   */ public
 void setOffsets(RelAbsVector x, RelAbsVector y, RelAbsVector z) {
    libsbmlJNI.RenderPoint_setOffsets__SWIG_0(swigCPtr, this, RelAbsVector.getCPtr(x), x, RelAbsVector.getCPtr(y), y, RelAbsVector.getCPtr(z), z);
  }

  
/**
   * Sets the coordinates of the {@link RenderPoint} to the given values.
   * This method is deprecated, please use setCoordinates. 
   <p>
   * @param x x coordinate to be set.
   * @param y y coordinate to be set.
   * @param z z coordinate to be set. If the z coordinate is omitted, it is set to 0.
   */ public
 void setOffsets(RelAbsVector x, RelAbsVector y) {
    libsbmlJNI.RenderPoint_setOffsets__SWIG_1(swigCPtr, this, RelAbsVector.getCPtr(x), x, RelAbsVector.getCPtr(y), y);
  }

  
/**
   * Unsets the value of the 'x' element of this {@link RenderPoint}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetX() {
    return libsbmlJNI.RenderPoint_unsetX(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'y' element of this {@link RenderPoint}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetY() {
    return libsbmlJNI.RenderPoint_unsetY(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'z' element of this {@link RenderPoint}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetZ() {
    return libsbmlJNI.RenderPoint_unsetZ(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link RenderPoint} is of type
   * {@link RenderPoint}
   <p>
   * @return <code>true</code> if this abstract {@link RenderPoint} is of type {@link RenderPoint},
   * <code>false</code> otherwise
   */ public
 boolean isRenderPoint() {
    return libsbmlJNI.RenderPoint_isRenderPoint(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link RenderPoint} is of type
   * {@link RenderCubicBezier}
   <p>
   * @return <code>true</code> if this abstract {@link RenderPoint} is of type
   * {@link RenderCubicBezier}, <code>false</code> otherwise
   */ public
 boolean isRenderCubicBezier() {
    return libsbmlJNI.RenderPoint_isRenderCubicBezier(swigCPtr, this);
  }

  
/**
   * Returns the XML element name of this {@link RenderPoint} object.
   <p>
   * For {@link RenderPoint}, the XML element name is always <code>'element'.</code>
   <p>
   * @return the name of this element, i.e. <code>'element'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.RenderPoint_getElementName(swigCPtr, this);
  }

  
/** * @internal */ public
 void setElementName(String name) {
    libsbmlJNI.RenderPoint_setElementName(swigCPtr, this, name);
  }

  
/**
   * Returns the libSBML type code for this {@link RenderPoint} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_RENDER_POINT SBML_RENDER_POINT}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.RenderPoint_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link RenderPoint} object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required attributes of this
   * {@link RenderPoint} have been set, otherwise <code>false</code> is returned.
   <p>
   * @note The required attributes for the {@link RenderPoint} object are:
   * <ul>
   * <li> 'x'
   * <li> 'y'
   * </ul>
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.RenderPoint_hasRequiredAttributes(swigCPtr, this);
  }

  
/**
   * Creates an {@link XMLNode} object from this {@link ColorDefinition} object.
   <p>
   * @return the {@link XMLNode} with the XML representation for the 
   * {@link ColorDefinition} object.
   */ public
 XMLNode toXML(String name) {
    return new XMLNode(libsbmlJNI.RenderPoint_toXML(swigCPtr, this, name), true);
  }

}
