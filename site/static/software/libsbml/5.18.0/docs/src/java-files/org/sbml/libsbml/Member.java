/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-groups"><a href="group__groups.html">groups</a></span>
 The {@link Member} class defines what objects are parts of
 * a {@link Group}.
 <p>
 * The {@link Member} class has four optional attributes: id and name, which identify 
 * the element, and idRef and metaIdRef which reference the identifiers of 
 * other elements. There must be exactly one (and only one) method used to 
 * reference another element: either idRef or metaIdRef may be defined, but 
 * not both. (Multiple attributes are needed to account for the different types 
 * of identifiers that a given object may have.) The referenced object 
 * (including, potentially, another {@link Group} object) is thus made a member of the 
 * group in which the {@link Member} object is contained.
 <p>
 * Since {@link Member} is derived from {@link SBase} and, as mentioned above, {@link SBase} provides 
 * both the ability to attach {@link SBO} terms as well as MIRIAM annotations, the 
 * semantics of a given member in a model can be made more precise by reference 
 * to external controlled vocabularies and ontologies.
 */

public class Member extends SBase {
   private long swigCPtr;

   protected Member(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.Member_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(Member obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (Member obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_Member(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link Member} using the given SBML Level, Version and
   * &ldquo;groups&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Member}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Member}.
   <p>
   * @param pkgVersion a long integer, the SBML Groups Version to assign to
   * this {@link Member}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Member(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Member__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link Member} using the given SBML Level, Version and
   * &ldquo;groups&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Member}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Member}.
   <p>
   * @param pkgVersion a long integer, the SBML Groups Version to assign to
   * this {@link Member}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Member(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Member__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link Member} using the given SBML Level, Version and
   * &ldquo;groups&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Member}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Member}.
   <p>
   * @param pkgVersion a long integer, the SBML Groups Version to assign to
   * this {@link Member}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Member(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Member__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link Member} using the given SBML Level, Version and
   * &ldquo;groups&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Member}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Member}.
   <p>
   * @param pkgVersion a long integer, the SBML Groups Version to assign to
   * this {@link Member}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Member() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Member__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link Member} using the given {@link GroupsPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param groupsns the {@link GroupsPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Member(GroupsPkgNamespaces groupsns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Member__SWIG_4(GroupsPkgNamespaces.getCPtr(groupsns), groupsns), true);
  }

  
/**
   * Copy constructor for {@link Member}.
   <p>
   * @param orig the {@link Member} instance to copy.
   */ public
 Member(Member orig) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Member__SWIG_5(Member.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link Member} object.
   <p>
   * @return a (deep) copy of this {@link Member} object.
   */ public
 Member cloneObject() {
    long cPtr = libsbmlJNI.Member_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new Member(cPtr, true);
  }

  
/**
   * Returns the value of the 'id' attribute of this {@link Member}.
   <p>
   * @return the value of the 'id' attribute of this {@link Member} as a string.
   */ public
 String getId() {
    return libsbmlJNI.Member_getId(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'name' attribute of this {@link Member}.
   <p>
   * @return the value of the 'name' attribute of this {@link Member} as a string.
   */ public
 String getName() {
    return libsbmlJNI.Member_getName(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'idRef' attribute of this {@link Member}.
   <p>
   * @return the value of the 'idRef' attribute of this {@link Member} as a string.
   */ public
 String getIdRef() {
    return libsbmlJNI.Member_getIdRef(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'metaIdRef' attribute of this {@link Member}.
   <p>
   * @return the value of the 'metaIdRef' attribute of this {@link Member} as a string.
   */ public
 String getMetaIdRef() {
    return libsbmlJNI.Member_getMetaIdRef(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Member}'s 'id' attribute is set.
   <p>
   * @return <code>true</code> if this {@link Member}'s 'id' attribute has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetId() {
    return libsbmlJNI.Member_isSetId(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Member}'s 'name' attribute is set.
   <p>
   * @return <code>true</code> if this {@link Member}'s 'name' attribute has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetName() {
    return libsbmlJNI.Member_isSetName(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Member}'s 'idRef' attribute is set.
   <p>
   * @return <code>true</code> if this {@link Member}'s 'idRef' attribute has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetIdRef() {
    return libsbmlJNI.Member_isSetIdRef(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Member}'s 'metaIdRef' attribute is set.
   <p>
   * @return <code>true</code> if this {@link Member}'s 'metaIdRef' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetMetaIdRef() {
    return libsbmlJNI.Member_isSetMetaIdRef(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'id' attribute of this {@link Member}.
   <p>
   * @param id String& value of the 'id' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * Calling this function with <code>id</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetId().
   */ public
 int setId(String id) {
    return libsbmlJNI.Member_setId(swigCPtr, this, id);
  }

  
/**
   * Sets the value of the 'name' attribute of this {@link Member}.
   <p>
   * @param name String& value of the 'name' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * Calling this function with <code>name</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetName().
   */ public
 int setName(String name) {
    return libsbmlJNI.Member_setName(swigCPtr, this, name);
  }

  
/**
   * Sets the value of the 'idRef' attribute of this {@link Member}.
   <p>
   * @param idRef String& value of the 'idRef' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setIdRef(String idRef) {
    return libsbmlJNI.Member_setIdRef(swigCPtr, this, idRef);
  }

  
/**
   * Sets the value of the 'metaIdRef' attribute of this {@link Member}.
   <p>
   * @param metaIdRef String& value of the 'metaIdRef' attribute to be
   * set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setMetaIdRef(String metaIdRef) {
    return libsbmlJNI.Member_setMetaIdRef(swigCPtr, this, metaIdRef);
  }

  
/**
   * Unsets the value of the 'id' attribute of this {@link Member}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetId() {
    return libsbmlJNI.Member_unsetId(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'name' attribute of this {@link Member}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetName() {
    return libsbmlJNI.Member_unsetName(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'idRef' attribute of this {@link Member}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetIdRef() {
    return libsbmlJNI.Member_unsetIdRef(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'metaIdRef' attribute of this {@link Member}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetMetaIdRef() {
    return libsbmlJNI.Member_unsetMetaIdRef(swigCPtr, this);
  }

  
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as 'referring to an identifier', but the effective
 * data type was the same as <code>SIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier.
 * @param newid the new identifier.
   */ public
 void renameSIdRefs(String oldid, String newid) {
    libsbmlJNI.Member_renameSIdRefs(swigCPtr, this, oldid, newid);
  }

  
/**
   * Returns the XML element name of this {@link Member} object.
   <p>
   * For {@link Member}, the XML element name is always <code>'member'.</code>
   <p>
   * @return the name of this element, i.e. <code>'member'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.Member_getElementName(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code for this {@link Member} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_GROUPS_MEMBER SBML_GROUPS_MEMBER}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.Member_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes for this {@link Member}
   * object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required attributes of this
   * {@link Member} have been set, otherwise <code>false</code> is returned.
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.Member_hasRequiredAttributes(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.Member_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

  
/** * @internal */ public
 SBase getReferencedElement() {
  return libsbml.DowncastSBase(libsbmlJNI.Member_getReferencedElement(swigCPtr, this), false);
}

}
