/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-multi"><a href="group__multi.html">multi</a></span>
 Extension of {@link SpeciesReference} for the 'multi' package.
 <p>
 * The {@link MultiSpeciesReferencePlugin} class inherits from the
 * {@link MultiSimpleSpeciesReferencePlugin} class, and extends the {@link SpeciesReference}
 * class to establish component mappings between the reactant species and the
 * product species when the mappings cannot be inferred from the ids of the
 * {@link SpeciesTypeInstance} objects. A {@link MultiSpeciesReferencePlugin} object defines
 * an optional {@link ListOfSpeciesTypeComponentMapInProducts} child. Only a reaction
 * product can contain the {@link ListOfSpeciesTypeComponentMapInProducts} child and
 * it is not necessary to store the mappings again in the reactants.
 */

public class MultiSpeciesReferencePlugin extends MultiSimpleSpeciesReferencePlugin {
   private long swigCPtr;

   protected MultiSpeciesReferencePlugin(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.MultiSpeciesReferencePlugin_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(MultiSpeciesReferencePlugin obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (MultiSpeciesReferencePlugin obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_MultiSpeciesReferencePlugin(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link MultiSpeciesReferencePlugin} object.
   <p>
   * <p>
 * In the XML representation of an SBML document, XML namespaces are used to
 * identify the origin of each XML construct used.  XML namespaces are
 * identified by their unique resource identifiers (URIs).  The core SBML
 * specifications stipulate the namespaces that must be used for core SBML
 * constructs; for example, all XML elements that belong to SBML Level&nbsp;3
 * Version&nbsp;1 Core must be placed in the XML namespace identified by the URI
 * <code>'http://www.sbml.org/sbml/level3/version1/core'</code>.  Individual
 * SBML Level&nbsp;3 packages define their own XML namespaces; for example,
 * all elements belonging to the SBML Level&nbsp;3 Layout Version&nbsp;1
 * package must be placed in the XML namespace
 * <code>'http://www.sbml.org/sbml/level3/version1/layout/version1/'</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * @param uri the URI of the SBML Level&nbsp;3 package implemented by
   * this libSBML package extension.
   <p>
   * @param prefix the XML namespace prefix being used for the package.
   <p>
   * @param multins the namespaces object for the package.
   */ public
 MultiSpeciesReferencePlugin(String uri, String prefix, MultiPkgNamespaces multins) {
    this(libsbmlJNI.new_MultiSpeciesReferencePlugin__SWIG_0(uri, prefix, MultiPkgNamespaces.getCPtr(multins), multins), true);
  }

  
/**
   * Copy constructor for {@link MultiSpeciesReferencePlugin}.
   <p>
   * @param orig the {@link MultiSpeciesReferencePlugin} instance to copy.
   */ public
 MultiSpeciesReferencePlugin(MultiSpeciesReferencePlugin orig) {
    this(libsbmlJNI.new_MultiSpeciesReferencePlugin__SWIG_1(MultiSpeciesReferencePlugin.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link MultiSpeciesReferencePlugin} object.
   <p>
   * @return a (deep) copy of this {@link MultiSpeciesReferencePlugin} object.
   */ public
 SBasePlugin cloneObject() {
    long cPtr = libsbmlJNI.MultiSpeciesReferencePlugin_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new MultiSpeciesReferencePlugin(cPtr, true);
  }

  
/** * @internal */ public
 SBase createObject(XMLInputStream stream) {
  return libsbml.DowncastSBase(libsbmlJNI.MultiSpeciesReferencePlugin_createObject(swigCPtr, this, XMLInputStream.getCPtr(stream), stream), false);
}

  
/**
   * Returns <code>true</code> if this object has all the required elements.
   <p>
   * @return <code>true</code> if this object has all the elements required by the
   * package specification; otherwise, <code>false</code> will be returned.
   */ public
 boolean hasRequiredElements() {
    return libsbmlJNI.MultiSpeciesReferencePlugin_hasRequiredElements(swigCPtr, this);
  }

  
/**
   * Returns the {@link ListOfSpeciesTypeComponentMapInProducts} object.
   <p>
   * @return {@link ListOfSpeciesTypeComponentMapInProducts} object within this
   * 'multi' {@link SpeciesReference} object.
   */ public
 ListOfSpeciesTypeComponentMapInProducts getListOfSpeciesTypeComponentMapInProducts() {
    long cPtr = libsbmlJNI.MultiSpeciesReferencePlugin_getListOfSpeciesTypeComponentMapInProducts__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfSpeciesTypeComponentMapInProducts(cPtr, false);
  }

  
/**
   * Returns the nth {@link SpeciesTypeComponentMapInProduct} object.
   <p>
   * @param n the index number of the {@link SpeciesTypeComponentMapInProduct} to get.
   <p>
   * @return the nth {@link SpeciesTypeComponentMapInProduct} in the
   * {@link ListOfSpeciesTypeComponentMapInProducts}.  If the index is invalid, null
   * is returned.
   */ public
 SpeciesTypeComponentMapInProduct getSpeciesTypeComponentMapInProduct(long n) {
    long cPtr = libsbmlJNI.MultiSpeciesReferencePlugin_getSpeciesTypeComponentMapInProduct__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new SpeciesTypeComponentMapInProduct(cPtr, false);
  }

  
/**
   * Returns the {@link SpeciesTypeComponentMapInProduct} object with the given
   * identifier <code>sid</code>.
   <p>
   * @param sid a string representing the id of the
   * {@link SpeciesTypeComponentMapInProduct} to get.
   <p>
   * @return the {@link SpeciesTypeComponentMapInProduct} object within the
   * {@link ListOfSpeciesTypeComponentMapInProducts} with the given id, or <code>null</code> if no
   * such {@link SpeciesTypeComponentMapInProduct} exists.
   */ public
 SpeciesTypeComponentMapInProduct getSpeciesTypeComponentMapInProduct(String sid) {
    long cPtr = libsbmlJNI.MultiSpeciesReferencePlugin_getSpeciesTypeComponentMapInProduct__SWIG_2(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new SpeciesTypeComponentMapInProduct(cPtr, false);
  }

  
/**
   * Adds a copy of the given {@link SpeciesTypeComponentMapInProduct} to the
   * {@link ListOfSpeciesTypeComponentMapInProducts}.
   <p>
   * @param speciesTypeComponentMapInProduct the
   * speciesTypeComponentMapInProduct to be added.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int addSpeciesTypeComponentMapInProduct(SpeciesTypeComponentMapInProduct speciesTypeComponentMapInProduct) {
    return libsbmlJNI.MultiSpeciesReferencePlugin_addSpeciesTypeComponentMapInProduct(swigCPtr, this, SpeciesTypeComponentMapInProduct.getCPtr(speciesTypeComponentMapInProduct), speciesTypeComponentMapInProduct);
  }

  
/**
   * Creates a new {@link SpeciesTypeComponentMapInProduct} object and adds it to the
   * {@link ListOfSpeciesTypeComponentMapInProducts}.
   <p>
   * @return the newly created {@link SpeciesTypeComponentMapInProduct} object.  Note
   * that the caller owns the returned object and is responsible for deleting
   * it.
   */ public
 SpeciesTypeComponentMapInProduct createSpeciesTypeComponentMapInProduct() {
    long cPtr = libsbmlJNI.MultiSpeciesReferencePlugin_createSpeciesTypeComponentMapInProduct(swigCPtr, this);
    return (cPtr == 0) ? null : new SpeciesTypeComponentMapInProduct(cPtr, false);
  }

  
/**
   * Removes the nth {@link SpeciesTypeComponentMapInProduct} object and returns a
   * pointer to it.
   <p>
   * @param n the index of the {@link SpeciesTypeComponentMapInProduct} to remove.
   <p>
   * @return the {@link SpeciesTypeComponentMapInProduct} object removed or <code>null</code>
   * index was out of range.  Note that the caller owns the returned object
   * and is responsible for deleting it.
   */ public
 SpeciesTypeComponentMapInProduct removeSpeciesTypeComponentMapInProduct(long n) {
    long cPtr = libsbmlJNI.MultiSpeciesReferencePlugin_removeSpeciesTypeComponentMapInProduct__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new SpeciesTypeComponentMapInProduct(cPtr, true);
  }

  
/**
   * Removes the {@link SpeciesTypeComponentMapInProduct} object with the given id
   * and returns a pointer to it.
   <p>
   * @param sid a string representing the id of the
   * {@link SpeciesTypeComponentMapInProduct} to remove.
   <p>
   * @return the {@link SpeciesTypeComponentMapInProduct} object removed or <code>null</code> if
   * no such {@link SpeciesTypeComponentMapInProduct} exists.  Note that the caller
   * owns the returned object and is responsible for deleting it.
   */ public
 SpeciesTypeComponentMapInProduct removeSpeciesTypeComponentMapInProduct(String sid) {
    long cPtr = libsbmlJNI.MultiSpeciesReferencePlugin_removeSpeciesTypeComponentMapInProduct__SWIG_1(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new SpeciesTypeComponentMapInProduct(cPtr, true);
  }

  
/**
   * Returns the number of {@link SpeciesTypeComponentMapInProduct} objects.
   <p>
   * @return the number of {@link SpeciesTypeComponentMapInProduct} objects.
   */ public
 long getNumSpeciesTypeComponentMapInProducts() {
    return libsbmlJNI.MultiSpeciesReferencePlugin_getNumSpeciesTypeComponentMapInProducts(swigCPtr, this);
  }

  
/** * @internal */ public
 void connectToParent(SBase sbase) {
    libsbmlJNI.MultiSpeciesReferencePlugin_connectToParent(swigCPtr, this, SBase.getCPtr(sbase), sbase);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.MultiSpeciesReferencePlugin_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

}
