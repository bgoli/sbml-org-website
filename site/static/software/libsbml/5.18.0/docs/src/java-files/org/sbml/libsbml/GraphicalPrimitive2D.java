/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 Base class for graphical primitives implementing 2D attributes.
 <p>
 * The {@link GraphicalPrimitive2D} class implements attributes and methods necessary
 * for 2D objects like rectangles, polygons or ellipses. The attributes that
 * are implemented are a fill color and a fill rule that specifies how the
 * fill color is applied.
 <p>
 * The {@link GraphicalPrimitive2D} class is derived from {@link GraphicalPrimitive1D} and
 * inherits all its methods and attributes.
 */

public class GraphicalPrimitive2D extends GraphicalPrimitive1D {
   private long swigCPtr;

   protected GraphicalPrimitive2D(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.GraphicalPrimitive2D_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(GraphicalPrimitive2D obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (GraphicalPrimitive2D obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_GraphicalPrimitive2D(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates and returns a deep copy of this {@link GraphicalPrimitive2D} object.
   <p>
   * @return a (deep) copy of this {@link GraphicalPrimitive2D} object.
   */ public
 SBase cloneObject() {
  return (GraphicalPrimitive2D) libsbml.DowncastSBase(libsbmlJNI.GraphicalPrimitive2D_cloneObject(swigCPtr, this), true);
}

  
/**
   * Returns the value of the 'fill' attribute of this {@link GraphicalPrimitive2D}.
   <p>
   * @return the value of the 'fill' attribute of this {@link GraphicalPrimitive2D} as
   * a string.
   */ public
 String getFill() {
    return libsbmlJNI.GraphicalPrimitive2D_getFill(swigCPtr, this);
  }

  
/**
  * Returns the value of the 'fill' attribute of this {@link GraphicalPrimitive2D}.
  <p>
   * @return the value of the 'fill' attribute of this {@link GraphicalPrimitive2D} as
   * a string.
   */ public
 String getFillColor() {
    return libsbmlJNI.GraphicalPrimitive2D_getFillColor(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'fill-rule' attribute of this
   * {@link GraphicalPrimitive2D}.
   <p>
   * <p>
 * The attribute 'fill-rule' is used to define how polygons should be filled.
 * In the SBML Level&nbsp;3 Version&nbsp;1 Render specification, the 
 * following are the allowable values for 'fill-rule':
 * <ul>
 * <li> <code>'nonzero':</code> This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and then examining the places where a segment of the shape crosses the ray. 
 * Starting with a count of zero, add one each time a path segment crosses 
 * the ray from left to right and subtract one each time a path segment crosses 
 * the ray from right to left. After counting the crossings, if the result is 
 * zero then the point is outside the path. Otherwise, it is inside.
 <p>
 * <li> <code>'evenodd':</code>  This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and counting the number of path segments from the given shape that the ray
 * crosses. If this number is odd, the point is inside; if even, the point is 
 * outside.
 <p>
 * <li> <code>'inherit':</code> This value declares the 'insideness' of a point 
 * in the shape by declaring that the property takes the same computed value 
 * as the property for the element's parent. The inherited value, which is 
 * normally only used as a fallback value, can be clarified by setting 
 * 'inherit' explicitly.  NOTE:  This value is NOT in the Level&nbsp;3 
 * Version&nbsp;1 Render specification, but was left out due to an oversight:
 * the value has long been part of the codebase.  It is provided here as
 * a convenience.  Elements with a fill-rule set to 'inherit' actually
 * behave identicaly to elements without a fill-rule attribute at all, since
 * this attribute always takes the value of a parent element if not 
 * defined explicitly.
 <p>
 * </ul>
   <p>
   * @return the value of the 'fill-rule' attribute of this
   * {@link GraphicalPrimitive2D} as an int value.
   * The possible values returned by this method are:
   * <ul>
   * <li> {@link libsbmlConstants#FILL_RULE_UNSET FILL_RULE_UNSET}
   * <li> {@link libsbmlConstants#FILL_RULE_NONZERO FILL_RULE_NONZERO}
   * <li> {@link libsbmlConstants#FILL_RULE_EVENODD FILL_RULE_EVENODD}
   * <li> {@link libsbmlConstants#FILL_RULE_INHERIT FILL_RULE_INHERIT}
   * <li> {@link libsbmlConstants#FILL_RULE_INVALID FILL_RULE_INVALID}
   * </ul>
   */ public
 int getFillRule() {
    return libsbmlJNI.GraphicalPrimitive2D_getFillRule(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'fill-rule' attribute of this
   * {@link GraphicalPrimitive2D}.
   <p>
   * <p>
 * The attribute 'fill-rule' is used to define how polygons should be filled.
 * In the SBML Level&nbsp;3 Version&nbsp;1 Render specification, the 
 * following are the allowable values for 'fill-rule':
 * <ul>
 * <li> <code>'nonzero':</code> This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and then examining the places where a segment of the shape crosses the ray. 
 * Starting with a count of zero, add one each time a path segment crosses 
 * the ray from left to right and subtract one each time a path segment crosses 
 * the ray from right to left. After counting the crossings, if the result is 
 * zero then the point is outside the path. Otherwise, it is inside.
 <p>
 * <li> <code>'evenodd':</code>  This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and counting the number of path segments from the given shape that the ray
 * crosses. If this number is odd, the point is inside; if even, the point is 
 * outside.
 <p>
 * <li> <code>'inherit':</code> This value declares the 'insideness' of a point 
 * in the shape by declaring that the property takes the same computed value 
 * as the property for the element's parent. The inherited value, which is 
 * normally only used as a fallback value, can be clarified by setting 
 * 'inherit' explicitly.  NOTE:  This value is NOT in the Level&nbsp;3 
 * Version&nbsp;1 Render specification, but was left out due to an oversight:
 * the value has long been part of the codebase.  It is provided here as
 * a convenience.  Elements with a fill-rule set to 'inherit' actually
 * behave identicaly to elements without a fill-rule attribute at all, since
 * this attribute always takes the value of a parent element if not 
 * defined explicitly.
 <p>
 * </ul>
   <p>
   * @return the value of the 'fill-rule' attribute of this
   * {@link GraphicalPrimitive2D} as a string. The possible values returned by this
   * method are:
   * <ul>
   * <li> <code>'unset'</code>
   * <li> <code>'nonzero'</code>
   * <li> <code>'evenodd'</code>
   * <li> <code>'inherit'</code>
   * <li> <code>'</code>(Unknown FillRule value)'
   * </ul>
   */ public
 String getFillRuleAsString() {
    return libsbmlJNI.GraphicalPrimitive2D_getFillRuleAsString(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link GraphicalPrimitive2D}'s 'fill'
   * attribute is set.
   <p>
   * @return <code>true</code> if this {@link GraphicalPrimitive2D}'s 'fill' attribute has been
   * set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetFill() {
    return libsbmlJNI.GraphicalPrimitive2D_isSetFill(swigCPtr, this);
  }

  
/**
   * Returns <code>true</code> if the fill attribute is set or <code>false</code> otherwise.
   * The fill attribute is considered set if the string is not empty.
   <p>
   * @return <code>true</code> if the fill color is set.
   */ public
 boolean isSetFillColor() {
    return libsbmlJNI.GraphicalPrimitive2D_isSetFillColor(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link GraphicalPrimitive2D}'s 'fill-rule'
   * attribute is set.
   <p>
   * <p>
 * The attribute 'fill-rule' is used to define how polygons should be filled.
 * In the SBML Level&nbsp;3 Version&nbsp;1 Render specification, the 
 * following are the allowable values for 'fill-rule':
 * <ul>
 * <li> <code>'nonzero':</code> This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and then examining the places where a segment of the shape crosses the ray. 
 * Starting with a count of zero, add one each time a path segment crosses 
 * the ray from left to right and subtract one each time a path segment crosses 
 * the ray from right to left. After counting the crossings, if the result is 
 * zero then the point is outside the path. Otherwise, it is inside.
 <p>
 * <li> <code>'evenodd':</code>  This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and counting the number of path segments from the given shape that the ray
 * crosses. If this number is odd, the point is inside; if even, the point is 
 * outside.
 <p>
 * <li> <code>'inherit':</code> This value declares the 'insideness' of a point 
 * in the shape by declaring that the property takes the same computed value 
 * as the property for the element's parent. The inherited value, which is 
 * normally only used as a fallback value, can be clarified by setting 
 * 'inherit' explicitly.  NOTE:  This value is NOT in the Level&nbsp;3 
 * Version&nbsp;1 Render specification, but was left out due to an oversight:
 * the value has long been part of the codebase.  It is provided here as
 * a convenience.  Elements with a fill-rule set to 'inherit' actually
 * behave identicaly to elements without a fill-rule attribute at all, since
 * this attribute always takes the value of a parent element if not 
 * defined explicitly.
 <p>
 * </ul>
   <p>
   * @return <code>true</code> if this {@link GraphicalPrimitive2D}'s 'fill-rule' attribute has
   * been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetFillRule() {
    return libsbmlJNI.GraphicalPrimitive2D_isSetFillRule(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'fill' attribute of this {@link GraphicalPrimitive2D}.
   <p>
   * @param fill String& value of the 'fill' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * Calling this function with <code>fill</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetFill().
   */ public
 int setFill(String fill) {
    return libsbmlJNI.GraphicalPrimitive2D_setFill(swigCPtr, this, fill);
  }

  
/**
   * Set fill color to the id of a color definition, the id of a gradient
   * definition or a color value string.
   <p>
   * @param color the id of a color deifnition or a gradient or a color value string.
   */ public
 void setFillColor(String color) {
    libsbmlJNI.GraphicalPrimitive2D_setFillColor(swigCPtr, this, color);
  }

  
/**
  * Sets the value of the 'fill-rule' attribute of this {@link GraphicalPrimitive2D}.
  <p>
  * <p>
 * The attribute 'fill-rule' is used to define how polygons should be filled.
 * In the SBML Level&nbsp;3 Version&nbsp;1 Render specification, the 
 * following are the allowable values for 'fill-rule':
 * <ul>
 * <li> <code>'nonzero':</code> This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and then examining the places where a segment of the shape crosses the ray. 
 * Starting with a count of zero, add one each time a path segment crosses 
 * the ray from left to right and subtract one each time a path segment crosses 
 * the ray from right to left. After counting the crossings, if the result is 
 * zero then the point is outside the path. Otherwise, it is inside.
 <p>
 * <li> <code>'evenodd':</code>  This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and counting the number of path segments from the given shape that the ray
 * crosses. If this number is odd, the point is inside; if even, the point is 
 * outside.
 <p>
 * <li> <code>'inherit':</code> This value declares the 'insideness' of a point 
 * in the shape by declaring that the property takes the same computed value 
 * as the property for the element's parent. The inherited value, which is 
 * normally only used as a fallback value, can be clarified by setting 
 * 'inherit' explicitly.  NOTE:  This value is NOT in the Level&nbsp;3 
 * Version&nbsp;1 Render specification, but was left out due to an oversight:
 * the value has long been part of the codebase.  It is provided here as
 * a convenience.  Elements with a fill-rule set to 'inherit' actually
 * behave identicaly to elements without a fill-rule attribute at all, since
 * this attribute always takes the value of a parent element if not 
 * defined explicitly.
 <p>
 * </ul>
  <p>
  * @param rule int value of the
  * 'fill-rule' attribute to be set.
  <p>
  * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
  * <ul>
  * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
  * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
  * </ul>
  */ public
 void setFillRule(int rule) {
    libsbmlJNI.GraphicalPrimitive2D_setFillRule__SWIG_0(swigCPtr, this, rule);
  }

  
/**
   * Sets the value of the 'fill-rule' attribute of this {@link GraphicalPrimitive2D}.
   <p>
   * <p>
 * The attribute 'fill-rule' is used to define how polygons should be filled.
 * In the SBML Level&nbsp;3 Version&nbsp;1 Render specification, the 
 * following are the allowable values for 'fill-rule':
 * <ul>
 * <li> <code>'nonzero':</code> This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and then examining the places where a segment of the shape crosses the ray. 
 * Starting with a count of zero, add one each time a path segment crosses 
 * the ray from left to right and subtract one each time a path segment crosses 
 * the ray from right to left. After counting the crossings, if the result is 
 * zero then the point is outside the path. Otherwise, it is inside.
 <p>
 * <li> <code>'evenodd':</code>  This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and counting the number of path segments from the given shape that the ray
 * crosses. If this number is odd, the point is inside; if even, the point is 
 * outside.
 <p>
 * <li> <code>'inherit':</code> This value declares the 'insideness' of a point 
 * in the shape by declaring that the property takes the same computed value 
 * as the property for the element's parent. The inherited value, which is 
 * normally only used as a fallback value, can be clarified by setting 
 * 'inherit' explicitly.  NOTE:  This value is NOT in the Level&nbsp;3 
 * Version&nbsp;1 Render specification, but was left out due to an oversight:
 * the value has long been part of the codebase.  It is provided here as
 * a convenience.  Elements with a fill-rule set to 'inherit' actually
 * behave identicaly to elements without a fill-rule attribute at all, since
 * this attribute always takes the value of a parent element if not 
 * defined explicitly.
 <p>
 * </ul>
   <p>
   * @param fillRule String& of the 'fill-rule' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setFillRule(String fillRule) {
    return libsbmlJNI.GraphicalPrimitive2D_setFillRule__SWIG_2(swigCPtr, this, fillRule);
  }

  
/**
   * Unsets the value of the 'fill' attribute of this {@link GraphicalPrimitive2D}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetFill() {
    return libsbmlJNI.GraphicalPrimitive2D_unsetFill(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'fill-rule' attribute of this
   * {@link GraphicalPrimitive2D}.
   <p>
   * <p>
 * The attribute 'fill-rule' is used to define how polygons should be filled.
 * In the SBML Level&nbsp;3 Version&nbsp;1 Render specification, the 
 * following are the allowable values for 'fill-rule':
 * <ul>
 * <li> <code>'nonzero':</code> This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and then examining the places where a segment of the shape crosses the ray. 
 * Starting with a count of zero, add one each time a path segment crosses 
 * the ray from left to right and subtract one each time a path segment crosses 
 * the ray from right to left. After counting the crossings, if the result is 
 * zero then the point is outside the path. Otherwise, it is inside.
 <p>
 * <li> <code>'evenodd':</code>  This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and counting the number of path segments from the given shape that the ray
 * crosses. If this number is odd, the point is inside; if even, the point is 
 * outside.
 <p>
 * <li> <code>'inherit':</code> This value declares the 'insideness' of a point 
 * in the shape by declaring that the property takes the same computed value 
 * as the property for the element's parent. The inherited value, which is 
 * normally only used as a fallback value, can be clarified by setting 
 * 'inherit' explicitly.  NOTE:  This value is NOT in the Level&nbsp;3 
 * Version&nbsp;1 Render specification, but was left out due to an oversight:
 * the value has long been part of the codebase.  It is provided here as
 * a convenience.  Elements with a fill-rule set to 'inherit' actually
 * behave identicaly to elements without a fill-rule attribute at all, since
 * this attribute always takes the value of a parent element if not 
 * defined explicitly.
 <p>
 * </ul>
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetFillRule() {
    return libsbmlJNI.GraphicalPrimitive2D_unsetFillRule(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link GraphicalPrimitive2D} is of
   * type {@link Ellipse}
   <p>
   * @return <code>true</code> if this abstract {@link GraphicalPrimitive2D} is of type
   * {@link Ellipse}, <code>false</code> otherwise
   */ public
 boolean isEllipse() {
    return libsbmlJNI.GraphicalPrimitive2D_isEllipse(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link GraphicalPrimitive2D} is of
   * type {@link Rectangle}
   <p>
   * @return <code>true</code> if this abstract {@link GraphicalPrimitive2D} is of type
   * {@link Rectangle}, <code>false</code> otherwise
   */ public
 boolean isRectangle() {
    return libsbmlJNI.GraphicalPrimitive2D_isRectangle(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link GraphicalPrimitive2D} is of
   * type {@link Polygon}
   <p>
   * @return <code>true</code> if this abstract {@link GraphicalPrimitive2D} is of type
   * {@link Polygon}, <code>false</code> otherwise
   */ public
 boolean isPolygon() {
    return libsbmlJNI.GraphicalPrimitive2D_isPolygon(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link GraphicalPrimitive2D} is of
   * type {@link RenderGroup}
   <p>
   * @return <code>true</code> if this abstract {@link GraphicalPrimitive2D} is of type
   * {@link RenderGroup}, <code>false</code> otherwise
   */ public
 boolean isRenderGroup() {
    return libsbmlJNI.GraphicalPrimitive2D_isRenderGroup(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link GraphicalPrimitive2D} is of
   * type {@link LineEnding}
   <p>
   * @return <code>true</code> if this abstract {@link GraphicalPrimitive2D} is of type
   * {@link LineEnding}, <code>false</code> otherwise
   */ public
 boolean isLineEnding() {
    return libsbmlJNI.GraphicalPrimitive2D_isLineEnding(swigCPtr, this);
  }

  
/**
   * Returns the XML element name of this {@link GraphicalPrimitive2D} object.
   <p>
   * For {@link GraphicalPrimitive2D}, the XML element name is always
   * <code>'graphicalPrimitive2D'.</code>
   <p>
   * @return the name of this element, i.e. <code>'graphicalPrimitive2D'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.GraphicalPrimitive2D_getElementName(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code for this {@link GraphicalPrimitive2D} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_RENDER_GRAPHICALPRIMITIVE2D SBML_RENDER_GRAPHICALPRIMITIVE2D}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.GraphicalPrimitive2D_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link GraphicalPrimitive2D} object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required attributes of this
   * {@link GraphicalPrimitive2D} have been set, otherwise <code>false</code> is returned.
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.GraphicalPrimitive2D_hasRequiredAttributes(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.GraphicalPrimitive2D_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

  // FILL_RULE 
  public final static int UNSET = 0;
  public final static int NONZERO = UNSET + 1;
  public final static int EVENODD = NONZERO + 1;
  public final static int INHERIT = EVENODD + 1;
  public final static int INVALID = INHERIT + 1;

}
