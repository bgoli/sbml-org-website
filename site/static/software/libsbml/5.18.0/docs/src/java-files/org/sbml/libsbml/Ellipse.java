/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 Graphical representation of an ellipse.
 <p>
 * The {@link Ellipse} class is derived from {@link GraphicalPrimitive2D}, so it inherits all
 * the attributes and methods of the latter.  This means ellipses can have a
 * transformation, a stroke and a stroke with to draw the edge as well as a
 * fill style and fill style related settings.  Besides those inherited
 * attributes, an ellipse if defined by its center point which can be
 * specified as a combination of absolute and relative values and its radii
 * for the two axes. The radii can also be specified in terms absolute and/or
 * relative values.
 */

public class Ellipse extends GraphicalPrimitive2D {
   private long swigCPtr;

   protected Ellipse(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.Ellipse_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(Ellipse obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (Ellipse obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_Ellipse(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link Ellipse} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Ellipse}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Ellipse}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Ellipse}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Ellipse(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Ellipse__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link Ellipse} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Ellipse}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Ellipse}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Ellipse}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Ellipse(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Ellipse__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link Ellipse} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Ellipse}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Ellipse}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Ellipse}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Ellipse(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Ellipse__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link Ellipse} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Ellipse}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Ellipse}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Ellipse}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Ellipse() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Ellipse__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link Ellipse} using the given {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param renderns the {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Ellipse(RenderPkgNamespaces renderns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Ellipse__SWIG_4(RenderPkgNamespaces.getCPtr(renderns), renderns), true);
  }

  
/**
   * Creates a new {@link RadialGradient} object from the given {@link XMLNode} object.
   <p>
   * The {@link XMLNode} object must contain a valid XML representation of a
   * {@link RadialGradient} object as defined in the render extension specification.
   * This method is normally called when render information is read from a
   * file and should normally not have to be called explicitly.
   <p>
   * @param node the {@link XMLNode} object reference that describes the {@link RadialGradient}
   * object to be instantiated.
<p>
   * @param l2version an integer indicating the version of SBML Level&nbsp;2
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 Ellipse(XMLNode node, long l2version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Ellipse__SWIG_5(XMLNode.getCPtr(node), node, l2version), true);
  }

  
/**
   * Creates a new {@link RadialGradient} object from the given {@link XMLNode} object.
   <p>
   * The {@link XMLNode} object must contain a valid XML representation of a
   * {@link RadialGradient} object as defined in the render extension specification.
   * This method is normally called when render information is read from a
   * file and should normally not have to be called explicitly.
   <p>
   * @param node the {@link XMLNode} object reference that describes the {@link RadialGradient}
   * object to be instantiated.
<p>
   * @param l2version an integer indicating the version of SBML Level&nbsp;2
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 Ellipse(XMLNode node) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Ellipse__SWIG_6(XMLNode.getCPtr(node), node), true);
  }

  
/**
   * Instantiates a new ellipse object with the center set to 0,0,0
   * and the radii also set to 0.
   * The id is set to the given string.
   <p>
   * @param renderns {@link SBMLNamespaces} object for the SBML Render package
   * @param id the id of the ellipse.
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 Ellipse(RenderPkgNamespaces renderns, String id) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Ellipse__SWIG_7(RenderPkgNamespaces.getCPtr(renderns), renderns, id), true);
  }

  
/**
   * Constructor with 2D center and radius.
   * instantiates a new ellipse object with the center.
   * The z coordinate of the center is set to 0.
   * The id is unset and both radii are set to the given radius.
   <p>
   * @param renderns {@link SBMLNamespaces} object for the SBML Render package
   * @param cx x value of the center point 
   * @param cy y value of the center point 
   * @param r radius along both axis
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 Ellipse(RenderPkgNamespaces renderns, RelAbsVector cx, RelAbsVector cy, RelAbsVector r) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Ellipse__SWIG_8(RenderPkgNamespaces.getCPtr(renderns), renderns, RelAbsVector.getCPtr(cx), cx, RelAbsVector.getCPtr(cy), cy, RelAbsVector.getCPtr(r), r), true);
  }

  
/**
   * Constructor with 2D center and radii.
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 Ellipse(RenderPkgNamespaces renderns, RelAbsVector cx, RelAbsVector cy, RelAbsVector rx, RelAbsVector ry) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Ellipse__SWIG_9(RenderPkgNamespaces.getCPtr(renderns), renderns, RelAbsVector.getCPtr(cx), cx, RelAbsVector.getCPtr(cy), cy, RelAbsVector.getCPtr(rx), rx, RelAbsVector.getCPtr(ry), ry), true);
  }

  
/**
   * Constructor with 3D center and radii.
   * instantiates a new ellipse object with the center and radii.
   * The id is unset.
   <p>
   * @param renderns {@link SBMLNamespaces} object for the SBML Render package
   * @param cx x value of the center point 
   * @param cy y value of the center point 
   * @param cz z value of the center point 
   * @param rx radius along the x axis
   * @param ry radius along the y axis
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 Ellipse(RenderPkgNamespaces renderns, RelAbsVector cx, RelAbsVector cy, RelAbsVector cz, RelAbsVector rx, RelAbsVector ry) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Ellipse__SWIG_10(RenderPkgNamespaces.getCPtr(renderns), renderns, RelAbsVector.getCPtr(cx), cx, RelAbsVector.getCPtr(cy), cy, RelAbsVector.getCPtr(cz), cz, RelAbsVector.getCPtr(rx), rx, RelAbsVector.getCPtr(ry), ry), true);
  }

  
/**
   * Constructor with id, 2D center and radius.
   * instantiates a new ellipse object with the given <code>id</code> and center.
   * Both radii are set to the given radius r. This actually yields a circle.
   <p>
   * @param renderns {@link SBMLNamespaces} object for the SBML Render package
   * @param id id for the ellipse
   * @param cx x value of the center point 
   * @param cy y value of the center point 
   * @param r radius along both axis
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 Ellipse(RenderPkgNamespaces renderns, String id, RelAbsVector cx, RelAbsVector cy, RelAbsVector r) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Ellipse__SWIG_11(RenderPkgNamespaces.getCPtr(renderns), renderns, id, RelAbsVector.getCPtr(cx), cx, RelAbsVector.getCPtr(cy), cy, RelAbsVector.getCPtr(r), r), true);
  }

  
/**
   * Constructor with id, 2D center and radii.
   * instantiates a new ellipse object with the given <code>id</code>, center and radii.
   <p>
   * @param renderns {@link SBMLNamespaces} object for the SBML Render package
   * @param id id for the ellipse
   * @param cx x value of the center point 
   * @param cy y value of the center point 
   * @param rx radius along the x axis
   * @param ry radius along the y axis
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 Ellipse(RenderPkgNamespaces renderns, String id, RelAbsVector cx, RelAbsVector cy, RelAbsVector rx, RelAbsVector ry) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Ellipse__SWIG_12(RenderPkgNamespaces.getCPtr(renderns), renderns, id, RelAbsVector.getCPtr(cx), cx, RelAbsVector.getCPtr(cy), cy, RelAbsVector.getCPtr(rx), rx, RelAbsVector.getCPtr(ry), ry), true);
  }

  
/**
   * Constructor with id, 3D center and radii.
   * instantiates a new ellipse object with the given <code>id</code>, center and radii.
   <p>
   * @param renderns {@link SBMLNamespaces} object for the SBML Render package
   * @param id id for the ellipse
   * @param cx x value of the center point 
   * @param cy y value of the center point 
   * @param cz z value of the center point 
   * @param rx radius along the x axis
   * @param ry radius along the y axis
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 Ellipse(RenderPkgNamespaces renderns, String id, RelAbsVector cx, RelAbsVector cy, RelAbsVector cz, RelAbsVector rx, RelAbsVector ry) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Ellipse__SWIG_13(RenderPkgNamespaces.getCPtr(renderns), renderns, id, RelAbsVector.getCPtr(cx), cx, RelAbsVector.getCPtr(cy), cy, RelAbsVector.getCPtr(cz), cz, RelAbsVector.getCPtr(rx), rx, RelAbsVector.getCPtr(ry), ry), true);
  }

  
/**
   * Copy constructor for {@link Ellipse}.
   <p>
   * @param orig the {@link Ellipse} instance to copy.
   */ public
 Ellipse(Ellipse orig) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Ellipse__SWIG_14(Ellipse.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link Ellipse} object.
   <p>
   * @return a (deep) copy of this {@link Ellipse} object.
   */ public
 Ellipse cloneObject() {
    long cPtr = libsbmlJNI.Ellipse_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new Ellipse(cPtr, true);
  }

  
/**
   * Returns the value of the 'ratio' attribute of this {@link Ellipse}.
   <p>
   * @return the value of the 'ratio' attribute of this {@link Ellipse} as a double.
   */ public
 double getRatio() {
    return libsbmlJNI.Ellipse_getRatio(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Ellipse}'s 'ratio' attribute is set.
   <p>
   * @return <code>true</code> if this {@link Ellipse}'s 'ratio' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetRatio() {
    return libsbmlJNI.Ellipse_isSetRatio(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'ratio' attribute of this {@link Ellipse}.
   <p>
   * @param ratio double value of the 'ratio' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setRatio(double ratio) {
    return libsbmlJNI.Ellipse_setRatio(swigCPtr, this, ratio);
  }

  
/**
   * Unsets the value of the 'ratio' attribute of this {@link Ellipse}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetRatio() {
    return libsbmlJNI.Ellipse_unsetRatio(swigCPtr, this);
  }

  
/**
   * Returns the x coordinate for the center point as a  reference.
   <p>
   * @return  reference to the x coordinate of the center point.
   */ public
 RelAbsVector getCX() {
    return new RelAbsVector(libsbmlJNI.Ellipse_getCX__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns the y coordinate for the center point as a  reference.
   <p>
   * @return  reference to the y coordinate of the center point.
   */ public
 RelAbsVector getCY() {
    return new RelAbsVector(libsbmlJNI.Ellipse_getCY__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns the z coordinate for the center point as a  reference.
   <p>
   * @return  reference to the z coordinate of the center point.
   */ public
 RelAbsVector getCZ() {
    return new RelAbsVector(libsbmlJNI.Ellipse_getCZ__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns the radius along the x axis as a  reference.
   <p>
   * @return  reference to the radius along the x axis
   */ public
 RelAbsVector getRX() {
    return new RelAbsVector(libsbmlJNI.Ellipse_getRX__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns the radius along the y axis as a  reference.
   <p>
   * @return  reference to the radius along the y axis
   */ public
 RelAbsVector getRY() {
    return new RelAbsVector(libsbmlJNI.Ellipse_getRY__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Ellipse}'s 'cx' element is set.
   <p>
   * @return <code>true</code> if this {@link Ellipse}'s 'cx' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetCX() {
    return libsbmlJNI.Ellipse_isSetCX(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Ellipse}'s 'cy' element is set.
   <p>
   * @return <code>true</code> if this {@link Ellipse}'s 'cy' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetCY() {
    return libsbmlJNI.Ellipse_isSetCY(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Ellipse}'s 'cz' element is set.
   <p>
   * @return <code>true</code> if this {@link Ellipse}'s 'cz' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetCZ() {
    return libsbmlJNI.Ellipse_isSetCZ(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Ellipse}'s 'rx' element is set.
   <p>
   * @return <code>true</code> if this {@link Ellipse}'s 'rx' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetRX() {
    return libsbmlJNI.Ellipse_isSetRX(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Ellipse}'s 'ry' element is set.
   <p>
   * @return <code>true</code> if this {@link Ellipse}'s 'ry' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetRY() {
    return libsbmlJNI.Ellipse_isSetRY(swigCPtr, this);
  }

  
/**
   * Sets the x coordinates for the center point.
   <p>
   * @param cx x value of the center point 
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setCX(RelAbsVector cx) {
    return libsbmlJNI.Ellipse_setCX(swigCPtr, this, RelAbsVector.getCPtr(cx), cx);
  }

  
/**
   * Sets the y coordinates for the center point.
   <p>
   * @param cy y value of the center point 
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setCY(RelAbsVector cy) {
    return libsbmlJNI.Ellipse_setCY(swigCPtr, this, RelAbsVector.getCPtr(cy), cy);
  }

  
/**
   * Sets the z coordinates for the center point.
   <p>
   * @param cz z value of the center point 
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setCZ(RelAbsVector cz) {
    return libsbmlJNI.Ellipse_setCZ(swigCPtr, this, RelAbsVector.getCPtr(cz), cz);
  }

  
/**
   * Sets the radius along the x axis
   <p>
   * @param rx radius along the x axis
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setRX(RelAbsVector rx) {
    return libsbmlJNI.Ellipse_setRX(swigCPtr, this, RelAbsVector.getCPtr(rx), rx);
  }

  
/**
   * Sets the radius along the y axis
   <p>
   * @param ry radius along the y axis
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setRY(RelAbsVector ry) {
    return libsbmlJNI.Ellipse_setRY(swigCPtr, this, RelAbsVector.getCPtr(ry), ry);
  }

  
/**
   * Sets the 2D coordinates for the center point.
   * The z coodintate is set to 50%
   <p>
   * @param cx x value of the center point 
   * @param cy y value of the center point 
   */ public
 void setCenter2D(RelAbsVector cx, RelAbsVector cy) {
    libsbmlJNI.Ellipse_setCenter2D(swigCPtr, this, RelAbsVector.getCPtr(cx), cx, RelAbsVector.getCPtr(cy), cy);
  }

  
/**
   * Sets the 3D coordinates for the center point.
   <p>
   * @param cx x value of the center point 
   * @param cy y value of the center point 
   * @param cz z value of the center point 
   */ public
 void setCenter3D(RelAbsVector cx, RelAbsVector cy, RelAbsVector cz) {
    libsbmlJNI.Ellipse_setCenter3D(swigCPtr, this, RelAbsVector.getCPtr(cx), cx, RelAbsVector.getCPtr(cy), cy, RelAbsVector.getCPtr(cz), cz);
  }

  
/**
   * Sets the radii of the ellipse
   <p>
   * @param rx radius along the x axis
   * @param ry radius along the y axis
   */ public
 void setRadii(RelAbsVector rx, RelAbsVector ry) {
    libsbmlJNI.Ellipse_setRadii(swigCPtr, this, RelAbsVector.getCPtr(rx), rx, RelAbsVector.getCPtr(ry), ry);
  }

  
/**
   * Unsets the value of the 'cx' element of this {@link Ellipse}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetCX() {
    return libsbmlJNI.Ellipse_unsetCX(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'cy' element of this {@link Ellipse}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetCY() {
    return libsbmlJNI.Ellipse_unsetCY(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'cz' element of this {@link Ellipse}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetCZ() {
    return libsbmlJNI.Ellipse_unsetCZ(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'rx' element of this {@link Ellipse}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetRX() {
    return libsbmlJNI.Ellipse_unsetRX(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'ry' element of this {@link Ellipse}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetRY() {
    return libsbmlJNI.Ellipse_unsetRY(swigCPtr, this);
  }

  
/**
   * Returns the XML element name of this {@link Ellipse} object.
   <p>
   * For {@link Ellipse}, the XML element name is always <code>'ellipse'.</code>
   <p>
   * @return the name of this element, i.e. <code>'ellipse'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.Ellipse_getElementName(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code for this {@link Ellipse} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_RENDER_ELLIPSE SBML_RENDER_ELLIPSE}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.Ellipse_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link Ellipse} object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required attributes of this
   * {@link Ellipse} have been set, otherwise <code>false</code> is returned.
   <p>
   * @note The required attributes for the {@link Ellipse} object are:
   * <ul>
   * <li> 'cx'
   * <li> 'cy'
   * <li> 'rx'
   * </ul>
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.Ellipse_hasRequiredAttributes(swigCPtr, this);
  }

  
/**
   * Creates an {@link XMLNode} object from this {@link Ellipse} object.
   <p>
   * @return the {@link XMLNode} with the XML representation for the 
   * {@link Ellipse} object.
   */ public
 XMLNode toXML() {
    return new XMLNode(libsbmlJNI.Ellipse_toXML(swigCPtr, this), true);
  }

}
