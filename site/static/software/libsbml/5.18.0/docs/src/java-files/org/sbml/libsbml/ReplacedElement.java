/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-comp"><a href="group__comp.html">comp</a></span>
 Indicates an object replaces another.
 <p>
 * The {@link ReplacedElement} class was introduced by the SBML Level&nbsp;3 <a href='../../../extensions-summary.html#comp'>Hierarchical Model Composition</a> (&ldquo;comp&rdquo;) package to allow submodel elements to be
 * replaced, but still allow references to those elements to be valid.  A
 * {@link ReplacedElement} object is essentially a pointer to a submodel object that
 * should be considered 'replaced'.  The object holding the {@link ReplacedElement}
 * instance is the one doing the replacing; the object pointed to by the
 * {@link ReplacedElement} object is the object being replaced.
 <p>
 * A replacement implies that dependencies involving the replaced object
 * must be updated: all references to the replaced object elsewhere in the
 * model are taken to refer to the replacement object instead.  For
 * example, if one species replaces another, then any reference to the
 * original species in mathematical formulas, or lists of reactants or
 * products or modifiers in reactions, or initial assignments, or any other
 * SBML construct, are taken to refer to the replacement species, with its
 * value possibly modified by either this object's 'conversionFactor'
 * attribute or the relevant submodel's conversion factors. Moreover, any 
 * annotations that refer to the
 * replaced species' 'metaid' value must be made to refer to the
 * replacement species' 'metaid' value instead; and anything else
 * that referred either to an object identifier (i.e., attributes such as
 * the 'id' attribute whose types inherit from the SId
 * primitive data type) or the meta identifier (i.e., the 'metaid'
 * attribute or any other attribute that inherits from the ID primitive
 * data type) must be made to refer to the replacement species object
 * instead.
 <p>
 * It is worth noting that local parameters (inside {@link Reaction} objects) pose an
 * interesting edge case for these rules. In order to determine which element
 * is pointed to by a <code>&lt;cn&gt;</code> element within the
 * <code>&lt;math&gt;</code> element of a {@link KineticLaw} object, it is necessary
 * to examine the local parameters of that kinetic law's parent {@link Reaction}
 * object.  Whether the <code>&lt;cn&gt;</code> element is considered to
 * point to something new, then, depends on whether it pointed to the local
 * parameter and whether that local parameter was replaced, even if the text
 * of the element matched the SId value of another element in the model.
 * Note that local parameters may only effectively be replaced by global
 * parameters, since references to its SId are only valid from within the
 * {@link Reaction} element to which it belongs.
 <p>
 * When referencing an element within the {@link Submodel} pointed to by the 
 * 'submodelRef' attribute (defined in libSBML in the {@link Replacing} class), 
 * any of the four attributes inherited from 
 * {@link SBaseRef} for the purpose may be used (portRef, idRef, unitRef, or 
 * metaIdRef), or a new optional attribute 'deletion' may be used.  This
 * attribute must be the identifier of a {@link Deletion}
 * object in the parent {@link Model} of the {@link ReplacedElement} (i.e., the value of
 * some {@link Deletion} object's 'id' attribute).  When 'deletion' is
 * set, it means the {@link ReplacedElement} object is actually an annotation to
 * indicate that the replacement object replaces something deleted
 * from a submodel.  The use of the 'deletion' attribute overrides
 * the use of the attributes inherited from SBaseRef: instead of using,
 * e.g., 'portRef' or 'idRef', the {@link ReplacedElement} instance
 * sets 'deletion' to the identifier of the {@link Deletion} object.  In
 * addition, the referenced {@link Deletion} must be a child of the {@link Submodel}
 * referenced by the 'submodelRef' attribute.
 <p>
 * The use of {@link ReplacedElement} objects to refer to deletions has no effect
 * on the composition of models or the mathematical properties of the
 * result.  It serves instead to help record the decision-making process
 * that lead to a given model.  It can be particularly useful for
 * visualization purposes, as well as to serve as scaffolding where other
 * types of annotations can be added using the normal Annotation
 * subcomponents available on all {@link SBase} objects in SBML.
 <p>
 * As with the {@link Submodel} class, it may be that the units of the replaced
 * element may not match the units of the replacement element.  In this case, 
 * the optional 'conversionFactor' attribute may be used.  This attribute, if
 * present, defines how to transform or rescale the replaced object's value
 * so that it is appropriate for the new contexts in which the object
 * appears.  This attribute takes a value of type SIdRef, and
 * the value must refer to a {@link Parameter} object instance defined in the
 * model.  This parameter then acts as a conversion factor.
 <p>
 * The value of the conversion factor should be defined such that a single
 * unit of the replaced element multiplied by the conversion factor should
 * equal a single unit of the replacement element, and the units of the
 * conversion factor should be commensurate with that transformation.  The
 * referenced {@link Parameter} may be non-constant, particularly if a {@link Species} is
 * replaced by a {@link Species} with a different 'hasOnlySubstanceUnits'
 * attribute value, thus changing amount to concentration, or visa versa.
 */

public class ReplacedElement extends Replacing {
   private long swigCPtr;

   protected ReplacedElement(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.ReplacedElement_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(ReplacedElement obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (ReplacedElement obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_ReplacedElement(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link ReplacedElement} with the given level, version, and package
   * version.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 ReplacedElement(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReplacedElement__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link ReplacedElement} with the given level, version, and package
   * version.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 ReplacedElement(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReplacedElement__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link ReplacedElement} with the given level, version, and package
   * version.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 ReplacedElement(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReplacedElement__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link ReplacedElement} with the given level, version, and package
   * version.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 ReplacedElement() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReplacedElement__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link ReplacedElement} with the given {@link CompPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param compns the {@link CompPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 ReplacedElement(CompPkgNamespaces compns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReplacedElement__SWIG_4(CompPkgNamespaces.getCPtr(compns), compns), true);
  }

  
/**
   * Copy constructor.
   <p>
   * @param source the instance to copy.
   */ public
 ReplacedElement(ReplacedElement source) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReplacedElement__SWIG_5(ReplacedElement.getCPtr(source), source), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link ReplacedElement} object.
   <p>
   * @return a (deep) copy of this {@link ReplacedElement} object.
   */ public
 SBase cloneObject() {
    long cPtr = libsbmlJNI.ReplacedElement_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new ReplacedElement(cPtr, true);
  }

  
/**
   * Returns the value of the 'conversionFactor' attribute of this {@link ReplacedElement}.
   <p>
   * @return the value of the 'conversionFactor' attribute of this {@link ReplacedElement}.
   */ public
 String getConversionFactor() {
    return libsbmlJNI.ReplacedElement_getConversionFactor(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link ReplacedElement}'s 'conversionFactor' attribute has been set.
   <p>
   * @return <code>true</code> if this {@link ReplacedElement}'s 'conversionFactor' attribute has been set, 
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetConversionFactor() {
    return libsbmlJNI.ReplacedElement_isSetConversionFactor(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'conversionFactor' attribute of this {@link ReplacedElement}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setConversionFactor(String id) {
    return libsbmlJNI.ReplacedElement_setConversionFactor(swigCPtr, this, id);
  }

  
/**
   * Unsets the value of the 'conversionFactor' attribute of this {@link ReplacedElement}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetConversionFactor() {
    return libsbmlJNI.ReplacedElement_unsetConversionFactor(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'deletion' attribute of this {@link ReplacedElement}.
   <p>
   * @return the value of the 'deletion' attribute of this {@link ReplacedElement}.
   */ public
 String getDeletion() {
    return libsbmlJNI.ReplacedElement_getDeletion(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link SBaseRef}'s 'deletion' attribute has been set.
   <p>
   * @return <code>true</code> if this {@link ReplacedElement}'s 'deletion' attribute has been set, 
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetDeletion() {
    return libsbmlJNI.ReplacedElement_isSetDeletion(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'deletion' attribute of this {@link ReplacedElement}.
   <p>
   * This method fails if the id is not a valid syntax for an SIdRef ({@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}), or if the {@link SBaseRef} already
   * points to an element of the submodel using a different interface ({@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}).  A {@link ReplacedElement} must use exactly
   * one method to point to a submodel element: deletion, port, idRef,
   * unitRef, or metaIdRef.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int setDeletion(String id) {
    return libsbmlJNI.ReplacedElement_setDeletion(swigCPtr, this, id);
  }

  
/**
   * Unsets the value of the 'deletion' attribute of this {@link ReplacedElement}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetDeletion() {
    return libsbmlJNI.ReplacedElement_unsetDeletion(swigCPtr, this);
  }

  
/**
   * Returns the XML element name of
   * this SBML object.
   <p>
   * @return the name of this element, as a text string.
   */ public
 String getElementName() {
    return libsbmlJNI.ReplacedElement_getElementName(swigCPtr, this);
  }

  
/**
   * Returns how many elements are being referred to by this {@link ReplacedElement}.  A
   * valid {@link ReplacedElement} will have exactly one.  Possible referents are deletion,
   * port, idRef, unitRef, and metaIdRef.
   <p>
   * @return integer value between 0 and 5: the number of different ways this
   * element points to its referent.
   */ public
 int getNumReferents() {
    return libsbmlJNI.ReplacedElement_getNumReferents(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code of this object instance.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_COMP_REPLACEDELEMENT SBML_COMP_REPLACEDELEMENT}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.ReplacedElement_getTypeCode(swigCPtr, this);
  }

  
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as 'referring to an identifier', but the effective
 * data type was the same as <code>SIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier.
 * @param newid the new identifier.
   */ public
 void renameSIdRefs(String oldid, String newid) {
    libsbmlJNI.ReplacedElement_renameSIdRefs(swigCPtr, this, oldid, newid);
  }

  
/**
   * Finds the {@link SBase} object this {@link ReplacedElement} object points to, if any.
   */ public
 SBase getReferencedElementFrom(Model model) {
  return libsbml.DowncastSBase(libsbmlJNI.ReplacedElement_getReferencedElementFrom(swigCPtr, this, Model.getCPtr(model), model), false);
}

}
