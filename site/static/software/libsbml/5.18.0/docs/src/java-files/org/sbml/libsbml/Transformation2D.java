/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 Implementation of a 2D transformation matrix.
 <p>
 * The {@link Transformation2D} class represents a 2D transformation. it is derived
 * from {@link Transformation} and inherits all the attributes of a 3D
 * transformation. In addition is provides new methods to explicitly get and
 * set 2D transformation properties.  A 2D transformation normally consists
 * of a 3x3 matrix, but since the last row is always 0 0 1, this is reduced
 * to a 6 value array.
 <p>
 * Using one of the new 2D specific functions to set the matrix always
 * updates the 3D matrix automatically and vice versa, so the 2D data and the
 * 3D data inherited from {@link Transformation} should always be consistent.
 */

public class Transformation2D extends Transformation {
   private long swigCPtr;

   protected Transformation2D(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.Transformation2D_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(Transformation2D obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (Transformation2D obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_Transformation2D(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates and returns a deep copy of this {@link Transformation2D} object.
   <p>
   * @return a (deep) copy of this {@link Transformation2D} object.
   */ public
 SBase cloneObject() {
    long cPtr = libsbmlJNI.Transformation2D_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new Transformation2D(cPtr, true);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation2D} is of type
   * {@link Image}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation2D} is of type {@link Image},
   * <code>false</code> otherwise
   */ public
 boolean isImage() {
    return libsbmlJNI.Transformation2D_isImage(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation2D} is of type
   * {@link Ellipse}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation2D} is of type {@link Ellipse},
   * <code>false</code> otherwise
   */ public
 boolean isEllipse() {
    return libsbmlJNI.Transformation2D_isEllipse(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation2D} is of type
   * {@link Rectangle}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation2D} is of type {@link Rectangle},
   * <code>false</code> otherwise
   */ public
 boolean isRectangle() {
    return libsbmlJNI.Transformation2D_isRectangle(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation2D} is of type
   * {@link Polygon}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation2D} is of type {@link Polygon},
   * <code>false</code> otherwise
   */ public
 boolean isPolygon() {
    return libsbmlJNI.Transformation2D_isPolygon(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation2D} is of type
   * {@link RenderGroup}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation2D} is of type
   * {@link RenderGroup}, <code>false</code> otherwise
   */ public
 boolean isRenderGroup() {
    return libsbmlJNI.Transformation2D_isRenderGroup(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation2D} is of type
   * {@link LineEnding}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation2D} is of type {@link LineEnding},
   * <code>false</code> otherwise
   */ public
 boolean isLineEnding() {
    return libsbmlJNI.Transformation2D_isLineEnding(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation2D} is of type
   * {@link Text}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation2D} is of type {@link Text},
   * <code>false</code> otherwise
   */ public
 boolean isText() {
    return libsbmlJNI.Transformation2D_isText(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation2D} is of type
   * {@link RenderCurve}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation2D} is of type
   * {@link RenderCurve}, <code>false</code> otherwise
   */ public
 boolean isRenderCurve() {
    return libsbmlJNI.Transformation2D_isRenderCurve(swigCPtr, this);
  }

  
/**
   * Returns a 2D identity matrix.
   * The matrix contains 6 double values.
   */ public
 static SWIGTYPE_p_double getIdentityMatrix2D() {
    long cPtr = libsbmlJNI.Transformation2D_getIdentityMatrix2D();
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  
/**
   * Sets the 2D matrix to the values given in the array.
   * The 3D matrix is updated accordingly.
   <p>
   * @param m array with new values to be set for this {@link Transformation} object.
   */ public
 void setMatrix2D(SWIGTYPE_p_double m) {
    libsbmlJNI.Transformation2D_setMatrix2D(swigCPtr, this, SWIGTYPE_p_double.getCPtr(m));
  }

  
/**
   * Sets the 2D matrix to the values given in the array.
   * The 2D matrix is updated accordingly.
   <p>
   * @param m array with new values to be set for this {@link Transformation} object.
   */ public
 void setMatrix(SWIGTYPE_p_double m) {
    libsbmlJNI.Transformation2D_setMatrix(swigCPtr, this, SWIGTYPE_p_double.getCPtr(m));
  }

  
/**
   * Returns the 2D matrix which is an array of double values of length 6.
   <p>
   * @return a pointer to the array of numbers for the 2D transformation.
   */ public
 SWIGTYPE_p_double getMatrix2D() {
    long cPtr = libsbmlJNI.Transformation2D_getMatrix2D(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  
/**
   * Returns the XML element name of this {@link Transformation2D} object.
   <p>
   * For {@link Transformation2D}, the XML element name is always
   * <code>'transformation2D'.</code>
   <p>
   * @return the name of this element, i.e. <code>'transformation2D'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.Transformation2D_getElementName(swigCPtr, this);
  }

  
/** * @internal */ public
 void setElementName(String name) {
    libsbmlJNI.Transformation2D_setElementName(swigCPtr, this, name);
  }

  
/**
   * Returns the libSBML type code for this {@link Transformation2D} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_RENDER_TRANSFORMATION2D SBML_RENDER_TRANSFORMATION2D}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.Transformation2D_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link Transformation2D} object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required attributes of this
   * {@link Transformation2D} have been set, otherwise <code>false</code> is returned.
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.Transformation2D_hasRequiredAttributes(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.Transformation2D_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

  
/**
   * Creates an {@link XMLNode} object from this {@link Transformation2D} object.
   <p>
   * @return the {@link XMLNode} with the XML representation for the 
   * {@link Transformation2D} object.
   <p>
   * This method is purely virtual and has to be overwritten by derived classes.
   */ public
 XMLNode toXML() {
    return new XMLNode(libsbmlJNI.Transformation2D_toXML(swigCPtr, this), true);
  }

}
