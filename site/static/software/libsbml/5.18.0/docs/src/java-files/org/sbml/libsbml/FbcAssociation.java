/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-fbc"><a href="group__fbc.html">fbc</a></span>
 Base class for {@link FbcAnd}, {@link FbcOr}, and {@link GeneProductRef}
 <p>
 * The {@link FbcAssociation} class is the abstract base class for the classes that
 * can be used as children of the {@link GeneProductAssociation} child of a {@link Reaction}.
 * The {@link FbcAnd} class is used when all of its children are definitely associated
 * with the {@link Reaction}; the {@link FbcOr} class is used when at least one of its children
 * are associated with the {@link Reaction}; and the {@link GeneProductRef} class is used to
 * denote a particular {@link GeneProduct}.
 <p>
 * <p>
 * @note This class of objects was introduced in Version&nbsp;2 of the
 * SBML Level&nbsp;3 Flux Balance Constraints (&ldquo;fbc&rdquo;)
 * specification.  In Version&nbsp;1 of &ldquo;fbc&rdquo;, the information
 * encoded by this class can be stored instead using the {@link Association} and
 * {@link GeneAssociation} annotation classes.  Please see the Version&nbsp;1 and
 * Version&nbsp;2 &ldquo;fbc&rdquo; specifications for more details.
 <p>
 * @see ListOfFbcAssociations
 * @see FbcAnd
 * @see FbcOr
 * @see GeneProductRef
 */

public class FbcAssociation extends SBase {
   private long swigCPtr;

   protected FbcAssociation(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.FbcAssociation_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(FbcAssociation obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (FbcAssociation obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_FbcAssociation(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link FbcAssociation} with the given SBML Level, Version, and
   * &ldquo;fbc&rdquo;package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link FbcAssociation}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link FbcAssociation}.
   <p>
   * @param pkgVersion a long integer, the SBML &ldquo;fbc&rdquo; package
   * Version to assign to this {@link FbcAssociation}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 FbcAssociation(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_FbcAssociation__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link FbcAssociation} with the given SBML Level, Version, and
   * &ldquo;fbc&rdquo;package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link FbcAssociation}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link FbcAssociation}.
   <p>
   * @param pkgVersion a long integer, the SBML &ldquo;fbc&rdquo; package
   * Version to assign to this {@link FbcAssociation}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 FbcAssociation(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_FbcAssociation__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link FbcAssociation} with the given SBML Level, Version, and
   * &ldquo;fbc&rdquo;package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link FbcAssociation}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link FbcAssociation}.
   <p>
   * @param pkgVersion a long integer, the SBML &ldquo;fbc&rdquo; package
   * Version to assign to this {@link FbcAssociation}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 FbcAssociation(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_FbcAssociation__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link FbcAssociation} with the given SBML Level, Version, and
   * &ldquo;fbc&rdquo;package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link FbcAssociation}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link FbcAssociation}.
   <p>
   * @param pkgVersion a long integer, the SBML &ldquo;fbc&rdquo; package
   * Version to assign to this {@link FbcAssociation}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 FbcAssociation() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_FbcAssociation__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link FbcAssociation} with the given {@link FbcPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param fbcns the {@link FbcPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 FbcAssociation(FbcPkgNamespaces fbcns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_FbcAssociation__SWIG_4(FbcPkgNamespaces.getCPtr(fbcns), fbcns), true);
  }

  
/**
   * Copy constructor for {@link FbcAssociation}.
   <p>
   * @param orig the {@link FbcAssociation} instance to copy.
   */ public
 FbcAssociation(FbcAssociation orig) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_FbcAssociation__SWIG_5(FbcAssociation.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link FbcAssociation} object.
   <p>
   * @return a (deep) copy of this {@link FbcAssociation} object.
   */ public
 FbcAssociation cloneObject() {
	return (FbcAssociation) libsbml.DowncastSBase(libsbmlJNI.FbcAssociation_cloneObject(swigCPtr, this), true);
}

  
/**
   * Returns <code>true</code>, if this abstract {@link FbcAssociation} is of type {@link FbcAnd}.
   <p>
   * @return <code>true</code>, if this abstract {@link FbcAssociation} is of type {@link FbcAnd}.
   */ public
 boolean isFbcAnd() {
    return libsbmlJNI.FbcAssociation_isFbcAnd(swigCPtr, this);
  }

  
/**
   * Returns <code>true</code>, if this abstract {@link FbcAssociation} is of type {@link FbcOr}.
   <p>
   * @return <code>true</code>, if this abstract {@link FbcAssociation} is of type {@link FbcOr}.
   */ public
 boolean isFbcOr() {
    return libsbmlJNI.FbcAssociation_isFbcOr(swigCPtr, this);
  }

  
/**
   * Returns <code>true</code>, if this abstract {@link FbcAssociation} is of type
   * {@link GeneProductRef}.
   <p>
   * @return <code>true</code>, if this abstract {@link FbcAssociation} is of type
   * {@link GeneProductRef}.
   */ public
 boolean isGeneProductRef() {
    return libsbmlJNI.FbcAssociation_isGeneProductRef(swigCPtr, this);
  }

  
/**
   * Returns the XML element name of this object.
   <p>
   * For {@link FbcAssociation}, the XML element name is always <code>'fbcAssociation'.</code>
   <p>
   * @return the name of this element, i.e. <code>'fbcAssociation'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.FbcAssociation_getElementName(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_FBC_ASSOCIATION SBML_FBC_ASSOCIATION} (default).
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.FbcAssociation_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes
   * for this {@link FbcAssociation} object have been set.
   <p>
   * @note {@link FbcAssociation} has no required attributes, so this
   * method always returns <code>true.</code>
   <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.FbcAssociation_hasRequiredAttributes(swigCPtr, this);
  }

  
/**
  * Parses a gene association in infix format and returns a corresponding
  * {@link Association} object.
  <p>
  * This parses a string that has a list of gene names and conjunctions
  * or disjunctions.  For example:
  * <pre class='fragment'>
  (b2422) and (b2425) and (b2423) and (b2424) or (b2422) and (b2423) and (b2424) and (b2413) and (b3917)
</pre>
  <p>
  * The 'and' operator takes precedence over the 'or' operator, meaning that
  * the above input string would turn into two groups of gene names: either
  * 'b2422, b2425, b2423, and b2424' or 'b2422, b2423, b2424, b2413, and b3917'.
  * Parentheses may be added to make things more clear, and to encode
  * alternative schemes.
  <p>
  * This method also creates missing {@link GeneProduct} objects, in case the unique
  * reference does not yet exist.
  <p>
  * @param association the string to parse.
  * @param plugin the {@link FbcModelPlugin} on which to add the geneProduct elements.
  * @param usingId boolean indicating whether the infix assumes identifiers (<code>true</code>)
  * or labels (<code>false</code> default).
  * @param addMissingGP boolean indicating whether to add missing geneProducts 
  * (<code>true</code> default) or not (<code>false</code>).
  <p>
  * @return the parsed association, or <code>null</code> in case of an error.
  <p>
  * 
  */ public
 static FbcAssociation parseFbcInfixAssociation(String association, FbcModelPlugin plugin, boolean usingId, boolean addMissingGP) {
	return (FbcAssociation) libsbml.DowncastSBase(libsbmlJNI.FbcAssociation_parseFbcInfixAssociation__SWIG_0(association, FbcModelPlugin.getCPtr(plugin), plugin, usingId, addMissingGP), false);
}

  
/**
  * Parses a gene association in infix format and returns a corresponding
  * {@link Association} object.
  <p>
  * This parses a string that has a list of gene names and conjunctions
  * or disjunctions.  For example:
  * <pre class='fragment'>
  (b2422) and (b2425) and (b2423) and (b2424) or (b2422) and (b2423) and (b2424) and (b2413) and (b3917)
</pre>
  <p>
  * The 'and' operator takes precedence over the 'or' operator, meaning that
  * the above input string would turn into two groups of gene names: either
  * 'b2422, b2425, b2423, and b2424' or 'b2422, b2423, b2424, b2413, and b3917'.
  * Parentheses may be added to make things more clear, and to encode
  * alternative schemes.
  <p>
  * This method also creates missing {@link GeneProduct} objects, in case the unique
  * reference does not yet exist.
  <p>
  * @param association the string to parse.
  * @param plugin the {@link FbcModelPlugin} on which to add the geneProduct elements.
  * @param usingId boolean indicating whether the infix assumes identifiers (<code>true</code>)
  * or labels (<code>false</code> default).
  * @param addMissingGP boolean indicating whether to add missing geneProducts 
  * (<code>true</code> default) or not (<code>false</code>).
  <p>
  * @return the parsed association, or <code>null</code> in case of an error.
  <p>
  * 
  */ public
 static FbcAssociation parseFbcInfixAssociation(String association, FbcModelPlugin plugin, boolean usingId) {
	return (FbcAssociation) libsbml.DowncastSBase(libsbmlJNI.FbcAssociation_parseFbcInfixAssociation__SWIG_1(association, FbcModelPlugin.getCPtr(plugin), plugin, usingId), false);
}

  
/**
  * Parses a gene association in infix format and returns a corresponding
  * {@link Association} object.
  <p>
  * This parses a string that has a list of gene names and conjunctions
  * or disjunctions.  For example:
  * <pre class='fragment'>
  (b2422) and (b2425) and (b2423) and (b2424) or (b2422) and (b2423) and (b2424) and (b2413) and (b3917)
</pre>
  <p>
  * The 'and' operator takes precedence over the 'or' operator, meaning that
  * the above input string would turn into two groups of gene names: either
  * 'b2422, b2425, b2423, and b2424' or 'b2422, b2423, b2424, b2413, and b3917'.
  * Parentheses may be added to make things more clear, and to encode
  * alternative schemes.
  <p>
  * This method also creates missing {@link GeneProduct} objects, in case the unique
  * reference does not yet exist.
  <p>
  * @param association the string to parse.
  * @param plugin the {@link FbcModelPlugin} on which to add the geneProduct elements.
  * @param usingId boolean indicating whether the infix assumes identifiers (<code>true</code>)
  * or labels (<code>false</code> default).
  * @param addMissingGP boolean indicating whether to add missing geneProducts 
  * (<code>true</code> default) or not (<code>false</code>).
  <p>
  * @return the parsed association, or <code>null</code> in case of an error.
  <p>
  * 
  */ public
 static FbcAssociation parseFbcInfixAssociation(String association, FbcModelPlugin plugin) {
	return (FbcAssociation) libsbml.DowncastSBase(libsbmlJNI.FbcAssociation_parseFbcInfixAssociation__SWIG_2(association, FbcModelPlugin.getCPtr(plugin), plugin), false);
}

  
/**
  * Converts this {@link FbcAssociation} object into an infix string representation.
  <p>
  * @return the association as infix string.
  */ public
 String toInfix(boolean usingId) {
    return libsbmlJNI.FbcAssociation_toInfix__SWIG_0(swigCPtr, this, usingId);
  }

  
/**
  * Converts this {@link FbcAssociation} object into an infix string representation.
  <p>
  * @return the association as infix string.
  */ public
 String toInfix() {
    return libsbmlJNI.FbcAssociation_toInfix__SWIG_1(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.FbcAssociation_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

}
