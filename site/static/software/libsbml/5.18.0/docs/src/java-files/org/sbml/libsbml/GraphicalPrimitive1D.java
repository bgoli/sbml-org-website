/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 Base class for graphical primitives implementing 1D attributes.
 <p>
 * The {@link GraphicalPrimitive1D} class implements attributes and methods necessary
 * for 1D objects like lines. The attributes that are implemented are a
 * stroke color, a stroke width and a stroke dasharray for dashed line
 * drawing.  Additionally, this class adds an id attribute with which all
 * graphical primitives can be referenced.
 <p>
 * The {@link GraphicalPrimitive1D} class is derived from {@link Transformation2D} and
 * inherits all its methods and attributes.
 */

public class GraphicalPrimitive1D extends Transformation2D {
   private long swigCPtr;

   protected GraphicalPrimitive1D(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.GraphicalPrimitive1D_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(GraphicalPrimitive1D obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (GraphicalPrimitive1D obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_GraphicalPrimitive1D(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates and returns a deep copy of this {@link GraphicalPrimitive1D} object.
   <p>
   * @return a (deep) copy of this {@link GraphicalPrimitive1D} object.
   */ public
 SBase cloneObject() {
  return (GraphicalPrimitive1D) libsbml.DowncastSBase(libsbmlJNI.GraphicalPrimitive1D_cloneObject(swigCPtr, this), true);
}

  
/**
   * Returns the value of the 'id' attribute of this {@link GraphicalPrimitive1D}.
   <p>
   * @return the value of the 'id' attribute of this {@link GraphicalPrimitive1D} as a
   * string.
   */ public
 String getId() {
    return libsbmlJNI.GraphicalPrimitive1D_getId(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'stroke' attribute of this {@link GraphicalPrimitive1D}.
   <p>
   * @return the value of the 'stroke' attribute of this {@link GraphicalPrimitive1D}
   * as a string.
   */ public
 String getStroke() {
    return libsbmlJNI.GraphicalPrimitive1D_getStroke(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'stroke-width' attribute of this
   * {@link GraphicalPrimitive1D}.
   <p>
   * @return the value of the 'stroke-width' attribute of this
   * {@link GraphicalPrimitive1D} as a double.
   */ public
 double getStrokeWidth() {
    return libsbmlJNI.GraphicalPrimitive1D_getStrokeWidth(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'stroke-dasharray' attribute of this
   * {@link GraphicalPrimitive1D}.
   <p>
   * @note the value of the 'stroke-dasharray' attribute of this
   * {@link GraphicalPrimitive1D} is returned in the argument array.
   */ public
 SWIGTYPE_p_std__vectorT_unsigned_int_t getStrokeDashArray() {
    return new SWIGTYPE_p_std__vectorT_unsigned_int_t(libsbmlJNI.GraphicalPrimitive1D_getStrokeDashArray(swigCPtr, this), false);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link GraphicalPrimitive1D}'s 'id' attribute
   * is set.
   <p>
   * @return <code>true</code> if this {@link GraphicalPrimitive1D}'s 'id' attribute has been
   * set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetId() {
    return libsbmlJNI.GraphicalPrimitive1D_isSetId(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link GraphicalPrimitive1D}'s 'stroke'
   * attribute is set.
   <p>
   * @return <code>true</code> if this {@link GraphicalPrimitive1D}'s 'stroke' attribute has been
   * set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetStroke() {
    return libsbmlJNI.GraphicalPrimitive1D_isSetStroke(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link GraphicalPrimitive1D}'s 'stroke-width'
   * attribute is set.
   <p>
   * @return <code>true</code> if this {@link GraphicalPrimitive1D}'s 'stroke-width' attribute
   * has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetStrokeWidth() {
    return libsbmlJNI.GraphicalPrimitive1D_isSetStrokeWidth(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link GraphicalPrimitive1D}'s
   * 'stroke-dasharray' attribute is set.
   <p>
   * @return <code>true</code> if this {@link GraphicalPrimitive1D}'s 'stroke-dasharray'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetStrokeDashArray() {
    return libsbmlJNI.GraphicalPrimitive1D_isSetStrokeDashArray(swigCPtr, this);
  }

  
/**
   * Returns <code>true</code> if the dash array has been set or <code>false</code> otherwise.
   * The array is considered set if it is not empty and if the first entry is
   * not <code>NaN.</code>
   <p>
   * @return <code>true</code> if the stroke-dasharray is set, <code>false</code> otherwise.
   */ public
 boolean isSetDashArray() {
    return libsbmlJNI.GraphicalPrimitive1D_isSetDashArray(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'id' attribute of this {@link GraphicalPrimitive1D}.
   <p>
   * @param id String& value of the 'id' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * Calling this function with <code>id</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetId().
   */ public
 int setId(String id) {
    return libsbmlJNI.GraphicalPrimitive1D_setId(swigCPtr, this, id);
  }

  
/**
   * Sets the value of the 'stroke' attribute of this {@link GraphicalPrimitive1D}.
   <p>
   * @param stroke String& value of the 'stroke' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * Calling this function with <code>stroke</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetStroke().
   */ public
 int setStroke(String stroke) {
    return libsbmlJNI.GraphicalPrimitive1D_setStroke(swigCPtr, this, stroke);
  }

  
/**
   * Sets the value of the 'stroke-width' attribute of this
   * {@link GraphicalPrimitive1D}.
   <p>
   * @param strokeWidth double value of the 'stroke-width' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setStrokeWidth(double strokeWidth) {
    return libsbmlJNI.GraphicalPrimitive1D_setStrokeWidth(swigCPtr, this, strokeWidth);
  }

  
/**
   * Sets the value of the 'stroke-dasharray' attribute of this
   * {@link GraphicalPrimitive1D}.
   <p>
   * @param array value of the 'stroke-dasharray'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setStrokeDashArray(SWIGTYPE_p_std__vectorT_unsigned_int_t array) {
    return libsbmlJNI.GraphicalPrimitive1D_setStrokeDashArray(swigCPtr, this, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(array));
  }

  
/** 
   * Returns the number of defined dashes in the 'stroke-dasharray' attribute.
   <p>
   * @return the number of dashes in the 'stroke-dasharray' attribute.
   */ public
 long getNumDashes() {
    return libsbmlJNI.GraphicalPrimitive1D_getNumDashes(swigCPtr, this);
  }

  
/**
   * Returns the dash at the given index of the 'stroke-dasharray' attribute. 
   <p>
   * @param index the index of the dash length to return from the 
   * 'stroke-dasharray' attribute.
   <p>
   * @return the value of the dash length from the 'stroke-dasharray'
   * attribute at the given index, or -1 (cast to a long integer)
   * if no such index exists.
   */ public
 long getDashByIndex(long index) {
    return libsbmlJNI.GraphicalPrimitive1D_getDashByIndex(swigCPtr, this, index);
  }

  
/**
  * Adds a new length of a dash to the 'stroke-dasharray' attribute.
  <p>
  * @param dash the integer length of the dash to add to the end
  * of the 'stroke-dasharray' attribute.
  */ public
 void addDash(long dash) {
    libsbmlJNI.GraphicalPrimitive1D_addDash(swigCPtr, this, dash);
  }

  
/**
  * Unsets the value of the 'stroke-dasharray' attribute of this
  * {@link GraphicalPrimitive1D}.
  */ public
 void clearDashes() {
    libsbmlJNI.GraphicalPrimitive1D_clearDashes(swigCPtr, this);
  }

  
/** 
   * Sets the integer value of the dash at the given position.
   <p>
   * @param index the index of the dash length to replace in the 
   * 'stroke-dasharray' attribute.  The function will fail silently 
   * if no such index exists.
   <p>
   * @param dash the integer length to set the indexed dash to.
   */ public
 void setDashByIndex(long index, long dash) {
    libsbmlJNI.GraphicalPrimitive1D_setDashByIndex(swigCPtr, this, index, dash);
  }

  
/** 
   * Inserts the given integer value for the dash length at the 
   * given position.
   <p>
   * @param index the index of the dash length at which the new dash is
   * to be inserted in the 'stroke-dasharray' attribute.  The function
   * will fail silently if no such index exists.
   <p>
   * @param dash the integer length to set the inserted dash to.
   */ public
 void insertDash(long index, long dash) {
    libsbmlJNI.GraphicalPrimitive1D_insertDash(swigCPtr, this, index, dash);
  }

  
/**
   * Removes the dash length at the given index.
   <p>
   * @param index the index of the dash length to remove from the
   * 'stroke-dasharray' attribute.
   * The function will fail silently if no such index exists.
   */ public
 void removeDash(long index) {
    libsbmlJNI.GraphicalPrimitive1D_removeDash(swigCPtr, this, index);
  }

  
/**
   * Unsets the value of the 'id' attribute of this {@link GraphicalPrimitive1D}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetId() {
    return libsbmlJNI.GraphicalPrimitive1D_unsetId(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'stroke' attribute of this {@link GraphicalPrimitive1D}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetStroke() {
    return libsbmlJNI.GraphicalPrimitive1D_unsetStroke(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'stroke-width' attribute of this
   * {@link GraphicalPrimitive1D}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetStrokeWidth() {
    return libsbmlJNI.GraphicalPrimitive1D_unsetStrokeWidth(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'stroke-dasharray' attribute of this
   * {@link GraphicalPrimitive1D}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetStrokeDashArray() {
    return libsbmlJNI.GraphicalPrimitive1D_unsetStrokeDashArray(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link GraphicalPrimitive1D} is of
   * type {@link Ellipse}
   <p>
   * @return <code>true</code> if this abstract {@link GraphicalPrimitive1D} is of type
   * {@link Ellipse}, <code>false</code> otherwise
   */ public
 boolean isEllipse() {
    return libsbmlJNI.GraphicalPrimitive1D_isEllipse(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link GraphicalPrimitive1D} is of
   * type {@link Rectangle}
   <p>
   * @return <code>true</code> if this abstract {@link GraphicalPrimitive1D} is of type
   * {@link Rectangle}, <code>false</code> otherwise
   */ public
 boolean isRectangle() {
    return libsbmlJNI.GraphicalPrimitive1D_isRectangle(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link GraphicalPrimitive1D} is of
   * type {@link Polygon}
   <p>
   * @return <code>true</code> if this abstract {@link GraphicalPrimitive1D} is of type
   * {@link Polygon}, <code>false</code> otherwise
   */ public
 boolean isPolygon() {
    return libsbmlJNI.GraphicalPrimitive1D_isPolygon(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link GraphicalPrimitive1D} is of
   * type {@link RenderGroup}
   <p>
   * @return <code>true</code> if this abstract {@link GraphicalPrimitive1D} is of type
   * {@link RenderGroup}, <code>false</code> otherwise
   */ public
 boolean isRenderGroup() {
    return libsbmlJNI.GraphicalPrimitive1D_isRenderGroup(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link GraphicalPrimitive1D} is of
   * type {@link LineEnding}
   <p>
   * @return <code>true</code> if this abstract {@link GraphicalPrimitive1D} is of type
   * {@link LineEnding}, <code>false</code> otherwise
   */ public
 boolean isLineEnding() {
    return libsbmlJNI.GraphicalPrimitive1D_isLineEnding(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link GraphicalPrimitive1D} is of
   * type {@link Text}
   <p>
   * @return <code>true</code> if this abstract {@link GraphicalPrimitive1D} is of type {@link Text},
   * <code>false</code> otherwise
   */ public
 boolean isText() {
    return libsbmlJNI.GraphicalPrimitive1D_isText(swigCPtr, this);
  }

  
/**
  * Predicate returning <code>true</code> if this abstract {@link GraphicalPrimitive1D} is of
  * type {@link RenderCurve}
  <p>
  * @return <code>true</code> if this abstract {@link GraphicalPrimitive1D} is of type {@link Text},
  * <code>false</code> otherwise
  */ public
 boolean isRenderCurve() {
    return libsbmlJNI.GraphicalPrimitive1D_isRenderCurve(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code for this {@link GraphicalPrimitive1D} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_RENDER_GRAPHICALPRIMITIVE1D SBML_RENDER_GRAPHICALPRIMITIVE1D}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.GraphicalPrimitive1D_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link GraphicalPrimitive1D} object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required attributes of this
   * {@link GraphicalPrimitive1D} have been set, otherwise <code>false</code> is returned.
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.GraphicalPrimitive1D_hasRequiredAttributes(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.GraphicalPrimitive1D_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

  
/**
   * Creates an {@link XMLNode} object from this {@link GraphicalPrimitive1D} object.
   <p>
   * @return the {@link XMLNode} with the XML representation for the 
   * {@link GraphicalPrimitive1D} object.
   <p>
   * This method is purely virtual and has to be implemented by subclasses.
   */ public
 XMLNode toXML() {
    return new XMLNode(libsbmlJNI.GraphicalPrimitive1D_toXML(swigCPtr, this), true);
  }

}
