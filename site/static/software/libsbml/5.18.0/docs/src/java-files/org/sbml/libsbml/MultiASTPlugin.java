/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-multi"><a href="group__multi.html">multi</a></span>
 Extension of ASTBasePlugin.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The {@link MultiASTPlugin} object is used to extend the standard SBML AST
 * (abstract syntax tree) base object (ASTBase) to allow a 'ci' element
 * ({@link libsbmlConstants#AST_NAME AST_NAME}) to have an optional
 * 'speciesReference' attribute.  This attribute is used to distinguish which
 * version of a {@link Species} should be used in the mathematics.  If a 'template'
 * type {@link Species} appears as both a reactant and a product in the same
 * {@link Reaction}, for example, it may have one amount as a reactant and a
 * different amount as a product, since the same template is being used to
 * match slightly different pools of elements in each case.  By defining the
 * 'speciesReference' attribute on an {@link libsbmlConstants#AST_NAME AST_NAME}
 * that references that {@link Species}, the modeler may determine which amount is
 * being referenced.  Similarly, an {@link libsbmlConstants#AST_NAME AST_NAME}
 * node may reference a {@link SpeciesFeature} that appears in multiple {@link Species} in
 * the {@link Reaction}, and this attribute can be used to specify which one should
 * be used.
 */

public class MultiASTPlugin extends ASTBasePlugin {
   private long swigCPtr;

   protected MultiASTPlugin(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.MultiASTPlugin_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(MultiASTPlugin obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (MultiASTPlugin obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_MultiASTPlugin(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link MultiASTPlugin} object using the given parameters.
   <p>
   * <p>
 * In the XML representation of an SBML document, XML namespaces are used to
 * identify the origin of each XML construct used.  XML namespaces are
 * identified by their unique resource identifiers (URIs).  The core SBML
 * specifications stipulate the namespaces that must be used for core SBML
 * constructs; for example, all XML elements that belong to SBML Level&nbsp;3
 * Version&nbsp;1 Core must be placed in the XML namespace identified by the URI
 * <code>'http://www.sbml.org/sbml/level3/version1/core'</code>.  Individual
 * SBML Level&nbsp;3 packages define their own XML namespaces; for example,
 * all elements belonging to the SBML Level&nbsp;3 Layout Version&nbsp;1
 * package must be placed in the XML namespace
 * <code>'http://www.sbml.org/sbml/level3/version1/layout/version1/'</code>.
   <p>
   * @param uri the URI of the SBML Level&nbsp;3 package implemented by
   * this libSBML package extension.
   */ public
 MultiASTPlugin(String uri) {
    this(libsbmlJNI.new_MultiASTPlugin__SWIG_0(uri), true);
  }

  
/**
   * Copy constructor.
   <p>
   * @param orig the {@link MultiASTPlugin} instance to copy.
   */ public
 MultiASTPlugin(MultiASTPlugin orig) {
    this(libsbmlJNI.new_MultiASTPlugin__SWIG_1(MultiASTPlugin.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link MultiASTPlugin} object.
   <p>
   * @return a (deep) copy of this {@link SBase} object
   */ public
 ASTBasePlugin cloneObject() {
    long cPtr = libsbmlJNI.MultiASTPlugin_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new MultiASTPlugin(cPtr, true);
  }

  
/** * @internal */ public
 MultiASTPlugin createObject(XMLInputStream stream) {
    long cPtr = libsbmlJNI.MultiASTPlugin_createObject(swigCPtr, this, XMLInputStream.getCPtr(stream), stream);
    return (cPtr == 0) ? null : new MultiASTPlugin(cPtr, false);
  }

  
/** * @internal */ public
 String getPrefix() {
    return libsbmlJNI.MultiASTPlugin_getPrefix(swigCPtr, this);
  }

  
/** * @internal */ public
 void connectToParent(ASTNode astbase) {
    libsbmlJNI.MultiASTPlugin_connectToParent(swigCPtr, this, ASTNode.getCPtr(astbase), astbase);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.MultiASTPlugin_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

  
/**
   * Returns the value of the 'speciesReference' attribute of this {@link MultiASTPlugin}.
   <p>
   * @return the value of the 'speciesReference' attribute of this {@link MultiASTPlugin} as a string.
   */ public
 String getSpeciesReference() {
    return libsbmlJNI.MultiASTPlugin_getSpeciesReference(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link MultiASTPlugin}'s 'speciesReference' attribute is set.
   <p>
   * @return <code>true</code> if this {@link MultiASTPlugin}'s 'speciesReference' attribute has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetSpeciesReference() {
    return libsbmlJNI.MultiASTPlugin_isSetSpeciesReference(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'speciesReference' attribute of this {@link MultiASTPlugin}.
   <p>
   * @param speciesReference String& value of the 'speciesReference' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * Calling this function with <code>speciesReference</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetSpeciesReference().
   */ public
 int setSpeciesReference(String speciesReference) {
    return libsbmlJNI.MultiASTPlugin_setSpeciesReference(swigCPtr, this, speciesReference);
  }

  
/**
   * Unsets the value of the 'speciesReference' attribute of this {@link MultiASTPlugin}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetSpeciesReference() {
    return libsbmlJNI.MultiASTPlugin_unsetSpeciesReference(swigCPtr, this);
  }

  
/**
  * Returns the value of the 'representationType' attribute of this {@link MultiASTPlugin}.
  <p>
  * @return the value of the 'representationType' attribute of this {@link MultiASTPlugin} as a string.
  */ public
 String getRepresentationType() {
    return libsbmlJNI.MultiASTPlugin_getRepresentationType(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link MultiASTPlugin}'s 'representationType' attribute is set.
   <p>
   * @return <code>true</code> if this {@link MultiASTPlugin}'s 'representationType' attribute has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetRepresentationType() {
    return libsbmlJNI.MultiASTPlugin_isSetRepresentationType(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'representationType' attribute of this {@link MultiASTPlugin}.
   <p>
   * @param representationType String& value of the 'representationType' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * Calling this function with <code>representationType</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetRepresentationType().
   */ public
 int setRepresentationType(String representationType) {
    return libsbmlJNI.MultiASTPlugin_setRepresentationType(swigCPtr, this, representationType);
  }

  
/**
   * Unsets the value of the 'representationType' attribute of this {@link MultiASTPlugin}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetRepresentationType() {
    return libsbmlJNI.MultiASTPlugin_unsetRepresentationType(swigCPtr, this);
  }

  
/** * @internal */ public
 boolean read(XMLInputStream stream, String reqd_prefix, XMLToken currentElement) {
    return libsbmlJNI.MultiASTPlugin_read(swigCPtr, this, XMLInputStream.getCPtr(stream), stream, reqd_prefix, XMLToken.getCPtr(currentElement), currentElement);
  }

  
/** * @internal */ public
 void addExpectedAttributes(SWIGTYPE_p_ExpectedAttributes attributes, XMLInputStream stream, int type) {
    libsbmlJNI.MultiASTPlugin_addExpectedAttributes(swigCPtr, this, SWIGTYPE_p_ExpectedAttributes.getCPtr(attributes), XMLInputStream.getCPtr(stream), stream, type);
  }

  
/** * @internal */ public
 boolean readAttributes(XMLAttributes attributes, SWIGTYPE_p_ExpectedAttributes expectedAttributes, XMLInputStream stream, XMLToken element, int type) {
    return libsbmlJNI.MultiASTPlugin_readAttributes(swigCPtr, this, XMLAttributes.getCPtr(attributes), attributes, SWIGTYPE_p_ExpectedAttributes.getCPtr(expectedAttributes), XMLInputStream.getCPtr(stream), stream, XMLToken.getCPtr(element), element, type);
  }

  
/** * @internal */ public
 void writeAttributes(XMLOutputStream stream, int type) {
    libsbmlJNI.MultiASTPlugin_writeAttributes(swigCPtr, this, XMLOutputStream.getCPtr(stream), stream, type);
  }

  
/** * @internal */ public
 void writeXMLNS(XMLOutputStream stream) {
    libsbmlJNI.MultiASTPlugin_writeXMLNS(swigCPtr, this, XMLOutputStream.getCPtr(stream), stream);
  }

  
/**
   * Renames the speciesReference SIdRef attribute on this node.
   <p>
   * @param oldid the old identifier.
   * @param newid the new identifier.
   */ public
 void renameSIdRefs(String oldid, String newid) {
    libsbmlJNI.MultiASTPlugin_renameSIdRefs(swigCPtr, this, oldid, newid);
  }

}
