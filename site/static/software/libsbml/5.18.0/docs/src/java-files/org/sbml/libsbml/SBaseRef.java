/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-comp"><a href="group__comp.html">comp</a></span>
 Base class for references to objects.
 <p>
 * The {@link SBaseRef} class was introduced by the SBML Level&nbsp;3 <a href='../../../extensions-summary.html#comp'>Hierarchical Model Composition</a>
 * (&ldquo;comp&rdquo;) package as the principle way by which submodel
 * elements may be referenced.  The {@link SBaseRef} class is usually found as the
 * base class of a {@link Port}, {@link Deletion}, {@link ReplacedElement}, or {@link ReplacedBy} class, but
 * may appear as an child of one of the above classes if the parent object
 * references a {@link Submodel}.
 <p>
 * An {@link SBaseRef} object must reference an element using exactly one of the
 * optional attributes of the class.  Subclasses of {@link SBaseRef} may define
 * additional optional attributes that are legal ways to reference an element.
 <p>
 * {@link SBaseRef} objects may reference elements that do not live in the {@link Model} parent 
 * of the {@link SBaseRef} object.  However, the {@link SBaseRef} class itself does not 
 * provide a method of determining which {@link Model} or {@link Submodel} is being referenced.
 * The subclasses of {@link SBaseRef} provide methods for this instead.
 <p>
 * Once the {@link Model} to which the {@link SBaseRef} object is referencing has been established,
 * there are four optional attributes defined in the {@link SBaseRef} class that
 * are each methods of referencing an element:
 <p>
 * <ul>
 * <li> 'portRef' (type <code>PortSIdRef</code>):  As its name implies, this attribute is used to
 * refer to a port identifier, in the case when the reference being
 * constructed with the {@link SBaseRef} is intended to refer to a port on a
 * submodel.  The namespace of the <code>PortSIdRef</code> value is the set
 * of identifiers of type <code>PortSId</code> defined in the submodel, not
 * the parent model.
 * <li> 'idRef' (type <code>SIdRef</code>): As its name implies, this attribute is used to
 * refer to a regular identifier (i.e., the value of an 'id'
 * attribute on some other object), in the case when the reference being
 * constructed with the {@link SBaseRef} is intended to refer to an object that
 * does not have a port identifier.  The namespace of the <code>SIdRef</code>
 * value is the set of identifiers of type SId defined in the
 * submodel, not the parent model.
 * <li> 'unitRef' (type <code>UnitSIdRef</code>): This attribute is used to refer to the identifier
 * of a {@link UnitDefinition} object.  The namespace of the <code>UnitSIdRef</code>
 * value is the set of unit identifiers defined in the submodel, not the
 * parent model. (Note that even though this attribute is of type <code>UnitSIdRef</code>,
 * the reserved unit identifiers that are defined by SBML Level&nbsp;3 (see
 * Section 3.1.10 of the core specification) are
 * *not* permitted as values of 'unitRef'.  Reserved unit
 * identifiers may not be replaced or deleted.)
 * <li> 'metaIdRef' (type <code>IDREF</code>): This attribute is used to refer to a 'metaid'
 * attribute value on some other object, in the case when the reference
 * being constructed with the {@link SBaseRef} is intended to refer to an object
 * that does not have a port identifier.  The namespace of the 'metaIdRef'
 * value is the entire document in which the referenced model resides, but
 * must refer to a subelement of the referenced model.  Since meta identifiers are
 * optional attributes of {@link SBase}, all SBML objects have the potential to
 * have a meta identifier value.
 *
 * </ul> <p>
 * An {@link SBaseRef} object may have up to one subcomponent named 'sBaseRef', of
 * type {@link SBaseRef}.  This permits recursive structures to be constructed so
 * that objects inside submodels can be referenced.
 <p>
 * The form of such recursive references must be as follows.  The
 * highest-level {@link SBaseRef} object of such a chain (which will necessarily
 * be an object of class {@link Port}, {@link Deletion}, {@link ReplacedElement} or {@link ReplacedBy},
 * because they are the only classes derived from the class {@link SBaseRef}) must
 * refer to a {@link Submodel} object in the containing model.  All child
 * {@link SBaseRef} objects in the chain must refer to components inside the
 * {@link Model} instance to which the {@link Submodel} refers.
 */

public class SBaseRef extends CompBase {
   private long swigCPtr;

   protected SBaseRef(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.SBaseRef_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(SBaseRef obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (SBaseRef obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_SBaseRef(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link SBaseRef} with the given level, version, and package version.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 SBaseRef(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_SBaseRef__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link SBaseRef} with the given level, version, and package version.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 SBaseRef(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_SBaseRef__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link SBaseRef} with the given level, version, and package version.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 SBaseRef(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_SBaseRef__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link SBaseRef} with the given level, version, and package version.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 SBaseRef() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_SBaseRef__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link SBaseRef} with the given {@link CompPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param compns the {@link CompPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 SBaseRef(CompPkgNamespaces compns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_SBaseRef__SWIG_4(CompPkgNamespaces.getCPtr(compns), compns), true);
  }

  
/**
   * Copy constructor.
   <p>
   * @param source the instance to copy.
   */ public
 SBaseRef(SBaseRef source) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_SBaseRef__SWIG_5(SBaseRef.getCPtr(source), source), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link SBaseRef} object.
   <p>
   * @return a (deep) copy of this {@link SBaseRef} object.
   */ public
 SBase cloneObject() {
    long cPtr = libsbmlJNI.SBaseRef_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new SBaseRef(cPtr, true);
  }

  
/**
   * Returns the first child element found that has the given <code>id</code> in the
   * model-wide SId namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id string representing the id of the object to find.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>id</code>.
   */ public
 SBase getElementBySId(String id) {
  return libsbml.DowncastSBase(libsbmlJNI.SBaseRef_getElementBySId(swigCPtr, this, id), false);
}

  
/**
   * Returns the first child element it can find with the given <code>metaid</code>, or
   * itself if it has the given <code>metaid</code>, or <code>null</code> if no such object is found.
   <p>
   * @param metaid string representing the metaid of the object to find.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>metaid</code>.
   */ public
 SBase getElementByMetaId(String metaid) {
  return libsbml.DowncastSBase(libsbmlJNI.SBaseRef_getElementByMetaId(swigCPtr, this, metaid), false);
}

  
/**
   * Returns the value of the 'metaIdRef' attribute of this {@link SBaseRef}.
   <p>
   * @return the value of the 'metaIdRef' attribute of this {@link SBaseRef}.
   */ public
 String getMetaIdRef() {
    return libsbmlJNI.SBaseRef_getMetaIdRef(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link SBaseRef}'s 'metaIdRef' attribute has been set.
   <p>
   * @return <code>true</code> if this {@link SBaseRef}'s 'metaIdRef' attribute has been set, 
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetMetaIdRef() {
    return libsbmlJNI.SBaseRef_isSetMetaIdRef(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'metaIdRef' attribute of this {@link SBaseRef}.
   <p>
   * This method fails if the id is not a valid syntax for an <code>IDREF</code> ({@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}), or if the {@link SBaseRef} already
   * points to an element of the submodel using a different interface ({@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}).  An sBaseRef must use exactly one
   * method to point to a submodel element.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int setMetaIdRef(String id) {
    return libsbmlJNI.SBaseRef_setMetaIdRef(swigCPtr, this, id);
  }

  
/**
   * Unsets the value of the 'metaIdRef' attribute of this {@link SBaseRef}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetMetaIdRef() {
    return libsbmlJNI.SBaseRef_unsetMetaIdRef(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'portRef' attribute of this {@link SBaseRef}.
   <p>
   * @return the value of the 'portRef' attribute of this {@link SBaseRef}.
   */ public
 String getPortRef() {
    return libsbmlJNI.SBaseRef_getPortRef(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link SBaseRef}'s 'portRef' attribute has been set.
   <p>
   * @return <code>true</code> if this {@link SBaseRef}'s 'portRef' attribute has been set, 
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetPortRef() {
    return libsbmlJNI.SBaseRef_isSetPortRef(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'portRef' attribute of this {@link SBaseRef}.  Fails if
   * the id is not a valid syntax for a <code>PortSIdRef</code> ({@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}), or if the {@link SBaseRef} already
   * points to an element of the submodel using a different interface ({@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}).  An {@link SBaseRef} must use exactly one
   * method to point to a submodel element.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int setPortRef(String id) {
    return libsbmlJNI.SBaseRef_setPortRef(swigCPtr, this, id);
  }

  
/**
   * Unsets the value of the 'portRef' attribute of this {@link SBaseRef}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetPortRef() {
    return libsbmlJNI.SBaseRef_unsetPortRef(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'idRef' attribute of this {@link SBaseRef}.
   <p>
   * @return the value of the 'idRef' attribute of this {@link SBaseRef}.
   */ public
 String getIdRef() {
    return libsbmlJNI.SBaseRef_getIdRef(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link SBaseRef}'s 'idRef' attribute has been set.
   <p>
   * @return <code>true</code> if this {@link SBaseRef}'s 'idRef' attribute has been set, 
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetIdRef() {
    return libsbmlJNI.SBaseRef_isSetIdRef(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'idRef' attribute of this {@link SBaseRef}.
   <p>
   * This method fails if the id is not a valid syntax for an <code>SIdRef</code> ({@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}), or if the {@link SBaseRef} already
   * points to an element of the submodel using a different interface ({@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}).  A sBaseRef must use exactly one
   * method to point to a submodel element.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int setIdRef(String id) {
    return libsbmlJNI.SBaseRef_setIdRef(swigCPtr, this, id);
  }

  
/**
   * Unsets the value of the 'idRef' attribute of this {@link SBaseRef}.
   <p>
   * <p>
 * <p>
 * The identifier given by an object's 'id' attribute value
 * is used to identify the object within the SBML model definition.
 * Other objects can refer to the component using this identifier.  The
 * data type of 'id' is always <code>SId</code> or a type derived
 * from that, such as <code>UnitSId</code>, depending on the object in 
 * question.  All data types are defined as follows:
 * <pre style='margin-left: 2em; border: none; font-weight: bold; color: black'>
 *   letter .= 'a'..'z','A'..'Z'
 *   digit  .= '0'..'9'
 *   idChar .= letter | digit | '_'
 *   SId    .= ( letter | '_' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping,
 * the character <code>*</code> 'zero or more times', and the character
 * <code>|</code> indicates logical 'or'.  The equality of SBML identifiers
 * is determined by an exact character sequence match; i.e., comparisons must
 * be performed in a case-sensitive manner.  This applies to all uses of
 * <code>SId</code>, <code>SIdRef</code>, and derived types.
 <p>
 * Users need to be aware of some important API issues that are the result of
 * the history of SBML and libSBML.  Prior to SBML Level&nbsp;3
 * Version&nbsp;2, SBML defined 'id' and 'name' attributes on only a subset
 * of SBML objects.  To simplify the work of programmers, libSBML's API
 * provided get, set, check, and unset on the {@link SBase} object class itself
 * instead of on individual subobject classes. This made the
 * get/set/etc. methods uniformly available on all objects in the libSBML
 * API.  LibSBML simply returned empty strings or otherwise did not act when
 * the methods were applied to SBML objects that were not defined by the SBML
 * specification to have 'id' or 'name' attributes.  Additional complications
 * arose with the rule and assignment objects: {@link InitialAssignment},
 * {@link EventAssignment}, {@link AssignmentRule}, and {@link RateRule}.  In early versions of SBML,
 * the rule object hierarchy was different, and in addition, then as now,
 * they possess different attributes: 'variable' (for the rules and event
 * assignments), 'symbol' (for initial assignments), or neither (for
 * algebraic rules).  Prior to SBML Level&nbsp;3 Version&nbsp;2, getId()
 * would always return an empty string, and isSetId() would always return 
 * <code>false</code> for objects of these classes.
 <p>
 * With the addition of 'id' and 'name' attributes on {@link SBase} in Level&nbsp;3
 * Version&nbsp;2, it became necessary to introduce a new way to interact
 * with the attributes more consistently in libSBML to avoid breaking
 * backward compatibility in the behavior of the original 'id' methods.  For
 * this reason, libSBML provides four functions (getIdAttribute(),
 * setIdAttribute(String), isSetIdAttribute(), and
 * unsetIdAttribute()) that always act on the actual 'id' attribute inherited
 * from {@link SBase}, regardless of the object's type.  <strong>These new methods
 * should be used instead of the older getId()/setId()/etc. methods</strong>
 * unless the old behavior is somehow necessary.  Regardless of the Level and
 * Version of the SBML, these functions allow client applications to use more
 * generalized code in some situations (for instance, when manipulating
 * objects that are all known to have identifiers).  If the object in
 * question does not posess an 'id' attribute according to the SBML
 * specification for the Level and Version in use, libSBML will not allow the
 * identifier to be set, nor will it read or write 'id' attributes for those
 * objects.
 <p>
 * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
 * <ul>
 * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
 * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
 *
 * </ul> <p>
 * @see #getIdAttribute()
 * @see #setIdAttribute(String sid)
 * @see #isSetIdAttribute()
 * @see #unsetIdAttribute()
   */ public
 int unsetIdRef() {
    return libsbmlJNI.SBaseRef_unsetIdRef(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'unitRef' attribute of this {@link SBaseRef}.
   <p>
   * @return the value of the 'unitRef' attribute of this {@link SBaseRef}.
   */ public
 String getUnitRef() {
    return libsbmlJNI.SBaseRef_getUnitRef(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link SBaseRef}'s 'unitRef' attribute has been set.
   <p>
   * @return <code>true</code> if this {@link SBaseRef}'s 'unitRef' attribute has been set, 
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetUnitRef() {
    return libsbmlJNI.SBaseRef_isSetUnitRef(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'unitRef' attribute of this {@link SBaseRef}.
   <p>
   * This method fails if the id is not a valid syntax for a <code>UnitSIdRef</code> ({@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}), or if the {@link SBaseRef} already
   * points to an element of the submodel using a different interface ({@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}).  A sBaseRef must use exactly one
   * method to point to a submodel element.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int setUnitRef(String id) {
    return libsbmlJNI.SBaseRef_setUnitRef(swigCPtr, this, id);
  }

  
/**
   * Unsets the value of the 'unitRef' attribute of this {@link SBaseRef}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetUnitRef() {
    return libsbmlJNI.SBaseRef_unsetUnitRef(swigCPtr, this);
  }

  
/**
   * Get the child sBaseRef of this sBaseRef.
   <p>
   * @return the  {@link SBaseRef} child of this {@link SBaseRef}, or <code>null</code> if none exists.
   */ public
 SBaseRef getSBaseRef() {
    long cPtr = libsbmlJNI.SBaseRef_getSBaseRef__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new SBaseRef(cPtr, false);
  }

  
/**
   * Predicate for testing whether the sBaseRef for this {@link SBaseRef} is set.
   <p>
   * @return <code>true</code> if the sBaseRef of this {@link SBaseRef} is set, <code>false</code>
   * otherwise.
   */ public
 boolean isSetSBaseRef() {
    return libsbmlJNI.SBaseRef_isSetSBaseRef(swigCPtr, this);
  }

  
/**
   * Sets the sBaseRef definition of this {@link SBaseRef} to a copy of the given
   * {@link SBaseRef} object instance.
   <p>
   * This method fails if the added sBaseRef does not match the
   * level/version/package of the parent object or if the added sBaseRef cannot
   * be copied.
   <p>
   * @param sBaseRef the {@link SBaseRef} object instance to use.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH}
   * </ul>
   */ public
 int setSBaseRef(SBaseRef sBaseRef) {
    return libsbmlJNI.SBaseRef_setSBaseRef(swigCPtr, this, SBaseRef.getCPtr(sBaseRef), sBaseRef);
  }

  
/**
   * Creates a new, empty {@link SBaseRef}, adds it to this {@link SBaseRef} and 
   * returns the created {@link SBaseRef}.
   <p>
   * @return the newly created {@link SBaseRef} object instance.
   */ public
 SBaseRef createSBaseRef() {
    long cPtr = libsbmlJNI.SBaseRef_createSBaseRef(swigCPtr, this);
    return (cPtr == 0) ? null : new SBaseRef(cPtr, false);
  }

  
/**
   * Unsets the child {@link SBaseRef} of this {@link SBaseRef}.  Deletes the former {@link SBaseRef} child,
   * if one existed.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetSBaseRef() {
    return libsbmlJNI.SBaseRef_unsetSBaseRef(swigCPtr, this);
  }

  
/**
   * Returns how many elements are being referred to by this {@link SBaseRef}.  A
   * valid {@link SBaseRef} will have exactly one.  Possible referents are portRef,
   * idRef, unitRef, and metaIdRef.
   <p>
   * @return integer value between 0 and 4: the number of different ways this element points to its referent.
   */ public
 int getNumReferents() {
    return libsbmlJNI.SBaseRef_getNumReferents(swigCPtr, this);
  }

  
/**
   * Returns <code>true</code> if getNumReferents() is exactly 1.
   <p>
   * @return boolean: 'true' if the attributes are correctly set; 'false' if not.
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.SBaseRef_hasRequiredAttributes(swigCPtr, this);
  }

  
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as 'referring to an identifier', but the effective
 * data type was the same as <code>SIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier.
 * @param newid the new identifier.
   */ public
 void renameSIdRefs(String oldid, String newid) {
    libsbmlJNI.SBaseRef_renameSIdRefs(swigCPtr, this, oldid, newid);
  }

  
/**
   * Returns the XML element name of
   * this SBML object.
   <p>
   * @return the name of this element, as a text string.
   */ public
 String getElementName() {
    return libsbmlJNI.SBaseRef_getElementName(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code of this object instance.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_COMP_SBASEREF SBML_COMP_SBASEREF}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.SBaseRef_getTypeCode(swigCPtr, this);
  }

  public void connectToChild() {
    libsbmlJNI.SBaseRef_connectToChild(swigCPtr, this);
  }

  
/**
   * Examines the referenced {@link Model} for the referenced object, and returns it, if found.
   <p>
   * @param model the {@link Model} in which to look for the object referenced by
   * this {@link SBaseRef}.
   <p>
   * @return the element in the referenced {@link Model} to which this {@link SBaseRef}
   * refers.  If this object references an object in a {@link Submodel}, the returned
   * object will be in the instantiated {@link Model} in that {@link Submodel}.
   */ public
 SBase getReferencedElementFrom(Model model) {
  return libsbml.DowncastSBase(libsbmlJNI.SBaseRef_getReferencedElementFrom(swigCPtr, this, Model.getCPtr(model), model), false);
}

  
/**
   * Finds and stores the referenced object by finding the {@link Model} it needs to
   * point to, calling 'saveReferencedElement' on its parent (which will also
   * be a {@link SBaseRef} or one of its subclasses), and the storing the result.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int saveReferencedElement() {
    return libsbmlJNI.SBaseRef_saveReferencedElement(swigCPtr, this);
  }

  
/**
   * Returns the object pointed to by this element.  If that element was
   * previously found and set with 'saveReferencedElement', that element is
   * returned; otherwise, 'saveReferencedElement' is called first, and the
   * found element is returned.
   */ public
 SBase getReferencedElement() {
  return libsbml.DowncastSBase(libsbmlJNI.SBaseRef_getReferencedElement(swigCPtr, this), false);
}

  
/**
   * Removes the saved referenced element, if it had been saved earlier.
   */ public
 void clearReferencedElement() {
    libsbmlJNI.SBaseRef_clearReferencedElement(swigCPtr, this);
  }

  
/**
   * DEPRECATED FUNCTION:  DO NOT USE
   <p>
   * Deletes the referenced object,
   * plus any other elements that element points to through {@link ReplacedElement}
   * or {@link ReplacedBy} children.  Instead of calling this function directly, use
   * 'CompModelPlugin.instantiateSubmodels' instead, which deals with all the
   * intricacies of replacements and deletions, and gives you access to the
   * non-flattened hierarchical form of the model.
   */ public
 int performDeletion() {
    return libsbmlJNI.SBaseRef_performDeletion(swigCPtr, this);
  }

  
/**
   * Finds this {@link SBaseRef}'s parent, which can either be a List or can be
   * another {@link SBaseRef}, and tells it to remove this.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int removeFromParentAndDelete() {
    return libsbmlJNI.SBaseRef_removeFromParentAndDelete(swigCPtr, this);
  }

}
