/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 Encoding of default values.
 <p>
 * The SBMl Render package originally (pre-SBML Level 3) specified default
 * values and inheritance in a similar fashion to the specification used by
 * SVG. However, in order to comply with the SBML development guidelines for
 * Level&nbsp;3 packages, the Render package specification introduced a new
 * class of objects, {@link DefaultValues}, to encode these values within a
 * model. The {@link DefaultValues} class objets can occur as a child of either the
 * {@link ListOfGlobalRenderInformation} or a {@link ListOfLocalRenderInformation}.
 <p>
 * The values from {@link DefaultValues} objects are to be taken as default source
 * for the values of any optional attribute that is not explicitly declared.
 * If an attribute has not been declared, either explicitly on an element or
 * using the {@link DefaultValues} class then software reading the XML may chose how
 * they handle the attribute.  Please see the SBML Level&nbsp;3 Render package
 * specification for more information.
 <p>
 * Note that the {@link DefaultValues} associated with a {@link ListOfLocalRenderInformation}
 * will override {@link DefaultValues} declared on the {@link ListOfGlobalRenderInformation}.
 */

public class DefaultValues extends SBase {
   private long swigCPtr;

   protected DefaultValues(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.DefaultValues_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(DefaultValues obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (DefaultValues obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_DefaultValues(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a {@link DefaultValues} object using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link DefaultValues}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link DefaultValues}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link DefaultValues}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 DefaultValues(long level, long version, long pkgVersion) {
    this(libsbmlJNI.new_DefaultValues__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a {@link DefaultValues} object using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link DefaultValues}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link DefaultValues}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link DefaultValues}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 DefaultValues(long level, long version) {
    this(libsbmlJNI.new_DefaultValues__SWIG_1(level, version), true);
  }

  
/**
   * Creates a {@link DefaultValues} object using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link DefaultValues}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link DefaultValues}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link DefaultValues}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 DefaultValues(long level) {
    this(libsbmlJNI.new_DefaultValues__SWIG_2(level), true);
  }

  
/**
   * Creates a {@link DefaultValues} object using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link DefaultValues}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link DefaultValues}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link DefaultValues}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 DefaultValues() {
    this(libsbmlJNI.new_DefaultValues__SWIG_3(), true);
  }

  
/**
   * Creates a {@link DefaultValues} object using the given {@link RenderPkgNamespaces}
   * object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param renderns the {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 DefaultValues(RenderPkgNamespaces renderns) {
    this(libsbmlJNI.new_DefaultValues__SWIG_4(RenderPkgNamespaces.getCPtr(renderns), renderns), true);
  }

  
/**
   * Copy constructor for {@link DefaultValues}.
   <p>
   * @param orig the {@link DefaultValues} instance to copy.
   */ public
 DefaultValues(DefaultValues orig) {
    this(libsbmlJNI.new_DefaultValues__SWIG_5(DefaultValues.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link DefaultValues} object.
   <p>
   * @return a (deep) copy of this {@link DefaultValues} object.
   */ public
 SBase cloneObject() {
    long cPtr = libsbmlJNI.DefaultValues_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new DefaultValues(cPtr, true);
  }

  
/**
   * Returns the value of the 'backgroundColor' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @return the value of the 'backgroundColor' attribute of this
   * {@link DefaultValues} as a string.
   */ public
 String getBackgroundColor() {
    return libsbmlJNI.DefaultValues_getBackgroundColor(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'spreadMethod' attribute of this {@link DefaultValues}
   * object.
   <p>
   * @return the value of the 'spreadMethod' attribute of this {@link DefaultValues}
   * object as a GradientBase.SPREADMETHOD.
   */ public
 int getSpreadMethod() {
    return libsbmlJNI.DefaultValues_getSpreadMethod(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'spreadMethod' attribute of this {@link DefaultValues}
   * object.
   <p>
   * @return the value of the 'spreadMethod' attribute of this {@link DefaultValues}
   * object as a string.
   */ public
 String getSpreadMethodAsString() {
    return libsbmlJNI.DefaultValues_getSpreadMethodAsString(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'linearGradient_x1' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @return the value of the 'linearGradient_x1' attribute of this
   * {@link DefaultValues} object as a string.
   */ public
 RelAbsVector getLinearGradient_x1() {
    return new RelAbsVector(libsbmlJNI.DefaultValues_getLinearGradient_x1(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'linearGradient_y1' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @return the value of the 'linearGradient_y1' attribute of this
   * {@link DefaultValues} object as a string.
   */ public
 RelAbsVector getLinearGradient_y1() {
    return new RelAbsVector(libsbmlJNI.DefaultValues_getLinearGradient_y1(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'linearGradient_z1' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @return the value of the 'linearGradient_z1' attribute of this
   * {@link DefaultValues} object as a string.
   */ public
 RelAbsVector getLinearGradient_z1() {
    return new RelAbsVector(libsbmlJNI.DefaultValues_getLinearGradient_z1(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'linearGradient_x2' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @return the value of the 'linearGradient_x2' attribute of this
   * {@link DefaultValues} object as a string.
   */ public
 RelAbsVector getLinearGradient_x2() {
    return new RelAbsVector(libsbmlJNI.DefaultValues_getLinearGradient_x2(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'linearGradient_y2' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @return the value of the 'linearGradient_y2' attribute of this
   * {@link DefaultValues} object as a string.
   */ public
 RelAbsVector getLinearGradient_y2() {
    return new RelAbsVector(libsbmlJNI.DefaultValues_getLinearGradient_y2(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'linearGradient_z2' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @return the value of the 'linearGradient_z2' attribute of this
   * {@link DefaultValues} object as a string.
   */ public
 RelAbsVector getLinearGradient_z2() {
    return new RelAbsVector(libsbmlJNI.DefaultValues_getLinearGradient_z2(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'radialGradient_cx' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @return the value of the 'radialGradient_cx' attribute of this
   * {@link DefaultValues} object as a string.
   */ public
 RelAbsVector getRadialGradient_cx() {
    return new RelAbsVector(libsbmlJNI.DefaultValues_getRadialGradient_cx(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'radialGradient_cy' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @return the value of the 'radialGradient_cy' attribute of this
   * {@link DefaultValues} object as a string.
   */ public
 RelAbsVector getRadialGradient_cy() {
    return new RelAbsVector(libsbmlJNI.DefaultValues_getRadialGradient_cy(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'radialGradient_cz' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @return the value of the 'radialGradient_cz' attribute of this
   * {@link DefaultValues} object as a string.
   */ public
 RelAbsVector getRadialGradient_cz() {
    return new RelAbsVector(libsbmlJNI.DefaultValues_getRadialGradient_cz(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'radialGradient_r' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @return the value of the 'radialGradient_r' attribute of this
   * {@link DefaultValues} object as a string.
   */ public
 RelAbsVector getRadialGradient_r() {
    return new RelAbsVector(libsbmlJNI.DefaultValues_getRadialGradient_r(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'radialGradient_fx' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @return the value of the 'radialGradient_fx' attribute of this
   * {@link DefaultValues} object as a string.
   */ public
 RelAbsVector getRadialGradient_fx() {
    return new RelAbsVector(libsbmlJNI.DefaultValues_getRadialGradient_fx(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'radialGradient_fy' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @return the value of the 'radialGradient_fy' attribute of this
   * {@link DefaultValues} object as a string.
   */ public
 RelAbsVector getRadialGradient_fy() {
    return new RelAbsVector(libsbmlJNI.DefaultValues_getRadialGradient_fy(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'radialGradient_fz' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @return the value of the 'radialGradient_fz' attribute of this
   * {@link DefaultValues} object as a string.
   */ public
 RelAbsVector getRadialGradient_fz() {
    return new RelAbsVector(libsbmlJNI.DefaultValues_getRadialGradient_fz(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'fill' attribute of this {@link DefaultValues} object.
   <p>
   * @return the value of the 'fill' attribute of this {@link DefaultValues} object
   * as a string.
   */ public
 String getFill() {
    return libsbmlJNI.DefaultValues_getFill(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'fill-rule' attribute of this {@link DefaultValues} object.
   <p>
   * <p>
 * The attribute 'fill-rule' is used to define how polygons should be filled.
 * In the SBML Level&nbsp;3 Version&nbsp;1 Render specification, the 
 * following are the allowable values for 'fill-rule':
 * <ul>
 * <li> <code>'nonzero':</code> This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and then examining the places where a segment of the shape crosses the ray. 
 * Starting with a count of zero, add one each time a path segment crosses 
 * the ray from left to right and subtract one each time a path segment crosses 
 * the ray from right to left. After counting the crossings, if the result is 
 * zero then the point is outside the path. Otherwise, it is inside.
 <p>
 * <li> <code>'evenodd':</code>  This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and counting the number of path segments from the given shape that the ray
 * crosses. If this number is odd, the point is inside; if even, the point is 
 * outside.
 <p>
 * <li> <code>'inherit':</code> This value declares the 'insideness' of a point 
 * in the shape by declaring that the property takes the same computed value 
 * as the property for the element's parent. The inherited value, which is 
 * normally only used as a fallback value, can be clarified by setting 
 * 'inherit' explicitly.  NOTE:  This value is NOT in the Level&nbsp;3 
 * Version&nbsp;1 Render specification, but was left out due to an oversight:
 * the value has long been part of the codebase.  It is provided here as
 * a convenience.  Elements with a fill-rule set to 'inherit' actually
 * behave identicaly to elements without a fill-rule attribute at all, since
 * this attribute always takes the value of a parent element if not 
 * defined explicitly.
 <p>
 * </ul>
   <p>
   * @return the value of the 'fill-rule' attribute of this {@link DefaultValues}
   * object as an int value.
   */ public
 int getFillRule() {
    return libsbmlJNI.DefaultValues_getFillRule(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'fill-rule' attribute of this {@link DefaultValues} object.
   <p>
   * <p>
 * The attribute 'fill-rule' is used to define how polygons should be filled.
 * In the SBML Level&nbsp;3 Version&nbsp;1 Render specification, the 
 * following are the allowable values for 'fill-rule':
 * <ul>
 * <li> <code>'nonzero':</code> This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and then examining the places where a segment of the shape crosses the ray. 
 * Starting with a count of zero, add one each time a path segment crosses 
 * the ray from left to right and subtract one each time a path segment crosses 
 * the ray from right to left. After counting the crossings, if the result is 
 * zero then the point is outside the path. Otherwise, it is inside.
 <p>
 * <li> <code>'evenodd':</code>  This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and counting the number of path segments from the given shape that the ray
 * crosses. If this number is odd, the point is inside; if even, the point is 
 * outside.
 <p>
 * <li> <code>'inherit':</code> This value declares the 'insideness' of a point 
 * in the shape by declaring that the property takes the same computed value 
 * as the property for the element's parent. The inherited value, which is 
 * normally only used as a fallback value, can be clarified by setting 
 * 'inherit' explicitly.  NOTE:  This value is NOT in the Level&nbsp;3 
 * Version&nbsp;1 Render specification, but was left out due to an oversight:
 * the value has long been part of the codebase.  It is provided here as
 * a convenience.  Elements with a fill-rule set to 'inherit' actually
 * behave identicaly to elements without a fill-rule attribute at all, since
 * this attribute always takes the value of a parent element if not 
 * defined explicitly.
 <p>
 * </ul>
   <p>
   * @return the value of the 'fill-rule' attribute of this {@link DefaultValues}
   * object as a string.
   */ public
 String getFillRuleAsString() {
    return libsbmlJNI.DefaultValues_getFillRuleAsString(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'default_z' attribute of this {@link DefaultValues} object.
   <p>
   * @return the value of the 'default_z' attribute of this {@link DefaultValues}
   * object as a string.
   */ public
 RelAbsVector getDefault_z() {
    return new RelAbsVector(libsbmlJNI.DefaultValues_getDefault_z(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'stroke' attribute of this {@link DefaultValues} object.
   <p>
   * @return the value of the 'stroke' attribute of this {@link DefaultValues} object
   * as a string.
   */ public
 String getStroke() {
    return libsbmlJNI.DefaultValues_getStroke(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'stroke-width' attribute of this {@link DefaultValues} object.
   <p>
   * @return the value of the 'stroke-width' attribute of this {@link DefaultValues}
   * object as a string.
   */ public
 double getStrokeWidth() {
    return libsbmlJNI.DefaultValues_getStrokeWidth(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'font-family' attribute of this {@link DefaultValues} object.
   <p>
   * @return the value of the 'font-family' attribute of this {@link DefaultValues}
   * object as a string.
   */ public
 String getFontFamily() {
    return libsbmlJNI.DefaultValues_getFontFamily(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'font-size' attribute of this {@link DefaultValues} object.
   <p>
   * @return the value of the 'font-size' attribute of this {@link DefaultValues}
   * object as a string.
   */ public
 RelAbsVector getFontSize() {
    return new RelAbsVector(libsbmlJNI.DefaultValues_getFontSize(swigCPtr, this), false);
  }

  
/**
   * Returns the value of the 'font-weight' attribute of this {@link DefaultValues} object.
   <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   <p>
   * @return the value of the 'font-weight' attribute of this {@link DefaultValues}
   * object as a Text.FONT_WEIGHT.
   */ public
 int getFontWeight() {
    return libsbmlJNI.DefaultValues_getFontWeight(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'font-weight' attribute of this {@link DefaultValues} object.
   <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   <p>
   * @return the value of the 'font-weight' attribute of this {@link DefaultValues}
   * object as a string.
   */ public
 String getFontWeightAsString() {
    return libsbmlJNI.DefaultValues_getFontWeightAsString(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'font-style' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   <p>
   * @return the value of the 'font-style' attribute of this {@link DefaultValues}
   * object as a Text.FONT_STYLE.
   */ public
 int getFontStyle() {
    return libsbmlJNI.DefaultValues_getFontStyle(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'font-style' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   <p>
   * @return the value of the 'font-style' attribute of this {@link DefaultValues}
   * object as a string.
   */ public
 String getFontStyleAsString() {
    return libsbmlJNI.DefaultValues_getFontStyleAsString(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'text-anchor' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   <p>
   * @return the value of the 'text-anchor' attribute of this {@link DefaultValues}
   * object as a Text.TEXT_ANCHOR.
   */ public
 int getTextAnchor() {
    return libsbmlJNI.DefaultValues_getTextAnchor(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'text-anchor' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   <p>
   * @return the value of the 'text-anchor' attribute of this {@link DefaultValues}
   * object as a string.
   */ public
 String getTextAnchorAsString() {
    return libsbmlJNI.DefaultValues_getTextAnchorAsString(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'vtext-anchor' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   <p>
   * @return the value of the 'vtext-anchor' attribute of this {@link DefaultValues}
   * object as a {@link VTextAnchor_t}.
   */ public
 int getVTextAnchor() {
    return libsbmlJNI.DefaultValues_getVTextAnchor(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'vtext-anchor' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   <p>
   * @return the value of the 'vtext-anchor' attribute of this {@link DefaultValues}
   * object as a string.
   */ public
 String getVTextAnchorAsString() {
    return libsbmlJNI.DefaultValues_getVTextAnchorAsString(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'startHead' attribute of this {@link DefaultValues}
   * object.
   <p>
   * @return the value of the 'startHead' attribute of this {@link DefaultValues}
   * object as a string.
   */ public
 String getStartHead() {
    return libsbmlJNI.DefaultValues_getStartHead(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'endHead' attribute of this {@link DefaultValues}
   * object.
   <p>
   * @return the value of the 'endHead' attribute of this {@link DefaultValues}
   * object as a string.
   */ public
 String getEndHead() {
    return libsbmlJNI.DefaultValues_getEndHead(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'enableRotationalMapping' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @return the value of the 'enableRotationalMapping' attribute of this
   * {@link DefaultValues} object as a boolean.
   */ public
 boolean getEnableRotationalMapping() {
    return libsbmlJNI.DefaultValues_getEnableRotationalMapping(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'backgroundColor' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'backgroundColor'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetBackgroundColor() {
    return libsbmlJNI.DefaultValues_isSetBackgroundColor(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'spreadMethod' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'spreadMethod' attribute
   * has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetSpreadMethod() {
    return libsbmlJNI.DefaultValues_isSetSpreadMethod(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'linearGradient_x1' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'linearGradient_x1'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetLinearGradient_x1() {
    return libsbmlJNI.DefaultValues_isSetLinearGradient_x1(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'linearGradient_y1' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'linearGradient_y1'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetLinearGradient_y1() {
    return libsbmlJNI.DefaultValues_isSetLinearGradient_y1(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'linearGradient_z1' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'linearGradient_z1'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetLinearGradient_z1() {
    return libsbmlJNI.DefaultValues_isSetLinearGradient_z1(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'linearGradient_x2' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'linearGradient_x2'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetLinearGradient_x2() {
    return libsbmlJNI.DefaultValues_isSetLinearGradient_x2(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'linearGradient_y2' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'linearGradient_y2'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetLinearGradient_y2() {
    return libsbmlJNI.DefaultValues_isSetLinearGradient_y2(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'linearGradient_z2' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'linearGradient_z2'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetLinearGradient_z2() {
    return libsbmlJNI.DefaultValues_isSetLinearGradient_z2(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'radialGradient_cx' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'radialGradient_cx'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetRadialGradient_cx() {
    return libsbmlJNI.DefaultValues_isSetRadialGradient_cx(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'radialGradient_cy' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'radialGradient_cy'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetRadialGradient_cy() {
    return libsbmlJNI.DefaultValues_isSetRadialGradient_cy(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'radialGradient_cz' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'radialGradient_cz'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetRadialGradient_cz() {
    return libsbmlJNI.DefaultValues_isSetRadialGradient_cz(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'radialGradient_r' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'radialGradient_r'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetRadialGradient_r() {
    return libsbmlJNI.DefaultValues_isSetRadialGradient_r(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'radialGradient_fx' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'radialGradient_fx'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetRadialGradient_fx() {
    return libsbmlJNI.DefaultValues_isSetRadialGradient_fx(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'radialGradient_fy' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'radialGradient_fy'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetRadialGradient_fy() {
    return libsbmlJNI.DefaultValues_isSetRadialGradient_fy(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'radialGradient_fz' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'radialGradient_fz'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetRadialGradient_fz() {
    return libsbmlJNI.DefaultValues_isSetRadialGradient_fz(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's 'fill'
   * attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'fill' attribute has been
   * set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetFill() {
    return libsbmlJNI.DefaultValues_isSetFill(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's 'fill-rule'
   * attribute is set.
   <p>
   * <p>
 * The attribute 'fill-rule' is used to define how polygons should be filled.
 * In the SBML Level&nbsp;3 Version&nbsp;1 Render specification, the 
 * following are the allowable values for 'fill-rule':
 * <ul>
 * <li> <code>'nonzero':</code> This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and then examining the places where a segment of the shape crosses the ray. 
 * Starting with a count of zero, add one each time a path segment crosses 
 * the ray from left to right and subtract one each time a path segment crosses 
 * the ray from right to left. After counting the crossings, if the result is 
 * zero then the point is outside the path. Otherwise, it is inside.
 <p>
 * <li> <code>'evenodd':</code>  This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and counting the number of path segments from the given shape that the ray
 * crosses. If this number is odd, the point is inside; if even, the point is 
 * outside.
 <p>
 * <li> <code>'inherit':</code> This value declares the 'insideness' of a point 
 * in the shape by declaring that the property takes the same computed value 
 * as the property for the element's parent. The inherited value, which is 
 * normally only used as a fallback value, can be clarified by setting 
 * 'inherit' explicitly.  NOTE:  This value is NOT in the Level&nbsp;3 
 * Version&nbsp;1 Render specification, but was left out due to an oversight:
 * the value has long been part of the codebase.  It is provided here as
 * a convenience.  Elements with a fill-rule set to 'inherit' actually
 * behave identicaly to elements without a fill-rule attribute at all, since
 * this attribute always takes the value of a parent element if not 
 * defined explicitly.
 <p>
 * </ul>
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'fill-rule' attribute has
   * been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetFillRule() {
    return libsbmlJNI.DefaultValues_isSetFillRule(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's 'default_z'
   * attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'default_z' attribute has
   * been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetDefault_z() {
    return libsbmlJNI.DefaultValues_isSetDefault_z(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's 'stroke'
   * attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'stroke' attribute has
   * been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetStroke() {
    return libsbmlJNI.DefaultValues_isSetStroke(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's 'stroke-width'
   * attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'stroke-width' attribute
   * has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetStrokeWidth() {
    return libsbmlJNI.DefaultValues_isSetStrokeWidth(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's 'font-family'
   * attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'font-family' attribute
   * has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetFontFamily() {
    return libsbmlJNI.DefaultValues_isSetFontFamily(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's 'font-size'
   * attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'font-size' attribute has
   * been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetFontSize() {
    return libsbmlJNI.DefaultValues_isSetFontSize(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's 'font-weight'
   * attribute is set.
   <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'font-weight' attribute
   * has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetFontWeight() {
    return libsbmlJNI.DefaultValues_isSetFontWeight(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's 'font-style'
   * attribute is set.
   <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'font-style' attribute
   * has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetFontStyle() {
    return libsbmlJNI.DefaultValues_isSetFontStyle(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's 'text-anchor'
   * attribute is set.
   <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'text-anchor' attribute
   * has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetTextAnchor() {
    return libsbmlJNI.DefaultValues_isSetTextAnchor(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'vtext-anchor' attribute is set.
   <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'vtext-anchor' attribute
   * has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetVTextAnchor() {
    return libsbmlJNI.DefaultValues_isSetVTextAnchor(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's 'startHead'
   * attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'startHead' attribute has
   * been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetStartHead() {
    return libsbmlJNI.DefaultValues_isSetStartHead(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's 'endHead'
   * attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'endHead' attribute has
   * been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetEndHead() {
    return libsbmlJNI.DefaultValues_isSetEndHead(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link DefaultValues} object's
   * 'enableRotationalMapping' attribute is set.
   <p>
   * @return <code>true</code> if this {@link DefaultValues} object's 'enableRotationalMapping'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetEnableRotationalMapping() {
    return libsbmlJNI.DefaultValues_isSetEnableRotationalMapping(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'backgroundColor' attribute of this {@link DefaultValues}
   * object.
   <p>
   * @param backgroundColor String& value of the 'backgroundColor'
   * attribute to be set.
   <p>
   * Calling this function with <code>backgroundColor</code> = <code>null</code> or an empty
   * string is equivalent to calling unsetBackgroundColor().
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setBackgroundColor(String backgroundColor) {
    return libsbmlJNI.DefaultValues_setBackgroundColor(swigCPtr, this, backgroundColor);
  }

  
/**
   * Sets the value of the 'spreadMethod' attribute of this {@link DefaultValues}
   * object.
   <p>
   * @param spreadMethod * int value of the 'spreadMethod' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   <p>
   * </ul>
   */ public
 int setSpreadMethod(int spreadMethod) {
    return libsbmlJNI.DefaultValues_setSpreadMethod__SWIG_0(swigCPtr, this, spreadMethod);
  }

  
/**
   * Sets the value of the 'spreadMethod' attribute of this {@link DefaultValues} object.
   <p>
   * @param spreadMethod String& of the 'spreadMethod' attribute to be
   * set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   <p>
   * </ul>
   */ public
 int setSpreadMethod(String spreadMethod) {
    return libsbmlJNI.DefaultValues_setSpreadMethod__SWIG_2(swigCPtr, this, spreadMethod);
  }

  
/**
   * Sets the value of the 'linearGradient_x1' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @param linearGradient_x1 {@link RelAbsVector} value of the 'linearGradient_x1'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setLinearGradient_x1(RelAbsVector linearGradient_x1) {
    return libsbmlJNI.DefaultValues_setLinearGradient_x1(swigCPtr, this, RelAbsVector.getCPtr(linearGradient_x1), linearGradient_x1);
  }

  
/**
   * Sets the value of the 'linearGradient_y1' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @param linearGradient_y1 {@link RelAbsVector} value of the 'linearGradient_y1'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setLinearGradient_y1(RelAbsVector linearGradient_y1) {
    return libsbmlJNI.DefaultValues_setLinearGradient_y1(swigCPtr, this, RelAbsVector.getCPtr(linearGradient_y1), linearGradient_y1);
  }

  
/**
   * Sets the value of the 'linearGradient_z1' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @param linearGradient_z1 {@link RelAbsVector} value of the 'linearGradient_z1'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setLinearGradient_z1(RelAbsVector linearGradient_z1) {
    return libsbmlJNI.DefaultValues_setLinearGradient_z1(swigCPtr, this, RelAbsVector.getCPtr(linearGradient_z1), linearGradient_z1);
  }

  
/**
   * Sets the value of the 'linearGradient_x2' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @param linearGradient_x2 {@link RelAbsVector} value of the 'linearGradient_x2'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setLinearGradient_x2(RelAbsVector linearGradient_x2) {
    return libsbmlJNI.DefaultValues_setLinearGradient_x2(swigCPtr, this, RelAbsVector.getCPtr(linearGradient_x2), linearGradient_x2);
  }

  
/**
   * Sets the value of the 'linearGradient_y2' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @param linearGradient_y2 {@link RelAbsVector} value of the 'linearGradient_y2'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setLinearGradient_y2(RelAbsVector linearGradient_y2) {
    return libsbmlJNI.DefaultValues_setLinearGradient_y2(swigCPtr, this, RelAbsVector.getCPtr(linearGradient_y2), linearGradient_y2);
  }

  
/**
   * Sets the value of the 'linearGradient_z2' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @param linearGradient_z2 {@link RelAbsVector} value of the 'linearGradient_z2'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setLinearGradient_z2(RelAbsVector linearGradient_z2) {
    return libsbmlJNI.DefaultValues_setLinearGradient_z2(swigCPtr, this, RelAbsVector.getCPtr(linearGradient_z2), linearGradient_z2);
  }

  
/**
   * Sets the value of the 'radialGradient_cx' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @param radialGradient_cx {@link RelAbsVector} value of the 'radialGradient_cx'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setRadialGradient_cx(RelAbsVector radialGradient_cx) {
    return libsbmlJNI.DefaultValues_setRadialGradient_cx(swigCPtr, this, RelAbsVector.getCPtr(radialGradient_cx), radialGradient_cx);
  }

  
/**
   * Sets the value of the 'radialGradient_cy' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @param radialGradient_cy {@link RelAbsVector} value of the 'radialGradient_cy'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setRadialGradient_cy(RelAbsVector radialGradient_cy) {
    return libsbmlJNI.DefaultValues_setRadialGradient_cy(swigCPtr, this, RelAbsVector.getCPtr(radialGradient_cy), radialGradient_cy);
  }

  
/**
   * Sets the value of the 'radialGradient_cz' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @param radialGradient_cz {@link RelAbsVector} value of the 'radialGradient_cz'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setRadialGradient_cz(RelAbsVector radialGradient_cz) {
    return libsbmlJNI.DefaultValues_setRadialGradient_cz(swigCPtr, this, RelAbsVector.getCPtr(radialGradient_cz), radialGradient_cz);
  }

  
/**
   * Sets the value of the 'radialGradient_r' attribute of this {@link DefaultValues}
   * object.
   <p>
   * @param radialGradient_r {@link RelAbsVector} value of the 'radialGradient_r'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setRadialGradient_r(RelAbsVector radialGradient_r) {
    return libsbmlJNI.DefaultValues_setRadialGradient_r(swigCPtr, this, RelAbsVector.getCPtr(radialGradient_r), radialGradient_r);
  }

  
/**
   * Sets the value of the 'radialGradient_fx' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @param radialGradient_fx {@link RelAbsVector} value of the 'radialGradient_fx'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setRadialGradient_fx(RelAbsVector radialGradient_fx) {
    return libsbmlJNI.DefaultValues_setRadialGradient_fx(swigCPtr, this, RelAbsVector.getCPtr(radialGradient_fx), radialGradient_fx);
  }

  
/**
   * Sets the value of the 'radialGradient_fy' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @param radialGradient_fy {@link RelAbsVector} value of the 'radialGradient_fy'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setRadialGradient_fy(RelAbsVector radialGradient_fy) {
    return libsbmlJNI.DefaultValues_setRadialGradient_fy(swigCPtr, this, RelAbsVector.getCPtr(radialGradient_fy), radialGradient_fy);
  }

  
/**
   * Sets the value of the 'radialGradient_fz' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @param radialGradient_fz {@link RelAbsVector} value of the 'radialGradient_fz'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setRadialGradient_fz(RelAbsVector radialGradient_fz) {
    return libsbmlJNI.DefaultValues_setRadialGradient_fz(swigCPtr, this, RelAbsVector.getCPtr(radialGradient_fz), radialGradient_fz);
  }

  
/**
   * Sets the value of the 'fill' attribute of this {@link DefaultValues} object.
   <p>
   * @param fill String& value of the 'fill' attribute to be set.
   <p>
   * Calling this function with <code>fill</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetFill().
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setFill(String fill) {
    return libsbmlJNI.DefaultValues_setFill(swigCPtr, this, fill);
  }

  
/**
   * Sets the value of the 'fill-rule' attribute of this {@link DefaultValues}
   * object.
   <p>
   * @param fillRule * int value of the 'fill-rule' attribute to be set.
   <p>
   * <p>
 * The attribute 'fill-rule' is used to define how polygons should be filled.
 * In the SBML Level&nbsp;3 Version&nbsp;1 Render specification, the 
 * following are the allowable values for 'fill-rule':
 * <ul>
 * <li> <code>'nonzero':</code> This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and then examining the places where a segment of the shape crosses the ray. 
 * Starting with a count of zero, add one each time a path segment crosses 
 * the ray from left to right and subtract one each time a path segment crosses 
 * the ray from right to left. After counting the crossings, if the result is 
 * zero then the point is outside the path. Otherwise, it is inside.
 <p>
 * <li> <code>'evenodd':</code>  This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and counting the number of path segments from the given shape that the ray
 * crosses. If this number is odd, the point is inside; if even, the point is 
 * outside.
 <p>
 * <li> <code>'inherit':</code> This value declares the 'insideness' of a point 
 * in the shape by declaring that the property takes the same computed value 
 * as the property for the element's parent. The inherited value, which is 
 * normally only used as a fallback value, can be clarified by setting 
 * 'inherit' explicitly.  NOTE:  This value is NOT in the Level&nbsp;3 
 * Version&nbsp;1 Render specification, but was left out due to an oversight:
 * the value has long been part of the codebase.  It is provided here as
 * a convenience.  Elements with a fill-rule set to 'inherit' actually
 * behave identicaly to elements without a fill-rule attribute at all, since
 * this attribute always takes the value of a parent element if not 
 * defined explicitly.
 <p>
 * </ul>
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setFillRule(int fillRule) {
    return libsbmlJNI.DefaultValues_setFillRule__SWIG_0(swigCPtr, this, fillRule);
  }

  
/**
   * Sets the value of the 'fill-rule' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'fill-rule' is used to define how polygons should be filled.
 * In the SBML Level&nbsp;3 Version&nbsp;1 Render specification, the 
 * following are the allowable values for 'fill-rule':
 * <ul>
 * <li> <code>'nonzero':</code> This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and then examining the places where a segment of the shape crosses the ray. 
 * Starting with a count of zero, add one each time a path segment crosses 
 * the ray from left to right and subtract one each time a path segment crosses 
 * the ray from right to left. After counting the crossings, if the result is 
 * zero then the point is outside the path. Otherwise, it is inside.
 <p>
 * <li> <code>'evenodd':</code>  This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and counting the number of path segments from the given shape that the ray
 * crosses. If this number is odd, the point is inside; if even, the point is 
 * outside.
 <p>
 * <li> <code>'inherit':</code> This value declares the 'insideness' of a point 
 * in the shape by declaring that the property takes the same computed value 
 * as the property for the element's parent. The inherited value, which is 
 * normally only used as a fallback value, can be clarified by setting 
 * 'inherit' explicitly.  NOTE:  This value is NOT in the Level&nbsp;3 
 * Version&nbsp;1 Render specification, but was left out due to an oversight:
 * the value has long been part of the codebase.  It is provided here as
 * a convenience.  Elements with a fill-rule set to 'inherit' actually
 * behave identicaly to elements without a fill-rule attribute at all, since
 * this attribute always takes the value of a parent element if not 
 * defined explicitly.
 <p>
 * </ul>
   <p>
   * @param fillRule String& of the 'fill-rule' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setFillRule(String fillRule) {
    return libsbmlJNI.DefaultValues_setFillRule__SWIG_2(swigCPtr, this, fillRule);
  }

  
/**
   * Sets the value of the 'default_z' attribute of this {@link DefaultValues}
   * object.
   <p>
   * @param default_z {@link RelAbsVector} value of the 'default_z' attribute to be
   * set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setDefault_z(RelAbsVector default_z) {
    return libsbmlJNI.DefaultValues_setDefault_z(swigCPtr, this, RelAbsVector.getCPtr(default_z), default_z);
  }

  
/**
   * Sets the value of the 'stroke' attribute of this {@link DefaultValues} object.
   <p>
   * @param stroke String& value of the 'stroke' attribute to be set.
   <p>
   * Calling this function with <code>stroke</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetStroke().
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setStroke(String stroke) {
    return libsbmlJNI.DefaultValues_setStroke(swigCPtr, this, stroke);
  }

  
/**
   * Sets the value of the 'stroke-width' attribute of this {@link DefaultValues}
   * object.
   <p>
   * @param strokeWidth String& value of the 'stroke-width' attribute to
   * be set.
   <p>
   * Calling this function with <code>strokeWidth</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetStrokeWidth().
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setStrokeWidth(double strokeWidth) {
    return libsbmlJNI.DefaultValues_setStrokeWidth(swigCPtr, this, strokeWidth);
  }

  
/**
   * Sets the value of the 'font-family' attribute of this {@link DefaultValues}
   * object.
   <p>
   * @param fontFamily String& value of the 'font-family' attribute to
   * be set.
   <p>
   * Calling this function with <code>fontFamily</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetFontFamily().
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setFontFamily(String fontFamily) {
    return libsbmlJNI.DefaultValues_setFontFamily(swigCPtr, this, fontFamily);
  }

  
/**
   * Sets the value of the 'font-size' attribute of this {@link DefaultValues}
   * object.
   <p>
   * @param fontSize {@link RelAbsVector} value of the 'font-size' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setFontSize(RelAbsVector fontSize) {
    return libsbmlJNI.DefaultValues_setFontSize(swigCPtr, this, RelAbsVector.getCPtr(fontSize), fontSize);
  }

  
/**
   * Sets the value of the 'font-weight' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   <p>
   * @param fontWeight int value of
   * the 'font-weight' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setFontWeight(int fontWeight) {
    return libsbmlJNI.DefaultValues_setFontWeight__SWIG_0(swigCPtr, this, fontWeight);
  }

  
/**
   * Sets the value of the 'font-weight' attribute of this {@link DefaultValues}.
   <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   <p>
   * @param fontWeight String& of the 'font-weight' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setFontWeight(String fontWeight) {
    return libsbmlJNI.DefaultValues_setFontWeight__SWIG_2(swigCPtr, this, fontWeight);
  }

  
/**
   * Sets the value of the 'font-style' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   <p>
   * @param fontStyle int value of the
   * 'font-style' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setFontStyle(int fontStyle) {
    return libsbmlJNI.DefaultValues_setFontStyle__SWIG_0(swigCPtr, this, fontStyle);
  }

  
/**
   * Sets the value of the 'font-style' attribute of this {@link DefaultValues}.
   <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   <p>
   * @param fontStyle String& of the 'font-style' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setFontStyle(String fontStyle) {
    return libsbmlJNI.DefaultValues_setFontStyle__SWIG_2(swigCPtr, this, fontStyle);
  }

  
/**
   * Sets the value of the 'text-anchor' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   <p>
   * @param textAnchor int value of the
   * 'text-anchor' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setTextAnchor(int textAnchor) {
    return libsbmlJNI.DefaultValues_setTextAnchor__SWIG_0(swigCPtr, this, textAnchor);
  }

  
/**
   * Sets the value of the 'text-anchor' attribute of this {@link DefaultValues}.
   <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   <p>
   * @param textAnchor String& of the 'text-anchor' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setTextAnchor(String textAnchor) {
    return libsbmlJNI.DefaultValues_setTextAnchor__SWIG_2(swigCPtr, this, textAnchor);
  }

  
/**
   * Sets the value of the 'vtext-anchor' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   <p>
   * @param vtextAnchor int value of the
   * 'vtext-anchor' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setVTextAnchor(int vtextAnchor) {
    return libsbmlJNI.DefaultValues_setVTextAnchor__SWIG_0(swigCPtr, this, vtextAnchor);
  }

  
/**
   * Sets the value of the 'vtext-anchor' attribute of this {@link DefaultValues}.
   <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   <p>
   * @param vtextAnchor String& of the 'vtext-anchor' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setVTextAnchor(String vtextAnchor) {
    return libsbmlJNI.DefaultValues_setVTextAnchor__SWIG_2(swigCPtr, this, vtextAnchor);
  }

  
/**
   * Sets the value of the 'startHead' attribute of this {@link DefaultValues}
   * object.
   <p>
   * @param startHead String& value of the 'startHead' attribute to be
   * set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setStartHead(String startHead) {
    return libsbmlJNI.DefaultValues_setStartHead(swigCPtr, this, startHead);
  }

  
/**
   * Sets the value of the 'endHead' attribute of this {@link DefaultValues} object.
   <p>
   * @param endHead String& value of the 'endHead' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setEndHead(String endHead) {
    return libsbmlJNI.DefaultValues_setEndHead(swigCPtr, this, endHead);
  }

  
/**
   * Sets the value of the 'enableRotationalMapping' attribute of this
   * {@link DefaultValues} object.
   <p>
   * @param enableRotationalMapping boolean value of the
   * 'enableRotationalMapping' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setEnableRotationalMapping(boolean enableRotationalMapping) {
    return libsbmlJNI.DefaultValues_setEnableRotationalMapping(swigCPtr, this, enableRotationalMapping);
  }

  
/**
   * Unsets the value of the 'backgroundColor' attribute of this
   * {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetBackgroundColor() {
    return libsbmlJNI.DefaultValues_unsetBackgroundColor(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'spreadMethod' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetSpreadMethod() {
    return libsbmlJNI.DefaultValues_unsetSpreadMethod(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'linearGradient_x1' attribute of this
   * {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetLinearGradient_x1() {
    return libsbmlJNI.DefaultValues_unsetLinearGradient_x1(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'linearGradient_y1' attribute of this
   * {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetLinearGradient_y1() {
    return libsbmlJNI.DefaultValues_unsetLinearGradient_y1(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'linearGradient_z1' attribute of this
   * {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetLinearGradient_z1() {
    return libsbmlJNI.DefaultValues_unsetLinearGradient_z1(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'linearGradient_x2' attribute of this
   * {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetLinearGradient_x2() {
    return libsbmlJNI.DefaultValues_unsetLinearGradient_x2(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'linearGradient_y2' attribute of this
   * {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetLinearGradient_y2() {
    return libsbmlJNI.DefaultValues_unsetLinearGradient_y2(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'linearGradient_z2' attribute of this
   * {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetLinearGradient_z2() {
    return libsbmlJNI.DefaultValues_unsetLinearGradient_z2(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'radialGradient_cx' attribute of this
   * {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetRadialGradient_cx() {
    return libsbmlJNI.DefaultValues_unsetRadialGradient_cx(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'radialGradient_cy' attribute of this
   * {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetRadialGradient_cy() {
    return libsbmlJNI.DefaultValues_unsetRadialGradient_cy(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'radialGradient_cz' attribute of this
   * {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetRadialGradient_cz() {
    return libsbmlJNI.DefaultValues_unsetRadialGradient_cz(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'radialGradient_r' attribute of this
   * {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetRadialGradient_r() {
    return libsbmlJNI.DefaultValues_unsetRadialGradient_r(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'radialGradient_fx' attribute of this
   * {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetRadialGradient_fx() {
    return libsbmlJNI.DefaultValues_unsetRadialGradient_fx(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'radialGradient_fy' attribute of this
   * {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetRadialGradient_fy() {
    return libsbmlJNI.DefaultValues_unsetRadialGradient_fy(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'radialGradient_fz' attribute of this
   * {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetRadialGradient_fz() {
    return libsbmlJNI.DefaultValues_unsetRadialGradient_fz(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'fill' attribute of this {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetFill() {
    return libsbmlJNI.DefaultValues_unsetFill(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'fill-rule' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'fill-rule' is used to define how polygons should be filled.
 * In the SBML Level&nbsp;3 Version&nbsp;1 Render specification, the 
 * following are the allowable values for 'fill-rule':
 * <ul>
 * <li> <code>'nonzero':</code> This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and then examining the places where a segment of the shape crosses the ray. 
 * Starting with a count of zero, add one each time a path segment crosses 
 * the ray from left to right and subtract one each time a path segment crosses 
 * the ray from right to left. After counting the crossings, if the result is 
 * zero then the point is outside the path. Otherwise, it is inside.
 <p>
 * <li> <code>'evenodd':</code>  This value determines the 'insideness' of a point in 
 * the shape by drawing a ray from that point to infinity in any direction 
 * and counting the number of path segments from the given shape that the ray
 * crosses. If this number is odd, the point is inside; if even, the point is 
 * outside.
 <p>
 * <li> <code>'inherit':</code> This value declares the 'insideness' of a point 
 * in the shape by declaring that the property takes the same computed value 
 * as the property for the element's parent. The inherited value, which is 
 * normally only used as a fallback value, can be clarified by setting 
 * 'inherit' explicitly.  NOTE:  This value is NOT in the Level&nbsp;3 
 * Version&nbsp;1 Render specification, but was left out due to an oversight:
 * the value has long been part of the codebase.  It is provided here as
 * a convenience.  Elements with a fill-rule set to 'inherit' actually
 * behave identicaly to elements without a fill-rule attribute at all, since
 * this attribute always takes the value of a parent element if not 
 * defined explicitly.
 <p>
 * </ul>
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetFillRule() {
    return libsbmlJNI.DefaultValues_unsetFillRule(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'default_z' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetDefault_z() {
    return libsbmlJNI.DefaultValues_unsetDefault_z(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'stroke' attribute of this {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetStroke() {
    return libsbmlJNI.DefaultValues_unsetStroke(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'stroke-width' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetStrokeWidth() {
    return libsbmlJNI.DefaultValues_unsetStrokeWidth(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'font-family' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetFontFamily() {
    return libsbmlJNI.DefaultValues_unsetFontFamily(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'font-size' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetFontSize() {
    return libsbmlJNI.DefaultValues_unsetFontSize(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'font-weight' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetFontWeight() {
    return libsbmlJNI.DefaultValues_unsetFontWeight(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'font-style' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetFontStyle() {
    return libsbmlJNI.DefaultValues_unsetFontStyle(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'text-anchor' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetTextAnchor() {
    return libsbmlJNI.DefaultValues_unsetTextAnchor(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'vtext-anchor' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetVTextAnchor() {
    return libsbmlJNI.DefaultValues_unsetVTextAnchor(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'startHead' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetStartHead() {
    return libsbmlJNI.DefaultValues_unsetStartHead(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'endHead' attribute of this {@link DefaultValues}
   * object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetEndHead() {
    return libsbmlJNI.DefaultValues_unsetEndHead(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'enableRotationalMapping' attribute of this
   * {@link DefaultValues} object.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetEnableRotationalMapping() {
    return libsbmlJNI.DefaultValues_unsetEnableRotationalMapping(swigCPtr, this);
  }

  
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as 'referring to an identifier', but the effective
 * data type was the same as <code>SIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier.
 * @param newid the new identifier.
   */ public
 void renameSIdRefs(String oldid, String newid) {
    libsbmlJNI.DefaultValues_renameSIdRefs(swigCPtr, this, oldid, newid);
  }

  
/**
   * Returns the XML element name of this {@link DefaultValues} object.
   <p>
   * For {@link DefaultValues} object, the XML element name is always 
   * <code>'defaultValues'.</code>
   <p>
   * @return the name of this element, i.e. <code>'defaultValues'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.DefaultValues_getElementName(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code for this {@link DefaultValues} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_RENDER_DEFAULTS SBML_RENDER_DEFAULTS}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.DefaultValues_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link DefaultValues} object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required attributes of this
   * {@link DefaultValues} object have been set, otherwise <code>false</code> is returned.
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.DefaultValues_hasRequiredAttributes(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.DefaultValues_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

}
