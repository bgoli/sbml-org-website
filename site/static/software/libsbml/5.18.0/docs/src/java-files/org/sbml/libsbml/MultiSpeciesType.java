/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-multi"><a href="group__multi.html">multi</a></span>
 A type of {@link Species} in SBML Level&nbsp;3 'multi'
 <p>
 * The {@link MultiSpeciesType} class (defined simply as <code>SpeciesType</code> in the SBML
 * Level&nbsp;3 'multi' specification, but called {@link MultiSpeciesType} here to
 * distinguish it from the {@link SpeciesType} class defined in SBML Level&nbsp;2),
 * is a child of the extended {@link Model} object (via the {@link MultiModelPlugin} class).
 * It defines 'id' and 'name' attributes, an optional 'compartment' attribute
 * for indicating which {@link Compartment} the referencing {@link Species} is in, and four
 * optional lists for child {@link SpeciesFeatureType}, {@link SpeciesTypeInstance},
 * {@link SpeciesTypeComponentIndex}, and {@link InSpeciesTypeBond} objects.  Together those
 * children define the species type.  The {@link ListOfSpeciesTypeInstances}
 * subobject provides a way to define multicomponents which are instances of
 * other {@link MultiSpeciesType} objects. The {@link ListOfSpeciesFeatureTypes} subobject
 * and its {@link SpeciesFeatureType} children set up a framework for the referencing
 * species or the instances of {@link MultiSpeciesType} objects to be able to have
 * multistates. The {@link ListOfSpeciesTypeComponentIndexes} subobject provides a
 * flexible way to reference any component in a {@link MultiSpeciesType}.  The
 * {@link ListOfInSpeciesTypeBonds} subobject and its {@link InSpeciesTypeBond} children
 * provides a way to define bonds within a {@link MultiSpeciesType}.
 */

public class MultiSpeciesType extends SBase {
   private long swigCPtr;

   protected MultiSpeciesType(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.MultiSpeciesType_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(MultiSpeciesType obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (MultiSpeciesType obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_MultiSpeciesType(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link MultiSpeciesType} object.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 MultiSpeciesType(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_MultiSpeciesType__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link MultiSpeciesType} object.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 MultiSpeciesType(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_MultiSpeciesType__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link MultiSpeciesType} object.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 MultiSpeciesType(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_MultiSpeciesType__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link MultiSpeciesType} object.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 MultiSpeciesType() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_MultiSpeciesType__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link MultiSpeciesType} with the given {@link MultiPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param multins the {@link MultiPkgNamespaces} object
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 MultiSpeciesType(MultiPkgNamespaces multins) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_MultiSpeciesType__SWIG_4(MultiPkgNamespaces.getCPtr(multins), multins), true);
  }

  
/**
   * Copy constructor for {@link MultiSpeciesType}.
   <p>
   * @param orig the {@link MultiSpeciesType} instance to copy.
   */ public
 MultiSpeciesType(MultiSpeciesType orig) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_MultiSpeciesType__SWIG_5(MultiSpeciesType.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link MultiSpeciesType} object.
   <p>
   * @return a (deep) copy of this {@link MultiSpeciesType} object.
   */ public
 MultiSpeciesType cloneObject() {
	return (MultiSpeciesType) libsbml.DowncastSBase(libsbmlJNI.MultiSpeciesType_cloneObject(swigCPtr, this), true);
}

  
/**
   * Returns the value of the 'id' attribute of this {@link MultiSpeciesType}.
   <p>
   * @return the value of the 'id' attribute of this {@link MultiSpeciesType} as a
   * string.
   */ public
 String getId() {
    return libsbmlJNI.MultiSpeciesType_getId(swigCPtr, this);
  }

  
/**
   * Returns <code>true</code> if whether this {@link MultiSpeciesType}'s 'id' attribute has
   * been set.
   <p>
   * @return <code>true</code> if this {@link MultiSpeciesType}'s 'id' attribute has been set;
   * otherwise, <code>false</code> is returned.
   */ public
 boolean isSetId() {
    return libsbmlJNI.MultiSpeciesType_isSetId(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'id' attribute of this {@link MultiSpeciesType}.
   <p>
   * @param id String value of the 'id' attribute to be set
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setId(String id) {
    return libsbmlJNI.MultiSpeciesType_setId(swigCPtr, this, id);
  }

  
/**
   * Unsets the value of the 'id' attribute of this {@link MultiSpeciesType}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetId() {
    return libsbmlJNI.MultiSpeciesType_unsetId(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'name' attribute of this {@link MultiSpeciesType}.
   <p>
   * @return the value of the 'name' attribute of this {@link MultiSpeciesType} as a
   * string.
   */ public
 String getName() {
    return libsbmlJNI.MultiSpeciesType_getName(swigCPtr, this);
  }

  
/**
   * Returns <code>true</code> if this {@link MultiSpeciesType}'s 'name' attribute has been
   * set.
   <p>
   * @return <code>true</code> if this {@link MultiSpeciesType}'s 'name' attribute has been
   * set; otherwise, <code>false</code> is returned.
   */ public
 boolean isSetName() {
    return libsbmlJNI.MultiSpeciesType_isSetName(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'name' attribute of this {@link MultiSpeciesType}.
   <p>
   * @param name String value of the 'name' attribute to be set
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setName(String name) {
    return libsbmlJNI.MultiSpeciesType_setName(swigCPtr, this, name);
  }

  
/**
   * Unsets the value of the 'name' attribute of this {@link MultiSpeciesType}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetName() {
    return libsbmlJNI.MultiSpeciesType_unsetName(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'compartment' attribute of this
   * {@link MultiSpeciesType}.
   <p>
   * @return the value of the 'compartment' attribute of this
   * {@link MultiSpeciesType} as a string.
   */ public
 String getCompartment() {
    return libsbmlJNI.MultiSpeciesType_getCompartment(swigCPtr, this);
  }

  
/**
   * Returns <code>true</code> if this {@link MultiSpeciesType}'s 'compartment' attribute has
   * been set.
   <p>
   * @return <code>true</code> if this {@link MultiSpeciesType}'s 'compartment' attribute has
   * been set; otherwise, <code>false</code> is returned.
   */ public
 boolean isSetCompartment() {
    return libsbmlJNI.MultiSpeciesType_isSetCompartment(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'compartment' attribute of this {@link MultiSpeciesType}.
   <p>
   * @param compartment the new value for the attribute.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setCompartment(String compartment) {
    return libsbmlJNI.MultiSpeciesType_setCompartment(swigCPtr, this, compartment);
  }

  
/**
   * Unsets the value of the 'compartment' attribute of this {@link MultiSpeciesType}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetCompartment() {
    return libsbmlJNI.MultiSpeciesType_unsetCompartment(swigCPtr, this);
  }

  
/**
   * Returns the {@link ListOfSpeciesFeatureTypes} in this {@link MultiSpeciesType} object.
   <p>
   * @return the {@link ListOfSpeciesFeatureTypes} child of this
   * {@link MultiSpeciesType}.
   */ public
 ListOfSpeciesFeatureTypes getListOfSpeciesFeatureTypes() {
    long cPtr = libsbmlJNI.MultiSpeciesType_getListOfSpeciesFeatureTypes__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfSpeciesFeatureTypes(cPtr, false);
  }

  
/**
   * Returns the nth {@link SpeciesFeatureType} object from the
   * {@link ListOfSpeciesFeatureTypes}.
   <p>
   * @param n the index number of the {@link SpeciesFeatureType} to get.
   <p>
   * @return the nth {@link SpeciesFeatureType} in the {@link ListOfSpeciesFeatureTypes}
   * within this {@link MultiSpeciesType}.
   * If the index <code>n</code> is invalid, <code>null</code> is returned.
   <p>
   * @see #getNumSpeciesFeatureTypes()
   */ public
 SpeciesFeatureType getSpeciesFeatureType(long n) {
    long cPtr = libsbmlJNI.MultiSpeciesType_getSpeciesFeatureType__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new SpeciesFeatureType(cPtr, false);
  }

  
/**
   * Get a {@link SpeciesFeatureType} from the {@link ListOfSpeciesFeatureTypes}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier
   * of the {@link SpeciesFeatureType} to get.
   <p>
   * @return the {@link SpeciesFeatureType} in the {@link ListOfSpeciesFeatureTypes} with the
   * given id, or <code>null</code> if no such {@link SpeciesFeatureType} exists.
   <p>
   * @see #getSpeciesFeatureType(long n)
   * @see #getNumSpeciesFeatureTypes()
   */ public
 SpeciesFeatureType getSpeciesFeatureType(String sid) {
    long cPtr = libsbmlJNI.MultiSpeciesType_getSpeciesFeatureType__SWIG_2(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new SpeciesFeatureType(cPtr, false);
  }

  
/**
   * Adds a copy the given 'SpeciesFeatureType' to this {@link MultiSpeciesType}.
   <p>
   * @param sft the {@link SpeciesFeatureType} object to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int addSpeciesFeatureType(SpeciesFeatureType sft) {
    return libsbmlJNI.MultiSpeciesType_addSpeciesFeatureType(swigCPtr, this, SpeciesFeatureType.getCPtr(sft), sft);
  }

  
/**
   * Get the number of {@link SpeciesFeatureType} objects in this {@link MultiSpeciesType}.
   <p>
   * @return the number of {@link SpeciesFeatureType} objects in this
   * {@link MultiSpeciesType}
   */ public
 long getNumSpeciesFeatureTypes() {
    return libsbmlJNI.MultiSpeciesType_getNumSpeciesFeatureTypes(swigCPtr, this);
  }

  
/**
   * Creates a new {@link SpeciesFeatureType} object and adds it to this
   * MultiSpeciesTypes {@link ListOfSpeciesFeatureTypes}.
   <p>
   * @return the newly created {@link SpeciesFeatureType} object instance.
   <p>
   * @see #addSpeciesFeatureType(SpeciesFeatureType sft)
   */ public
 SpeciesFeatureType createSpeciesFeatureType() {
    long cPtr = libsbmlJNI.MultiSpeciesType_createSpeciesFeatureType(swigCPtr, this);
    return (cPtr == 0) ? null : new SpeciesFeatureType(cPtr, false);
  }

  
/**
   * Removes the nth {@link SpeciesFeatureType} from the {@link ListOfSpeciesFeatureTypes}
   * within this {@link MultiSpeciesType} object.
   <p>
   * @param n the index of the {@link SpeciesFeatureType} to remove.
   <p>
   * @return the {@link SpeciesFeatureType} object removed, or <code>null</code> if the given
   * index <code>n</code> is out of range.  Note that the caller owns the returned
   * object and is responsible for deleting it.
   <p>
   * @see #getNumSpeciesFeatureTypes()
   */ public
 SpeciesFeatureType removeSpeciesFeatureType(long n) {
    long cPtr = libsbmlJNI.MultiSpeciesType_removeSpeciesFeatureType__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new SpeciesFeatureType(cPtr, true);
  }

  
/**
   * Removes the {@link SpeciesFeatureType} with the given identifier from the
   * {@link ListOfSpeciesFeatureTypes} object.
   <p>
   * @param sid the identifier of the {@link SpeciesFeatureType} to remove.
   <p>
   * @return the {@link SpeciesFeatureType} removed, or <code>null</code> if none have the
   * identifier <code>sid</code>.  Note that the caller owns the returned item and is
   * responsible for deleting it.
   */ public
 SpeciesFeatureType removeSpeciesFeatureType(String sid) {
    long cPtr = libsbmlJNI.MultiSpeciesType_removeSpeciesFeatureType__SWIG_1(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new SpeciesFeatureType(cPtr, true);
  }

  
/**
   * Returns the {@link ListOfSpeciesTypeInstances} in this {@link MultiSpeciesType}
   * object.
   <p>
   * @return the {@link ListOfSpeciesTypeInstances} child of this
   * {@link MultiSpeciesType}.
   */ public
 ListOfSpeciesTypeInstances getListOfSpeciesTypeInstances() {
    long cPtr = libsbmlJNI.MultiSpeciesType_getListOfSpeciesTypeInstances__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfSpeciesTypeInstances(cPtr, false);
  }

  
/**
   * Get the nth {@link SpeciesTypeInstance} object from the
   * {@link ListOfSpeciesTypeInstances}.
   <p>
   * @param n the index number of the {@link SpeciesTypeInstance} to get.
   <p>
   * @return the nth {@link SpeciesTypeInstance} object in the
   * {@link ListOfSpeciesTypeInstances}, or <code>null</code> if the given index is out of range.
   <p>
   * @see #getNumSpeciesTypeInstances()
   */ public
 SpeciesTypeInstance getSpeciesTypeInstance(long n) {
    long cPtr = libsbmlJNI.MultiSpeciesType_getSpeciesTypeInstance__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new SpeciesTypeInstance(cPtr, false);
  }

  
/**
   * Get a {@link SpeciesTypeInstance} from the {@link ListOfSpeciesTypeInstances}
   * based on its identifier.
   <p>
   * @param sid a string representing the identifier
   * of the {@link SpeciesTypeInstance} to get.
   <p>
   * @return the {@link SpeciesTypeInstance} in the {@link ListOfSpeciesTypeInstances} with
   * the given id, or <code>null</code> if no such {@link SpeciesTypeInstance} exists.
   <p>
   * @see #getSpeciesTypeInstance(long n)
   * @see #getNumSpeciesTypeInstances()
   */ public
 SpeciesTypeInstance getSpeciesTypeInstance(String sid) {
    long cPtr = libsbmlJNI.MultiSpeciesType_getSpeciesTypeInstance__SWIG_2(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new SpeciesTypeInstance(cPtr, false);
  }

  
/**
   * Adds a copy the given 'SpeciesTypeInstance' to this {@link MultiSpeciesType}.
   <p>
   * @param sti the {@link SpeciesTypeInstance} object to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int addSpeciesTypeInstance(SpeciesTypeInstance sti) {
    return libsbmlJNI.MultiSpeciesType_addSpeciesTypeInstance(swigCPtr, this, SpeciesTypeInstance.getCPtr(sti), sti);
  }

  
/**
   * Get the number of {@link SpeciesTypeInstance} objects in this {@link MultiSpeciesType}.
   <p>
   * @return the number of {@link SpeciesTypeInstance} objects in this {@link MultiSpeciesType}
   */ public
 long getNumSpeciesTypeInstances() {
    return libsbmlJNI.MultiSpeciesType_getNumSpeciesTypeInstances(swigCPtr, this);
  }

  
/**
   * Creates a new {@link SpeciesTypeInstance} object and adds it to this
   * MultiSpeciesTypes {@link ListOfSpeciesTypeInstances}.
   <p>
   * @return a new {@link SpeciesTypeInstance} object instance.
   <p>
   * @see #addSpeciesTypeInstance(SpeciesTypeInstance sti)
   */ public
 SpeciesTypeInstance createSpeciesTypeInstance() {
    long cPtr = libsbmlJNI.MultiSpeciesType_createSpeciesTypeInstance(swigCPtr, this);
    return (cPtr == 0) ? null : new SpeciesTypeInstance(cPtr, false);
  }

  
/**
   * Removes the nth {@link SpeciesTypeInstance} from the {@link ListOfSpeciesTypeInstances}
   * within this {@link MultiSpeciesType}.
   <p>
   * @param n the index of the {@link SpeciesTypeInstance} to remove.
   <p>
   * @return the object removed, or <code>null</code> if no such object exists.  Note that
   * the caller owns the returned object and is responsible for deleting it.
   <p>
   * @see #getNumSpeciesTypeInstances()
   */ public
 SpeciesTypeInstance removeSpeciesTypeInstance(long n) {
    long cPtr = libsbmlJNI.MultiSpeciesType_removeSpeciesTypeInstance__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new SpeciesTypeInstance(cPtr, true);
  }

  
/**
   * Removes the {@link SpeciesTypeInstance} with the given identifier from the
   * {@link ListOfSpeciesTypeInstances} within this {@link MultiSpeciesType}.
   <p>
   * @param sid the identifier of the {@link SpeciesTypeInstance} to remove.
   <p>
   * @return the object removed, or <code>null</code> if no such object exists.  Note that
   * the caller owns the returned object and is responsible for deleting it.
   */ public
 SpeciesTypeInstance removeSpeciesTypeInstance(String sid) {
    long cPtr = libsbmlJNI.MultiSpeciesType_removeSpeciesTypeInstance__SWIG_1(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new SpeciesTypeInstance(cPtr, true);
  }

  
/**
   * Returns the {@link ListOfSpeciesTypeComponentIndexes} object.
   <p>
   * @return the {@link ListOfSpeciesTypeComponentIndexes} object in this
   * {@link MultiSpeciesType} object.
   */ public
 ListOfSpeciesTypeComponentIndexes getListOfSpeciesTypeComponentIndexes() {
    long cPtr = libsbmlJNI.MultiSpeciesType_getListOfSpeciesTypeComponentIndexes__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfSpeciesTypeComponentIndexes(cPtr, false);
  }

  
/**
   * Get the nth {@link SpeciesTypeComponentIndex} object from the
   * {@link ListOfSpeciesTypeComponentIndexes}.
   <p>
   * @param n the index number of the {@link SpeciesTypeComponentIndex} to get from
   * the {@link ListOfSpeciesTypeComponentIndexes}.
   <p>
   * @return the nth object in the {@link ListOfSpeciesTypeComponentIndexes}, or <code>null</code>
   * if the index <code>n</code> is out of range.
   <p>
   * @see #getNumSpeciesTypeComponentIndexes()
   */ public
 SpeciesTypeComponentIndex getSpeciesTypeComponentIndex(long n) {
    long cPtr = libsbmlJNI.MultiSpeciesType_getSpeciesTypeComponentIndex__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new SpeciesTypeComponentIndex(cPtr, false);
  }

  
/**
   * Get a {@link SpeciesTypeComponentIndex} object based on its identifier.
   <p>
   * @param sid a string representing the identifier of the
   * {@link SpeciesTypeComponentIndex} to get from the
   * {@link ListOfSpeciesTypeComponentIndexes}.
   <p>
   * @return the object with the given id, or <code>null</code> if no such object exists.
   <p>
   * @see #getSpeciesTypeComponentIndex(long n)
   * @see #getNumSpeciesTypeComponentIndexes()
   */ public
 SpeciesTypeComponentIndex getSpeciesTypeComponentIndex(String sid) {
    long cPtr = libsbmlJNI.MultiSpeciesType_getSpeciesTypeComponentIndex__SWIG_2(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new SpeciesTypeComponentIndex(cPtr, false);
  }

  
/**
   * Adds a copy of the given {@link SpeciesTypeComponentIndex} object to this
   * {@link MultiSpeciesType}.
   <p>
   * @param stci the {@link SpeciesTypeComponentIndex} object to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int addSpeciesTypeComponentIndex(SpeciesTypeComponentIndex stci) {
    return libsbmlJNI.MultiSpeciesType_addSpeciesTypeComponentIndex(swigCPtr, this, SpeciesTypeComponentIndex.getCPtr(stci), stci);
  }

  
/**
   * Get the number of {@link SpeciesTypeComponentIndex} objects in this
   * {@link MultiSpeciesType}.
   <p>
   * @return the number of {@link SpeciesTypeComponentIndex} objects in the
   * {@link ListOfSpeciesTypeComponentIndexes} object within this {@link MultiSpeciesType}
   * object.
   */ public
 long getNumSpeciesTypeComponentIndexes() {
    return libsbmlJNI.MultiSpeciesType_getNumSpeciesTypeComponentIndexes(swigCPtr, this);
  }

  
/**
   * Creates a new {@link SpeciesTypeComponentIndex} object and adds it to the
   * {@link ListOfSpeciesTypeComponentIndexes}.
   <p>
   * @return a new {@link SpeciesTypeComponentIndex} object instance to add to the
   * {@link ListOfSpeciesTypeComponentIndexes} object within this {@link MultiSpeciesType}
   * object.
   <p>
   * @see #addSpeciesTypeComponentIndex(SpeciesTypeComponentIndex stci)
   */ public
 SpeciesTypeComponentIndex createSpeciesTypeComponentIndex() {
    long cPtr = libsbmlJNI.MultiSpeciesType_createSpeciesTypeComponentIndex(swigCPtr, this);
    return (cPtr == 0) ? null : new SpeciesTypeComponentIndex(cPtr, false);
  }

  
/**
   * Removes the nth {@link SpeciesTypeComponentIndex} object from the
   * {@link ListOfSpeciesTypeComponentIndexes}.
   <p>
   * @param n the index of the {@link SpeciesTypeComponentIndex} to remove.
   <p>
   * @return the object removed, or <code>null</code> if no such object exists.  Note that
   * the caller owns the returned object and is responsible for deleting it.
   <p>
   * @see #getNumSpeciesTypeComponentIndexes()
   */ public
 SpeciesTypeComponentIndex removeSpeciesTypeComponentIndex(long n) {
    long cPtr = libsbmlJNI.MultiSpeciesType_removeSpeciesTypeComponentIndex__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new SpeciesTypeComponentIndex(cPtr, true);
  }

  
/**
   * Removes the {@link SpeciesTypeComponentIndex} object with the given identifier
   * <code>sid</code>.
   <p>
   * @param sid the identifier to search for.
   <p>
   * @return the object removed, or <code>null</code> if no such object exists.  Note that
   * the caller owns the returned object and is responsible for deleting it.
   <p>
   * @see #getNumSpeciesTypeComponentIndexes()
   */ public
 SpeciesTypeComponentIndex removeSpeciesTypeComponentIndex(String sid) {
    long cPtr = libsbmlJNI.MultiSpeciesType_removeSpeciesTypeComponentIndex__SWIG_1(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new SpeciesTypeComponentIndex(cPtr, true);
  }

  
/**
   * Returns the {@link ListOfInSpeciesTypeBonds} object.
   <p>
   * @return the {@link ListOfInSpeciesTypeBonds} child of this {@link MultiSpeciesType}.
   */ public
 ListOfInSpeciesTypeBonds getListOfInSpeciesTypeBonds() {
    long cPtr = libsbmlJNI.MultiSpeciesType_getListOfInSpeciesTypeBonds__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfInSpeciesTypeBonds(cPtr, false);
  }

  
/**
   * Get the nth {@link InSpeciesTypeBond} object from the {@link ListOfInSpeciesTypeBonds}.
   <p>
   * @param n the index number of the {@link InSpeciesTypeBond} to get.
   <p>
   * @return the nth object, or <code>null</code> if the index <code>is</code> out of range.
   <p>
   * @see #getNumInSpeciesTypeBonds()
   */ public
 InSpeciesTypeBond getInSpeciesTypeBond(long n) {
    long cPtr = libsbmlJNI.MultiSpeciesType_getInSpeciesTypeBond__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new InSpeciesTypeBond(cPtr, false);
  }

  
/**
   * Get the {@link InSpeciesTypeBond} object with the given identifier <code>sid</code>.
   <p>
   * @param sid a string representing the identifier of the {@link InSpeciesTypeBond}
   * to get from this {@link ListOfInSpeciesTypeBonds}.
   <p>
   * @return the object removed, or <code>null</code> if no such object exists.  Note that
   * the caller owns the returned object and is responsible for deleting it.
   <p>
   * @see #getInSpeciesTypeBond(long n)
   * @see #getNumInSpeciesTypeBonds()
   */ public
 InSpeciesTypeBond getInSpeciesTypeBond(String sid) {
    long cPtr = libsbmlJNI.MultiSpeciesType_getInSpeciesTypeBond__SWIG_2(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new InSpeciesTypeBond(cPtr, false);
  }

  
/**
   * Adds a copy the given {@link InSpeciesTypeBond} object to this {@link MultiSpeciesType}.
   <p>
   * @param istb the {@link InSpeciesTypeBond} object to add
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int addInSpeciesTypeBond(InSpeciesTypeBond istb) {
    return libsbmlJNI.MultiSpeciesType_addInSpeciesTypeBond(swigCPtr, this, InSpeciesTypeBond.getCPtr(istb), istb);
  }

  
/**
   * Get the number of {@link InSpeciesTypeBond} objects in the
   * {@link ListOfInSpeciesTypeBonds}.
   <p>
   * @return the number of {@link InSpeciesTypeBond} objects in the
   * {@link ListOfInSpeciesTypeBonds} within this {@link MultiSpeciesType} object.
   */ public
 long getNumInSpeciesTypeBonds() {
    return libsbmlJNI.MultiSpeciesType_getNumInSpeciesTypeBonds(swigCPtr, this);
  }

  
/**
   * Creates a new {@link InSpeciesTypeBond} object and adds it to the
   * {@link ListOfInSpeciesTypeBonds}.
   <p>
   * @return a new {@link InSpeciesTypeBond} object instance.
   <p>
   * @see #addInSpeciesTypeBond(InSpeciesTypeBond istb)
   */ public
 InSpeciesTypeBond createInSpeciesTypeBond() {
    long cPtr = libsbmlJNI.MultiSpeciesType_createInSpeciesTypeBond(swigCPtr, this);
    return (cPtr == 0) ? null : new InSpeciesTypeBond(cPtr, false);
  }

  
/**
   * Removes the nth {@link InSpeciesTypeBond} object from the
   * {@link ListOfInSpeciesTypeBonds}.  and returns a pointer to it.
   <p>
   * @param n the index of the {@link InSpeciesTypeBond} to remove.
   <p>
   * @return the nth object, or <code>null</code> if the index <code>is</code> out of range.
   <p>
   * @see #getNumInSpeciesTypeBonds()
   */ public
 InSpeciesTypeBond removeInSpeciesTypeBond(long n) {
    long cPtr = libsbmlJNI.MultiSpeciesType_removeInSpeciesTypeBond__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new InSpeciesTypeBond(cPtr, true);
  }

  
/**
   * Removes the {@link InSpeciesTypeBond} with the given identifier <code>sid</code>.
   <p>
   * @param sid the identifier of the {@link InSpeciesTypeBond} to remove from
   * the {@link ListOfInSpeciesTypeBonds} within this {@link MultiSpeciesType} object.
   <p>
   * @return the object removed, or <code>null</code> if no such object exists.  Note that
   * the caller owns the returned object and is responsible for deleting it.
   */ public
 InSpeciesTypeBond removeInSpeciesTypeBond(String sid) {
    long cPtr = libsbmlJNI.MultiSpeciesType_removeInSpeciesTypeBond__SWIG_1(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new InSpeciesTypeBond(cPtr, true);
  }

  
/**
   * Renames all the <code>SIdRef</code> attributes on this element, including any
   * found in MathML content (if such exists).
   <p>
   * This method works by looking at all attributes and (if appropriate)
   * mathematical formulas, comparing the identifiers to the value of 
   * <code>oldid</code>.  If any matches are found, the matching identifiers are replaced
   * with <code>newid</code>.  The method does <em>not</em> descend into child elements.
   <p>
   * @param oldid the old identifier
   * @param newid the new identifier
   */ public
 void renameSIdRefs(String oldid, String newid) {
    libsbmlJNI.MultiSpeciesType_renameSIdRefs(swigCPtr, this, oldid, newid);
  }

  
/**
   * Returns the XML element name of this object, which for {@link MultiSpeciesType}, is
   * always <code>'multiSpeciesType'.</code>
   <p>
   * @return the name of this element, i.e. <code>'multiSpeciesType'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.MultiSpeciesType_getElementName(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code for this SBML object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_MULTI_BINDING_SITE_SPECIES_TYPE SBML_MULTI_BINDING_SITE_SPECIES_TYPE}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.MultiSpeciesType_getTypeCode(swigCPtr, this);
  }

  
/**
   * Returns <code>true</code> if this object has all the required attributes.
   <p>
   * @note The required attributes for a {@link MultiSpeciesType} object are:
   * <ul>
   * <li> 'id'
   *
   * </ul> <p>
   * @return <code>true</code> if this object has all the elements required by the
   * package specification; otherwise, <code>false</code> will be returned.
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.MultiSpeciesType_hasRequiredAttributes(swigCPtr, this);
  }

  
/**
   * Returns <code>true</code> if this object has all the required elements.
   <p>
   * @return <code>true</code> if this object has all the elements required by the
   * package specification; otherwise, <code>false</code> will be returned.
   */ public
 boolean hasRequiredElements() {
    return libsbmlJNI.MultiSpeciesType_hasRequiredElements(swigCPtr, this);
  }

  
/** * @internal */ public
 void connectToChild() {
    libsbmlJNI.MultiSpeciesType_connectToChild(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.MultiSpeciesType_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

}
