/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-groups"><a href="group__groups.html">groups</a></span>
 Base extension class for the package.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * This is the Groups package extension of the {@link SBMLExtension} class that is used
 * to facilitate libSBML plug-ins in the implementation of an SBMLLevel&nbsp;3
 * package.
 */

public class GroupsExtension extends SBMLExtension {
   private long swigCPtr;

   protected GroupsExtension(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.GroupsExtension_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(GroupsExtension obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (GroupsExtension obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_GroupsExtension(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

	public SBasePlugin DowncastSBasePlugin(long cPtr, boolean owner)
	{
		if (cPtr == 0) return null;
		
		SBasePlugin sbp = new SBasePlugin(cPtr, false);
		SBase sb = sbp.getParentSBMLObject();
		

    if (sb instanceof Model)
    {
      return new GroupsModelPlugin(cPtr, owner);
    }
    
		switch( sb.getTypeCode() )
		{
			case (int) libsbml.SBML_MODEL:
				return new GroupsModelPlugin(cPtr,owner);
			default:
				return new SBasePlugin(cPtr,owner);
		}
	}
	
  public SBase DowncastSBase(long cPtr, boolean owner)
  {
    if (cPtr == 0) return null;

    SBase sb = new SBase(cPtr, false);
    switch ( sb.getTypeCode() )
    {
      case (int) libsbml.SBML_LIST_OF:
        String name = sb.getElementName();
        if (name.equals("listOfGroups"))
        {
          return new ListOfGroups(cPtr, owner);
        }
        else if (name.equals("listOfMembers"))
        {
          return new ListOfMembers(cPtr, owner);
        }

        return new ListOf(cPtr, owner);

      case (int) libsbml.SBML_GROUPS_GROUP:
        return new Group(cPtr, owner);

      case (int) libsbml.SBML_GROUPS_MEMBER:
        return new Member(cPtr, owner);

      default:
        return new SBase(cPtr, owner);
    }
  }

	
  
/**
   * Returns the nickname of the SBML Level&nbsp;3 package implemented by this
   * libSBML extension.
   <p>
   * @return the package nickname, as a string.
   <p>
   * 
   */ public
 static String getPackageName() {
    return libsbmlJNI.GroupsExtension_getPackageName();
  }

  
/**
   * Returns the default SBML Level implemented by this libSBML extension.
   <p>
   * @return the SBML Level, as a long integereger.
   <p>
   * 
   */ public
 static long getDefaultLevel() {
    return libsbmlJNI.GroupsExtension_getDefaultLevel();
  }

  
/**
   * Returns the default SBML Version implemented by this libSBML extension.
   <p>
   * @return the Version within the default SBML Level, as a long integereger.
   <p>
   * 
   */ public
 static long getDefaultVersion() {
    return libsbmlJNI.GroupsExtension_getDefaultVersion();
  }

  
/**
   * Returns the default version of the SBML Level&nbsp;3 package implemented
   * by this libSBML extension.
   <p>
   * @return the default version number of the SBML Level&nbsp;3 package
   * definition, as a long integereger.
   <p>
   * 
   */ public
 static long getDefaultPackageVersion() {
    return libsbmlJNI.GroupsExtension_getDefaultPackageVersion();
  }

  
/**
   * Returns the XML namespace URI of the SBML Level&nbsp;3 package implemented
   * by this libSBML extension.
   <p>
   * @return the XML namespace, as a string.
   <p>
   * 
   */ public
 static String getXmlnsL3V1V1() {
    return libsbmlJNI.GroupsExtension_getXmlnsL3V1V1();
  }

  
/**
   * Creates a new {@link GroupsExtension} instance.
   */ public
 GroupsExtension() {
    this(libsbmlJNI.new_GroupsExtension__SWIG_0(), true);
  }

  
/**
   * Copy constructor for {@link GroupsExtension}.
   <p>
   * @param orig the {@link GroupsExtension} instance to copy.
   */ public
 GroupsExtension(GroupsExtension orig) {
    this(libsbmlJNI.new_GroupsExtension__SWIG_1(GroupsExtension.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link GroupsExtension} object.
   <p>
   * @return a (deep) copy of this {@link GroupsExtension} object.
   */ public
 GroupsExtension cloneObject() {
    long cPtr = libsbmlJNI.GroupsExtension_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new GroupsExtension(cPtr, true);
  }

  
/**
   * Returns the name of this SBML Level&nbsp;3 package ('groups').
   <p>
   * @return a string representing the name of this package ('groups').
   */ public
 String getName() {
    return libsbmlJNI.GroupsExtension_getName(swigCPtr, this);
  }

  
/**
   * Returns a string representing the SBML XML namespace of this SBML
   * Level&nbsp;3 package.
   <p>
   * @param sbmlLevel the level of SBML.
   <p>
   * @param sbmlVersion the version of SBML.
   <p>
   * @param pkgVersion the version of this package.
   <p>
   * @return a string representing the name of this package ('groups').
   <p>
   * The namespace URI constructed by this method corresponds to the
   * combination of the Level and Version of SBML, and the Version of the SBML
   * Level&nbsp;3 package. (At the time of this writing, the only SBML Level
   * that supports packages is Level&nbsp;3, so the value of <code>sbmlLevel</code> is
   * necessarily always <code>3</code>.)
   */ public
 String getURI(long sbmlLevel, long sbmlVersion, long pkgVersion) {
    return libsbmlJNI.GroupsExtension_getURI(swigCPtr, this, sbmlLevel, sbmlVersion, pkgVersion);
  }

  
/**
   * Returns the SBML Level for the given URI of this package.
   <p>
   * @param uri the string of the URI that represents one of the versions of
   * the 'groups' package.
   <p>
   * @return the SBML Level for the given URI of this package, or <code>0</code> if the
   * given URI is invalid, or for a different package.
   */ public
 long getLevel(String uri) {
    return libsbmlJNI.GroupsExtension_getLevel(swigCPtr, this, uri);
  }

  
/**
   * Returns the Version within the SBML Level for the given URI of this
   * package.
   <p>
   * @param uri the string of the URI that represents one of the versions of
   * the 'groups' package.
   <p>
   * @return the SBML Version within the SBML Level for the given URI of this
   * package, or <code>0</code> if the given URI is invalid, or for a different package.
   */ public
 long getVersion(String uri) {
    return libsbmlJNI.GroupsExtension_getVersion(swigCPtr, this, uri);
  }

  
/**
   * Returns the SBML Level&nbsp;3 package version for the given URI of this
   * package.
   <p>
   * @param uri the string of the URI that represents one of the versions of
   * the 'groups' package.
   <p>
   * @return the version of the SBML Level&nbsp;3 package for the given URI of
   * this package, or <code>0</code> if the given URI is invalid, or for a different
   * package.
   */ public
 long getPackageVersion(String uri) {
    return libsbmlJNI.GroupsExtension_getPackageVersion(swigCPtr, this, uri);
  }

  
/**
   * Returns a {@link GroupsPkgNamespaces} object.
   <p>
   * @param uri the string of the URI that represents one of the versions of
   * the 'groups' package.
   <p>
   * @return {@link GroupsPkgNamespaces} object corresponding to the given URI of this
   * package, or <code>null</code> if the given URI is not defined in the 'groups'
   * package.
   */ public
 SBMLNamespaces getSBMLExtensionNamespaces(String uri) {
  return libsbml.DowncastSBMLNamespaces(libsbmlJNI.GroupsExtension_getSBMLExtensionNamespaces(swigCPtr, this, uri), false);
}

  
/**
   * Takes a type code of the &ldquo;groups&rdquo; package and returns a string
   * describing the code.
   <p>
   * @param typeCode a libSBML type code defined by the libSBML extension
   * implementing support for the SBML Level&nbsp;3 &ldquo;groups&rdquo;
   * package.
   <p>
   * @return a text string representing the type code given by <code>typeCode</code>. If
   * the type code is unrecognized for this implementation of the libSBML
   * &ldquo;groups&rdquo; package, the string returned will be <code>'(Unknown
   * SBML Groups Type)'</code>.
   */ public
 String getStringFromTypeCode(int typeCode) {
    return libsbmlJNI.GroupsExtension_getStringFromTypeCode(swigCPtr, this, typeCode);
  }

  
/** * @internal */ public
 SWIGTYPE_p_packageErrorTableEntry getErrorTable(long index) {
    return new SWIGTYPE_p_packageErrorTableEntry(libsbmlJNI.GroupsExtension_getErrorTable(swigCPtr, this, index), true);
  }

  
/** * @internal */ public
 long getErrorTableIndex(long errorId) {
    return libsbmlJNI.GroupsExtension_getErrorTableIndex(swigCPtr, this, errorId);
  }

  
/** * @internal */ public
 long getErrorIdOffset() {
    return libsbmlJNI.GroupsExtension_getErrorIdOffset(swigCPtr, this);
  }

  
/** * @internal */ public
 static void init() {
    libsbmlJNI.GroupsExtension_init();
  }

}
