/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 Base extension class for the package.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 */

public class RenderExtension extends SBMLExtension {
   private long swigCPtr;

   protected RenderExtension(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.RenderExtension_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(RenderExtension obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (RenderExtension obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_RenderExtension(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

	public SBasePlugin DowncastSBasePlugin(long cPtr, boolean owner)
	{
		if (cPtr == 0) return null;
		
		SBasePlugin sbp = new SBasePlugin(cPtr, false);
		SBase sb = sbp.getParentSBMLObject();
		
		switch( sb.getTypeCode() )
		{
			case (int) libsbml.SBML_LIST_OF:
			     String name = sb.getElementName();
		         if(name =="listOfLayouts")
			     {
					return new RenderListOfLayoutsPlugin(cPtr, owner);
                 }
				return new SBasePlugin(cPtr,owner);
			case (int) libsbml.SBML_DOCUMENT:
				return new SBMLDocumentPlugin(cPtr, owner);
			case (int) libsbml.SBML_LAYOUT_LAYOUT:
				return new RenderLayoutPlugin(cPtr, owner);
			case (int) libsbml.SBML_LAYOUT_GRAPHICALOBJECT:
				return new RenderGraphicalObjectPlugin(cPtr, owner);
			default:
				return new SBasePlugin(cPtr,owner);
		}
	}
	
	public SBase DowncastSBase(long cPtr, boolean owner)
	{
		if (cPtr == 0) return null;
		
		SBase sb = new SBase(cPtr, false);
		switch( sb.getTypeCode() )
		{
			case (int) libsbml.SBML_LIST_OF:
			     String name = sb.getElementName();
				 int itemType = ((ListOf)sb).getItemTypeCode();
		         if(name =="listOfColorDefinitions")
			     {
					return new ListOfColorDefinitions(cPtr, owner);
                 }
		         else if(name =="listOfGlobalRenderInformation")
			     {
		            return new ListOfGlobalRenderInformation(cPtr, owner);
                 }
				 else if(name =="listOfStyles")
			     {
				    if (itemType == libsbml.SBML_RENDER_LOCALSTYLE)
					  return new ListOfLocalStyles(cPtr, owner);
					else 
		              return new ListOfGlobalStyles(cPtr, owner);
                 }
				 else if(name =="listOfGradientDefinitions")
			     {
		            return new ListOfGradientDefinitions(cPtr, owner);
                 }
				 else if(name =="listOfLineEndings")
			     {
		            return new ListOfLineEndings(cPtr, owner);
                 }
				 else if(name =="listOfElements")
			     {
		            return new ListOfCurveElements(cPtr, owner);
                 }
				 else if(name =="listOfRenderInformation")
			     {
		            return new ListOfLocalRenderInformation(cPtr, owner);
                 }
				 else if(name =="listOfDrawables")
			     {
		            return new ListOfDrawables(cPtr, owner);
                 }
				 else if(name =="listOfGradientStops")
			     {
		            return new ListOfGradientStops(cPtr, owner);
                 }
		         return new ListOf(cPtr, owner);
				
			case (int) libsbml.SBML_RENDER_COLORDEFINITION:
				return new ColorDefinition(cPtr, owner);
				
			case (int) libsbml.SBML_RENDER_ELLIPSE:
				return new Ellipse(cPtr, owner);

			case (int) libsbml.SBML_RENDER_GLOBALRENDERINFORMATION:
				return new GlobalRenderInformation(cPtr, owner);
				
			case (int) libsbml.SBML_RENDER_GLOBALSTYLE:
				return new GlobalStyle(cPtr, owner);
			
			case (int) libsbml.SBML_RENDER_GROUP:
				return new RenderGroup(cPtr, owner);
			
			case (int) libsbml.SBML_RENDER_IMAGE:
				return new Image(cPtr, owner);
			
			case (int) libsbml.SBML_RENDER_LINEENDING:
				return new LineEnding(cPtr, owner);
			
			case (int) libsbml.SBML_RENDER_LINEARGRADIENT:
				return new LinearGradient(cPtr, owner);
			
			case (int) libsbml.SBML_RENDER_LOCALRENDERINFORMATION:
				return new LocalRenderInformation(cPtr, owner);
			
			case (int) libsbml.SBML_RENDER_LOCALSTYLE:
				return new LocalStyle(cPtr, owner);
			
			case (int) libsbml.SBML_RENDER_POLYGON:
				return new Polygon(cPtr, owner);
			
			case (int) libsbml.SBML_RENDER_RADIALGRADIENT:
				return new RadialGradient(cPtr, owner);
			
			case (int) libsbml.SBML_RENDER_RECTANGLE:
				return new Rectangle(cPtr, owner);
			
			case (int) libsbml.SBML_RENDER_CUBICBEZIER:
				return new RenderCubicBezier(cPtr, owner);
			
			case (int) libsbml.SBML_RENDER_CURVE:
				return new RenderCurve(cPtr, owner);
			
			case (int) libsbml.SBML_RENDER_POINT:
				return new RenderPoint(cPtr, owner);
			
			case (int) libsbml.SBML_RENDER_TEXT:
				return new Text(cPtr, owner);
			
			default:
				return new SBase(cPtr, owner);
		}
	}
	
	
  
/**
   * Returns the package name of this extension.
   */ public
 static String getPackageName() {
    return libsbmlJNI.RenderExtension_getPackageName();
  }

  
/**
   * Returns the default SBML Level this extension.
   */ public
 static long getDefaultLevel() {
    return libsbmlJNI.RenderExtension_getDefaultLevel();
  }

  
/**
   * Returns the default SBML Version this extension.
   */ public
 static long getDefaultVersion() {
    return libsbmlJNI.RenderExtension_getDefaultVersion();
  }

  
/**
   * Returns the default SBML version this extension.
   */ public
 static long getDefaultPackageVersion() {
    return libsbmlJNI.RenderExtension_getDefaultPackageVersion();
  }

  
/**
   * Returns URI of supported versions of this package.
   */ public
 static String getXmlnsL3V1V1() {
    return libsbmlJNI.RenderExtension_getXmlnsL3V1V1();
  }

  
/**
   * Returns URI of L2 version of supported versions of this package.
   */ public
 static String getXmlnsL2() {
    return libsbmlJNI.RenderExtension_getXmlnsL2();
  }

  
/**
   * Constructor
   */ public
 RenderExtension() {
    this(libsbmlJNI.new_RenderExtension__SWIG_0(), true);
  }

  
/**
   * Copy constructor.
   */ public
 RenderExtension(RenderExtension arg0) {
    this(libsbmlJNI.new_RenderExtension__SWIG_1(RenderExtension.getCPtr(arg0), arg0), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link RenderExtension} object.
   <p>
   * @return a (deep) copy of this {@link RenderExtension} object
   */ public
 RenderExtension cloneObject() {
    long cPtr = libsbmlJNI.RenderExtension_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderExtension(cPtr, true);
  }

  
/**
   * Returns the name of this package ('render')
   */ public
 String getName() {
    return libsbmlJNI.RenderExtension_getName(swigCPtr, this);
  }

  
/**
   * Returns the URI (namespace) of the package corresponding to the combination of 
   * the given sbml level, sbml version, and package version.
   * Empty string will be returned if no corresponding URI exists.
   <p>
   * @param sbmlLevel the level of SBML
   * @param sbmlVersion the version of SBML
   * @param pkgVersion the version of package
   <p>
   * @return a string of the package URI
   */ public
 String getURI(long sbmlLevel, long sbmlVersion, long pkgVersion) {
    return libsbmlJNI.RenderExtension_getURI(swigCPtr, this, sbmlLevel, sbmlVersion, pkgVersion);
  }

  
/**
   * Returns the SBML level with the given URI of this package.
   <p>
   * @param uri the string of URI that represents one of the versions of the render package
   <p>
   * @return the SBML level with the given URI of this package. 0 will be returned
   * if the given URI is invalid.
   */ public
 long getLevel(String uri) {
    return libsbmlJNI.RenderExtension_getLevel(swigCPtr, this, uri);
  }

  
/**
   * Returns the SBML version with the given URI of this package.
   <p>
   * @param uri the string of URI that represents one of the versions of the render package
   <p>
   * @return the SBML version with the given URI of this package. 0 will be returned
   * if the given URI is invalid.
   */ public
 long getVersion(String uri) {
    return libsbmlJNI.RenderExtension_getVersion(swigCPtr, this, uri);
  }

  
/**
   * Returns the package version with the given URI of this package.
   <p>
   * @param uri the string of URI that represents one of the versions of the render package
   <p>
   * @return the package version with the given URI of this package. 0 will be returned
   * if the given URI is invalid.
   */ public
 long getPackageVersion(String uri) {
    return libsbmlJNI.RenderExtension_getPackageVersion(swigCPtr, this, uri);
  }

  
/**
   * Returns a {@link RenderPkgNamespaces} object.
   * <code>null</code> will be returned if the given uri is not defined in the render package.
   <p>
   * @param uri the string of URI that represents one of the versions of the render package
   <p>
   * @return a {@link RenderPkgNamespaces} object corresponding to the given uri. <code>null</code> will
   * be returned if the given URI is not defined in render package.
   */ public
 SBMLNamespaces getSBMLExtensionNamespaces(String uri) {
  return libsbml.DowncastSBMLNamespaces(libsbmlJNI.RenderExtension_getSBMLExtensionNamespaces(swigCPtr, this, uri), false);
}

  
/**
   * This method takes a type code of groups package and returns a string representing 
   * the code.
   */ public
 String getStringFromTypeCode(int typeCode) {
    return libsbmlJNI.RenderExtension_getStringFromTypeCode(swigCPtr, this, typeCode);
  }

  
/** * @internal */ public
 SWIGTYPE_p_packageErrorTableEntry getErrorTable(long index) {
    return new SWIGTYPE_p_packageErrorTableEntry(libsbmlJNI.RenderExtension_getErrorTable(swigCPtr, this, index), true);
  }

  
/** * @internal */ public
 long getErrorTableIndex(long errorId) {
    return libsbmlJNI.RenderExtension_getErrorTableIndex(swigCPtr, this, errorId);
  }

  
/** * @internal */ public
 long getErrorIdOffset() {
    return libsbmlJNI.RenderExtension_getErrorIdOffset(swigCPtr, this);
  }

  
/** * @internal */ public
 static void init() {
    libsbmlJNI.RenderExtension_init();
  }

  
/**
   * Removes the L2 Namespace from a document. 
   <p>
   * This method is overridden here since Render does serialize
   * to an L2 annotation.
   */ public
 void removeL2Namespaces(XMLNamespaces xmlns) {
    libsbmlJNI.RenderExtension_removeL2Namespaces(swigCPtr, this, XMLNamespaces.getCPtr(xmlns), xmlns);
  }

  
/**
   * adds all L2 Extension namespaces to the namespace list. 
   <p>
   * This method is overridden here since Render does serialize
   * to an L2 annotation.
   */ public
 void addL2Namespaces(XMLNamespaces xmlns) {
    libsbmlJNI.RenderExtension_addL2Namespaces(swigCPtr, this, XMLNamespaces.getCPtr(xmlns), xmlns);
  }

  
/**
   * Adds the L2 Namespace to the document and enables the extension.
   <p>
   * This method is overridden here since Render does serialize
   * to an L2 annotation.
   */ public
 void enableL2NamespaceForDocument(SBMLDocument doc) {
    libsbmlJNI.RenderExtension_enableL2NamespaceForDocument(swigCPtr, this, SBMLDocument.getCPtr(doc), doc);
  }

  
/** 
   * Determines whether this extension is being used by the given {@link SBMLDocument}
   <p>
   * The implementation returns <code>true</code> if the list of layouts contains a global render information,
   * or a layout object contains a local render information object. 
   <p>
   * @param doc the sbml document to test. 
   <p>
   * @return a boolean indicating whether the extension is actually being used
   *         byy the document. 
   */ public
 boolean isInUse(SBMLDocument doc) {
    return libsbmlJNI.RenderExtension_isInUse(swigCPtr, this, SBMLDocument.getCPtr(doc), doc);
  }

}
