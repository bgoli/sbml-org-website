/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 Implementation of a 3D transformation matrix.
 <p>
 * The {@link Transformation} class represents a 3D transformation which normally is
 * a 4x4 matrix.  Since the last row is always 0 0 0 1 for affine
 * transformations, we leave out those values and store the matrix as an
 * array of 4x3 columns
 */

public class Transformation extends SBase {
   private long swigCPtr;

   protected Transformation(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.Transformation_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(Transformation obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (Transformation obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_Transformation(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link Transformation} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link Transformation}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Transformation}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Transformation}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Transformation(long level, long version, long pkgVersion) {
    this(libsbmlJNI.new_Transformation__SWIG_2(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link Transformation} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link Transformation}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Transformation}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Transformation}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Transformation(long level, long version) {
    this(libsbmlJNI.new_Transformation__SWIG_3(level, version), true);
  }

  
/**
   * Creates a new {@link Transformation} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link Transformation}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Transformation}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Transformation}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Transformation(long level) {
    this(libsbmlJNI.new_Transformation__SWIG_4(level), true);
  }

  
/**
   * Creates a new {@link Transformation} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link Transformation}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Transformation}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Transformation}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Transformation() {
    this(libsbmlJNI.new_Transformation__SWIG_5(), true);
  }

  
/**
   * Creates a new {@link Transformation} using the given {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param renderns the {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Transformation(RenderPkgNamespaces renderns) {
    this(libsbmlJNI.new_Transformation__SWIG_6(RenderPkgNamespaces.getCPtr(renderns), renderns), true);
  }

  
/**
   * Copy constructor for {@link Transformation}.
   <p>
   * @param orig the {@link Transformation} instance to copy.
   */ public
 Transformation(Transformation orig) {
    this(libsbmlJNI.new_Transformation__SWIG_7(Transformation.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link Transformation} object.
   <p>
   * @return a (deep) copy of this {@link Transformation} object.
   */ public
 SBase cloneObject() {
    long cPtr = libsbmlJNI.Transformation_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new Transformation(cPtr, true);
  }

  
/**
   * Returns the value of the 'transform' attribute of this {@link Transformation}.
   <p>
   * @param outArray double* array that will be used to return the value of the
   * 'transform' attribute of this {@link Transformation}.
   <p>
   * @note the value of the 'transform' attribute of this {@link Transformation} is
   * returned in the argument array.
   */ public
 void getTransform(SWIGTYPE_p_double outArray) {
    libsbmlJNI.Transformation_getTransform(swigCPtr, this, SWIGTYPE_p_double.getCPtr(outArray));
  }

  
/**
   * Returns the value of the 'name' attribute of this {@link Transformation}.
   <p>
   * @return the value of the 'name' attribute of this {@link Transformation} as a
   * string.
   */ public
 String getName() {
    return libsbmlJNI.Transformation_getName(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'transform' attribute of this {@link Transformation}.
   * which is an array of double values of length 12.
   <p>
   * @return a pointer to the array of numbers for the transformation.
   */ public
 SWIGTYPE_p_double getMatrix() {
    long cPtr = libsbmlJNI.Transformation_getMatrix(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  
/**
   * Returns a 3D identity matrix.
   * The matrix contains 12 double values.
   */ public
 static SWIGTYPE_p_double getIdentityMatrix() {
    long cPtr = libsbmlJNI.Transformation_getIdentityMatrix();
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Transformation}'s 'transform' attribute
   * is set.
   <p>
   * @return <code>true</code> if this {@link Transformation}'s 'transform' attribute has been
   * set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetTransform() {
    return libsbmlJNI.Transformation_isSetTransform(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Transformation}'s 'name' attribute is
   * set.
   <p>
   * @return <code>true</code> if this {@link Transformation}'s 'name' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetName() {
    return libsbmlJNI.Transformation_isSetName(swigCPtr, this);
  }

  
/**
   * Returns <code>true</code> if the matrix has been set or <code>false</code> otherwise.
   * The matrix is considered as set if none of the values in the matrix is NaN.
   <p>
   * @return <code>true</code> or <code>false</code> depending on whether a NaN was found.
   */ public
 boolean isSetMatrix() {
    return libsbmlJNI.Transformation_isSetMatrix(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'transform' attribute of this {@link Transformation}.
   <p>
   * @param inArray double* array value of the 'transform' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setTransform(SWIGTYPE_p_double inArray) {
    return libsbmlJNI.Transformation_setTransform(swigCPtr, this, SWIGTYPE_p_double.getCPtr(inArray));
  }

  
/**
   * Sets the value of the 'name' attribute of this {@link Transformation}.
   <p>
   * @param name String& value of the 'name' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * Calling this function with <code>name</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetName().
   */ public
 int setName(String name) {
    return libsbmlJNI.Transformation_setName(swigCPtr, this, name);
  }

  
/**
   * Sets the matrix to the values given in the array.
   <p>
   * @param m array with new values to be set for this {@link Transformation} object.
   */ public
 void setMatrix(SWIGTYPE_p_double m) {
    libsbmlJNI.Transformation_setMatrix(swigCPtr, this, SWIGTYPE_p_double.getCPtr(m));
  }

  
/**
   * Unsets the value of the 'transform' attribute of this {@link Transformation}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetTransform() {
    return libsbmlJNI.Transformation_unsetTransform(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'name' attribute of this {@link Transformation}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetName() {
    return libsbmlJNI.Transformation_unsetName(swigCPtr, this);
  }

  
/**
  * Unsets the value of the 'transform' attribute of this {@link Transformation}.
  <p>
  * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
  * <ul>
  * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
  * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
  * </ul>
  */ public
 int unsetMatrix() {
    return libsbmlJNI.Transformation_unsetMatrix(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation} is of type
   * {@link Image}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation} is of type {@link Image},
   * <code>false</code> otherwise
   */ public
 boolean isImage() {
    return libsbmlJNI.Transformation_isImage(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation} is of type
   * {@link Ellipse}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation} is of type {@link Ellipse},
   * <code>false</code> otherwise
   */ public
 boolean isEllipse() {
    return libsbmlJNI.Transformation_isEllipse(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation} is of type
   * {@link Rectangle}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation} is of type {@link Rectangle},
   * <code>false</code> otherwise
   */ public
 boolean isRectangle() {
    return libsbmlJNI.Transformation_isRectangle(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation} is of type
   * {@link Polygon}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation} is of type {@link Polygon},
   * <code>false</code> otherwise
   */ public
 boolean isPolygon() {
    return libsbmlJNI.Transformation_isPolygon(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation} is of type
   * {@link RenderGroup}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation} is of type {@link RenderGroup},
   * <code>false</code> otherwise
   */ public
 boolean isRenderGroup() {
    return libsbmlJNI.Transformation_isRenderGroup(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation} is of type
   * {@link LineEnding}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation} is of type {@link LineEnding},
   * <code>false</code> otherwise
   */ public
 boolean isLineEnding() {
    return libsbmlJNI.Transformation_isLineEnding(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation} is of type
   * {@link Text}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation} is of type {@link Text},
   * <code>false</code> otherwise
   */ public
 boolean isText() {
    return libsbmlJNI.Transformation_isText(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Transformation} is of type
   * {@link RenderCurve}
   <p>
   * @return <code>true</code> if this abstract {@link Transformation} is of type {@link RenderCurve},
   * <code>false</code> otherwise
   */ public
 boolean isRenderCurve() {
    return libsbmlJNI.Transformation_isRenderCurve(swigCPtr, this);
  }

  
/**
   * Returns the XML element name of this {@link Transformation} object.
   <p>
   * For {@link Transformation}, the XML element name is always <code>'transformation'.</code>
   <p>
   * @return the name of this element, i.e. <code>'transformation'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.Transformation_getElementName(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code for this {@link Transformation} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_RENDER_TRANSFORMATION SBML_RENDER_TRANSFORMATION}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.Transformation_getTypeCode(swigCPtr, this);
  }

}
