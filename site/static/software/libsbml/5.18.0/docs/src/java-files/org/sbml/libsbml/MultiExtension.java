/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-multi"><a href="group__multi.html">multi</a></span>
 Base extension class for the package.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * This is the Multistate, Multicomponent and Multicompartment {@link Species}
 * package extension of the {@link SBMLExtension} class.  This is a class that every
 * libSBML plug-in must implement in order to implement an SBML Level&nbsp;3
 * package.
 */

public class MultiExtension extends SBMLExtension {
   private long swigCPtr;

   protected MultiExtension(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.MultiExtension_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(MultiExtension obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (MultiExtension obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_MultiExtension(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public SBasePlugin DowncastSBasePlugin(long cPtr, boolean owner)
  {
    if (cPtr == 0) return null;

    SBasePlugin sbp = new SBasePlugin(cPtr, false);
    SBase sb = sbp.getParentSBMLObject();

    if (sb.getElementName().equals("listOfReactions"))
        return new MultiListOfReactionsPlugin(cPtr, owner);

    
    if (sb instanceof Model)
    {
      return new MultiModelPlugin(cPtr, owner);
    }
        
    switch( sb.getTypeCode() )
    {
      case (int) libsbml.SBML_DOCUMENT:
        return new MultiSBMLDocumentPlugin(cPtr, owner);

      case (int) libsbml.SBML_MODEL:
        return new MultiModelPlugin(cPtr, owner);

      case (int) libsbml.SBML_COMPARTMENT:
        return new MultiCompartmentPlugin(cPtr, owner);

      case (int) libsbml.SBML_SPECIES:
        return new MultiSpeciesPlugin(cPtr, owner);

      case (int) libsbml.SBML_MODIFIER_SPECIES_REFERENCE:
        return new MultiSimpleSpeciesReferencePlugin(cPtr, owner);

      case (int) libsbml.SBML_SPECIES_REFERENCE:
        return new MultiSpeciesReferencePlugin(cPtr, owner);

      default:
        return new SBasePlugin(cPtr, owner);
    }
  }

  public SBase DowncastSBase(long cPtr, boolean owner)
  {
    if (cPtr == 0) return null;

    SBase sb = new SBase(cPtr, false);
    switch( sb.getTypeCode() )
    {
      case (int) libsbml.SBML_LIST_OF:
        String name = sb.getElementName();
        if (name.equals("listOfPossibleSpeciesFeatureValues"))
        {
          return new ListOfPossibleSpeciesFeatureValues(cPtr, owner);
        }
        else if (name.equals("listOfSpeciesFeatureValues"))
        {
          return new ListOfSpeciesFeatureValues(cPtr, owner);
        }
        else if (name.equals("listOfCompartmentReferences"))
        {
          return new ListOfCompartmentReferences(cPtr, owner);
        }
        else if (name.equals("listOfSpeciesTypeInstances"))
        {
          return new ListOfSpeciesTypeInstances(cPtr, owner);
        }
        else if (name.equals("listOfInSpeciesTypeBonds"))
        {
          return new ListOfInSpeciesTypeBonds(cPtr, owner);
        }
        else if (name.equals("listOfOutwardBindingSites"))
        {
          return new ListOfOutwardBindingSites(cPtr, owner);
        }
        else if (name.equals("listOfSpeciesFeatureTypes"))
        {
          return new ListOfSpeciesFeatureTypes(cPtr, owner);
        }
        else if (name.equals("listOfSpeciesTypeComponentIndexes"))
        {
          return new ListOfSpeciesTypeComponentIndexes(cPtr, owner);
        }
        else if (name.equals("listOfSpeciesFeatures"))
        {
          return new ListOfSpeciesFeatures(cPtr, owner);
        }
        else if (name.equals("listOfSpeciesTypeComponentMapInProducts"))
        {
          return new ListOfSpeciesTypeComponentMapInProducts(cPtr, owner);
        }
        else if (name.equals("listOfMultiSpeciesTypes"))
        {
          return new ListOfMultiSpeciesTypes(cPtr, owner);
        }

        return new ListOf(cPtr, owner);

      case (int) libsbml.SBML_MULTI_POSSIBLE_SPECIES_FEATURE_VALUE:
        return new PossibleSpeciesFeatureValue(cPtr, owner);

      case (int) libsbml.SBML_MULTI_SPECIES_FEATURE_VALUE:
        return new SpeciesFeatureValue(cPtr, owner);

      case (int) libsbml.SBML_MULTI_COMPARTMENT_REFERENCE:
        return new CompartmentReference(cPtr, owner);

      case (int) libsbml.SBML_MULTI_SPECIES_TYPE_INSTANCE:
        return new SpeciesTypeInstance(cPtr, owner);

      case (int) libsbml.SBML_MULTI_IN_SPECIES_TYPE_BOND:
        return new InSpeciesTypeBond(cPtr, owner);

      case (int) libsbml.SBML_MULTI_OUTWARD_BINDING_SITE:
        return new OutwardBindingSite(cPtr, owner);

      case (int) libsbml.SBML_MULTI_SPECIES_FEATURE_TYPE:
        return new SpeciesFeatureType(cPtr, owner);

      case (int) libsbml.SBML_MULTI_SPECIES_TYPE_COMPONENT_INDEX:
        return new SpeciesTypeComponentIndex(cPtr, owner);

      case (int) libsbml.SBML_MULTI_SPECIES_FEATURE:
        return new SpeciesFeature(cPtr, owner);

      case (int) libsbml.SBML_MULTI_SPECIES_TYPE_COMPONENT_MAP_IN_PRODUCT:
        return new SpeciesTypeComponentMapInProduct(cPtr, owner);

      case (int) libsbml.SBML_MULTI_SPECIES_TYPE:
        return new MultiSpeciesType(cPtr, owner);

      case (int) libsbml.SBML_MULTI_BINDING_SITE_SPECIES_TYPE:
        return new BindingSiteSpeciesType(cPtr, owner);

      case (int) libsbml.SBML_MULTI_INTRA_SPECIES_REACTION:
        return new IntraSpeciesReaction(cPtr, owner);

      default:
        return new SBase(cPtr, owner);
    }
  }


  
/**
   * Returns the nickname of the SBML Level&nbsp;3 package implemented by
   * this libSBML extension.
   <p>
   * @return the package nickname, as a string.
   <p>
   * 
   */ public
 static String getPackageName() {
    return libsbmlJNI.MultiExtension_getPackageName();
  }

  
/**
   * Returns the default SBML Level used by this libSBML package extension.
   <p>
   * @return the SBML Level.
   <p>
   * 
   */ public
 static long getDefaultLevel() {
    return libsbmlJNI.MultiExtension_getDefaultLevel();
  }

  
/**
   * Returns the default SBML Version used by this libSBML package extension.
   <p>
   * @return the Version within the default SBML Level.
   <p>
   * 
   */ public
 static long getDefaultVersion() {
    return libsbmlJNI.MultiExtension_getDefaultVersion();
  }

  
/**
   * Returns the default version of the SBML Level&nbsp;3 package implemented
   * by this libSBML extension.
   <p>
   * @return the default version number of the SBML Level&nbsp;3 package
   * definition.
   <p>
   * 
   */ public
 static long getDefaultPackageVersion() {
    return libsbmlJNI.MultiExtension_getDefaultPackageVersion();
  }

  
/**
   * Returns the XML namespace URI of the SBML Level&nbsp;3 package
   * implemented by this libSBML extension.
   <p>
   * @return the XML namespace as a string.
   <p>
   * 
   */ public
 static String getXmlnsL3V1V1() {
    return libsbmlJNI.MultiExtension_getXmlnsL3V1V1();
  }

  
/**
   * Creates a new {@link MultiExtension} instance.
   */ public
 MultiExtension() {
    this(libsbmlJNI.new_MultiExtension__SWIG_0(), true);
  }

  
/**
   * Copy constructor for {@link MultiExtension}.
   <p>
   * @param orig the instance to copy.
   */ public
 MultiExtension(MultiExtension orig) {
    this(libsbmlJNI.new_MultiExtension__SWIG_1(MultiExtension.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link MultiExtension} object.
   <p>
   * @return a (deep) copy of this {@link MultiExtension} object.
   */ public
 MultiExtension cloneObject() {
    long cPtr = libsbmlJNI.MultiExtension_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new MultiExtension(cPtr, true);
  }

  
/**
   * Returns the name of this package ('multi')
   <p>
   * @return a string representing the name of this package ('multi')
   */ public
 String getName() {
    return libsbmlJNI.MultiExtension_getName(swigCPtr, this);
  }

  
/**
   * Returns a string representing the SBML XML namespace of this SBML
   * Level&nbsp;3 package.
   <p>
   * The namespace URI constructed by this method corresponds to the
   * combination of the Level and Version of SBML, and the Version of the SBML
   * Level&nbsp;3 package. (At the time of this writing, the only SBML Level
   * that supports packages is Level&nbsp;3, so the value of <code>sbmlLevel</code> must
   * necessarily always be <code>3</code>.)
   <p>
   * @param sbmlLevel the level of SBML.
   * @param sbmlVersion the version of SBML.
   * @param pkgVersion the version of the package.
   <p>
   * @return a string of the package URI, or an empty string if no
   * corresponding URI exists.
   */ public
 String getURI(long sbmlLevel, long sbmlVersion, long pkgVersion) {
    return libsbmlJNI.MultiExtension_getURI(swigCPtr, this, sbmlLevel, sbmlVersion, pkgVersion);
  }

  
/**
   * Returns the SBML Level for the given URI of this package.
   <p>
   * @param uri a URI that represents a version of this package.
   <p>
   * @return the SBML Level for the given URI of this package, or <code>0</code> if the
   * given URI is invalid, or for a different package.
   */ public
 long getLevel(String uri) {
    return libsbmlJNI.MultiExtension_getLevel(swigCPtr, this, uri);
  }

  
/**
   * Returns the Version within the SBML Level for the given URI of this
   * package.
   <p>
   * @param uri a URI that represents a version of this package.
   <p>
   * @return the SBML Version within the SBML Level for the given URI of this
   * package, or <code>0</code> if the given URI is invalid, or for a different package.
   */ public
 long getVersion(String uri) {
    return libsbmlJNI.MultiExtension_getVersion(swigCPtr, this, uri);
  }

  
/**
   * Returns the SBML Level&nbsp;3 package version for the given URI of this
   * package.
   <p>
   * @param uri a URI that represents one of the valid versions of this
   * package.
   <p>
   * @return the version of the SBML Level&nbsp;3 package with the given URI,
   * or <code>0</code> if the given URI is invalid, or for a different package.
   */ public
 long getPackageVersion(String uri) {
    return libsbmlJNI.MultiExtension_getPackageVersion(swigCPtr, this, uri);
  }

  
/**
   * Returns a {@link MultiPkgNamespaces} object.
   <p>
   * @param uri a URI that represents one of the valid versions of the
   * 'multi' package.
   <p>
   * @return a {@link MultiPkgNamespaces} object corresponding to the given <code>uri</code>,
   * or <code>null</code> if the URI is not defined in the Multi package.
   */ public
 SBMLNamespaces getSBMLExtensionNamespaces(String uri) {
  return libsbml.DowncastSBMLNamespaces(libsbmlJNI.MultiExtension_getSBMLExtensionNamespaces(swigCPtr, this, uri), false);
}

  
/**
   * Takes a type code of the 'multi' package and returns a string
   * describing the code.
   <p>
   * @param typeCode a libSBML type code defined by the libSBML extension.
   * implementing support for the SBML Level&nbsp;3 'multi' package.
   <p>
   * @return a text string representing the type code given by <code>typeCode</code>.
   * If the type code is unrecognized for this implementation of the libSBML
   * 'multi' package, the string returned will be
   * <code>'(Unknown SBML Multi Type)'</code>.
   */ public
 String getStringFromTypeCode(int typeCode) {
    return libsbmlJNI.MultiExtension_getStringFromTypeCode(swigCPtr, this, typeCode);
  }

  
/** * @internal */ public
 static void init() {
    libsbmlJNI.MultiExtension_init();
  }

  
/** * @internal */ public
 SWIGTYPE_p_packageErrorTableEntry getErrorTable(long index) {
    return new SWIGTYPE_p_packageErrorTableEntry(libsbmlJNI.MultiExtension_getErrorTable(swigCPtr, this, index), true);
  }

  
/** * @internal */ public
 long getErrorTableIndex(long errorId) {
    return libsbmlJNI.MultiExtension_getErrorTableIndex(swigCPtr, this, errorId);
  }

  
/** * @internal */ public
 long getErrorIdOffset() {
    return libsbmlJNI.MultiExtension_getErrorIdOffset(swigCPtr, this);
  }

}
