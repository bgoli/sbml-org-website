/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-comp"><a href="group__comp.html">comp</a></span>
 Base class for SBML resolvers.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * The {@link SBMLResolver} class is the base class for the various SBML 
 * <em>resolvers</em>: facilities that take a unique identifier as input and return
 * the document associated with that identifier.  In SBML, resolvers come
 * into play with the SBML Level&nbsp;3 Hierarchical Model Composition
 * package; this package includes features that allow a model to be composed
 * from pieces that are external to a given SBML document, which implies the
 * need to be able to identify and locate those external pieces.  The
 * {@link SBMLResolver} class and its subclasses provide facilities for software
 * applications to be able to do these tasks.
 <p>
 * LibSBML provides a number of built-in resolvers, and applications can
 * create their own by subclassing {@link SBMLResolver} and following the examples
 * of the existing resolvers.  The following are the built-in resolvers
 * in libSBML 5.18.0:
 * <ul>
 * <li> {@link SBMLFileResolver}
 *
 * </ul> <p>
 * More resolvers may be provided by libSBML in the future.  Application
 * authors may also write their own.  
 <p>
 * @see SBMLUri 
 */

public class SBMLResolver {
   private long swigCPtr;
   protected boolean swigCMemOwn;

   protected SBMLResolver(long cPtr, boolean cMemoryOwn)
   {
     swigCMemOwn = cMemoryOwn;
     swigCPtr    = cPtr;
   }

   protected static long getCPtr(SBMLResolver obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (SBMLResolver obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_SBMLResolver(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    libsbmlJNI.SBMLResolver_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    libsbmlJNI.SBMLResolver_change_ownership(this, swigCPtr, true);
  }

  
/**
   * Creates a new {@link SBMLResolver} object.
   */ public
 SBMLResolver() {
    this(libsbmlJNI.new_SBMLResolver__SWIG_0(), true);
    libsbmlJNI.SBMLResolver_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  
/**
   * Copy constructor.  Creates a copy of an {@link SBMLResolver} object.
   <p>
   * @param c the {@link SBMLResolver} object to copy.
   */ public
 SBMLResolver(SBMLResolver c) {
    this(libsbmlJNI.new_SBMLResolver__SWIG_1(SBMLResolver.getCPtr(c), c), true);
    libsbmlJNI.SBMLResolver_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  
/**
   * Creates and returns a deep copy of this {@link SBMLResolver} object.
   <p>
   * @return a (deep) copy of this {@link SBMLResolver} object.
   */ public
 SBMLResolver cloneObject() {
    long cPtr = (getClass() == SBMLResolver.class) ? libsbmlJNI.SBMLResolver_cloneObject(swigCPtr, this) : libsbmlJNI.SBMLResolver_cloneObjectSwigExplicitSBMLResolver(swigCPtr, this);
    return (cPtr == 0) ? null : new SBMLResolver(cPtr, true);
  }

  
/**
   * Resolves the document for the given URI.
   <p>
   * @param uri the URI to the target document.
   * @param baseUri base URI, in case the URI is a relative one.
   <p>
   * @return  the document, if this resolver can resolve the document or <code>null.</code>
   */ public
 SBMLDocument resolve(String uri, String baseUri) {
    long cPtr = (getClass() == SBMLResolver.class) ? libsbmlJNI.SBMLResolver_resolve__SWIG_0(swigCPtr, this, uri, baseUri) : libsbmlJNI.SBMLResolver_resolveSwigExplicitSBMLResolver__SWIG_0(swigCPtr, this, uri, baseUri);
    return (cPtr == 0) ? null : new SBMLDocument(cPtr, false);
  }

  
/**
   * Resolves the document for the given URI.
   <p>
   * @param uri the URI to the target document.
   * @param baseUri base URI, in case the URI is a relative one.
   <p>
   * @return  the document, if this resolver can resolve the document or <code>null.</code>
   */ public
 SBMLDocument resolve(String uri) {
    long cPtr = (getClass() == SBMLResolver.class) ? libsbmlJNI.SBMLResolver_resolve__SWIG_1(swigCPtr, this, uri) : libsbmlJNI.SBMLResolver_resolveSwigExplicitSBMLResolver__SWIG_1(swigCPtr, this, uri);
    return (cPtr == 0) ? null : new SBMLDocument(cPtr, false);
  }

  
/**
   * Resolves the full URI for the given URI without actually reading the
   * document.
   <p>
   * @param uri the URI to the target document.
   * @param baseUri base URI, in case the URI is a relative one.
   <p>
   * @return  the full URI to the document, if this resolver can resolve the document or <code>null.</code>
   */ public
 SBMLUri resolveUri(String uri, String baseUri) {
    long cPtr = (getClass() == SBMLResolver.class) ? libsbmlJNI.SBMLResolver_resolveUri__SWIG_0(swigCPtr, this, uri, baseUri) : libsbmlJNI.SBMLResolver_resolveUriSwigExplicitSBMLResolver__SWIG_0(swigCPtr, this, uri, baseUri);
    return (cPtr == 0) ? null : new SBMLUri(cPtr, false);
  }

  
/**
   * Resolves the full URI for the given URI without actually reading the
   * document.
   <p>
   * @param uri the URI to the target document.
   * @param baseUri base URI, in case the URI is a relative one.
   <p>
   * @return  the full URI to the document, if this resolver can resolve the document or <code>null.</code>
   */ public
 SBMLUri resolveUri(String uri) {
    long cPtr = (getClass() == SBMLResolver.class) ? libsbmlJNI.SBMLResolver_resolveUri__SWIG_1(swigCPtr, this, uri) : libsbmlJNI.SBMLResolver_resolveUriSwigExplicitSBMLResolver__SWIG_1(swigCPtr, this, uri);
    return (cPtr == 0) ? null : new SBMLUri(cPtr, false);
  }

}
