/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 A group of graphical primitives creating a composite.
 <p>
 * The {@link RenderGroup} concept from the SBML Level&nbsp;3 Render package is used
 * to to create composite representations from simple primitives. The
 * {@link RenderGroup} class is derived from {@link GraphicalPrimitive2D} and inherits all its
 * methods and attributes.  In addition to those, the class defines
 * attributes to specify text render properties, curve decorations, an id, and
 * a list of child elements which can be any graphical primitive or other
 * group.
 <p>
 * The attributes of a group are inherited by all children of the group
 * unless they specify the attribute themselves.
 <p>
 * @see Text
 * @see RenderCurve
 */

public class RenderGroup extends GraphicalPrimitive2D {
   private long swigCPtr;

   protected RenderGroup(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.RenderGroup_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(RenderGroup obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (RenderGroup obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_RenderGroup(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link RenderGroup} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link RenderGroup}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link RenderGroup}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link RenderGroup}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 RenderGroup(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderGroup__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link RenderGroup} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link RenderGroup}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link RenderGroup}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link RenderGroup}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 RenderGroup(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderGroup__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link RenderGroup} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link RenderGroup}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link RenderGroup}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link RenderGroup}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 RenderGroup(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderGroup__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link RenderGroup} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link RenderGroup}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link RenderGroup}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link RenderGroup}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 RenderGroup() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderGroup__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link RenderGroup} using the given {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param renderns the {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 RenderGroup(RenderPkgNamespaces renderns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderGroup__SWIG_4(RenderPkgNamespaces.getCPtr(renderns), renderns), true);
  }

  
/**
   * Creates a new {@link RenderGroup} object from the given {@link XMLNode} object.
   * The {@link XMLNode} object has to contain a valid XML representation of a 
   * {@link RenderGroup} object as defined in the render extension specification.
   * This method is normally called when render information is read from a file and 
   * should normally not have to be called explicitly.
   <p>
   * @param group the {@link XMLNode} object reference that describes the {@link RenderGroup}
   * object to be instantiated.
   * @param l2version the version of SBML Level&nbsp;2 to target.
   */ public
 RenderGroup(XMLNode group, long l2version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderGroup__SWIG_5(XMLNode.getCPtr(group), group, l2version), true);
  }

  
/**
   * Creates a new {@link RenderGroup} object from the given {@link XMLNode} object.
   * The {@link XMLNode} object has to contain a valid XML representation of a 
   * {@link RenderGroup} object as defined in the render extension specification.
   * This method is normally called when render information is read from a file and 
   * should normally not have to be called explicitly.
   <p>
   * @param group the {@link XMLNode} object reference that describes the {@link RenderGroup}
   * object to be instantiated.
   * @param l2version the version of SBML Level&nbsp;2 to target.
   */ public
 RenderGroup(XMLNode group) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderGroup__SWIG_6(XMLNode.getCPtr(group), group), true);
  }

  
/**
   * Instantiates a new {@link RenderGroup} object.
   * All attributes are set as described for the default constructor
   * of {@link GraphicalPrimitive2D}.
   * All the font rendering attributes and the curve decorations
   * are unset. The id is set to the given string.
   <p>
   * @param id the id for the {@link RenderGroup} object.
   * @param renderns the {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 RenderGroup(RenderPkgNamespaces renderns, String id) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderGroup__SWIG_7(RenderPkgNamespaces.getCPtr(renderns), renderns, id), true);
  }

  
/**
   * Copy constructor for {@link RenderGroup}.
   <p>
   * @param orig the {@link RenderGroup} instance to copy.
   */ public
 RenderGroup(RenderGroup orig) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_RenderGroup__SWIG_8(RenderGroup.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link RenderGroup} object.
   <p>
   * @return a (deep) copy of this {@link RenderGroup} object.
   */ public
 SBase cloneObject() {
    long cPtr = libsbmlJNI.RenderGroup_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderGroup(cPtr, true);
  }

  
/**
   * Returns the value of the 'startHead' attribute of this {@link RenderGroup}.
   <p>
   * @return the value of the 'startHead' attribute of this {@link RenderGroup} as a
   * string.
   */ public
 String getStartHead() {
    return libsbmlJNI.RenderGroup_getStartHead(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'endHead' attribute of this {@link RenderGroup}.
   <p>
   * @return the value of the 'endHead' attribute of this {@link RenderGroup} as a
   * string.
   */ public
 String getEndHead() {
    return libsbmlJNI.RenderGroup_getEndHead(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'font-family' attribute of this {@link RenderGroup}.
   <p>
   * @return the value of the 'font-family' attribute of this {@link RenderGroup} as a
   * string.
   */ public
 String getFontFamily() {
    return libsbmlJNI.RenderGroup_getFontFamily(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'font-weight' attribute of this {@link RenderGroup}.
   <p>
   * @return the value of the 'font-weight' attribute of this {@link RenderGroup} as a
   * {@link FontWeight_t}.
   <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   <p>
   * The possible values returned by this method are:
   * <ul>
   * <li> {@link libsbmlConstants#FONT_WEIGHT_BOLD FONT_WEIGHT_BOLD}
   * <li> {@link libsbmlConstants#FONT_WEIGHT_NORMAL FONT_WEIGHT_NORMAL}
   * <li> {@link libsbmlConstants#FONT_WEIGHT_INVALID FONT_WEIGHT_INVALID}
   * </ul>
   */ public
 int getFontWeight() {
    return libsbmlJNI.RenderGroup_getFontWeight(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'font-weight' attribute of this {@link RenderGroup}.
   <p>
   * @return the value of the 'font-weight' attribute of this {@link RenderGroup} as a
   * string.
   <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   * The possible values returned by this method are:
   * <ul>
   * <li> <code>'bold'</code>
   * <li> <code>'normal'</code>
   * <li> <code>'</code>(Unknown FontWeight value)'
   * </ul>
   */ public
 String getFontWeightAsString() {
    return libsbmlJNI.RenderGroup_getFontWeightAsString(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'font-style' attribute of this {@link RenderGroup}.
   <p>
   * @return the value of the 'font-style' attribute of this {@link RenderGroup} as a
   * {@link FontStyle_t}.
   <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   <p>
   * The possible values returned by this method are:
   * <ul>
   * <li> {@link libsbmlConstants#FONT_STYLE_ITALIC FONT_STYLE_ITALIC}
   * <li> {@link libsbmlConstants#FONT_STYLE_NORMAL FONT_STYLE_NORMAL}
   * <li> {@link libsbmlConstants#FONT_STYLE_INVALID FONT_STYLE_INVALID}
   * </ul>
   */ public
 int getFontStyle() {
    return libsbmlJNI.RenderGroup_getFontStyle(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'font-style' attribute of this {@link RenderGroup}.
   <p>
   * @return the value of the 'font-style' attribute of this {@link RenderGroup} as a
   * string.
   <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   * The possible values returned by this method are:
   * <ul>
   * <li> <code>'italic'</code>
   * <li> <code>'normal'</code>
   * <li> <code>'</code>(Unknown FontStyle value)'
   * </ul>
   */ public
 String getFontStyleAsString() {
    return libsbmlJNI.RenderGroup_getFontStyleAsString(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'text-anchor' attribute of this {@link RenderGroup}.
   <p>
   * @return the value of the 'text-anchor' attribute of this {@link RenderGroup} as a
   * {@link HTextAnchor_t}.
   <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   <p>
   * The possible values returned by this method are:
   * <ul>
   * <li> {@link libsbmlConstants#H_TEXTANCHOR_START H_TEXTANCHOR_START}
   * <li> {@link libsbmlConstants#H_TEXTANCHOR_MIDDLE H_TEXTANCHOR_MIDDLE}
   * <li> {@link libsbmlConstants#H_TEXTANCHOR_END H_TEXTANCHOR_END}
   * <li> {@link libsbmlConstants#H_TEXTANCHOR_INVALID H_TEXTANCHOR_INVALID}
   * </ul>
   */ public
 int getTextAnchor() {
    return libsbmlJNI.RenderGroup_getTextAnchor(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'text-anchor' attribute of this {@link RenderGroup}.
   <p>
   * @return the value of the 'text-anchor' attribute of this {@link RenderGroup} as a
   * string.
   <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   * The possible values returned by this method are:
   * <ul>
   * <li> <code>'start'</code>
   * <li> <code>'middle'</code>
   * <li> <code>'end'</code>
   * <li> <code>'</code>(Unknown HTextAnchor value)'
   * </ul>
   */ public
 String getTextAnchorAsString() {
    return libsbmlJNI.RenderGroup_getTextAnchorAsString(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'vtext-anchor' attribute of this {@link RenderGroup}.
   <p>
   * @return the value of the 'vtext-anchor' attribute of this {@link RenderGroup} as a
   * {@link VTextAnchor_t}.
   <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   <p>
   * The possible values returned by this method are:
   * <ul>
   * <li> {@link libsbmlConstants#V_TEXTANCHOR_TOP V_TEXTANCHOR_TOP}
   * <li> {@link libsbmlConstants#V_TEXTANCHOR_MIDDLE V_TEXTANCHOR_MIDDLE}
   * <li> {@link libsbmlConstants#V_TEXTANCHOR_BOTTOM V_TEXTANCHOR_BOTTOM}
   * <li> {@link libsbmlConstants#V_TEXTANCHOR_BASELINE V_TEXTANCHOR_BASELINE}
   * <li> {@link libsbmlConstants#V_TEXTANCHOR_INVALID V_TEXTANCHOR_INVALID}
   * </ul>
   */ public
 int getVTextAnchor() {
    return libsbmlJNI.RenderGroup_getVTextAnchor(swigCPtr, this);
  }

  
/** * @internal */ public
 int getVtextAnchor() {
    return libsbmlJNI.RenderGroup_getVtextAnchor(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'vtext-anchor' attribute of this {@link RenderGroup}.
   <p>
   * @return the value of the 'vtext-anchor' attribute of this {@link RenderGroup} as a
   * string.
   <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   * The possible values returned by this method are:
   * <ul>
   * <li> <code>'top'</code>
   * <li> <code>'middle'</code>
   * <li> <code>'bottom'</code>
   * <li> <code>'baseline'</code>
   * <li> <code>'</code>(Unknown VTextAnchor value)'
   * </ul>
   */ public
 String getVTextAnchorAsString() {
    return libsbmlJNI.RenderGroup_getVTextAnchorAsString(swigCPtr, this);
  }

  
/** * @internal */ public
 String getVtextAnchorAsString() {
    return libsbmlJNI.RenderGroup_getVtextAnchorAsString(swigCPtr, this);
  }

  
/**
  * Returns the value of the 'font-size' element of this {@link RenderGroup}.
  <p>
  * @return the value of the 'font-size' element of this {@link RenderGroup} as a
  * {@link RelAbsVector}.
  */ public
 RelAbsVector getFontSize() {
    return new RelAbsVector(libsbmlJNI.RenderGroup_getFontSize__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderGroup}'s 'startHead' attribute is
   * set.
   <p>
   * @return <code>true</code> if this {@link RenderGroup}'s 'startHead' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetStartHead() {
    return libsbmlJNI.RenderGroup_isSetStartHead(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderGroup}'s 'endHead' attribute is
   * set.
   <p>
   * @return <code>true</code> if this {@link RenderGroup}'s 'endHead' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetEndHead() {
    return libsbmlJNI.RenderGroup_isSetEndHead(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderGroup}'s 'font-family' attribute
   * is set.
   <p>
   * @return <code>true</code> if this {@link RenderGroup}'s 'font-family' attribute has been
   * set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetFontFamily() {
    return libsbmlJNI.RenderGroup_isSetFontFamily(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderGroup}'s 'font-weight' attribute
   * is set.
   <p>
   * @return <code>true</code> if this {@link RenderGroup}'s 'font-weight' attribute has been
   * set, otherwise <code>false</code> is returned.
   <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   */ public
 boolean isSetFontWeight() {
    return libsbmlJNI.RenderGroup_isSetFontWeight(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderGroup}'s 'font-style' attribute
   * is set.
   <p>
   * @return <code>true</code> if this {@link RenderGroup}'s 'font-style' attribute has been set,
   * otherwise <code>false</code> is returned.
   <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   */ public
 boolean isSetFontStyle() {
    return libsbmlJNI.RenderGroup_isSetFontStyle(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderGroup}'s 'text-anchor' attribute
   * is set.
   <p>
   * @return <code>true</code> if this {@link RenderGroup}'s 'text-anchor' attribute has been
   * set, otherwise <code>false</code> is returned.
   <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   */ public
 boolean isSetTextAnchor() {
    return libsbmlJNI.RenderGroup_isSetTextAnchor(swigCPtr, this);
  }

  
/** * @internal */ public
 boolean isSetVtextAnchor() {
    return libsbmlJNI.RenderGroup_isSetVtextAnchor(swigCPtr, this);
  }

  
/**
  * Predicate returning <code>true</code> if this {@link RenderGroup}'s 'vtext-anchor' attribute
  * is set.
  <p>
  * @return <code>true</code> if this {@link RenderGroup}'s 'vtext-anchor' attribute has been
  * set, otherwise <code>false</code> is returned.
  <p>
  * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
  */ public
 boolean isSetVTextAnchor() {
    return libsbmlJNI.RenderGroup_isSetVTextAnchor(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderGroup}'s 'font-size' element is
   * set.
   <p>
   * @return <code>true</code> if this {@link RenderGroup}'s 'font-size' element has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetFontSize() {
    return libsbmlJNI.RenderGroup_isSetFontSize(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'startHead' attribute of this {@link RenderGroup}.
   <p>
   * @param startHead String& value of the 'startHead' attribute to be
   * set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setStartHead(String startHead) {
    return libsbmlJNI.RenderGroup_setStartHead(swigCPtr, this, startHead);
  }

  
/**
   * Sets the value of the 'endHead' attribute of this {@link RenderGroup}.
   <p>
   * @param endHead String& value of the 'endHead' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setEndHead(String endHead) {
    return libsbmlJNI.RenderGroup_setEndHead(swigCPtr, this, endHead);
  }

  
/**
   * Sets the value of the 'font-family' attribute of this {@link RenderGroup}.
   <p>
   * @param fontFamily String& value of the 'font-family' attribute to be
   * set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * Calling this function with <code>fontFamily</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetFontFamily().
   */ public
 int setFontFamily(String fontFamily) {
    return libsbmlJNI.RenderGroup_setFontFamily(swigCPtr, this, fontFamily);
  }

  
/**
   * Sets the value of the 'font-weight' attribute of this {@link RenderGroup}.
   <p>
   * @param fontWeight int value of the
   * 'font-weight' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   */ public
 int setFontWeight(int fontWeight) {
    return libsbmlJNI.RenderGroup_setFontWeight__SWIG_0(swigCPtr, this, fontWeight);
  }

  
/**
   * Sets the value of the 'font-weight' attribute of this {@link RenderGroup}.
   <p>
   * @param fontWeight String& of the 'font-weight' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   */ public
 int setFontWeight(String fontWeight) {
    return libsbmlJNI.RenderGroup_setFontWeight__SWIG_2(swigCPtr, this, fontWeight);
  }

  
/**
   * Sets the value of the 'font-style' attribute of this {@link RenderGroup}.
   <p>
   * @param fontStyle int value of the
   * 'font-style' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   */ public
 int setFontStyle(int fontStyle) {
    return libsbmlJNI.RenderGroup_setFontStyle__SWIG_0(swigCPtr, this, fontStyle);
  }

  
/**
   * Sets the value of the 'font-style' attribute of this {@link RenderGroup}.
   <p>
   * @param fontStyle String& of the 'font-style' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   */ public
 int setFontStyle(String fontStyle) {
    return libsbmlJNI.RenderGroup_setFontStyle__SWIG_2(swigCPtr, this, fontStyle);
  }

  
/**
   * Sets the value of the 'text-anchor' attribute of this {@link RenderGroup}.
   <p>
   * @param textAnchor int value of the
   * 'text-anchor' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   */ public
 int setTextAnchor(int textAnchor) {
    return libsbmlJNI.RenderGroup_setTextAnchor__SWIG_0(swigCPtr, this, textAnchor);
  }

  
/**
   * Sets the value of the 'text-anchor' attribute of this {@link RenderGroup}.
   <p>
   * @param textAnchor String& of the 'text-anchor' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   */ public
 int setTextAnchor(String textAnchor) {
    return libsbmlJNI.RenderGroup_setTextAnchor__SWIG_2(swigCPtr, this, textAnchor);
  }

  
/**
   * Sets the value of the 'vtext-anchor' attribute of this {@link RenderGroup}.
   <p>
   * @param anchor int value of the
   * 'vtext-anchor' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   */ public
 int setVTextAnchor(int anchor) {
    return libsbmlJNI.RenderGroup_setVTextAnchor__SWIG_0(swigCPtr, this, anchor);
  }

  
/** * @internal */ public
 int setVtextAnchor(int anchor) {
    return libsbmlJNI.RenderGroup_setVtextAnchor__SWIG_0(swigCPtr, this, anchor);
  }

  
/**
   * Sets the value of the 'vtext-anchor' attribute of this {@link RenderGroup}.
   <p>
   * @param vtextAnchor String& of the 'vtext-anchor' attribute to be
   * set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   */ public
 int setVTextAnchor(String vtextAnchor) {
    return libsbmlJNI.RenderGroup_setVTextAnchor__SWIG_1(swigCPtr, this, vtextAnchor);
  }

  
/** * @internal */ public
 int setVtextAnchor(String vtextAnchor) {
    return libsbmlJNI.RenderGroup_setVtextAnchor__SWIG_1(swigCPtr, this, vtextAnchor);
  }

  
/**
   * Sets the font size.
   * Normally this is an absolute value, e.g. 18 for a 18pt font.
   * It is however allowed the specify the font size in terms of relative values
   * in relation to the current viewport. In most cases the viewport will be the 
   * dimensions of a bounding box of a layout object.
   <p>
   * @param size the new font size.
   */ public
 int setFontSize(RelAbsVector size) {
    return libsbmlJNI.RenderGroup_setFontSize(swigCPtr, this, RelAbsVector.getCPtr(size), size);
  }

  
/**
   * Unsets the value of the 'startHead' attribute of this {@link RenderGroup}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetStartHead() {
    return libsbmlJNI.RenderGroup_unsetStartHead(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'endHead' attribute of this {@link RenderGroup}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetEndHead() {
    return libsbmlJNI.RenderGroup_unsetEndHead(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'font-family' attribute of this {@link RenderGroup}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetFontFamily() {
    return libsbmlJNI.RenderGroup_unsetFontFamily(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'font-weight' attribute of this {@link RenderGroup}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   */ public
 int unsetFontWeight() {
    return libsbmlJNI.RenderGroup_unsetFontWeight(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'font-style' attribute of this {@link RenderGroup}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   */ public
 int unsetFontStyle() {
    return libsbmlJNI.RenderGroup_unsetFontStyle(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'text-anchor' attribute of this {@link RenderGroup}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   */ public
 int unsetTextAnchor() {
    return libsbmlJNI.RenderGroup_unsetTextAnchor(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'vtext-anchor' attribute of this {@link RenderGroup}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   */ public
 int unsetVTextAnchor() {
    return libsbmlJNI.RenderGroup_unsetVTextAnchor(swigCPtr, this);
  }

  
/** * @internal */ public
 int unsetVtextAnchor() {
    return libsbmlJNI.RenderGroup_unsetVtextAnchor(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'font-size' element of this {@link RenderGroup}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetFontSize() {
    return libsbmlJNI.RenderGroup_unsetFontSize(swigCPtr, this);
  }

  
/**
   * Returns the {@link ListOfDrawables} from this {@link RenderGroup}.
   <p>
   * @return the {@link ListOfDrawables} from this {@link RenderGroup}.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addElement(Transformation2D object)
   * @see #createEllipse()
   * @see #createRectangle()
   * @see #createPolygon()
   * @see #createText()
   * @see #createCurve()
   * @see #createImage()
   * @see #getElement(String sid)
   * @see #getElement(long n)
   * @see #getNumElements()
   * @see #removeElement(String sid)
   * @see #removeElement(long n)
   */ public
 ListOfDrawables getListOfElements() {
    long cPtr = libsbmlJNI.RenderGroup_getListOfElements__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfDrawables(cPtr, false);
  }

  
/**
   * Get a {@link Transformation2D} from the {@link RenderGroup}.
   <p>
   * @param n a long integer representing the index of the {@link Transformation2D} to
   * retrieve.
   <p>
   * @return the nth {@link Transformation2D} in the {@link ListOfDrawables} within this
   * {@link RenderGroup}.
   * If the index <code>n</code> is invalid, <code>null</code> is returned.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addElement(Transformation2D object)
   * @see #createEllipse()
   * @see #createRectangle()
   * @see #createPolygon()
   * @see #createText()
   * @see #createCurve()
   * @see #createImage()
   * @see #getElement(String sid)
   * @see #getNumElements()
   * @see #removeElement(String sid)
   * @see #removeElement(long n)
   */ public
 Transformation2D getElement(long n) {
    long cPtr = libsbmlJNI.RenderGroup_getElement__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new Transformation2D(cPtr, false);
  }

  
/**
   * Returns pointer to the element with the given <code>id</code>.
   * If there is no such element, <code>null</code> is returned.
   * Since the id on all those object is optional, this routine
   * might not be as helpful as similar routines in other classes.
   <p>
   * @param id id of element to be returned
   <p>
   * @return pointer to element with id or null if
   * there is no object with that id
   */ public
 Transformation2D getElement(String id) {
    long cPtr = libsbmlJNI.RenderGroup_getElement__SWIG_2(swigCPtr, this, id);
    return (cPtr == 0) ? null : new Transformation2D(cPtr, false);
  }

  
/**
   * Adds a copy of the given {@link Transformation2D} to this {@link RenderGroup}.
   <p>
   * @param td the {@link Transformation2D} object to add.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
   <p>
   * @see #createEllipse()
   * @see #createRectangle()
   * @see #createPolygon()
   * @see #createText()
   * @see #createCurve()
   * @see #createImage()
   * @see #getElement(String sid)
   * @see #getElement(long n)
   * @see #getNumElements()
   * @see #removeElement(String sid)
   * @see #removeElement(long n)
   */ public
 int addElement(Transformation2D td) {
    return libsbmlJNI.RenderGroup_addElement(swigCPtr, this, Transformation2D.getCPtr(td), td);
  }

  
/**
   * Adds a copy of the given element to the end of the list of children elements.
   <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   *
   * </ul> <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link RenderGroup}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link RenderGroup}</em>.  In addition, the caller should make
   * sure to free the original object if it is no longer being used, or
   * else a memory leak will result.  Please see {@link RenderGroup#createXXX()}
   * for methods that do not lead to these issues.
   <p>
   * @see #createEllipse()
   * @see #createRectangle()
   * @see #createPolygon()
   * @see #createText()
   * @see #createCurve()
   * @see #createImage()
   */ public
 int addChildElement(Transformation2D pChild) {
    return libsbmlJNI.RenderGroup_addChildElement(swigCPtr, this, Transformation2D.getCPtr(pChild), pChild);
  }

  
/**
   * Get the number of {@link Transformation2D} objects in this {@link RenderGroup}.
   <p>
   * @return the number of {@link Transformation2D} objects in this {@link RenderGroup}.
   <p>
   * @see #addElement(Transformation2D object)
   * @see #createEllipse()
   * @see #createRectangle()
   * @see #createPolygon()
   * @see #createText()
   * @see #createCurve()
   * @see #createImage()
   * @see #getElement(String sid)
   * @see #getElement(long n)
   * @see #removeElement(String sid)
   * @see #removeElement(long n)
   */ public
 long getNumElements() {
    return libsbmlJNI.RenderGroup_getNumElements(swigCPtr, this);
  }

  
/**
   * Creates a new {@link Image} object, adds it to this {@link RenderGroup} object and returns
   * the {@link Image} object created.
   <p>
   * @return a new {@link Image} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addElement(Transformation2D object)
   * @see #getElement(String sid)
   * @see #getElement(long n)
   * @see #getNumElements()
   * @see #removeElement(String sid)
   * @see #removeElement(long n)
   */ public
 Image createImage() {
    long cPtr = libsbmlJNI.RenderGroup_createImage(swigCPtr, this);
    return (cPtr == 0) ? null : new Image(cPtr, false);
  }

  
/**
   * Creates a new {@link Ellipse} object, adds it to this {@link RenderGroup} object and
   * returns the {@link Ellipse} object created.
   <p>
   * @return a new {@link Ellipse} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addElement(Transformation2D object)
   * @see #getElement(String sid)
   * @see #getElement(long n)
   * @see #getNumElements()
   * @see #removeElement(String sid)
   * @see #removeElement(long n)
   */ public
 Ellipse createEllipse() {
    long cPtr = libsbmlJNI.RenderGroup_createEllipse(swigCPtr, this);
    return (cPtr == 0) ? null : new Ellipse(cPtr, false);
  }

  
/**
   * Creates a new {@link Rectangle} object, adds it to this {@link RenderGroup} object and
   * returns the {@link Rectangle} object created.
   <p>
   * @return a new {@link Rectangle} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addElement(Transformation2D object)
   * @see #getElement(String sid)
   * @see #getElement(long n)
   * @see #getNumElements()
   * @see #removeElement(String sid)
   * @see #removeElement(long n)
   */ public
 Rectangle createRectangle() {
    long cPtr = libsbmlJNI.RenderGroup_createRectangle(swigCPtr, this);
    return (cPtr == 0) ? null : new Rectangle(cPtr, false);
  }

  
/**
   * Creates a new {@link Polygon} object, adds it to this {@link RenderGroup} object and
   * returns the {@link Polygon} object created.
   <p>
   * @return a new {@link Polygon} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addElement(Transformation2D object)
   * @see #getElement(String sid)
   * @see #getElement(long n)
   * @see #getNumElements()
   * @see #removeElement(String sid)
   * @see #removeElement(long n)
   */ public
 Polygon createPolygon() {
    long cPtr = libsbmlJNI.RenderGroup_createPolygon(swigCPtr, this);
    return (cPtr == 0) ? null : new Polygon(cPtr, false);
  }

  
/**
   * Creates a new {@link RenderGroup} object, adds it to this {@link RenderGroup} object and
   * returns the {@link RenderGroup} object created.
   <p>
   * @return a new {@link RenderGroup} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addElement(Transformation2D object)
   * @see #getElement(String sid)
   * @see #getElement(long n)
   * @see #getNumElements()
   * @see #removeElement(String sid)
   * @see #removeElement(long n)
   */ public
 RenderGroup createGroup() {
    long cPtr = libsbmlJNI.RenderGroup_createGroup(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderGroup(cPtr, false);
  }

  
/**
   * Creates a new {@link LineEnding} object, adds it to this {@link RenderGroup} object and
   * returns the {@link LineEnding} object created.
   <p>
   * @return a new {@link LineEnding} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addElement(Transformation2D object)
   * @see #getElement(String sid)
   * @see #getElement(long n)
   * @see #getNumElements()
   * @see #removeElement(String sid)
   * @see #removeElement(long n)
   */ public
 LineEnding createLineEnding() {
    long cPtr = libsbmlJNI.RenderGroup_createLineEnding(swigCPtr, this);
    return (cPtr == 0) ? null : new LineEnding(cPtr, false);
  }

  
/**
   * Creates a new {@link Text} object, adds it to this {@link RenderGroup} object and returns
   * the {@link Text} object created.
   <p>
   * @return a new {@link Text} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addElement(Transformation2D object)
   * @see #getElement(String sid)
   * @see #getElement(long n)
   * @see #getNumElements()
   * @see #removeElement(String sid)
   * @see #removeElement(long n)
   */ public
 Text createText() {
    long cPtr = libsbmlJNI.RenderGroup_createText(swigCPtr, this);
    return (cPtr == 0) ? null : new Text(cPtr, false);
  }

  
/**
   * Creates a new {@link RenderCurve} object, adds it to this {@link RenderGroup} object and
   * returns the {@link RenderCurve} object created.
   <p>
   * @return a new {@link RenderCurve} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addElement(Transformation2D object)
   * @see #getElement(String sid)
   * @see #getElement(long n)
   * @see #getNumElements()
   * @see #removeElement(String sid)
   * @see #removeElement(long n)
   */ public
 RenderCurve createCurve() {
    long cPtr = libsbmlJNI.RenderGroup_createCurve(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderCurve(cPtr, false);
  }

  
/**
   * Removes the nth {@link Transformation2D} from this {@link RenderGroup} and returns a
   * pointer to it.
   <p>
   * @param n a long integer representing the index of the {@link Transformation2D} to
   * remove.
   <p>
   * @return a pointer to the nth {@link Transformation2D} in this {@link RenderGroup}.
   <p>
   * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
   <p>
   * @see #addElement(Transformation2D object)
   * @see #createEllipse()
   * @see #createRectangle()
   * @see #createPolygon()
   * @see #createText()
   * @see #createCurve()
   * @see #createImage()
   * @see #getElement(String sid)
   * @see #getElement(long n)
   * @see #getNumElements()
   * @see #removeElement(String sid)
   */ public
 Transformation2D removeElement(long n) {
    long cPtr = libsbmlJNI.RenderGroup_removeElement__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new Transformation2D(cPtr, false);
  }

  
/**
  * Removes the {@link Transformation2D} with the given id from this {@link RenderGroup} and returns a
  * pointer to it.
  <p>
  * @param sid the ID of the {@link Transformation2D} to remove.
  <p>
  * @return a pointer to the removed {@link Transformation2D} in this {@link RenderGroup}, or 
  * <code>null</code> if no such {@link Transformation2D} exists.
  <p>
  * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
  <p>
  * @see #addElement(Transformation2D object)
  * @see #createEllipse()
  * @see #createRectangle()
  * @see #createPolygon()
  * @see #createText()
  * @see #createCurve()
  * @see #createImage()
  * @see #getElement(String sid)
  * @see #getElement(long n)
  * @see #getNumElements()
  * @see #removeElement(long n)
  */ public
 Transformation2D removeElement(String sid) {
    long cPtr = libsbmlJNI.RenderGroup_removeElement__SWIG_1(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new Transformation2D(cPtr, false);
  }

  
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as 'referring to an identifier', but the effective
 * data type was the same as <code>SIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier.
 * @param newid the new identifier.
   */ public
 void renameSIdRefs(String oldid, String newid) {
    libsbmlJNI.RenderGroup_renameSIdRefs(swigCPtr, this, oldid, newid);
  }

  
/**
   * Returns the XML element name of this {@link RenderGroup} object.
   <p>
   * For {@link RenderGroup}, the XML element name is always <code>'g'.</code>
   <p>
   * @return the name of this element, i.e. <code>'g'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.RenderGroup_getElementName(swigCPtr, this);
  }

  
/** * @internal */ public
 void setElementName(String name) {
    libsbmlJNI.RenderGroup_setElementName(swigCPtr, this, name);
  }

  
/**
   * Returns the libSBML type code for this {@link RenderGroup} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_RENDER_GROUP SBML_RENDER_GROUP}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.RenderGroup_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link RenderGroup} object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required attributes of this
   * {@link RenderGroup} have been set, otherwise <code>false</code> is returned.
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.RenderGroup_hasRequiredAttributes(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required elements for this
   * {@link RenderGroup} object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required elements of this
   * {@link RenderGroup} have been set, otherwise <code>false</code> is returned.
   <p>
   * @note The required elements for the {@link RenderGroup} object are:
   */ public
 boolean hasRequiredElements() {
    return libsbmlJNI.RenderGroup_hasRequiredElements(swigCPtr, this);
  }

  
/** * @internal */ public
 void connectToChild() {
    libsbmlJNI.RenderGroup_connectToChild(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.RenderGroup_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

  
/**
   * Returns the first child element that has the given <code>id</code> in the model-wide
   * SId namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id a string representing the id attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>id</code>. If no such
   * object is found, this method returns <code>null.</code>
   */ public
 SBase getElementBySId(String id) {
  return libsbml.DowncastSBase(libsbmlJNI.RenderGroup_getElementBySId(swigCPtr, this, id), false);
}

  
/**
   * Returns the first child element that has the given <code>metaid</code>, or <code>null</code>
   * if no such object is found.
   <p>
   * @param metaid a string representing the metaid attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>metaid</code>. If no
   * such object is found this method returns <code>null.</code>
   */ public
 SBase getElementByMetaId(String metaid) {
  return libsbml.DowncastSBase(libsbmlJNI.RenderGroup_getElementByMetaId(swigCPtr, this, metaid), false);
}

  
/**
   * Creates an {@link XMLNode} object from this {@link RenderGroup} object.
   <p>
   * @return the {@link XMLNode} with the XML representation for the 
   * {@link RenderGroup} object.
   */ public
 XMLNode toXML() {
    return new XMLNode(libsbmlJNI.RenderGroup_toXML(swigCPtr, this), true);
  }

}
