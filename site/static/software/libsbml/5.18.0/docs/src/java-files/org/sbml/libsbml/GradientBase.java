/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 Abstract base class for linear and radial gradients.
 <p>
 * The base class implements common structures to both gradient classes.
 * Both gradients have an id attribute which is used to reference a gradient
 * within other render extension constructs. The id of a gradient can be used
 * to define the fill style of 2D objects like e.g. rectangles.
 <p>
 * Further, both gradient classes have a {@link ListOfGradientStops} objects which holds
 * the {@link GradientStop} objects that define the gradient and both classes have an 
 * attribute called spreadMethod which defines how a gradient is applied to an
 * object.
 */

public class GradientBase extends SBase {
   private long swigCPtr;

   protected GradientBase(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.GradientBase_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(GradientBase obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (GradientBase obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_GradientBase(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates and returns a deep copy of this {@link GradientBase} object.
   <p>
   * @return a (deep) copy of this {@link GradientBase} object.
   */ public
 SBase cloneObject() {
  return (GradientBase) libsbml.DowncastSBase(libsbmlJNI.GradientBase_cloneObject(swigCPtr, this), true);
}

  
/**
   * Returns the value of the 'id' attribute of this {@link GradientBase}.
   <p>
   * @return the value of the 'id' attribute of this {@link GradientBase} as a string.
   */ public
 String getId() {
    return libsbmlJNI.GradientBase_getId(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'name' attribute of this {@link GradientBase}.
   <p>
   * @return the value of the 'name' attribute of this {@link GradientBase} as a
   * string.
   */ public
 String getName() {
    return libsbmlJNI.GradientBase_getName(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'spreadMethod' attribute of this {@link GradientBase}.
   <p>
   * @return the value of the 'spreadMethod' attribute of this {@link GradientBase} as
   * a int.
   <p>
   * <p>
 * The attribute 'spreadMethod' on a {@link GradientBase} object is used by {@link GradientBase} 
 * elements to decide how gradients propagate over the whole element they are 
 * applied to.  The following are the allowable values for 'spreadMethod':
 * <ul>
 * <li> <code>'pad'</code>, the gradient color at the endpoint of the vector defines how 
 * the gradient is continued beyond that point (default value).
 <p>
 * <li> <code>'reflect'</code>, the gradient continues from end to start and then from 
 * start to end again and again.
 <p>
 * <li> <code>'repeat'</code>, the gradient pattern is repeated from start to end over 
 * and over again.
 <p>
 * </ul>
   <p>
   * The possible values returned by this method are:
   * <ul>
   * <li> {@link libsbmlConstants#GRADIENT_SPREADMETHOD_PAD GRADIENT_SPREADMETHOD_PAD}
   * <li> {@link libsbmlConstants#GRADIENT_SPREADMETHOD_REFLECT GRADIENT_SPREADMETHOD_REFLECT}
   * <li> {@link libsbmlConstants#GRADIENT_SPREADMETHOD_REPEAT GRADIENT_SPREADMETHOD_REPEAT}
   * <li> {@link libsbmlConstants#GRADIENT_SPREAD_METHOD_INVALID GRADIENT_SPREAD_METHOD_INVALID}
   * </ul>
   */ public
 int getSpreadMethod() {
    return libsbmlJNI.GradientBase_getSpreadMethod(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'spreadMethod' attribute of this {@link GradientBase}.
   <p>
   * @return the value of the 'spreadMethod' attribute of this {@link GradientBase} as
   * a string.
   <p>
   * <p>
 * The attribute 'spreadMethod' on a {@link GradientBase} object is used by {@link GradientBase} 
 * elements to decide how gradients propagate over the whole element they are 
 * applied to.  The following are the allowable values for 'spreadMethod':
 * <ul>
 * <li> <code>'pad'</code>, the gradient color at the endpoint of the vector defines how 
 * the gradient is continued beyond that point (default value).
 <p>
 * <li> <code>'reflect'</code>, the gradient continues from end to start and then from 
 * start to end again and again.
 <p>
 * <li> <code>'repeat'</code>, the gradient pattern is repeated from start to end over 
 * and over again.
 <p>
 * </ul>
   * The possible values returned by this method are:
   * <ul>
   * <li> <code>'pad'</code>
   * <li> <code>'reflect'</code>
   * <li> <code>'repeat'</code>
   * <li> <code>'invalid'</code>
   * <li> <code>'</code>(Unknown GradientSpreadMethod value)'
   * </ul>
   */ public
 String getSpreadMethodAsString() {
    return libsbmlJNI.GradientBase_getSpreadMethodAsString(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'spreadMethod' attribute of this {@link GradientBase}.
   <p>
   * @return the value of the 'spreadMethod' attribute of this {@link GradientBase} as
   * a string.
   <p>
   * <p>
 * The attribute 'spreadMethod' on a {@link GradientBase} object is used by {@link GradientBase} 
 * elements to decide how gradients propagate over the whole element they are 
 * applied to.  The following are the allowable values for 'spreadMethod':
 * <ul>
 * <li> <code>'pad'</code>, the gradient color at the endpoint of the vector defines how 
 * the gradient is continued beyond that point (default value).
 <p>
 * <li> <code>'reflect'</code>, the gradient continues from end to start and then from 
 * start to end again and again.
 <p>
 * <li> <code>'repeat'</code>, the gradient pattern is repeated from start to end over 
 * and over again.
 <p>
 * </ul>
   * The possible values returned by this method are:
   * <ul>
   * <li> <code>'pad'</code>
   * <li> <code>'reflect'</code>
   * <li> <code>'repeat'</code>
   * <li> <code>'invalid'</code>
   * </ul>
   */ public
 String getSpreadMethodString() {
    return libsbmlJNI.GradientBase_getSpreadMethodString(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link GradientBase}'s 'id' attribute is set.
   <p>
   * @return <code>true</code> if this {@link GradientBase}'s 'id' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetId() {
    return libsbmlJNI.GradientBase_isSetId(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link GradientBase}'s 'name' attribute is
   * set.
   <p>
   * @return <code>true</code> if this {@link GradientBase}'s 'name' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetName() {
    return libsbmlJNI.GradientBase_isSetName(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link GradientBase}'s 'spreadMethod'
   * attribute is set.
   <p>
   * @return <code>true</code> if this {@link GradientBase}'s 'spreadMethod' attribute has been
   * set, otherwise <code>false</code> is returned.
   <p>
   * <p>
 * The attribute 'spreadMethod' on a {@link GradientBase} object is used by {@link GradientBase} 
 * elements to decide how gradients propagate over the whole element they are 
 * applied to.  The following are the allowable values for 'spreadMethod':
 * <ul>
 * <li> <code>'pad'</code>, the gradient color at the endpoint of the vector defines how 
 * the gradient is continued beyond that point (default value).
 <p>
 * <li> <code>'reflect'</code>, the gradient continues from end to start and then from 
 * start to end again and again.
 <p>
 * <li> <code>'repeat'</code>, the gradient pattern is repeated from start to end over 
 * and over again.
 <p>
 * </ul>
   */ public
 boolean isSetSpreadMethod() {
    return libsbmlJNI.GradientBase_isSetSpreadMethod(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'id' attribute of this {@link GradientBase}.
   <p>
   * @param id the string value of the 'id' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * Calling this function with <code>id</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetId().
   */ public
 int setId(String id) {
    return libsbmlJNI.GradientBase_setId(swigCPtr, this, id);
  }

  
/**
   * Sets the value of the 'name' attribute of this {@link GradientBase}.
   <p>
   * @param name the string value of the 'name' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * Calling this function with <code>name</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetName().
   */ public
 int setName(String name) {
    return libsbmlJNI.GradientBase_setName(swigCPtr, this, name);
  }

  
/**
   * Sets the value of the 'spreadMethod' attribute of this {@link GradientBase}.
   <p>
   * @param spreadMethod int value
   * of the 'spreadMethod' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * <p>
 * The attribute 'spreadMethod' on a {@link GradientBase} object is used by {@link GradientBase} 
 * elements to decide how gradients propagate over the whole element they are 
 * applied to.  The following are the allowable values for 'spreadMethod':
 * <ul>
 * <li> <code>'pad'</code>, the gradient color at the endpoint of the vector defines how 
 * the gradient is continued beyond that point (default value).
 <p>
 * <li> <code>'reflect'</code>, the gradient continues from end to start and then from 
 * start to end again and again.
 <p>
 * <li> <code>'repeat'</code>, the gradient pattern is repeated from start to end over 
 * and over again.
 <p>
 * </ul>
   */ public
 void setSpreadMethod(int spreadMethod) {
    libsbmlJNI.GradientBase_setSpreadMethod__SWIG_0(swigCPtr, this, spreadMethod);
  }

  
/**
   * Sets the value of the 'spreadMethod' attribute of this {@link GradientBase}.
   <p>
   * @param spreadMethod String& of the 'spreadMethod' attribute to be
   * set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * <p>
 * The attribute 'spreadMethod' on a {@link GradientBase} object is used by {@link GradientBase} 
 * elements to decide how gradients propagate over the whole element they are 
 * applied to.  The following are the allowable values for 'spreadMethod':
 * <ul>
 * <li> <code>'pad'</code>, the gradient color at the endpoint of the vector defines how 
 * the gradient is continued beyond that point (default value).
 <p>
 * <li> <code>'reflect'</code>, the gradient continues from end to start and then from 
 * start to end again and again.
 <p>
 * <li> <code>'repeat'</code>, the gradient pattern is repeated from start to end over 
 * and over again.
 <p>
 * </ul>
   */ public
 int setSpreadMethod(String spreadMethod) {
    return libsbmlJNI.GradientBase_setSpreadMethod__SWIG_2(swigCPtr, this, spreadMethod);
  }

  
/**
   * Unsets the value of the 'id' attribute of this {@link GradientBase}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetId() {
    return libsbmlJNI.GradientBase_unsetId(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'name' attribute of this {@link GradientBase}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetName() {
    return libsbmlJNI.GradientBase_unsetName(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'spreadMethod' attribute of this {@link GradientBase}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * <p>
 * The attribute 'spreadMethod' on a {@link GradientBase} object is used by {@link GradientBase} 
 * elements to decide how gradients propagate over the whole element they are 
 * applied to.  The following are the allowable values for 'spreadMethod':
 * <ul>
 * <li> <code>'pad'</code>, the gradient color at the endpoint of the vector defines how 
 * the gradient is continued beyond that point (default value).
 <p>
 * <li> <code>'reflect'</code>, the gradient continues from end to start and then from 
 * start to end again and again.
 <p>
 * <li> <code>'repeat'</code>, the gradient pattern is repeated from start to end over 
 * and over again.
 <p>
 * </ul>
   */ public
 int unsetSpreadMethod() {
    return libsbmlJNI.GradientBase_unsetSpreadMethod(swigCPtr, this);
  }

  
/**
   * Returns the {@link ListOfGradientStops} from this {@link GradientBase}.
   <p>
   * @return the {@link ListOfGradientStops} from this {@link GradientBase}.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addGradientStop(GradientStop object)
   * @see #createGradientStop()
   * @see #getGradientStop(String sid)
   * @see #getGradientStop(long n)
   * @see #getNumGradientStops()
   * @see #removeGradientStop(String sid)
   * @see #removeGradientStop(long n)
   */ public
 ListOfGradientStops getListOfGradientStops() {
    long cPtr = libsbmlJNI.GradientBase_getListOfGradientStops__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfGradientStops(cPtr, false);
  }

  
/**
   * Get the nth {@link GradientStop} from the {@link GradientBase}.
   <p>
   * @param n a long integer representing the index of the {@link GradientStop} to
   * retrieve.
   <p>
   * @return the nth {@link GradientStop} in the {@link ListOfGradientStops} within this
   * {@link GradientBase}.
   * If the index <code>n</code> is invalid, <code>null</code> is returned.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addGradientStop(GradientStop object)
   * @see #createGradientStop()
   * @see #getGradientStop(String sid)
   * @see #getNumGradientStops()
   * @see #removeGradientStop(String sid)
   * @see #removeGradientStop(long n)
   */ public
 GradientStop getGradientStop(long n) {
    long cPtr = libsbmlJNI.GradientBase_getGradientStop__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new GradientStop(cPtr, false);
  }

  
/**
  * Get the {@link GradientStop} with the given id from the {@link GradientBase}.
  <p>
  * @param sid the id of the {@link GradientStop} to retrieve.
  <p>
  * @return the {@link GradientStop} in the {@link ListOfGradientStops} with 
  * the given <code>id</code> from this {@link GradientBase}.
  * If no such {@link GradientStop} exists, <code>null</code> is returned.
  <p>
  * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
  <p>
  * @see #addGradientStop(GradientStop object)
  * @see #createGradientStop()
  * @see #getGradientStop(long n)
  * @see #getNumGradientStops()
  * @see #removeGradientStop(String sid)
  * @see #removeGradientStop(long n)
  */ public
 GradientStop getGradientStop(String sid) {
    long cPtr = libsbmlJNI.GradientBase_getGradientStop__SWIG_1(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new GradientStop(cPtr, false);
  }

  
/**
   * Adds a copy of the given {@link GradientStop} to this {@link GradientBase}.
   <p>
   * @param gs the {@link GradientStop} object to add.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
   <p>
   * @see #createGradientStop()
   * @see #getGradientStop(String sid)
   * @see #getGradientStop(long n)
   * @see #getNumGradientStops()
   * @see #removeGradientStop(String sid)
   * @see #removeGradientStop(long n)
   */ public
 int addGradientStop(GradientStop gs) {
    return libsbmlJNI.GradientBase_addGradientStop(swigCPtr, this, GradientStop.getCPtr(gs), gs);
  }

  
/**
   * Get the number of {@link GradientStop} objects in this {@link GradientBase}.
   <p>
   * @return the number of {@link GradientStop} objects in this {@link GradientBase}.
   <p>
   * @see #addGradientStop(GradientStop object)
   * @see #createGradientStop()
   * @see #getGradientStop(String sid)
   * @see #getGradientStop(long n)
   * @see #removeGradientStop(String sid)
   * @see #removeGradientStop(long n)
   */ public
 long getNumGradientStops() {
    return libsbmlJNI.GradientBase_getNumGradientStops(swigCPtr, this);
  }

  
/**
   * Creates a new {@link GradientStop} object, adds it to this {@link GradientBase} object and
   * returns the {@link GradientStop} object created.
   <p>
   * @return a new {@link GradientStop} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addGradientStop(GradientStop object)
   * @see #getGradientStop(String sid)
   * @see #getGradientStop(long n)
   * @see #getNumGradientStops()
   * @see #removeGradientStop(String sid)
   * @see #removeGradientStop(long n)
   */ public
 GradientStop createGradientStop() {
    long cPtr = libsbmlJNI.GradientBase_createGradientStop(swigCPtr, this);
    return (cPtr == 0) ? null : new GradientStop(cPtr, false);
  }

  
/**
   * Removes the nth {@link GradientStop} from this {@link GradientBase} and returns a pointer
   * to it.
   <p>
   * @param n a long integer representing the index of the {@link GradientStop} to
   * remove.
   <p>
   * @return a pointer to the nth {@link GradientStop} in this {@link GradientBase}.
   <p>
   * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
   <p>
   * @see #addGradientStop(GradientStop object)
   * @see #createGradientStop()
   * @see #getGradientStop(String sid)
   * @see #getGradientStop(long n)
   * @see #getNumGradientStops()
   * @see #removeGradientStop(String sid)
   */ public
 GradientStop removeGradientStop(long n) {
    long cPtr = libsbmlJNI.GradientBase_removeGradientStop__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new GradientStop(cPtr, false);
  }

  
/**
  * Removes the {@link GradientStop} with the given id from this {@link GradientBase} 
  * and returns a pointer to it.
  <p>
  * @param sid the id of the {@link GradientStop} to remove.
  <p>
  * @return a pointer to the nth {@link GradientStop} in this {@link GradientBase}.
  <p>
  * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
  <p>
  * @see #addGradientStop(GradientStop object)
  * @see #createGradientStop()
  * @see #getGradientStop(String sid)
  * @see #getGradientStop(long n)
  * @see #getNumGradientStops()
  * @see #removeGradientStop(long n)
  */ public
 GradientStop removeGradientStop(String sid) {
    long cPtr = libsbmlJNI.GradientBase_removeGradientStop__SWIG_1(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new GradientStop(cPtr, false);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link GradientBase} is of type
   * {@link LinearGradient}
   <p>
   * @return <code>true</code> if this abstract {@link GradientBase} is of type {@link LinearGradient},
   * <code>false</code> otherwise
   */ public
 boolean isLinearGradient() {
    return libsbmlJNI.GradientBase_isLinearGradient(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link GradientBase} is of type
   * {@link RadialGradient}
   <p>
   * @return <code>true</code> if this abstract {@link GradientBase} is of type {@link RadialGradient},
   * <code>false</code> otherwise
   */ public
 boolean isRadialGradient() {
    return libsbmlJNI.GradientBase_isRadialGradient(swigCPtr, this);
  }

  
/**
   * Returns the XML element name of this {@link GradientBase} object.
   <p>
   * For {@link GradientBase}, the XML element name is always <code>'gradientBase'.</code>
   <p>
   * @return the name of this element, i.e. <code>'gradientBase'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.GradientBase_getElementName(swigCPtr, this);
  }

  
/** * @internal */ public
 void setElementName(String name) {
    libsbmlJNI.GradientBase_setElementName(swigCPtr, this, name);
  }

  
/**
   * Returns the libSBML type code for this {@link GradientBase} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_RENDER_GRADIENTDEFINITION SBML_RENDER_GRADIENTDEFINITION}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.GradientBase_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link GradientBase} object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required attributes of this
   * {@link GradientBase} have been set, otherwise <code>false</code> is returned.
   <p>
   * @note The required attributes for the {@link GradientBase} object are:
   * <ul>
   * <li> 'id'
   * </ul>
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.GradientBase_hasRequiredAttributes(swigCPtr, this);
  }

  
/** * @internal */ public
 void connectToChild() {
    libsbmlJNI.GradientBase_connectToChild(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.GradientBase_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

  
/**
   * Creates an {@link XMLNode} object from this {@link GradientBase} object.
   <p>
   * @return the {@link XMLNode} with the XML representation for the 
   * {@link GradientBase} object.
   <p>
   * This method is purely abstract and needs to be implemented
   * by derived classes.
   */ public
 XMLNode toXML() {
    return new XMLNode(libsbmlJNI.GradientBase_toXML(swigCPtr, this), true);
  }

  
/**
   * Returns the first child element that has the given <code>id</code> in the model-wide
   * SId namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id a string representing the id attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>id</code>. If no such
   * object is found, this method returns <code>null.</code>
   */ public
 SBase getElementBySId(String id) {
  return libsbml.DowncastSBase(libsbmlJNI.GradientBase_getElementBySId(swigCPtr, this, id), false);
}

  
/**
   * Returns the first child element that has the given <code>metaid</code>, or <code>null</code>
   * if no such object is found.
   <p>
   * @param metaid a string representing the metaid attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>metaid</code>. If no
   * such object is found this method returns <code>null.</code>
   */ public
 SBase getElementByMetaId(String metaid) {
  return libsbml.DowncastSBase(libsbmlJNI.GradientBase_getElementByMetaId(swigCPtr, this, metaid), false);
}

  // SPREADMETHOD 
  public final static int PAD = 0;
  public final static int REFLECT = PAD + 1;
  public final static int REPEAT = REFLECT + 1;
  public final static int INVALID = REPEAT + 1;

}
