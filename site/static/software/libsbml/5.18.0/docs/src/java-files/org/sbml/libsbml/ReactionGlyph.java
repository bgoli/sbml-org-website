/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-layout"><a href="group__layout.html">layout</a></span>

 A glyph for an SBML reaction.
 <p>
 * Analogous to how a {@link Reaction} object has to at least have one reactant or
 * product, the {@link ReactionGlyph} has to at least have one {@link SpeciesReferenceGlyph}
 * stored in the {@link ListOfSpeciesReferenceGlyphs}. Figure 12 on the following
 * page provides the UML diagram for the class definition.  The {@link ReactionGlyph}
 * inherits from {@link GraphicalObject}. In addition to the attributes inherited
 * from {@link GraphicalObject}, the {@link ReactionGlyph} is described by an attribute
 * reaction, a {@link Curve} element and a listOfSpeciesReferenceGlyphs element.  The
 * {@link Curve} describes the center section of a {@link ReactionGlyph}. The center section
 * is frequently used by tools to separate the point where substrates arcs
 * come together, from the point where product arcs split off. The {@link Curve} is
 * optional, and when not present the dimensions of the inherited {@link BoundingBox}
 * describes the center section, by storing its position and dimension.
 */

public class ReactionGlyph extends GraphicalObject {
   private long swigCPtr;

   protected ReactionGlyph(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.ReactionGlyph_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(ReactionGlyph obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (ReactionGlyph obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_ReactionGlyph(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link ReactionGlyph}.  The list of species reference glyph is
   * empty and the id of the associated reaction is set to the empty
   * string.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 ReactionGlyph(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReactionGlyph__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link ReactionGlyph}.  The list of species reference glyph is
   * empty and the id of the associated reaction is set to the empty
   * string.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 ReactionGlyph(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReactionGlyph__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link ReactionGlyph}.  The list of species reference glyph is
   * empty and the id of the associated reaction is set to the empty
   * string.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 ReactionGlyph(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReactionGlyph__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link ReactionGlyph}.  The list of species reference glyph is
   * empty and the id of the associated reaction is set to the empty
   * string.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 ReactionGlyph() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReactionGlyph__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link ReactionGlyph} with the given {@link LayoutPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param layoutns the {@link LayoutPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 ReactionGlyph(LayoutPkgNamespaces layoutns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReactionGlyph__SWIG_4(LayoutPkgNamespaces.getCPtr(layoutns), layoutns), true);
  }

  
/**
   * Creates a ResctionGlyph with the given {@link LayoutPkgNamespaces} and id.
   <p>
   * (FOR BACKWARD COMPATIBILITY)
   */ public
 ReactionGlyph(LayoutPkgNamespaces layoutns, String id) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReactionGlyph__SWIG_5(LayoutPkgNamespaces.getCPtr(layoutns), layoutns, id), true);
  }

  
/**
   * Creates a ResctionGlyph with the given {@link LayoutPkgNamespaces}, id and set the id of the
   * associated reaction to the second argument.
   <p>
   * (FOR BACKWARD COMPATIBILITY)
   */ public
 ReactionGlyph(LayoutPkgNamespaces layoutns, String id, String reactionId) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReactionGlyph__SWIG_6(LayoutPkgNamespaces.getCPtr(layoutns), layoutns, id, reactionId), true);
  }

  
/**
   * Creates a new {@link ReactionGlyph} from the given {@link XMLNode}
   <p>
   * (FOR BACKWARD COMPATIBILITY)
   */ public
 ReactionGlyph(XMLNode node, long l2version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReactionGlyph__SWIG_7(XMLNode.getCPtr(node), node, l2version), true);
  }

  
/**
   * Creates a new {@link ReactionGlyph} from the given {@link XMLNode}
   <p>
   * (FOR BACKWARD COMPATIBILITY)
   */ public
 ReactionGlyph(XMLNode node) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReactionGlyph__SWIG_8(XMLNode.getCPtr(node), node), true);
  }

  
/**
   * Copy constructor.
   <p>
   * @param source the instance to copy.
   */ public
 ReactionGlyph(ReactionGlyph source) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_ReactionGlyph__SWIG_9(ReactionGlyph.getCPtr(source), source), true);
  }

  
/**
   * Returns the id of the associated reaction.
   */ public
 String getReactionId() {
    return libsbmlJNI.ReactionGlyph_getReactionId(swigCPtr, this);
  }

  
/**
   * Sets the id of the associated reaction.
   */ public
 int setReactionId(String id) {
    return libsbmlJNI.ReactionGlyph_setReactionId(swigCPtr, this, id);
  }

  
/**
   * Returns <code>true</code> if the id of the associated reaction is not the empty
   * string.
   */ public
 boolean isSetReactionId() {
    return libsbmlJNI.ReactionGlyph_isSetReactionId(swigCPtr, this);
  }

  
/**
   * Returns the {@link ListOf} object that hold the species reference glyphs.
   */ public
 ListOfSpeciesReferenceGlyphs getListOfSpeciesReferenceGlyphs() {
    long cPtr = libsbmlJNI.ReactionGlyph_getListOfSpeciesReferenceGlyphs(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfSpeciesReferenceGlyphs(cPtr, false);
  }

  
/**
   * Returns the species reference glyph with the given <code>index</code>.
   * If the index is invalid, <code>null</code> is returned.
   */ public
 SpeciesReferenceGlyph getSpeciesReferenceGlyph(long index) {
    long cPtr = libsbmlJNI.ReactionGlyph_getSpeciesReferenceGlyph__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new SpeciesReferenceGlyph(cPtr, false);
  }

  
/**
   * Adds a new species reference glyph to the list.
   */ public
 int addSpeciesReferenceGlyph(SpeciesReferenceGlyph glyph) {
    return libsbmlJNI.ReactionGlyph_addSpeciesReferenceGlyph(swigCPtr, this, SpeciesReferenceGlyph.getCPtr(glyph), glyph);
  }

  
/**
   * Returns the number of species reference glyph objects.
   */ public
 long getNumSpeciesReferenceGlyphs() {
    return libsbmlJNI.ReactionGlyph_getNumSpeciesReferenceGlyphs(swigCPtr, this);
  }

  
/**
   * Calls initDefaults from {@link GraphicalObject}.
   */ public
 void initDefaults() {
    libsbmlJNI.ReactionGlyph_initDefaults(swigCPtr, this);
  }

  
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as 'referring to an identifier', but the effective
 * data type was the same as <code>SIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier.
 * @param newid the new identifier.
   */ public
 void renameSIdRefs(String oldid, String newid) {
    libsbmlJNI.ReactionGlyph_renameSIdRefs(swigCPtr, this, oldid, newid);
  }

  
/**
   * Returns the curve object for the reaction glyph
   */ public
 Curve getCurve() {
    long cPtr = libsbmlJNI.ReactionGlyph_getCurve__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Curve(cPtr, false);
  }

  
/**
   * Sets the curve object for the reaction glyph.
   */ public
 void setCurve(Curve curve) {
    libsbmlJNI.ReactionGlyph_setCurve(swigCPtr, this, Curve.getCPtr(curve), curve);
  }

  
/**
   * Returns <code>true</code> if the curve consists of one or more segments.
   */ public
 boolean isSetCurve() {
    return libsbmlJNI.ReactionGlyph_isSetCurve(swigCPtr, this);
  }

  
/** */ public
 boolean getCurveExplicitlySet() {
    return libsbmlJNI.ReactionGlyph_getCurveExplicitlySet(swigCPtr, this);
  }

  
/**
   * Creates a new {@link SpeciesReferenceGlyph} object, adds it to the end of the
   * list of species reference objects and returns a reference to the newly
   * created object.
   */ public
 SpeciesReferenceGlyph createSpeciesReferenceGlyph() {
    long cPtr = libsbmlJNI.ReactionGlyph_createSpeciesReferenceGlyph(swigCPtr, this);
    return (cPtr == 0) ? null : new SpeciesReferenceGlyph(cPtr, false);
  }

  
/**
   * Creates a new {@link LineSegment} object, adds it to the end of the list of
   * curve segment objects of the curve and returns a reference to the
   * newly created object.
   */ public
 LineSegment createLineSegment() {
	return (LineSegment) libsbml.DowncastSBase(libsbmlJNI.ReactionGlyph_createLineSegment(swigCPtr, this), false);
}

  
/**
   * Creates a new {@link CubicBezier} object, adds it to the end of the list of
   * curve segment objects of the curve and returns a reference to the
   * newly created object.
   */ public
 CubicBezier createCubicBezier() {
    long cPtr = libsbmlJNI.ReactionGlyph_createCubicBezier(swigCPtr, this);
    return (cPtr == 0) ? null : new CubicBezier(cPtr, false);
  }

  
/**
   * Remove the species reference glyph with the given <code>index</code>.
   * A pointer to the object is returned. If no object has been removed, null
   * is returned.
   */ public
 SpeciesReferenceGlyph removeSpeciesReferenceGlyph(long index) {
    long cPtr = libsbmlJNI.ReactionGlyph_removeSpeciesReferenceGlyph__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new SpeciesReferenceGlyph(cPtr, true);
  }

  
/**
   * Remove the species reference glyph with the given <code>id</code>.
   * A pointer to the object is returned. If no object has been removed, null
   * is returned.
   */ public
 SpeciesReferenceGlyph removeSpeciesReferenceGlyph(String id) {
    long cPtr = libsbmlJNI.ReactionGlyph_removeSpeciesReferenceGlyph__SWIG_1(swigCPtr, this, id);
    return (cPtr == 0) ? null : new SpeciesReferenceGlyph(cPtr, true);
  }

  
/**
   * Returns the index of the species reference glyph with the given <code>id</code>.
   * If the reaction glyph does not contain a species reference glyph with this
   * id, the
   * value of the maximum long integer is returned as an indicator.
   */ public
 long getIndexForSpeciesReferenceGlyph(String id) {
    return libsbmlJNI.ReactionGlyph_getIndexForSpeciesReferenceGlyph(swigCPtr, this, id);
  }

  
/**
   * Returns the XML element name of
   * this SBML object.
   <p>
   * @return the string of the name of this element.
   */ public
 String getElementName() {
    return libsbmlJNI.ReactionGlyph_getElementName(swigCPtr, this);
  }

  
/**
   * Creates and returns a deep copy of this {@link ReactionGlyph} object.
   <p>
   * @return a (deep) copy of this {@link ReactionGlyph}.
   */ public
 ReactionGlyph cloneObject() {
    long cPtr = libsbmlJNI.ReactionGlyph_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new ReactionGlyph(cPtr, true);
  }

  
/**
   * Returns the libSBML type code of this object instance.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_LAYOUT_REACTIONGLYPH SBML_LAYOUT_REACTIONGLYPH}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.ReactionGlyph_getTypeCode(swigCPtr, this);
  }

  
/**
    * Creates an {@link XMLNode} object from this.
    */ public
 XMLNode toXML() {
    return new XMLNode(libsbmlJNI.ReactionGlyph_toXML(swigCPtr, this), true);
  }

  public void connectToChild() {
    libsbmlJNI.ReactionGlyph_connectToChild(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.ReactionGlyph_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

}
