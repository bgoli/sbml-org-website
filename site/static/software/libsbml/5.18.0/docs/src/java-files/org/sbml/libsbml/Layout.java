/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-layout"><a href="group__layout.html">layout</a></span>

 The layout of a diagram of an SBML model.
 <p>
 * The {@link Layout} class stores layout information for some or all elements of the
 * SBML model as well as additional objects that need not be connected to the
 * model. The {@link Layout} has two attributes: id and name. Additionally, a
 * {@link Dimensions} element specifies the size of the layout.  The actual layout
 * elements are contained in several lists, namely: a
 * {@link ListOfCompartmentGlyphs}, a {@link ListOfSpeciesGlyphs}, a {@link ListOfReactionGlyphs}, a
 * {@link ListOfTextGlyphs}, and a ListOfAdditionalGraphicalObjects. Each of these
 * lists can only occur once, and, if present, are not allowed to be empty.
 */

public class Layout extends SBase {
   private long swigCPtr;

   protected Layout(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.Layout_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(Layout obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (Layout obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_Layout(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link Layout} with the given level, version, and package version.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Layout(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Layout__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link Layout} with the given level, version, and package version.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Layout(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Layout__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link Layout} with the given level, version, and package version.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Layout(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Layout__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link Layout} with the given level, version, and package version.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Layout() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Layout__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link Layout} with the given {@link LayoutPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param layoutns the {@link LayoutPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Layout(LayoutPkgNamespaces layoutns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Layout__SWIG_4(LayoutPkgNamespaces.getCPtr(layoutns), layoutns), true);
  }

  
/**
   * Creates a new {@link Layout} with the given <code>id</code> and dimensions.
   <p>
   * (FOR BACKWARD COMPATIBILITY)
   */ public
 Layout(LayoutPkgNamespaces layoutns, String id, Dimensions dimensions) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Layout__SWIG_5(LayoutPkgNamespaces.getCPtr(layoutns), layoutns, id, Dimensions.getCPtr(dimensions), dimensions), true);
  }

  
/**
   * Creates a new {@link Layout} from the given {@link XMLNode}
   * (only for SBML Level2)
   <p>
   * (FOR BACKWARD COMPATIBILITY)
   */ public
 Layout(XMLNode node, long l2version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Layout__SWIG_6(XMLNode.getCPtr(node), node, l2version), true);
  }

  
/**
   * Creates a new {@link Layout} from the given {@link XMLNode}
   * (only for SBML Level2)
   <p>
   * (FOR BACKWARD COMPATIBILITY)
   */ public
 Layout(XMLNode node) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Layout__SWIG_7(XMLNode.getCPtr(node), node), true);
  }

  
/**
   * Copy constructor.
   <p>
   * @param source the instance to copy.
   */ public
 Layout(Layout source) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Layout__SWIG_8(Layout.getCPtr(source), source), true);
  }

  
/**
   * Does nothing since no defaults are defined for {@link Layout}.
   */ public
 void initDefaults() {
    libsbmlJNI.Layout_initDefaults(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'id' attribute of this {@link Layout}.
   <p>
   * <p>
 * The identifier given by an object's 'id' attribute value
 * is used to identify the object within the SBML model definition.
 * Other objects can refer to the component using this identifier.  The
 * data type of 'id' is always <code>SId</code> or a type derived
 * from that, such as <code>UnitSId</code>, depending on the object in 
 * question.  All data types are defined as follows:
 * <pre style='margin-left: 2em; border: none; font-weight: bold; color: black'>
 *   letter .= 'a'..'z','A'..'Z'
 *   digit  .= '0'..'9'
 *   idChar .= letter | digit | '_'
 *   SId    .= ( letter | '_' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping,
 * the character <code>*</code> 'zero or more times', and the character
 * <code>|</code> indicates logical 'or'.  The equality of SBML identifiers
 * is determined by an exact character sequence match; i.e., comparisons must
 * be performed in a case-sensitive manner.  This applies to all uses of
 * <code>SId</code>, <code>SIdRef</code>, and derived types.
 <p>
 * Users need to be aware of some important API issues that are the result of
 * the history of SBML and libSBML.  Prior to SBML Level&nbsp;3
 * Version&nbsp;2, SBML defined 'id' and 'name' attributes on only a subset
 * of SBML objects.  To simplify the work of programmers, libSBML's API
 * provided get, set, check, and unset on the {@link SBase} object class itself
 * instead of on individual subobject classes. This made the
 * get/set/etc. methods uniformly available on all objects in the libSBML
 * API.  LibSBML simply returned empty strings or otherwise did not act when
 * the methods were applied to SBML objects that were not defined by the SBML
 * specification to have 'id' or 'name' attributes.  Additional complications
 * arose with the rule and assignment objects: {@link InitialAssignment},
 * {@link EventAssignment}, {@link AssignmentRule}, and {@link RateRule}.  In early versions of SBML,
 * the rule object hierarchy was different, and in addition, then as now,
 * they possess different attributes: 'variable' (for the rules and event
 * assignments), 'symbol' (for initial assignments), or neither (for
 * algebraic rules).  Prior to SBML Level&nbsp;3 Version&nbsp;2, getId()
 * would always return an empty string, and isSetId() would always return 
 * <code>false</code> for objects of these classes.
 <p>
 * With the addition of 'id' and 'name' attributes on {@link SBase} in Level&nbsp;3
 * Version&nbsp;2, it became necessary to introduce a new way to interact
 * with the attributes more consistently in libSBML to avoid breaking
 * backward compatibility in the behavior of the original 'id' methods.  For
 * this reason, libSBML provides four functions (getIdAttribute(),
 * setIdAttribute(String), isSetIdAttribute(), and
 * unsetIdAttribute()) that always act on the actual 'id' attribute inherited
 * from {@link SBase}, regardless of the object's type.  <strong>These new methods
 * should be used instead of the older getId()/setId()/etc. methods</strong>
 * unless the old behavior is somehow necessary.  Regardless of the Level and
 * Version of the SBML, these functions allow client applications to use more
 * generalized code in some situations (for instance, when manipulating
 * objects that are all known to have identifiers).  If the object in
 * question does not posess an 'id' attribute according to the SBML
 * specification for the Level and Version in use, libSBML will not allow the
 * identifier to be set, nor will it read or write 'id' attributes for those
 * objects.
   <p>
   * @return the id of this {@link Layout}.
   <p>
   * @note Because of the inconsistent behavior of this function with 
   * respect to assignments and rules, it is now recommended to
   * use the getIdAttribute() function instead.
   <p>
   * @see #getIdAttribute()
   * @see #setIdAttribute(String sid)
   * @see #isSetIdAttribute()
   * @see #unsetIdAttribute()
   */ public
 String getId() {
    return libsbmlJNI.Layout_getId(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link Layout}'s 'id' attribute has been set.
   <p>
   * <p>
 * <p>
 * The identifier given by an object's 'id' attribute value
 * is used to identify the object within the SBML model definition.
 * Other objects can refer to the component using this identifier.  The
 * data type of 'id' is always <code>SId</code> or a type derived
 * from that, such as <code>UnitSId</code>, depending on the object in 
 * question.  All data types are defined as follows:
 * <pre style='margin-left: 2em; border: none; font-weight: bold; color: black'>
 *   letter .= 'a'..'z','A'..'Z'
 *   digit  .= '0'..'9'
 *   idChar .= letter | digit | '_'
 *   SId    .= ( letter | '_' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping,
 * the character <code>*</code> 'zero or more times', and the character
 * <code>|</code> indicates logical 'or'.  The equality of SBML identifiers
 * is determined by an exact character sequence match; i.e., comparisons must
 * be performed in a case-sensitive manner.  This applies to all uses of
 * <code>SId</code>, <code>SIdRef</code>, and derived types.
 <p>
 * Users need to be aware of some important API issues that are the result of
 * the history of SBML and libSBML.  Prior to SBML Level&nbsp;3
 * Version&nbsp;2, SBML defined 'id' and 'name' attributes on only a subset
 * of SBML objects.  To simplify the work of programmers, libSBML's API
 * provided get, set, check, and unset on the {@link SBase} object class itself
 * instead of on individual subobject classes. This made the
 * get/set/etc. methods uniformly available on all objects in the libSBML
 * API.  LibSBML simply returned empty strings or otherwise did not act when
 * the methods were applied to SBML objects that were not defined by the SBML
 * specification to have 'id' or 'name' attributes.  Additional complications
 * arose with the rule and assignment objects: {@link InitialAssignment},
 * {@link EventAssignment}, {@link AssignmentRule}, and {@link RateRule}.  In early versions of SBML,
 * the rule object hierarchy was different, and in addition, then as now,
 * they possess different attributes: 'variable' (for the rules and event
 * assignments), 'symbol' (for initial assignments), or neither (for
 * algebraic rules).  Prior to SBML Level&nbsp;3 Version&nbsp;2, getId()
 * would always return an empty string, and isSetId() would always return 
 * <code>false</code> for objects of these classes.
 <p>
 * With the addition of 'id' and 'name' attributes on {@link SBase} in Level&nbsp;3
 * Version&nbsp;2, it became necessary to introduce a new way to interact
 * with the attributes more consistently in libSBML to avoid breaking
 * backward compatibility in the behavior of the original 'id' methods.  For
 * this reason, libSBML provides four functions (getIdAttribute(),
 * setIdAttribute(String), isSetIdAttribute(), and
 * unsetIdAttribute()) that always act on the actual 'id' attribute inherited
 * from {@link SBase}, regardless of the object's type.  <strong>These new methods
 * should be used instead of the older getId()/setId()/etc. methods</strong>
 * unless the old behavior is somehow necessary.  Regardless of the Level and
 * Version of the SBML, these functions allow client applications to use more
 * generalized code in some situations (for instance, when manipulating
 * objects that are all known to have identifiers).  If the object in
 * question does not posess an 'id' attribute according to the SBML
 * specification for the Level and Version in use, libSBML will not allow the
 * identifier to be set, nor will it read or write 'id' attributes for those
 * objects.
 <p>
 * @return <code>true</code> if the 'id' attribute of this SBML object is
 * set, <code>false</code> otherwise.
 <p>
 * @note Because of the inconsistent behavior of this function with
 * respect to assignments and rules, it is recommended that callers
 * use isSetIdAttribute() instead.
 <p>
 * @see #getIdAttribute()
 * @see #setIdAttribute(String sid)
 * @see #unsetIdAttribute()
 * @see #isSetIdAttribute()
   */ public
 boolean isSetId() {
    return libsbmlJNI.Layout_isSetId(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'id' attribute of this {@link Layout}.
   <p>
   * <p>
 * The string <code>sid</code> is copied.
 <p>
 * <p>
 * The identifier given by an object's 'id' attribute value
 * is used to identify the object within the SBML model definition.
 * Other objects can refer to the component using this identifier.  The
 * data type of 'id' is always <code>SId</code> or a type derived
 * from that, such as <code>UnitSId</code>, depending on the object in 
 * question.  All data types are defined as follows:
 * <pre style='margin-left: 2em; border: none; font-weight: bold; color: black'>
 *   letter .= 'a'..'z','A'..'Z'
 *   digit  .= '0'..'9'
 *   idChar .= letter | digit | '_'
 *   SId    .= ( letter | '_' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping,
 * the character <code>*</code> 'zero or more times', and the character
 * <code>|</code> indicates logical 'or'.  The equality of SBML identifiers
 * is determined by an exact character sequence match; i.e., comparisons must
 * be performed in a case-sensitive manner.  This applies to all uses of
 * <code>SId</code>, <code>SIdRef</code>, and derived types.
 <p>
 * Users need to be aware of some important API issues that are the result of
 * the history of SBML and libSBML.  Prior to SBML Level&nbsp;3
 * Version&nbsp;2, SBML defined 'id' and 'name' attributes on only a subset
 * of SBML objects.  To simplify the work of programmers, libSBML's API
 * provided get, set, check, and unset on the {@link SBase} object class itself
 * instead of on individual subobject classes. This made the
 * get/set/etc. methods uniformly available on all objects in the libSBML
 * API.  LibSBML simply returned empty strings or otherwise did not act when
 * the methods were applied to SBML objects that were not defined by the SBML
 * specification to have 'id' or 'name' attributes.  Additional complications
 * arose with the rule and assignment objects: {@link InitialAssignment},
 * {@link EventAssignment}, {@link AssignmentRule}, and {@link RateRule}.  In early versions of SBML,
 * the rule object hierarchy was different, and in addition, then as now,
 * they possess different attributes: 'variable' (for the rules and event
 * assignments), 'symbol' (for initial assignments), or neither (for
 * algebraic rules).  Prior to SBML Level&nbsp;3 Version&nbsp;2, getId()
 * would always return an empty string, and isSetId() would always return 
 * <code>false</code> for objects of these classes.
 <p>
 * With the addition of 'id' and 'name' attributes on {@link SBase} in Level&nbsp;3
 * Version&nbsp;2, it became necessary to introduce a new way to interact
 * with the attributes more consistently in libSBML to avoid breaking
 * backward compatibility in the behavior of the original 'id' methods.  For
 * this reason, libSBML provides four functions (getIdAttribute(),
 * setIdAttribute(String), isSetIdAttribute(), and
 * unsetIdAttribute()) that always act on the actual 'id' attribute inherited
 * from {@link SBase}, regardless of the object's type.  <strong>These new methods
 * should be used instead of the older getId()/setId()/etc. methods</strong>
 * unless the old behavior is somehow necessary.  Regardless of the Level and
 * Version of the SBML, these functions allow client applications to use more
 * generalized code in some situations (for instance, when manipulating
 * objects that are all known to have identifiers).  If the object in
 * question does not posess an 'id' attribute according to the SBML
 * specification for the Level and Version in use, libSBML will not allow the
 * identifier to be set, nor will it read or write 'id' attributes for those
 * objects.
 <p>
 * @param sid the string to use as the identifier of this object.
 <p>
 * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
 * <ul>
 * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
 * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
 * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
 *
 * </ul> <p>
 * @see #getIdAttribute()
 * @see #setIdAttribute(String sid)
 * @see #isSetIdAttribute()
 * @see #unsetIdAttribute()
   */ public
 int setId(String sid) {
    return libsbmlJNI.Layout_setId(swigCPtr, this, sid);
  }

  
/**
   * Unsets the value of the 'id' attribute of this {@link Layout}.
   <p>
   * <p>
 * <p>
 * The identifier given by an object's 'id' attribute value
 * is used to identify the object within the SBML model definition.
 * Other objects can refer to the component using this identifier.  The
 * data type of 'id' is always <code>SId</code> or a type derived
 * from that, such as <code>UnitSId</code>, depending on the object in 
 * question.  All data types are defined as follows:
 * <pre style='margin-left: 2em; border: none; font-weight: bold; color: black'>
 *   letter .= 'a'..'z','A'..'Z'
 *   digit  .= '0'..'9'
 *   idChar .= letter | digit | '_'
 *   SId    .= ( letter | '_' ) idChar*
 * </pre>
 * The characters <code>(</code> and <code>)</code> are used for grouping,
 * the character <code>*</code> 'zero or more times', and the character
 * <code>|</code> indicates logical 'or'.  The equality of SBML identifiers
 * is determined by an exact character sequence match; i.e., comparisons must
 * be performed in a case-sensitive manner.  This applies to all uses of
 * <code>SId</code>, <code>SIdRef</code>, and derived types.
 <p>
 * Users need to be aware of some important API issues that are the result of
 * the history of SBML and libSBML.  Prior to SBML Level&nbsp;3
 * Version&nbsp;2, SBML defined 'id' and 'name' attributes on only a subset
 * of SBML objects.  To simplify the work of programmers, libSBML's API
 * provided get, set, check, and unset on the {@link SBase} object class itself
 * instead of on individual subobject classes. This made the
 * get/set/etc. methods uniformly available on all objects in the libSBML
 * API.  LibSBML simply returned empty strings or otherwise did not act when
 * the methods were applied to SBML objects that were not defined by the SBML
 * specification to have 'id' or 'name' attributes.  Additional complications
 * arose with the rule and assignment objects: {@link InitialAssignment},
 * {@link EventAssignment}, {@link AssignmentRule}, and {@link RateRule}.  In early versions of SBML,
 * the rule object hierarchy was different, and in addition, then as now,
 * they possess different attributes: 'variable' (for the rules and event
 * assignments), 'symbol' (for initial assignments), or neither (for
 * algebraic rules).  Prior to SBML Level&nbsp;3 Version&nbsp;2, getId()
 * would always return an empty string, and isSetId() would always return 
 * <code>false</code> for objects of these classes.
 <p>
 * With the addition of 'id' and 'name' attributes on {@link SBase} in Level&nbsp;3
 * Version&nbsp;2, it became necessary to introduce a new way to interact
 * with the attributes more consistently in libSBML to avoid breaking
 * backward compatibility in the behavior of the original 'id' methods.  For
 * this reason, libSBML provides four functions (getIdAttribute(),
 * setIdAttribute(String), isSetIdAttribute(), and
 * unsetIdAttribute()) that always act on the actual 'id' attribute inherited
 * from {@link SBase}, regardless of the object's type.  <strong>These new methods
 * should be used instead of the older getId()/setId()/etc. methods</strong>
 * unless the old behavior is somehow necessary.  Regardless of the Level and
 * Version of the SBML, these functions allow client applications to use more
 * generalized code in some situations (for instance, when manipulating
 * objects that are all known to have identifiers).  If the object in
 * question does not posess an 'id' attribute according to the SBML
 * specification for the Level and Version in use, libSBML will not allow the
 * identifier to be set, nor will it read or write 'id' attributes for those
 * objects.
 <p>
 * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
 * <ul>
 * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
 * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
 *
 * </ul> <p>
 * @see #getIdAttribute()
 * @see #setIdAttribute(String sid)
 * @see #isSetIdAttribute()
 * @see #unsetIdAttribute()
   */ public
 int unsetId() {
    return libsbmlJNI.Layout_unsetId(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'name' attribute of this {@link Layout} object.
   <p>
   * <p>
 * <p>
 * In SBML Level&nbsp;3 Version&nbsp;2, the 'id' and 'name' attributes were
 * moved to {@link SBase} directly, instead of being defined individually for many
 * (but not all) objects.  LibSBML has for a long time provided functions
 * defined on {@link SBase} itself to get, set, and unset those attributes, which 
 * would fail or otherwise return empty strings if executed on any object 
 * for which those attributes were not defined.  Now that all {@link SBase} objects 
 * define those attributes, those functions now succeed for any object with 
 * the appropriate level and version.
 <p>
 * The 'name' attribute is
 * optional and is not intended to be used for cross-referencing purposes
 * within a model.  Its purpose instead is to provide a human-readable
 * label for the component.  The data type of 'name' is the type
 * <code>string</code> defined in XML Schema.  SBML imposes no
 * restrictions as to the content of 'name' attributes beyond those
 * restrictions defined by the <code>string</code> type in XML Schema.
 <p>
 * The recommended practice for handling 'name' is as follows.  If a
 * software tool has the capability for displaying the content of 'name'
 * attributes, it should display this content to the user as a
 * component's label instead of the component's 'id'.  If the user
 * interface does not have this capability (e.g., because it cannot
 * display or use special characters in symbol names), or if the 'name'
 * attribute is missing on a given component, then the user interface
 * should display the value of the 'id' attribute instead.  (Script
 * language interpreters are especially likely to display 'id' instead of
 * 'name'.)
 <p>
 * As a consequence of the above, authors of systems that automatically
 * generate the values of 'id' attributes should be aware some systems
 * may display the 'id''s to the user.  Authors therefore may wish to
 * take some care to have their software create 'id' values that are: (a)
 * reasonably easy for humans to type and read; and (b) likely to be
 * meaningful, for example by making the 'id' attribute be an abbreviated
 * form of the name attribute value.
 <p>
 * An additional point worth mentioning is although there are
 * restrictions on the uniqueness of 'id' values, there are no
 * restrictions on the uniqueness of 'name' values in a model.  This
 * allows software applications leeway in assigning component identifiers.
 <p>
 * Regardless of the level and version of the SBML, these functions allow
 * client applications to use more generalized code in some situations 
 * (for instance, when manipulating objects that are all known to have 
 * names).  If the object in question does not posess a 'name' attribute 
 * according to the SBML specification for the Level and Version in use,
 * libSBML will not allow the name to be set, nor will it read or 
 * write 'name' attributes for those objects.
 <p>
 * @return the name of this SBML object, or the empty string if not set or unsettable.
 <p>
 * @see #getIdAttribute()
 * @see #isSetName()
 * @see #setName(String sid)
 * @see #unsetName()
   */ public
 String getName() {
    return libsbmlJNI.Layout_getName(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link Layout}'s 'name' attribute has been set.
   <p>
   * <p>
 * <p>
 * In SBML Level&nbsp;3 Version&nbsp;2, the 'id' and 'name' attributes were
 * moved to {@link SBase} directly, instead of being defined individually for many
 * (but not all) objects.  LibSBML has for a long time provided functions
 * defined on {@link SBase} itself to get, set, and unset those attributes, which 
 * would fail or otherwise return empty strings if executed on any object 
 * for which those attributes were not defined.  Now that all {@link SBase} objects 
 * define those attributes, those functions now succeed for any object with 
 * the appropriate level and version.
 <p>
 * The 'name' attribute is
 * optional and is not intended to be used for cross-referencing purposes
 * within a model.  Its purpose instead is to provide a human-readable
 * label for the component.  The data type of 'name' is the type
 * <code>string</code> defined in XML Schema.  SBML imposes no
 * restrictions as to the content of 'name' attributes beyond those
 * restrictions defined by the <code>string</code> type in XML Schema.
 <p>
 * The recommended practice for handling 'name' is as follows.  If a
 * software tool has the capability for displaying the content of 'name'
 * attributes, it should display this content to the user as a
 * component's label instead of the component's 'id'.  If the user
 * interface does not have this capability (e.g., because it cannot
 * display or use special characters in symbol names), or if the 'name'
 * attribute is missing on a given component, then the user interface
 * should display the value of the 'id' attribute instead.  (Script
 * language interpreters are especially likely to display 'id' instead of
 * 'name'.)
 <p>
 * As a consequence of the above, authors of systems that automatically
 * generate the values of 'id' attributes should be aware some systems
 * may display the 'id''s to the user.  Authors therefore may wish to
 * take some care to have their software create 'id' values that are: (a)
 * reasonably easy for humans to type and read; and (b) likely to be
 * meaningful, for example by making the 'id' attribute be an abbreviated
 * form of the name attribute value.
 <p>
 * An additional point worth mentioning is although there are
 * restrictions on the uniqueness of 'id' values, there are no
 * restrictions on the uniqueness of 'name' values in a model.  This
 * allows software applications leeway in assigning component identifiers.
 <p>
 * Regardless of the level and version of the SBML, these functions allow
 * client applications to use more generalized code in some situations 
 * (for instance, when manipulating objects that are all known to have 
 * names).  If the object in question does not posess a 'name' attribute 
 * according to the SBML specification for the Level and Version in use,
 * libSBML will not allow the name to be set, nor will it read or 
 * write 'name' attributes for those objects.
 <p>
 * @return <code>true</code> if the 'name' attribute of this SBML object is
 * set, <code>false</code> otherwise.
 <p>
 * @see #getName()
 * @see #setName(String sid)
 * @see #unsetName()
   */ public
 boolean isSetName() {
    return libsbmlJNI.Layout_isSetName(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'name' attribute of this {@link Layout}.
   <p>
   * <p>
 * The string in <code>name</code> is copied.
 <p>
 * @param name the new name for the SBML object.
 <p>
 * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
 * <ul>
 * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
 * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
 *
 * </ul>
   */ public
 int setName(String name) {
    return libsbmlJNI.Layout_setName(swigCPtr, this, name);
  }

  
/**
   * Unsets the value of the 'name' attribute of this {@link Layout}.
   <p>
   * <p>
 * <p>
 * In SBML Level&nbsp;3 Version&nbsp;2, the 'id' and 'name' attributes were
 * moved to {@link SBase} directly, instead of being defined individually for many
 * (but not all) objects.  LibSBML has for a long time provided functions
 * defined on {@link SBase} itself to get, set, and unset those attributes, which 
 * would fail or otherwise return empty strings if executed on any object 
 * for which those attributes were not defined.  Now that all {@link SBase} objects 
 * define those attributes, those functions now succeed for any object with 
 * the appropriate level and version.
 <p>
 * The 'name' attribute is
 * optional and is not intended to be used for cross-referencing purposes
 * within a model.  Its purpose instead is to provide a human-readable
 * label for the component.  The data type of 'name' is the type
 * <code>string</code> defined in XML Schema.  SBML imposes no
 * restrictions as to the content of 'name' attributes beyond those
 * restrictions defined by the <code>string</code> type in XML Schema.
 <p>
 * The recommended practice for handling 'name' is as follows.  If a
 * software tool has the capability for displaying the content of 'name'
 * attributes, it should display this content to the user as a
 * component's label instead of the component's 'id'.  If the user
 * interface does not have this capability (e.g., because it cannot
 * display or use special characters in symbol names), or if the 'name'
 * attribute is missing on a given component, then the user interface
 * should display the value of the 'id' attribute instead.  (Script
 * language interpreters are especially likely to display 'id' instead of
 * 'name'.)
 <p>
 * As a consequence of the above, authors of systems that automatically
 * generate the values of 'id' attributes should be aware some systems
 * may display the 'id''s to the user.  Authors therefore may wish to
 * take some care to have their software create 'id' values that are: (a)
 * reasonably easy for humans to type and read; and (b) likely to be
 * meaningful, for example by making the 'id' attribute be an abbreviated
 * form of the name attribute value.
 <p>
 * An additional point worth mentioning is although there are
 * restrictions on the uniqueness of 'id' values, there are no
 * restrictions on the uniqueness of 'name' values in a model.  This
 * allows software applications leeway in assigning component identifiers.
 <p>
 * Regardless of the level and version of the SBML, these functions allow
 * client applications to use more generalized code in some situations 
 * (for instance, when manipulating objects that are all known to have 
 * names).  If the object in question does not posess a 'name' attribute 
 * according to the SBML specification for the Level and Version in use,
 * libSBML will not allow the name to be set, nor will it read or 
 * write 'name' attributes for those objects.
 <p>
 * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
 * <ul>
 * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
 * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
 *
 * </ul> <p>
 * @see #getName()
 * @see #setName(String sid)
 * @see #isSetName()
   */ public
 int unsetName() {
    return libsbmlJNI.Layout_unsetName(swigCPtr, this);
  }

  
/**
   * Returns the dimensions of the layout.
   */ public
 Dimensions getDimensions() {
    long cPtr = libsbmlJNI.Layout_getDimensions(swigCPtr, this);
    return (cPtr == 0) ? null : new Dimensions(cPtr, false);
  }

  
/**
   * Sets the dimensions of the layout.
   */ public
 void setDimensions(Dimensions dimensions) {
    libsbmlJNI.Layout_setDimensions(swigCPtr, this, Dimensions.getCPtr(dimensions), dimensions);
  }

  
/**
   * Predicate returning true if the dimensions has been set
   */ public
 boolean getDimensionsExplicitlySet() {
    return libsbmlJNI.Layout_getDimensionsExplicitlySet(swigCPtr, this);
  }

  
/**
   * Returns the {@link ListOf} object that holds all compartment glyphs.
   */ public
 ListOfCompartmentGlyphs getListOfCompartmentGlyphs() {
    long cPtr = libsbmlJNI.Layout_getListOfCompartmentGlyphs(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfCompartmentGlyphs(cPtr, false);
  }

  
/**
   * Returns the {@link ListOf} object that holds all species glyphs.
   */ public
 ListOfSpeciesGlyphs getListOfSpeciesGlyphs() {
    long cPtr = libsbmlJNI.Layout_getListOfSpeciesGlyphs(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfSpeciesGlyphs(cPtr, false);
  }

  
/**
   * Returns the {@link ListOf} object that holds all reaction glyphs.
   */ public
 ListOfReactionGlyphs getListOfReactionGlyphs() {
    long cPtr = libsbmlJNI.Layout_getListOfReactionGlyphs(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfReactionGlyphs(cPtr, false);
  }

  
/**
   * Returns the {@link ListOf} object that holds all text glyphs.
   */ public
 ListOfTextGlyphs getListOfTextGlyphs() {
    long cPtr = libsbmlJNI.Layout_getListOfTextGlyphs(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfTextGlyphs(cPtr, false);
  }

  
/**
   * Returns the {@link ListOf} object that holds all additional graphical objects.
   */ public
 ListOfGraphicalObjects getListOfAdditionalGraphicalObjects() {
    long cPtr = libsbmlJNI.Layout_getListOfAdditionalGraphicalObjects(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfGraphicalObjects(cPtr, false);
  }

  
/**
   * Returns the compartment glyph with the given index.
   * If the index is invalid, <code>null</code> is returned.
   */ public
 CompartmentGlyph getCompartmentGlyph(long index) {
    long cPtr = libsbmlJNI.Layout_getCompartmentGlyph__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new CompartmentGlyph(cPtr, false);
  }

  
/**
   * Returns the species glyph with the given index.
   * If the index is invalid, <code>null</code> is returned.
   */ public
 SpeciesGlyph getSpeciesGlyph(long index) {
    long cPtr = libsbmlJNI.Layout_getSpeciesGlyph__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new SpeciesGlyph(cPtr, false);
  }

  
/**
   * Returns the reaction glyph with the given index.
   * If the index is invalid, <code>null</code> is returned.
   */ public
 ReactionGlyph getReactionGlyph(long index) {
    long cPtr = libsbmlJNI.Layout_getReactionGlyph__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new ReactionGlyph(cPtr, false);
  }

  
/**
   * Returns the text glyph with the given index.
   * If the index is invalid, <code>null</code> is returned.
   */ public
 TextGlyph getTextGlyph(long index) {
    long cPtr = libsbmlJNI.Layout_getTextGlyph__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new TextGlyph(cPtr, false);
  }

  
/**
   * Returns the additional graphical object with the given index.
   * If the index is invalid, <code>null</code> is returned.
   */ public
 GraphicalObject getAdditionalGraphicalObject(long index) {
	return (GraphicalObject) libsbml.DowncastSBase(libsbmlJNI.Layout_getAdditionalGraphicalObject__SWIG_0(swigCPtr, this, index), false);
}

  
/**
   * Returns the general glyph with the given index.
   * If the index is invalid, <code>null</code> is returned.
   */ public
 GeneralGlyph getGeneralGlyph(long index) {
    long cPtr = libsbmlJNI.Layout_getGeneralGlyph__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new GeneralGlyph(cPtr, false);
  }

  
/**
   * Returns the compartment glyph that has the given <code>id</code>, or <code>null</code> if no
   * compartment glyph has the id.
   */ public
 CompartmentGlyph getCompartmentGlyph(String id) {
    long cPtr = libsbmlJNI.Layout_getCompartmentGlyph__SWIG_2(swigCPtr, this, id);
    return (cPtr == 0) ? null : new CompartmentGlyph(cPtr, false);
  }

  
/**
   * Returns the species glyph that has the given <code>id</code>, or <code>null</code> if no species
   * glyph has the id.
   */ public
 SpeciesGlyph getSpeciesGlyph(String id) {
    long cPtr = libsbmlJNI.Layout_getSpeciesGlyph__SWIG_2(swigCPtr, this, id);
    return (cPtr == 0) ? null : new SpeciesGlyph(cPtr, false);
  }

  
/**
   * Returns the reaction glyph that has the given <code>id</code>, or <code>null</code> if no
   * reaction glyph has the id.
   */ public
 ReactionGlyph getReactionGlyph(String id) {
    long cPtr = libsbmlJNI.Layout_getReactionGlyph__SWIG_2(swigCPtr, this, id);
    return (cPtr == 0) ? null : new ReactionGlyph(cPtr, false);
  }

  
/**
   * Returns the text glyph that has the given <code>id</code>, or <code>null</code> if no text glyph
   * has the id.
   */ public
 TextGlyph getTextGlyph(String id) {
    long cPtr = libsbmlJNI.Layout_getTextGlyph__SWIG_2(swigCPtr, this, id);
    return (cPtr == 0) ? null : new TextGlyph(cPtr, false);
  }

  
/**
   * Returns the additional graphical object that has the given <code>id</code>, or <code>null</code>
   * if no graphical object has the id.
   */ public
 GraphicalObject getAdditionalGraphicalObject(String id) {
	return (GraphicalObject) libsbml.DowncastSBase(libsbmlJNI.Layout_getAdditionalGraphicalObject__SWIG_2(swigCPtr, this, id), false);
}

  
/**
   * Returns the general glyph that has the given <code>id</code>, or <code>null</code>
   * if no graphical object has the id.
   */ public
 GeneralGlyph getGeneralGlyph(String id) {
    long cPtr = libsbmlJNI.Layout_getGeneralGlyph__SWIG_2(swigCPtr, this, id);
    return (cPtr == 0) ? null : new GeneralGlyph(cPtr, false);
  }

  
/**
   * Adds a new compartment glyph.
   */ public
 int addCompartmentGlyph(CompartmentGlyph glyph) {
    return libsbmlJNI.Layout_addCompartmentGlyph(swigCPtr, this, CompartmentGlyph.getCPtr(glyph), glyph);
  }

  
/**
   * Adds a new species glyph.
   */ public
 int addSpeciesGlyph(SpeciesGlyph glyph) {
    return libsbmlJNI.Layout_addSpeciesGlyph(swigCPtr, this, SpeciesGlyph.getCPtr(glyph), glyph);
  }

  
/**
   * Adds a new reaction glyph.
   */ public
 int addReactionGlyph(ReactionGlyph glyph) {
    return libsbmlJNI.Layout_addReactionGlyph(swigCPtr, this, ReactionGlyph.getCPtr(glyph), glyph);
  }

  
/**
   * Adds a new text glyph.
   */ public
 int addTextGlyph(TextGlyph glyph) {
    return libsbmlJNI.Layout_addTextGlyph(swigCPtr, this, TextGlyph.getCPtr(glyph), glyph);
  }

  
/**
   * Adds a new additional graphical object glyph.
   */ public
 int addAdditionalGraphicalObject(GraphicalObject glyph) {
    return libsbmlJNI.Layout_addAdditionalGraphicalObject(swigCPtr, this, GraphicalObject.getCPtr(glyph), glyph);
  }

  
/**
   * Adds a new general glyph.
   */ public
 int addGeneralGlyph(GeneralGlyph glyph) {
    return libsbmlJNI.Layout_addGeneralGlyph(swigCPtr, this, GeneralGlyph.getCPtr(glyph), glyph);
  }

  
/**
   * Returns the number of compartment glyphs for the layout.
   */ public
 long getNumCompartmentGlyphs() {
    return libsbmlJNI.Layout_getNumCompartmentGlyphs(swigCPtr, this);
  }

  
/**
   * Returns the number of species glyphs for the layout.
   */ public
 long getNumSpeciesGlyphs() {
    return libsbmlJNI.Layout_getNumSpeciesGlyphs(swigCPtr, this);
  }

  
/**
   * Returns the number of reaction glyphs for the layout.
   */ public
 long getNumReactionGlyphs() {
    return libsbmlJNI.Layout_getNumReactionGlyphs(swigCPtr, this);
  }

  
/**
   * Returns the number of text glyphs for the layout.
   */ public
 long getNumTextGlyphs() {
    return libsbmlJNI.Layout_getNumTextGlyphs(swigCPtr, this);
  }

  
/**
   * Returns the number of additional graphical objects for the layout.
   */ public
 long getNumAdditionalGraphicalObjects() {
    return libsbmlJNI.Layout_getNumAdditionalGraphicalObjects(swigCPtr, this);
  }

  
/**
   * Returns the number of general glyphs for the layout.
   */ public
 long getNumGeneralGlyphs() {
    return libsbmlJNI.Layout_getNumGeneralGlyphs(swigCPtr, this);
  }

  
/**
   * Creates a {@link CompartmentGlyph} object, adds it to the end of the
   * compartment glyph objects list and returns a pointer to the newly
   * created object.
   */ public
 CompartmentGlyph createCompartmentGlyph() {
    long cPtr = libsbmlJNI.Layout_createCompartmentGlyph(swigCPtr, this);
    return (cPtr == 0) ? null : new CompartmentGlyph(cPtr, false);
  }

  
/**
   * Creates a {@link SpeciesGlyph} object, adds it to the end of the species glyph
   * objects list and returns a pointer to the newly created object.
   */ public
 SpeciesGlyph createSpeciesGlyph() {
    long cPtr = libsbmlJNI.Layout_createSpeciesGlyph(swigCPtr, this);
    return (cPtr == 0) ? null : new SpeciesGlyph(cPtr, false);
  }

  
/**
   * Creates a {@link ReactionGlyph} object, adds it to the end of the reaction
   * glyph objects list and returns a pointer to the newly created
   * object.
   */ public
 ReactionGlyph createReactionGlyph() {
    long cPtr = libsbmlJNI.Layout_createReactionGlyph(swigCPtr, this);
    return (cPtr == 0) ? null : new ReactionGlyph(cPtr, false);
  }

  
/**
   * Creates a {@link GeneralGlyph} object, adds it to the end of the additional 
   * objects list and returns a reference to the newly created object.
   */ public
 GeneralGlyph createGeneralGlyph() {
    long cPtr = libsbmlJNI.Layout_createGeneralGlyph(swigCPtr, this);
    return (cPtr == 0) ? null : new GeneralGlyph(cPtr, false);
  }

  
/**
   * Creates a {@link TextGlyph} object, adds it to the end of the text glyph
   * objects list and returns a pointer to the newly created object.
   */ public
 TextGlyph createTextGlyph() {
    long cPtr = libsbmlJNI.Layout_createTextGlyph(swigCPtr, this);
    return (cPtr == 0) ? null : new TextGlyph(cPtr, false);
  }

  
/**
   * Creates a {@link GraphicalObject} object, adds it to the end of the additional
   * graphical objects list and returns a pointer to the newly created
   * object.
   */ public
 GraphicalObject createAdditionalGraphicalObject() {
	return (GraphicalObject) libsbml.DowncastSBase(libsbmlJNI.Layout_createAdditionalGraphicalObject(swigCPtr, this), false);
}

  
/**
   * Creates a new {@link SpeciesReferenceGlyph} for the last {@link ReactionGlyph} and
   * adds it to its list of {@link SpeciesReferenceGlyph} objects.  A pointer to
   * the newly created object is returned.
   */ public
 SpeciesReferenceGlyph createSpeciesReferenceGlyph() {
    long cPtr = libsbmlJNI.Layout_createSpeciesReferenceGlyph(swigCPtr, this);
    return (cPtr == 0) ? null : new SpeciesReferenceGlyph(cPtr, false);
  }

  
/**
   * Creates a new {@link LineSegment} for the {@link Curve} object of the last
   * {@link ReactionGlyph} or the last {@link SpeciesReferenceGlyph} in the last
   * {@link ReactionGlyph} and adds it to its list of {@link SpeciesReferenceGlyph}
   * objects.  A pointer to the newly created object is returned.
   */ public
 LineSegment createLineSegment() {
	return (LineSegment) libsbml.DowncastSBase(libsbmlJNI.Layout_createLineSegment(swigCPtr, this), false);
}

  
/**
   * Creates a new {@link CubicBezier} for the {@link Curve} object of the last
   * {@link ReactionGlyph} or the last {@link SpeciesReferenceGlyph} in the last
   * {@link ReactionGlyph} and adds it to its list of {@link SpeciesReferenceGlyph}
   * objects.  A pointer to the newly created object is returned.
   */ public
 CubicBezier createCubicBezier() {
    long cPtr = libsbmlJNI.Layout_createCubicBezier(swigCPtr, this);
    return (cPtr == 0) ? null : new CubicBezier(cPtr, false);
  }

  
/**
   * Removes the compartment glyph with the given index from the layout.
   * A pointer to the compartment glyph that was removed is returned.
   * If no compartment glyph has been removed, <code>null</code> is returned.
   */ public
 CompartmentGlyph removeCompartmentGlyph(long index) {
    long cPtr = libsbmlJNI.Layout_removeCompartmentGlyph__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new CompartmentGlyph(cPtr, true);
  }

  
/**
   * Removes the species glyph with the given index from the layout.
   * A pointer to the species glyph that was removed is returned.
   * If no species glyph has been removed, <code>null</code> is returned.
   */ public
 SpeciesGlyph removeSpeciesGlyph(long index) {
    long cPtr = libsbmlJNI.Layout_removeSpeciesGlyph__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new SpeciesGlyph(cPtr, true);
  }

  
/**
   * Removes the reaction glyph with the given index from the layout.
   * A pointer to the reaction glyph that was removed is returned.
   * If no reaction glyph has been removed, <code>null</code> is returned.
   */ public
 ReactionGlyph removeReactionGlyph(long index) {
    long cPtr = libsbmlJNI.Layout_removeReactionGlyph__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new ReactionGlyph(cPtr, true);
  }

  
/**
   * Removes the text glyph with the given index from the layout.
   * A pointer to the text glyph that was removed is returned.
   * If no text glyph has been removed, <code>null</code> is returned.
   */ public
 TextGlyph removeTextGlyph(long index) {
    long cPtr = libsbmlJNI.Layout_removeTextGlyph__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new TextGlyph(cPtr, true);
  }

  
/**
   * Removes the graphical object with the given index from the layout.
   * A pointer to the graphical object that was removed is returned.
   * If no graphical object has been removed, <code>null</code> is returned.
   */ public
 GraphicalObject removeAdditionalGraphicalObject(long index) {
	return (GraphicalObject) libsbml.DowncastSBase(libsbmlJNI.Layout_removeAdditionalGraphicalObject__SWIG_0(swigCPtr, this, index), true);
}

  
/**
   * Remove the compartment glyph with the given <code>id</code>.
   * A pointer to the removed compartment glyph is returned.
   * If no compartment glyph has been removed, <code>null</code> is returned.
   */ public
 CompartmentGlyph removeCompartmentGlyph(String id) {
    long cPtr = libsbmlJNI.Layout_removeCompartmentGlyph__SWIG_1(swigCPtr, this, id);
    return (cPtr == 0) ? null : new CompartmentGlyph(cPtr, true);
  }

  
/**
   * Remove the species glyph with the given <code>id</code>.
   * A pointer to the removed species glyph is returned.
   * If no species glyph has been removed, <code>null</code> is returned.
   */ public
 SpeciesGlyph removeSpeciesGlyph(String id) {
    long cPtr = libsbmlJNI.Layout_removeSpeciesGlyph__SWIG_1(swigCPtr, this, id);
    return (cPtr == 0) ? null : new SpeciesGlyph(cPtr, true);
  }

  
/**
   * Remove the reaction glyph with the given <code>id</code>.
   * A pointer to the removed reaction glyph is returned.
   * If no reaction glyph has been removed, <code>null</code> is returned.
   */ public
 ReactionGlyph removeReactionGlyph(String id) {
    long cPtr = libsbmlJNI.Layout_removeReactionGlyph__SWIG_1(swigCPtr, this, id);
    return (cPtr == 0) ? null : new ReactionGlyph(cPtr, true);
  }

  
/**
   * Remove the species reference glyph with the given <code>id</code>.
   * A pointer to the removed species reference glyph is returned.
   * If no species reference glyph has been removed, <code>null</code> is returned.
   */ public
 SpeciesReferenceGlyph removeSpeciesReferenceGlyph(String id) {
    long cPtr = libsbmlJNI.Layout_removeSpeciesReferenceGlyph(swigCPtr, this, id);
    return (cPtr == 0) ? null : new SpeciesReferenceGlyph(cPtr, true);
  }

  
/**
   * Remove the text glyph with the given <code>id</code>.
   * A pointer to the removed text glyph is returned.
   * If no text glyph has been removed, <code>null</code> is returned.
   */ public
 TextGlyph removeTextGlyph(String id) {
    long cPtr = libsbmlJNI.Layout_removeTextGlyph__SWIG_1(swigCPtr, this, id);
    return (cPtr == 0) ? null : new TextGlyph(cPtr, true);
  }

  
/**
   * Remove the graphical object with the given <code>id</code>.
   * A pointer to the removed graphical object is returned.
   * If no graphical object has been removed, <code>null</code> is returned.
   */ public
 GraphicalObject removeAdditionalGraphicalObject(String id) {
	return (GraphicalObject) libsbml.DowncastSBase(libsbmlJNI.Layout_removeAdditionalGraphicalObject__SWIG_1(swigCPtr, this, id), true);
}

  
/**
   * Returns the XML element name of
   * this SBML object.
   <p>
   * @return the string of the name of this element.
   */ public
 String getElementName() {
    return libsbmlJNI.Layout_getElementName(swigCPtr, this);
  }

  
/**
   * Creates and returns a deep copy of this {@link Layout}.
   <p>
   * @return a (deep) copy of this {@link Layout}.
   */ public
 Layout cloneObject() {
    long cPtr = libsbmlJNI.Layout_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new Layout(cPtr, true);
  }

  
/**
   * Returns the libSBML type code of this object instance.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_LAYOUT_LAYOUT SBML_LAYOUT_LAYOUT}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.Layout_getTypeCode(swigCPtr, this);
  }

  
/**
    * Creates an {@link XMLNode} object from this.
    */ public
 XMLNode toXML() {
    return new XMLNode(libsbmlJNI.Layout_toXML(swigCPtr, this), true);
  }

  public void connectToChild() {
    libsbmlJNI.Layout_connectToChild(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.Layout_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

}
