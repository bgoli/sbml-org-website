/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-groups"><a href="group__groups.html">groups</a></span>
 Representation of a group of SBML components.
 <p>
 * The {@link Group} class is the first and most central class in the SBML
 * Level&nbsp;3 Groups package.  This class represents a <em>group of
 * entities</em>: a simple mechanism for indicating that particular
 * components of an SBML model are related in some way.  The nature of the
 * relationship is left up to the modeler, and can be clarified by means of
 * annotations on model components.  Groups may contain either the same or
 * different types of SBML objects, and groups may be nested if desired.
 * There are no predefined modeling or mathematical semantics associated with
 * groups.
 <p>
 * The Groups class has one required attribute, 'kind'; two optional
 * attributes, 'id' and 'name'; and a single child element, {@link ListOfMembers}.
 * The membership of a group is determined by the contents of the list of
 * members stored in {@link Member} objects within the {@link ListOfMembers} child of a {@link Group}
 * object.  Since the {@link Group} class of objects is derived from {@link SBase}, and {@link SBase}
 * provides the ability to attach {@link SBO} terms as well as MIRIAM annotations,
 * the semantics of a given group in a model can be made more precise using
 * references to external controlled vocabularies and ontologies.
 <p>
 * <h2>Group kinds</h2>
 <p>
 * The attribute 'kind' on {@link Group} is used to indicate the nature of the group
 * defined by a {@link Group} instance.  The 'kind' attribute must always have
 * one of the following three possible values:
 <p>
 * <ul>
 * <li> <code>'classification':</code> The group represents a class, and its members
 * have an <em>is-a</em> relationship to the group.  For example, the group
 * could represent a type of molecule such as ATP, and the members could be
 * species located in different compartments, thereby establishing that the
 * species are pools of the same molecule in different locations.
 <p>
 * <li> <code>'partonomy':</code> The group represents a collection of parts, and its
 * members have a <em>part-of</em> relationship to the group.  For example, the
 * group could represent a cellular structure, and individual compartments
 * could be made members of the group to indicate they represent subparts of
 * that cellular structure.
 <p>
 * <li> <code>'collection':</code> The grouping is merely a collection for convenience,
 * without an implied relationship between the members.  For example, the
 * group could be used to collect together multiple disparate components of a
 * model&mdash;species, reactions, events&mdash;involved in a particular
 * phenotype, and apply a common annotation rather than having to copy the
 * same annotation to each component individually.
 *
 * </ul> <p>
 * In the libSBML API for Groups, these possible values for the 'kind'
 * attribute are programmatically represented as constants so that callers
 * will not normally need to deal with text string values.  The following
 * are the constants defined for the three values of 'kind' (plus an
 * additional constant to represent unrecognized values):
 <p>
 * <ul>
 * <li> {@link libsbmlConstants#GROUP_KIND_CLASSIFICATION GROUP_KIND_CLASSIFICATION}
 * <li> {@link libsbmlConstants#GROUP_KIND_PARTONOMY GROUP_KIND_PARTONOMY}
 * <li> {@link libsbmlConstants#GROUP_KIND_COLLECTION GROUP_KIND_COLLECTION}
 * <li> {@link libsbmlConstants#GROUP_KIND_UNKNOWN GROUP_KIND_UNKNOWN}
 *
 * </ul> <p>
 * <h2>Groups and their members</h2>
 <p>
 * If an SBML element is referenced by a {@link Group}'s child {@link Member} (directly or
 * indirectly), it is considered to be a member of that {@link Group}.  If the same
 * element is referenced by multiple {@link Member} objects, this is equivalent to
 * including it just once.  (It is considered best practice to avoid this,
 * but does not make for an invalid SBML document.)
 <p>
 * Children of referenced elements are not considered to be members of the
 * Group: a {@link KineticLaw} of a referenced {@link Reaction} is not itself a {@link Group}
 * member. Even the membership of so-called SBML container classes (e.g.,
 * {@link ListOfSpecies}, {@link ListOfCompartments}, etc.) does not imply inclusion of
 * children as members of the {@link Group}. The sole exception to this rule is the
 * handling of {@link ListOfMembers} class, described below.
 <p>
 * <h2>Semantics of group memberships</h2>
 <p>
 * <p>
 * If a {@link Member} object within a {@link Group} object's {@link ListOfMembers} references
 * another {@link Group} object, it is the <em>referenced {@link Group} itself</em> that is
 * considered to be a member of the parent {@link Group}, <em>not</em> the corresponding
 * referenced model component(s).  This is true regardless of whether those
 * components themselves happen to point to other components using some
 * mechanism defined by another SBML Level&nbsp;3 package (as happens, for
 * example, in the SBML Level&nbsp;3 Hierarchical Model Composition package
 * and its use of {@link SBaseRef}).  However, if instead a {@link Member} object references
 * a {@link ListOfMembers} object (using the 'id' attribute permitted on
 * {@link ListOfMembers} objects), it is the components of that {@link ListOfMembers} that
 * are considered to be part of the parent {@link Group}.  In other words: if in some
 * {@link Group} <em>G</em>, a {@link Member} <em>M</em> references another {@link Group}, that {@link Group} is the
 * member of <em>G</em>; if <em>M</em> references a {@link ListOfMembers}, it is the entities
 * referenced by the {@link Member} objects within the {@link ListOfMembers} that are
 * the members of <em>G</em> and not the {@link ListOfMembers} object itself.
 <p>
 * The implication of this is that any rule that applies to members of a
 * group (such the meaning of the 'kind' attribute, or the restrictions on
 * the application of 'sboTerm' attributes on a {@link ListOfMembers}) applies to the
 * child group when referenced by the {@link Group} 'id', and to the members of the
 * child group when referenced by the {@link ListOfMembers} 'id'. In an example
 * situation where a parent group includes two {@link Species} plus a {@link Group} which
 * itself contains three other {@link Species}, if the parent group's {@link ListOfMembers}
 * is given an 'sboTerm' attribute value, that {@link SBO} term applies to the two
 * species and the group, not to the three child species members of the
 * second group.  (Note also that in such a case, the parent group's 'kind'
 * attribute value would almost certainly be <code>'collection'</code> or
 * <code>'partonomy'</code>, and not <code>'classification'</code>, as two species and a group are
 * very unlikely to be classified as the same thing.)  In contrast, in the
 * situation where a parent group includes two {@link Species} plus a {@link ListOfMembers}
 * which contains three other {@link Species}, the parent group's {@link ListOfMembers}
 * 'sboTerm' would apply to the five {@link Species}, and could be more reasonably
 * marked as a <code>'classification'.</code>
 <p>
 * In a future version of this SBML Level&nbsp;3 Groups specification, it may
 * be possible to perform set operations on groups, but for now, this type of
 * union is the only set operation that is possible.
 <p>
 * Groups are not permitted to be circular: no {@link Member} may reference itself,
 * its parent {@link ListOfMembers}, nor its parent {@link Group}. If a {@link Member} references a
 * {@link Group}, the same restrictions apply to that subgroup's children: they may
 * not reference the {@link Member}, its parent {@link ListOfMembers}, nor its parent {@link Group},
 * and if any of those children reference a {@link Group}, the same restrictions apply
 * to them, etc.
 <p>
 * If a {@link Member} has a 'idRef' or 'metaIdRef' attribute which references an
 * object from a namespace that is not understood by the interpreter of the
 * SBML model, that {@link Member} must be ignored. The referenced object will not be
 * understood by the interpreter, and therefore has no need to become a
 * member of the group. If an interpreter cannot tell whether a referenced
 * object does not exist or if exists in an unparsed namespace, it may choose
 * to produce a warning.
 <p>
 * @see Member
 * @see ListOfMembers
 * @see ListOfGroups
 */

public class Group extends SBase {
   private long swigCPtr;

   protected Group(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.Group_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(Group obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (Group obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_Group(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link Group} using the given SBML Level, Version and
   * &ldquo;groups&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Group}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Group}.
   <p>
   * @param pkgVersion a long integer, the SBML Groups Version to assign to
   * this {@link Group}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Group(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Group__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link Group} using the given SBML Level, Version and
   * &ldquo;groups&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Group}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Group}.
   <p>
   * @param pkgVersion a long integer, the SBML Groups Version to assign to
   * this {@link Group}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Group(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Group__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link Group} using the given SBML Level, Version and
   * &ldquo;groups&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Group}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Group}.
   <p>
   * @param pkgVersion a long integer, the SBML Groups Version to assign to
   * this {@link Group}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Group(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Group__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link Group} using the given SBML Level, Version and
   * &ldquo;groups&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Group}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Group}.
   <p>
   * @param pkgVersion a long integer, the SBML Groups Version to assign to
   * this {@link Group}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Group() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Group__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link Group} using the given {@link GroupsPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param groupsns the {@link GroupsPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Group(GroupsPkgNamespaces groupsns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Group__SWIG_4(GroupsPkgNamespaces.getCPtr(groupsns), groupsns), true);
  }

  
/**
   * Copy constructor for {@link Group}.
   <p>
   * @param orig the {@link Group} instance to copy.
   */ public
 Group(Group orig) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Group__SWIG_5(Group.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link Group} object.
   <p>
   * @return a (deep) copy of this {@link Group} object.
   */ public
 Group cloneObject() {
    long cPtr = libsbmlJNI.Group_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new Group(cPtr, true);
  }

  
/**
   * Returns the value of the 'id' attribute of this {@link Group}.
   <p>
   * @return the value of the 'id' attribute of this {@link Group} as a string.
   */ public
 String getId() {
    return libsbmlJNI.Group_getId(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'name' attribute of this {@link Group}.
   <p>
   * @return the value of the 'name' attribute of this {@link Group} as a string.
   */ public
 String getName() {
    return libsbmlJNI.Group_getName(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'kind' attribute of this {@link Group}.
   <p>
   * <p>
 * The attribute 'kind' on a {@link Group} object is used to indicate the nature of
 * the group defined by a particular {@link Group} instance.  In the SBML
 * Level&nbsp;3 Version&nbsp;1 {@link Group} specification, there are only three
 * allowable values for 'kind':
 * <ul>
 * <li> <code>'classification'</code>, to indicate that the group represents a class,
 * and its members have an <em>is-a</em> relationship to the group.
 <p>
 * <li> <code>'partonomy'</code>, to indicate that the group represents a collection of
 * parts, and its members have a <em>part-of</em> relationship to the group.
 <p>
 * <li> <code>'collection'</code>, to indicate that the grouping is merely a collection
 * for convenience, without an implied relationship between the members.
 * </ul>
   <p>
   * @return the value of the 'kind' attribute of this {@link Group} as a {@link GroupKind_t}.
   <p>
   * The possible values returned by this method are:
   * <ul>
   * <li> {@link libsbmlConstants#GROUP_KIND_CLASSIFICATION GROUP_KIND_CLASSIFICATION}
   * <li> {@link libsbmlConstants#GROUP_KIND_PARTONOMY GROUP_KIND_PARTONOMY}
   * <li> {@link libsbmlConstants#GROUP_KIND_COLLECTION GROUP_KIND_COLLECTION}
   * <li> {@link libsbmlConstants#GROUP_KIND_UNKNOWN GROUP_KIND_UNKNOWN}
   * </ul>
   */ public
 int getKind() {
    return libsbmlJNI.Group_getKind(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'kind' attribute of this {@link Group}.
   <p>
   * <p>
 * The attribute 'kind' on a {@link Group} object is used to indicate the nature of
 * the group defined by a particular {@link Group} instance.  In the SBML
 * Level&nbsp;3 Version&nbsp;1 {@link Group} specification, there are only three
 * allowable values for 'kind':
 * <ul>
 * <li> <code>'classification'</code>, to indicate that the group represents a class,
 * and its members have an <em>is-a</em> relationship to the group.
 <p>
 * <li> <code>'partonomy'</code>, to indicate that the group represents a collection of
 * parts, and its members have a <em>part-of</em> relationship to the group.
 <p>
 * <li> <code>'collection'</code>, to indicate that the grouping is merely a collection
 * for convenience, without an implied relationship between the members.
 * </ul>
   <p>
   * @return the value of the 'kind' attribute of this {@link Group} as a string.
   * The possible values returned by this method are:
   * <ul>
   * <li> <code>'classification'</code>
   * <li> <code>'partonomy'</code>
   * <li> <code>'collection'</code>
   * <li> <code>'unknown'</code>
   * </ul>
   */ public
 String getKindAsString() {
    return libsbmlJNI.Group_getKindAsString(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Group}'s 'id' attribute is set.
   <p>
   * @return <code>true</code> if this {@link Group}'s 'id' attribute has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetId() {
    return libsbmlJNI.Group_isSetId(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Group}'s 'name' attribute is set.
   <p>
   * @return <code>true</code> if this {@link Group}'s 'name' attribute has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetName() {
    return libsbmlJNI.Group_isSetName(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Group}'s 'kind' attribute is set.
   <p>
   * @return <code>true</code> if this {@link Group}'s 'kind' attribute has been set, otherwise
   * <code>false</code> is returned.
   <p>
   * <p>
 * The attribute 'kind' on a {@link Group} object is used to indicate the nature of
 * the group defined by a particular {@link Group} instance.  In the SBML
 * Level&nbsp;3 Version&nbsp;1 {@link Group} specification, there are only three
 * allowable values for 'kind':
 * <ul>
 * <li> <code>'classification'</code>, to indicate that the group represents a class,
 * and its members have an <em>is-a</em> relationship to the group.
 <p>
 * <li> <code>'partonomy'</code>, to indicate that the group represents a collection of
 * parts, and its members have a <em>part-of</em> relationship to the group.
 <p>
 * <li> <code>'collection'</code>, to indicate that the grouping is merely a collection
 * for convenience, without an implied relationship between the members.
 * </ul>
   */ public
 boolean isSetKind() {
    return libsbmlJNI.Group_isSetKind(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'id' attribute of this {@link Group}.
   <p>
   * @param id String& value of the 'id' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * Calling this function with <code>id</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetId().
   */ public
 int setId(String id) {
    return libsbmlJNI.Group_setId(swigCPtr, this, id);
  }

  
/**
   * Sets the value of the 'name' attribute of this {@link Group}.
   <p>
   * @param name String& value of the 'name' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * Calling this function with <code>name</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetName().
   */ public
 int setName(String name) {
    return libsbmlJNI.Group_setName(swigCPtr, this, name);
  }

  
/**
   * Sets the value of the 'kind' attribute of this {@link Group}.
   <p>
   * @param kind int value of the 
   * 'kind' attribute to be set.
   * The value must be one of the predefined constants that represent
   * valid SBML Level&nbsp;3 Version&nbsp;1 {@link Group} 'kind' names, which
   * means it must be one of the following values:
   * <ul>
   * <li> {@link libsbmlConstants#GROUP_KIND_CLASSIFICATION GROUP_KIND_CLASSIFICATION}
   * <li> {@link libsbmlConstants#GROUP_KIND_PARTONOMY GROUP_KIND_PARTONOMY}
   * <li> {@link libsbmlConstants#GROUP_KIND_COLLECTION GROUP_KIND_COLLECTION}.
   *
   * </ul> <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * <p>
 * The attribute 'kind' on a {@link Group} object is used to indicate the nature of
 * the group defined by a particular {@link Group} instance.  In the SBML
 * Level&nbsp;3 Version&nbsp;1 {@link Group} specification, there are only three
 * allowable values for 'kind':
 * <ul>
 * <li> <code>'classification'</code>, to indicate that the group represents a class,
 * and its members have an <em>is-a</em> relationship to the group.
 <p>
 * <li> <code>'partonomy'</code>, to indicate that the group represents a collection of
 * parts, and its members have a <em>part-of</em> relationship to the group.
 <p>
 * <li> <code>'collection'</code>, to indicate that the grouping is merely a collection
 * for convenience, without an implied relationship between the members.
 * </ul>
   */ public
 int setKind(int kind) {
    return libsbmlJNI.Group_setKind__SWIG_0(swigCPtr, this, kind);
  }

  
/**
   * Sets the value of the 'kind' attribute of this {@link Group}.
   <p>
   * @param kind String& of the 'kind' attribute to be set.  The value
   * must be one of the following possible strings:
   * <ul>
   * <li> 'classification'
   * <li> 'partonomy'
   * <li> 'collection'
   *
   * </ul> <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * <p>
 * The attribute 'kind' on a {@link Group} object is used to indicate the nature of
 * the group defined by a particular {@link Group} instance.  In the SBML
 * Level&nbsp;3 Version&nbsp;1 {@link Group} specification, there are only three
 * allowable values for 'kind':
 * <ul>
 * <li> <code>'classification'</code>, to indicate that the group represents a class,
 * and its members have an <em>is-a</em> relationship to the group.
 <p>
 * <li> <code>'partonomy'</code>, to indicate that the group represents a collection of
 * parts, and its members have a <em>part-of</em> relationship to the group.
 <p>
 * <li> <code>'collection'</code>, to indicate that the grouping is merely a collection
 * for convenience, without an implied relationship between the members.
 * </ul>
   */ public
 int setKind(String kind) {
    return libsbmlJNI.Group_setKind__SWIG_1(swigCPtr, this, kind);
  }

  
/**
   * Unsets the value of the 'id' attribute of this {@link Group}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetId() {
    return libsbmlJNI.Group_unsetId(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'name' attribute of this {@link Group}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetName() {
    return libsbmlJNI.Group_unsetName(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'kind' attribute of this {@link Group}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * <p>
 * The attribute 'kind' on a {@link Group} object is used to indicate the nature of
 * the group defined by a particular {@link Group} instance.  In the SBML
 * Level&nbsp;3 Version&nbsp;1 {@link Group} specification, there are only three
 * allowable values for 'kind':
 * <ul>
 * <li> <code>'classification'</code>, to indicate that the group represents a class,
 * and its members have an <em>is-a</em> relationship to the group.
 <p>
 * <li> <code>'partonomy'</code>, to indicate that the group represents a collection of
 * parts, and its members have a <em>part-of</em> relationship to the group.
 <p>
 * <li> <code>'collection'</code>, to indicate that the grouping is merely a collection
 * for convenience, without an implied relationship between the members.
 * </ul>
   */ public
 int unsetKind() {
    return libsbmlJNI.Group_unsetKind(swigCPtr, this);
  }

  
/**
   * Returns the {@link ListOfMembers} from this {@link Group}.
   <p>
   * Using the SBML Level&nbsp;3 Groups package, the membership of a group
   * is determined by the contents of the list of members stored in {@link Member}
   * objects within the {@link ListOfMembers} child of a {@link Group} object.
   <p>
   * @return the {@link ListOfMembers} from this {@link Group}.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addMember(Member object)
   * @see #createMember()
   * @see #getMember(String sid)
   * @see #getMember(long n)
   * @see #getNumMembers()
   * @see #removeMember(String sid)
   * @see #removeMember(long n)
   */ public
 ListOfMembers getListOfMembers() {
    long cPtr = libsbmlJNI.Group_getListOfMembers__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfMembers(cPtr, false);
  }

  
/**
   * Get a {@link Member} from the {@link Group}.
   <p>
   * @param n a long integer representing the index of the {@link Member} to retrieve.
   <p>
   * @return the nth {@link Member} in the {@link ListOfMembers} within this {@link Group} or <code>null</code>
   * if no such object exists..
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addMember(Member object)
   * @see #createMember()
   * @see #getMember(String sid)
   * @see #getNumMembers()
   * @see #removeMember(String sid)
   * @see #removeMember(long n)
   */ public
 Member getMember(long n) {
    long cPtr = libsbmlJNI.Group_getMember__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new Member(cPtr, false);
  }

  
/**
   * Get a {@link Member} from the {@link Group} based on its identifier.
   <p>
   * @param sid a string representing the identifier of the {@link Member} to retrieve.
   <p>
   * @return the {@link Member} in the {@link ListOfMembers} within this {@link Group} with the given
   * <code>sid</code> or <code>null</code> if no such {@link Member} exists.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addMember(Member object)
   * @see #createMember()
   * @see #getMember(long n)
   * @see #getNumMembers()
   * @see #removeMember(String sid)
   * @see #removeMember(long n)
   */ public
 Member getMember(String sid) {
    long cPtr = libsbmlJNI.Group_getMember__SWIG_2(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new Member(cPtr, false);
  }

  
/**
   * Get a {@link Member} from the {@link Group} based on the element to which it refers.
   <p>
   * @param sid a string representing the 'idRef' attribute of the {@link Member}
   * object to retrieve.
   <p>
   * @return the first {@link Member} in this {@link Group} based on the given idRef attribute
   * or null if no such {@link Member} exists.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   */ public
 Member getMemberByIdRef(String sid) {
    long cPtr = libsbmlJNI.Group_getMemberByIdRef__SWIG_0(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new Member(cPtr, false);
  }

  
/**
   * Adds a copy of the given {@link Member} to this {@link Group}.
   <p>
   * @param m the {@link Member} object to add.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
   <p>
   * @see #createMember()
   * @see #getMember(String sid)
   * @see #getMember(long n)
   * @see #getNumMembers()
   * @see #removeMember(String sid)
   * @see #removeMember(long n)
   */ public
 int addMember(Member m) {
    return libsbmlJNI.Group_addMember(swigCPtr, this, Member.getCPtr(m), m);
  }

  
/**
   * Get the number of {@link Member} objects in this {@link Group}.
   <p>
   * @return the number of {@link Member} objects in this {@link Group}.
   <p>
   * @see #addMember(Member object)
   * @see #createMember()
   * @see #getMember(String sid)
   * @see #getMember(long n)
   * @see #removeMember(String sid)
   * @see #removeMember(long n)
   */ public
 long getNumMembers() {
    return libsbmlJNI.Group_getNumMembers(swigCPtr, this);
  }

  
/**
   * Creates a new {@link Member} object, adds it to this {@link Group} object and returns the
   * {@link Member} object created.
   <p>
   * @return a new {@link Member} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addMember(Member object)
   * @see #getMember(String sid)
   * @see #getMember(long n)
   * @see #getNumMembers()
   * @see #removeMember(String sid)
   * @see #removeMember(long n)
   */ public
 Member createMember() {
    long cPtr = libsbmlJNI.Group_createMember(swigCPtr, this);
    return (cPtr == 0) ? null : new Member(cPtr, false);
  }

  
/**
   * Removes the nth {@link Member} from this {@link Group} and returns a pointer to it.
   <p>
   * @param n a long integer representing the index of the {@link Member} to remove.
   <p>
   * @return a pointer to the nth {@link Member} in this {@link Group}.
   <p>
   * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
   <p>
   * @see #addMember(Member object)
   * @see #createMember()
   * @see #getMember(String sid)
   * @see #getMember(long n)
   * @see #getNumMembers()
   * @see #removeMember(String sid)
   */ public
 Member removeMember(long n) {
    long cPtr = libsbmlJNI.Group_removeMember__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new Member(cPtr, true);
  }

  
/**
   * Removes the {@link Member} from this {@link Group} based on its identifier and returns a
   * pointer to it.
   <p>
   * @param sid a string representing the identifier of the {@link Member} to remove.
   <p>
   * @return the {@link Member} in this {@link Group} based on the identifier or null if no
   * such {@link Member} exists.
   <p>
   * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
   <p>
   * @see #addMember(Member object)
   * @see #createMember()
   * @see #getMember(String sid)
   * @see #getMember(long n)
   * @see #getNumMembers()
   * @see #removeMember(long n)
   */ public
 Member removeMember(String sid) {
    long cPtr = libsbmlJNI.Group_removeMember__SWIG_1(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new Member(cPtr, true);
  }

  
/**
   * Returns the XML element name of this {@link Group} object.
   <p>
   * For {@link Group}, the XML element name is always <code>'group'.</code>
   <p>
   * @return the name of this element, i.e. <code>'group'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.Group_getElementName(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code for this {@link Group} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_GROUPS_GROUP SBML_GROUPS_GROUP}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.Group_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes for this {@link Group}
   * object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required attributes of this {@link Group}
   * have been set, otherwise <code>false</code> is returned.
   <p>
   * @note The required attributes for the {@link Group} object are:
   * <ul>
   * <li> 'kind'
   * </ul>
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.Group_hasRequiredAttributes(swigCPtr, this);
  }

  
/** * @internal */ public
 void connectToChild() {
    libsbmlJNI.Group_connectToChild(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.Group_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

  
/** * @internal */ public
 void updateSBMLNamespace(String arg0, long level, long version) {
    libsbmlJNI.Group_updateSBMLNamespace(swigCPtr, this, arg0, level, version);
  }

  
/**
   * Returns the first child element that has the given <code>id</code> in the model-wide
   * SId namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id a string representing the id attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>id</code>. If no such
   * object is found, this method returns <code>null.</code>
   */ public
 SBase getElementBySId(String id) {
  return libsbml.DowncastSBase(libsbmlJNI.Group_getElementBySId(swigCPtr, this, id), false);
}

  
/**
   * Returns the first child element that has the given <code>metaid</code>, or <code>null</code>
   * if no such object is found.
   <p>
   * @param metaid a string representing the metaid attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>metaid</code>. If no
   * such object is found this method returns <code>null.</code>
   */ public
 SBase getElementByMetaId(String metaid) {
  return libsbml.DowncastSBase(libsbmlJNI.Group_getElementByMetaId(swigCPtr, this, metaid), false);
}

}
