/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-multi"><a href="group__multi.html">multi</a></span>
 Extension of {@link Compartment} for the 'multi' package.
 <p>
 * The {@link MultiCompartmentPlugin} object is used to extend the standard SBML
 * {@link Compartment} base object with an optional 'compartmentType' attribute, a
 * required 'isType' Boolean attribute, and a child
 * {@link ListOfCompartmentReferences}.  The 'isType' attribute flags whether this
 * {@link Compartment} should be treated as a standard SBML {@link Compartment} (if <code>false</code>),
 * or as a more generic rule-based 'type' of {@link Compartment} (if <code>true</code>).  A
 * compartment 'type' is a template (in the sense of prototype) for all
 * {@link Compartment} objects referencing it (via 'compartmentType' attributes). A
 * {@link Species} object directly referencing a compartment type is not a 'fully
 * defined' species, but rather a 'template' species.  If the value of the
 * 'isType' attribute is <code>false</code>, the {@link Compartment} object is a 'not-a-type'
 * compartment, and it is similar to a SBML core {@link Compartment} except it can
 * reference a compartment type and can have a {@link ListOfCompartmentReferences}
 * child.  Each child {@link CompartmentReference} in the {@link ListOfCompartmentReferences}
 * defines a subcompartment of the parent {@link Compartment}.  The 'compartmentType'
 * attribute identifies this {@link Compartment} as the {@link CompartmentType} defined
 * elsewhere in the {@link Model}.  If the 'compartmentType' attribute is set, the
 * 'isType' attribute must be <code>true.</code>
 */

public class MultiCompartmentPlugin extends SBasePlugin {
   private long swigCPtr;

   protected MultiCompartmentPlugin(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.MultiCompartmentPlugin_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(MultiCompartmentPlugin obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (MultiCompartmentPlugin obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_MultiCompartmentPlugin(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link MultiCompartmentPlugin} object.
   <p>
   * <p>
 * In the XML representation of an SBML document, XML namespaces are used to
 * identify the origin of each XML construct used.  XML namespaces are
 * identified by their unique resource identifiers (URIs).  The core SBML
 * specifications stipulate the namespaces that must be used for core SBML
 * constructs; for example, all XML elements that belong to SBML Level&nbsp;3
 * Version&nbsp;1 Core must be placed in the XML namespace identified by the URI
 * <code>'http://www.sbml.org/sbml/level3/version1/core'</code>.  Individual
 * SBML Level&nbsp;3 packages define their own XML namespaces; for example,
 * all elements belonging to the SBML Level&nbsp;3 Layout Version&nbsp;1
 * package must be placed in the XML namespace
 * <code>'http://www.sbml.org/sbml/level3/version1/layout/version1/'</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * @param uri the URI of the SBML Level&nbsp;3 package implemented by
   * this libSBML package extension.
   <p>
   * @param prefix the XML namespace prefix being used for the package.
   <p>
   * @param multins the namespaces object for the package.
   */ public
 MultiCompartmentPlugin(String uri, String prefix, MultiPkgNamespaces multins) {
    this(libsbmlJNI.new_MultiCompartmentPlugin__SWIG_0(uri, prefix, MultiPkgNamespaces.getCPtr(multins), multins), true);
  }

  
/**
   * Copy constructor for {@link MultiCompartmentPlugin}.
   <p>
   * @param orig the {@link MultiCompartmentPlugin} instance to copy.
   */ public
 MultiCompartmentPlugin(MultiCompartmentPlugin orig) {
    this(libsbmlJNI.new_MultiCompartmentPlugin__SWIG_1(MultiCompartmentPlugin.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link MultiCompartmentPlugin} object.
   <p>
   * @return a (deep) copy of this {@link MultiCompartmentPlugin} object.
   */ public
 SBasePlugin cloneObject() {
    long cPtr = libsbmlJNI.MultiCompartmentPlugin_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new MultiCompartmentPlugin(cPtr, true);
  }

  
/** * @internal */ public
 SBase createObject(XMLInputStream stream) {
  return libsbml.DowncastSBase(libsbmlJNI.MultiCompartmentPlugin_createObject(swigCPtr, this, XMLInputStream.getCPtr(stream), stream), false);
}

  
/**
   * Returns <code>true</code> if this object has all the required elements.
   <p>
   * @return <code>true</code> if this object has all the elements required by the
   * package specification; otherwise, <code>false</code> will be returned.
   */ public
 boolean hasRequiredElements() {
    return libsbmlJNI.MultiCompartmentPlugin_hasRequiredElements(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'compartmentType' attribute of this compartment.
   <p>
   * @return the 'compartmentType' attribute value.
   */ public
 String getCompartmentType() {
    return libsbmlJNI.MultiCompartmentPlugin_getCompartmentType(swigCPtr, this);
  }

  
/**
   * Returns <code>true</code> if this compartment's 'compartmentType' attribute has
   * been set.
   <p>
   * @return <code>true</code> if the 'compartmentType' attribute has been set;
   * otherwise, <code>false</code> is returned.
   */ public
 boolean isSetCompartmentType() {
    return libsbmlJNI.MultiCompartmentPlugin_isSetCompartmentType(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'compartmentType' attribute on this compartment.
   <p>
   * @param compartmentType the new value for the attribute.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setCompartmentType(String compartmentType) {
    return libsbmlJNI.MultiCompartmentPlugin_setCompartmentType(swigCPtr, this, compartmentType);
  }

  
/**
   * Unsets the value of the 'compartmentType' attribute.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetCompartmentType() {
    return libsbmlJNI.MultiCompartmentPlugin_unsetCompartmentType(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'isType' attribute.
   <p>
   * @return the value of the 'isType' attribute.
   */ public
 boolean getIsType() {
    return libsbmlJNI.MultiCompartmentPlugin_getIsType(swigCPtr, this);
  }

  
/**
   * Returns <code>true</code> if this compartment's 'isType' attribute has been set.
   <p>
   * @return <code>true</code> if the 'isType' attribute has been set; otherwise,
   * <code>false</code> is returned.
   */ public
 boolean isSetIsType() {
    return libsbmlJNI.MultiCompartmentPlugin_isSetIsType(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'isType' attribute.
   <p>
   * @param isType the new value of the attribute.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setIsType(boolean isType) {
    return libsbmlJNI.MultiCompartmentPlugin_setIsType(swigCPtr, this, isType);
  }

  
/**
   * Unsets the value of the 'isType' attribute.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetIsType() {
    return libsbmlJNI.MultiCompartmentPlugin_unsetIsType(swigCPtr, this);
  }

  
/**
   * Returns the {@link ListOfCompartmentReferences} object.
   <p>
   * @return the {@link ListOfCompartmentReferences} object within this
   * 'multi' {@link Compartment} object.
   */ public
 ListOfCompartmentReferences getListOfCompartmentReferences() {
    long cPtr = libsbmlJNI.MultiCompartmentPlugin_getListOfCompartmentReferences__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfCompartmentReferences(cPtr, false);
  }

  
/**
   * Returns the nth {@link CompartmentReference} object from the
   * {@link ListOfCompartmentReferences}.
   <p>
   * @param n the index number of the {@link CompartmentReference} to get.
   <p>
   * @return the nth {@link CompartmentReference}, or <code>null</code> if the index <code>n</code> is out
   * of range.
   */ public
 CompartmentReference getCompartmentReference(long n) {
    long cPtr = libsbmlJNI.MultiCompartmentPlugin_getCompartmentReference__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new CompartmentReference(cPtr, false);
  }

  
/**
   * Returns the {@link CompartmentReference} with the given identifier <code>sid</code>.
   <p>
   * @param sid the identifier of the {@link CompartmentReference} object to get from
   * the {@link ListOfCompartmentReferences}.
   <p>
   * @return the {@link CompartmentReference} object with the given identifier in the
   * {@link ListOfCompartmentReferences}, or <code>null</code> if no such {@link CompartmentReference}
   * exists.
   */ public
 CompartmentReference getCompartmentReference(String sid) {
    long cPtr = libsbmlJNI.MultiCompartmentPlugin_getCompartmentReference__SWIG_2(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new CompartmentReference(cPtr, false);
  }

  
/**
   * Adds a copy of the given {@link CompartmentReference} object to the
   * {@link ListOfCompartmentReferences}.
   <p>
   * @param compartmentReference the {@link CompartmentReference} object to add.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int addCompartmentReference(CompartmentReference compartmentReference) {
    return libsbmlJNI.MultiCompartmentPlugin_addCompartmentReference(swigCPtr, this, CompartmentReference.getCPtr(compartmentReference), compartmentReference);
  }

  
/**
   * Creates a new {@link CompartmentReference} object and adds it to the
   * {@link ListOfCompartmentReferences}.
   <p>
   * @return the newly created {@link CompartmentReference} object.
   */ public
 CompartmentReference createCompartmentReference() {
    long cPtr = libsbmlJNI.MultiCompartmentPlugin_createCompartmentReference(swigCPtr, this);
    return (cPtr == 0) ? null : new CompartmentReference(cPtr, false);
  }

  
/**
   * Removes the nth {@link CompartmentReference} object from the
   * {@link ListOfCompartmentReferences}.
   <p>
   * @param n the index of the {@link CompartmentReference} to remove.
   <p>
   * @return the {@link CompartmentReference} object removed, or <code>null</code> if the given
   * index <code>n</code> is out of range.  Note that the caller owns the returned
   * object and is responsible for deleting it.
   */ public
 CompartmentReference removeCompartmentReference(long n) {
    long cPtr = libsbmlJNI.MultiCompartmentPlugin_removeCompartmentReference__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new CompartmentReference(cPtr, true);
  }

  
/**
   * Removes the {@link CompartmentReference} object with the given identifier from
   * the {@link ListOfCompartmentReferences}.
   <p>
   * @param sid the id of the {@link CompartmentReference} to remove.
   <p>
   * @return the {@link CompartmentReference} object removed, or <code>null</code> if no such
   * {@link CompartmentReference} exists.  Note that the caller owns the returned
   * object and is responsible for deleting it.
   */ public
 CompartmentReference removeCompartmentReference(String sid) {
    long cPtr = libsbmlJNI.MultiCompartmentPlugin_removeCompartmentReference__SWIG_1(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new CompartmentReference(cPtr, true);
  }

  
/**
   * Returns the number of {@link CompartmentReference} objects in the
   * {@link ListOfCompartmentReferences}.
   <p>
   * @return the number of {@link CompartmentReference} objects.
   */ public
 long getNumCompartmentReferences() {
    return libsbmlJNI.MultiCompartmentPlugin_getNumCompartmentReferences(swigCPtr, this);
  }

  
/** * @internal */ public
 void connectToParent(SBase sbase) {
    libsbmlJNI.MultiCompartmentPlugin_connectToParent(swigCPtr, this, SBase.getCPtr(sbase), sbase);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.MultiCompartmentPlugin_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

}
