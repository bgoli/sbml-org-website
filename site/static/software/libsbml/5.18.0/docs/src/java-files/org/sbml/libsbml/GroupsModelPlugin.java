/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-groups"><a href="group__groups.html">groups</a></span>
 Extension of {@link Model}.
 */

public class GroupsModelPlugin extends SBasePlugin {
   private long swigCPtr;

   protected GroupsModelPlugin(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.GroupsModelPlugin_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(GroupsModelPlugin obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (GroupsModelPlugin obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_GroupsModelPlugin(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link GroupsModelPlugin} using the given URI, prefix and package
   * namespace.
   <p>
   * @param uri a string, representing the URI of the SBML Level&nbsp;3 package
   * implemented by this libSBML package extension.
   <p>
   * @param prefix a string, the XML namespace prefix being used for this
   * package.
   <p>
   * @param groupsns a pointer to the namesspaces object (GroupsPkgNamespaces)
   * for this package.
   <p>
   * <p>
 * In the XML representation of an SBML document, XML namespaces are used to
 * identify the origin of each XML construct used.  XML namespaces are
 * identified by their unique resource identifiers (URIs).  The core SBML
 * specifications stipulate the namespaces that must be used for core SBML
 * constructs; for example, all XML elements that belong to SBML Level&nbsp;3
 * Version&nbsp;1 Core must be placed in the XML namespace identified by the URI
 * <code>'http://www.sbml.org/sbml/level3/version1/core'</code>.  Individual
 * SBML Level&nbsp;3 packages define their own XML namespaces; for example,
 * all elements belonging to the SBML Level&nbsp;3 Layout Version&nbsp;1
 * package must be placed in the XML namespace
 * <code>'http://www.sbml.org/sbml/level3/version1/layout/version1/'</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   */ public
 GroupsModelPlugin(String uri, String prefix, GroupsPkgNamespaces groupsns) {
    this(libsbmlJNI.new_GroupsModelPlugin__SWIG_0(uri, prefix, GroupsPkgNamespaces.getCPtr(groupsns), groupsns), true);
  }

  
/**
   * Copy constructor for {@link GroupsModelPlugin}.
   <p>
   * @param orig the {@link GroupsModelPlugin} instance to copy.
   */ public
 GroupsModelPlugin(GroupsModelPlugin orig) {
    this(libsbmlJNI.new_GroupsModelPlugin__SWIG_1(GroupsModelPlugin.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link GroupsModelPlugin} object.
   <p>
   * @return a (deep) copy of this {@link GroupsModelPlugin} object.
   */ public
 SBasePlugin cloneObject() {
    long cPtr = libsbmlJNI.GroupsModelPlugin_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new GroupsModelPlugin(cPtr, true);
  }

  
/**
   * Returns the {@link ListOfGroups} from this {@link GroupsModelPlugin}.
   <p>
   * @return the {@link ListOfGroups} from this {@link GroupsModelPlugin}.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addGroup(Group object)
   * @see #createGroup()
   * @see #getGroup(String sid)
   * @see #getGroup(long n)
   * @see #getNumGroups()
   * @see #removeGroup(String sid)
   * @see #removeGroup(long n)
   */ public
 ListOfGroups getListOfGroups() {
    long cPtr = libsbmlJNI.GroupsModelPlugin_getListOfGroups__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfGroups(cPtr, false);
  }

  
/**
   * Get a {@link Group} from the {@link GroupsModelPlugin}.
   <p>
   * @param n a long integer representing the index of the {@link Group} to retrieve.
   <p>
   * @return the nth {@link Group} in the {@link ListOfGroups} within this {@link GroupsModelPlugin} or
   * <code>null</code> if no such object exists..
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addGroup(Group object)
   * @see #createGroup()
   * @see #getGroup(String sid)
   * @see #getNumGroups()
   * @see #removeGroup(String sid)
   * @see #removeGroup(long n)
   */ public
 Group getGroup(long n) {
    long cPtr = libsbmlJNI.GroupsModelPlugin_getGroup__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new Group(cPtr, false);
  }

  
/**
   * Get a {@link Group} from the {@link GroupsModelPlugin} based on its identifier.
   <p>
   * @param sid a string representing the identifier of the {@link Group} to retrieve.
   <p>
   * @return the {@link Group} in the {@link ListOfGroups} within this {@link GroupsModelPlugin} with
   * the given <code>sid</code> or <code>null</code> if no such {@link Group} exists.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addGroup(Group object)
   * @see #createGroup()
   * @see #getGroup(long n)
   * @see #getNumGroups()
   * @see #removeGroup(String sid)
   * @see #removeGroup(long n)
   */ public
 Group getGroup(String sid) {
    long cPtr = libsbmlJNI.GroupsModelPlugin_getGroup__SWIG_2(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new Group(cPtr, false);
  }

  
/**
   * Adds a copy of the given {@link Group} to this {@link GroupsModelPlugin}.
   <p>
   * @param g the {@link Group} object to add.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
   <p>
   * @see #createGroup()
   * @see #getGroup(String sid)
   * @see #getGroup(long n)
   * @see #getNumGroups()
   * @see #removeGroup(String sid)
   * @see #removeGroup(long n)
   */ public
 int addGroup(Group g) {
    return libsbmlJNI.GroupsModelPlugin_addGroup(swigCPtr, this, Group.getCPtr(g), g);
  }

  
/**
   * Get the number of {@link Group} objects in this {@link GroupsModelPlugin}.
   <p>
   * @return the number of {@link Group} objects in this {@link GroupsModelPlugin}.
   <p>
   * @see #addGroup(Group object)
   * @see #createGroup()
   * @see #getGroup(String sid)
   * @see #getGroup(long n)
   * @see #removeGroup(String sid)
   * @see #removeGroup(long n)
   */ public
 long getNumGroups() {
    return libsbmlJNI.GroupsModelPlugin_getNumGroups(swigCPtr, this);
  }

  
/**
   * Creates a new {@link Group} object, adds it to this {@link GroupsModelPlugin} object and
   * returns the {@link Group} object created.
   <p>
   * @return a new {@link Group} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addGroup(Group object)
   * @see #getGroup(String sid)
   * @see #getGroup(long n)
   * @see #getNumGroups()
   * @see #removeGroup(String sid)
   * @see #removeGroup(long n)
   */ public
 Group createGroup() {
    long cPtr = libsbmlJNI.GroupsModelPlugin_createGroup(swigCPtr, this);
    return (cPtr == 0) ? null : new Group(cPtr, false);
  }

  
/**
   * Removes the nth {@link Group} from this {@link GroupsModelPlugin} and returns a pointer to
   * it.
   <p>
   * @param n a long integer representing the index of the {@link Group} to remove.
   <p>
   * @return a pointer to the nth {@link Group} in this {@link GroupsModelPlugin}.
   <p>
   * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
   <p>
   * @see #addGroup(Group object)
   * @see #createGroup()
   * @see #getGroup(String sid)
   * @see #getGroup(long n)
   * @see #getNumGroups()
   * @see #removeGroup(String sid)
   */ public
 Group removeGroup(long n) {
    long cPtr = libsbmlJNI.GroupsModelPlugin_removeGroup__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new Group(cPtr, true);
  }

  
/**
   * Removes the {@link Group} from this {@link GroupsModelPlugin} based on its identifier and
   * returns a pointer to it.
   <p>
   * @param sid a string representing the identifier of the {@link Group} to remove.
   <p>
   * @return the {@link Group} in this {@link GroupsModelPlugin} based on the identifier or
   * null if no such {@link Group} exists.
   <p>
   * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
   <p>
   * @see #addGroup(Group object)
   * @see #createGroup()
   * @see #getGroup(String sid)
   * @see #getGroup(long n)
   * @see #getNumGroups()
   * @see #removeGroup(long n)
   */ public
 Group removeGroup(String sid) {
    long cPtr = libsbmlJNI.GroupsModelPlugin_removeGroup__SWIG_1(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new Group(cPtr, true);
  }

  
/** * @internal */ public
 void connectToChild() {
    libsbmlJNI.GroupsModelPlugin_connectToChild(swigCPtr, this);
  }

  
/** * @internal */ public
 void connectToParent(SBase base) {
    libsbmlJNI.GroupsModelPlugin_connectToParent(swigCPtr, this, SBase.getCPtr(base), base);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.GroupsModelPlugin_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

  
/** * @internal */ public
 void updateSBMLNamespace(String arg0, long level, long version) {
    libsbmlJNI.GroupsModelPlugin_updateSBMLNamespace(swigCPtr, this, arg0, level, version);
  }

  
/**
   * Returns the first child element that has the given <code>id</code> in the model-wide
   * SId namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id a string representing the id attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>id</code>. If no such
   * object is found, this method returns <code>null.</code>
   */ public
 SBase getElementBySId(String id) {
  return libsbml.DowncastSBase(libsbmlJNI.GroupsModelPlugin_getElementBySId(swigCPtr, this, id), false);
}

  
/**
   * Returns the first child element that has the given <code>metaid</code>, or <code>null</code>
   * if no such object is found.
   <p>
   * @param metaid a string representing the metaid attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>metaid</code>. If no
   * such object is found this method returns <code>null.</code>
   */ public
 SBase getElementByMetaId(String metaid) {
  return libsbml.DowncastSBase(libsbmlJNI.GroupsModelPlugin_getElementByMetaId(swigCPtr, this, metaid), false);
}

  
/** * @internal */ public
 int appendFrom(Model model) {
    return libsbmlJNI.GroupsModelPlugin_appendFrom(swigCPtr, this, Model.getCPtr(model), model);
  }

  
/**
   * For nested groups (Member objects that reference a {@link ListOfMembers} 
   * object), {@link SBO} terms, Notes, and Annotation from the
   * parent {@link ListOfMembers} applies to the child.  This function
   * copies any information from any of those three things to all 
   * child {@link ListOfMembers}, and if that information is not already 
   * set.  After calling
   * this function, it is sufficient to check any {@link ListOfMembers}
   * to see if its {@link SBO} term, Notes, or Annotation is set, without
   * further checking to see if that element was nested in another
   * {@link Group}.
   */ public
 void copyInformationToNestedLists() {
    libsbmlJNI.GroupsModelPlugin_copyInformationToNestedLists(swigCPtr, this);
  }

}
