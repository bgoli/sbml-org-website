/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-comp"><a href="group__comp.html">comp</a></span>
 Extension of {@link SBMLDocument}.
 <p>
 * The {@link CompSBMLDocumentPlugin} class inherits from the {@link SBMLDocumentPlugin}
 * class, and codifies the extensions to the {@link SBMLDocument} class defined in
 * the SBML Level&nbsp;3 <a href='../../../extensions-summary.html#comp'>Hierarchical Model Composition</a> (&ldquo;comp&rdquo;) package.  This
 * extension allows multiple {@link Model} objects to be defined in a single
 * {@link SBMLDocument}, stored in an optional child {@link ListOfModelDefinitions} object,
 * as well as define references to {@link Model} objects in other files, stored in
 * the optional child {@link ListOfExternalModelDefinitions} object.  These model
 * definitions, if present, allow {@link Submodel} objects to reference other Models
 * to instantiate.
 <p>
 * The presence of any {@link ModelDefinition} or {@link ExternalModelDefinition} in an
 * {@link SBMLDocument} does not change the default {@link Model} in the file.  If a
 * {@link SBMLDocument} is submitted somewhere to be simulated, it is still the
 * <code>&lt;model&gt;</code> child of the <code>&lt;sbml&gt;</code> element
 * that should be simulated.
 <p>
 * In addition, as all packages do, the {@link CompSBMLDocumentPlugin} defines a
 * required flag named <code>required</code>, which indicates whether 
 * &ldquo;comp&rdquo; constructs can be used to change the core mathematics of the
 * <code>&lt;model&gt;</code> child of the <code>&lt;sbml&gt;</code> element.
 * Because they can, this attribute must be set <code>true.</code>
 */

public class CompSBMLDocumentPlugin extends SBMLDocumentPlugin {
   private long swigCPtr;

   protected CompSBMLDocumentPlugin(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.CompSBMLDocumentPlugin_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(CompSBMLDocumentPlugin obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (CompSBMLDocumentPlugin obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_CompSBMLDocumentPlugin(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link CompSBMLDocumentPlugin} object using the given parameters.
   <p>
   * <p>
 * In the XML representation of an SBML document, XML namespaces are used to
 * identify the origin of each XML construct used.  XML namespaces are
 * identified by their unique resource identifiers (URIs).  The core SBML
 * specifications stipulate the namespaces that must be used for core SBML
 * constructs; for example, all XML elements that belong to SBML Level&nbsp;3
 * Version&nbsp;1 Core must be placed in the XML namespace identified by the URI
 * <code>'http://www.sbml.org/sbml/level3/version1/core'</code>.  Individual
 * SBML Level&nbsp;3 packages define their own XML namespaces; for example,
 * all elements belonging to the SBML Level&nbsp;3 Layout Version&nbsp;1
 * package must be placed in the XML namespace
 * <code>'http://www.sbml.org/sbml/level3/version1/layout/version1/'</code>.
   <p>
   * <p>
 * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and (in
 * Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * {@link SBMLNamespaces} object somewhere in a program once, then hand that object
 * as needed to object constructors that accept {@link SBMLNamespaces} as arguments.
   <p>
   * @param uri the URI of the SBML Level&nbsp;3 package implemented by
   * this libSBML package extension.
   <p>
   * @param prefix the XML namespace prefix being used for the package.
   <p>
   * @param compns the namespaces object for the package.
   */ public
 CompSBMLDocumentPlugin(String uri, String prefix, CompPkgNamespaces compns) {
    this(libsbmlJNI.new_CompSBMLDocumentPlugin__SWIG_0(uri, prefix, CompPkgNamespaces.getCPtr(compns), compns), true);
  }

  
/**
   * Copy constructor. Creates a copy of this {@link CompSBMLDocumentPlugin} object.
   <p>
   * @param orig the instance to copy.
   */ public
 CompSBMLDocumentPlugin(CompSBMLDocumentPlugin orig) {
    this(libsbmlJNI.new_CompSBMLDocumentPlugin__SWIG_1(CompSBMLDocumentPlugin.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link CompSBMLDocumentPlugin} object.
   <p>
   * @return a (deep) copy of this {@link CompSBMLDocumentPlugin} object.
   */ public
 SBasePlugin cloneObject() {
    long cPtr = libsbmlJNI.CompSBMLDocumentPlugin_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new CompSBMLDocumentPlugin(cPtr, true);
  }

  
/**
   * Returns the first child element found that has the given <code>id</code> in the
   * model-wide SId namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id string representing the identifier of the object to find.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>id</code>.
   <p>
   * @note The comp SBML document plugin has multiple model-wide SId
   * namespaces, so a valid document may well contain multiple elements with
   * the same SId that reside in separate models.  It is not recommended to
   * ever call this function&mdash;instead, call the function on the child
   * {@link ModelDefinition} objects.
   */ public
 SBase getElementBySId(String id) {
  return libsbml.DowncastSBase(libsbmlJNI.CompSBMLDocumentPlugin_getElementBySId(swigCPtr, this, id), false);
}

  
/**
   * Returns the first child element it can find with the given <code>metaid</code>, or
   * itself if it has the given <code>metaid</code>, or <code>null</code> if no such object is
   * found.
   <p>
   * @param metaid string representing the meta identifier of the object to find.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>metaid</code>.
   */ public
 SBase getElementByMetaId(String metaid) {
  return libsbml.DowncastSBase(libsbmlJNI.CompSBMLDocumentPlugin_getElementByMetaId(swigCPtr, this, metaid), false);
}

  
/** * @internal */ public
 SBase createObject(XMLInputStream stream) {
  return libsbml.DowncastSBase(libsbmlJNI.CompSBMLDocumentPlugin_createObject(swigCPtr, this, XMLInputStream.getCPtr(stream), stream), false);
}

  
/** * @internal */ public
 boolean isCompFlatteningImplemented() {
    return libsbmlJNI.CompSBMLDocumentPlugin_isCompFlatteningImplemented(swigCPtr, this);
  }

  
/** * @internal */ public
 long checkConsistency() {
    return libsbmlJNI.CompSBMLDocumentPlugin_checkConsistency(swigCPtr, this);
  }

  
/**
   * Returns the {@link ListOf} object that holds each {@link ModelDefinition}.
   <p>
   * @return the {@link ListOf} object that holds each {@link ModelDefinition}.
   */ public
 ListOfModelDefinitions getListOfModelDefinitions() {
    long cPtr = libsbmlJNI.CompSBMLDocumentPlugin_getListOfModelDefinitions__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfModelDefinitions(cPtr, false);
  }

  
/**
   * Returns the {@link ModelDefinition} with the given index.
   <p>
   * @param n the index number of the {@link ModelDefinition} to get.
   <p>
   * @return the nth {@link ModelDefinition} in the {@link ListOfModelDefinitions}.  If the
   * index is invalid, <code>null</code> is returned.
   */ public
 ModelDefinition getModelDefinition(long n) {
    long cPtr = libsbmlJNI.CompSBMLDocumentPlugin_getModelDefinition__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new ModelDefinition(cPtr, false);
  }

  
/**
   * Returns the model definition object based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the model definition to get.
   <p>
   * @return {@link ModelDefinition} in the {@link ListOfModelDefinitions} with the given <code>sid</code>
   * or <code>null</code> if no such {@link ModelDefinition} exists.
   <p>
   * @see #getModelDefinition(long n)
   * @see #getListOfModelDefinitions()
   */ public
 ModelDefinition getModelDefinition(String sid) {
    long cPtr = libsbmlJNI.CompSBMLDocumentPlugin_getModelDefinition__SWIG_2(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new ModelDefinition(cPtr, false);
  }

  
/**
   * Adds a copy of the given {@link ModelDefinition} object to the 
   * {@link ListOfModelDefinitions}.
   <p>
   * @param modelDefinition the {@link ModelDefinition} object to be added to the
   * {@link ListOfModelDefinitions}.  Fails if the added {@link ModelDefinition} is <code>null</code>,
   * does not match the level/version/package of the parent object, or cannot
   * be added to the list of replaced elements.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH}
   * </ul>
   */ public
 int addModelDefinition(ModelDefinition modelDefinition) {
    return libsbmlJNI.CompSBMLDocumentPlugin_addModelDefinition(swigCPtr, this, ModelDefinition.getCPtr(modelDefinition), modelDefinition);
  }

  
/**
   * Returns the number of {@link ModelDefinition} objects for this {@link SBMLDocumentPlugin}.
   <p>
   * @return the number of {@link ModelDefinition} objects.
   */ public
 long getNumModelDefinitions() {
    return libsbmlJNI.CompSBMLDocumentPlugin_getNumModelDefinitions(swigCPtr, this);
  }

  
/**
   * Creates a {@link ModelDefinition} object, adds it to the end of the
   * {@link ModelDefinition} objects list and returns a pointer to the newly
   * created object.
   <p>
   * @return a newly created {@link ModelDefinition} object.
   */ public
 ModelDefinition createModelDefinition() {
    long cPtr = libsbmlJNI.CompSBMLDocumentPlugin_createModelDefinition(swigCPtr, this);
    return (cPtr == 0) ? null : new ModelDefinition(cPtr, false);
  }

  
/**
   * Removes the {@link ModelDefinition} with the given index from the {@link CompSBMLDocumentPlugin}.
   <p>
   * A pointer to the {@link ModelDefinition} that was removed is returned.
   * If no {@link ModelDefinition} has been removed, <code>null</code> is returned.
   <p>
   * @param index the index of the {@link ModelDefinition} object to remove.
   <p>
   * @return the {@link ModelDefinition} object removed.  As mentioned above, 
   * the caller owns the returned object. <code>null</code> is returned if 
   * the given index is out of range.
   */ public
 ModelDefinition removeModelDefinition(long index) {
    long cPtr = libsbmlJNI.CompSBMLDocumentPlugin_removeModelDefinition__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new ModelDefinition(cPtr, false);
  }

  
/**
   * Removes the {@link ModelDefinition} with the given <code>id</code> from the {@link CompSBMLDocumentPlugin}.
   <p>
   * A pointer to the {@link ModelDefinition} that was removed is returned.
   * If no {@link ModelDefinition} has been removed, <code>null</code> is returned.
   <p>
   * @param id the id of the {@link ModelDefinition} object to remove.
   <p>
   * @return the {@link ModelDefinition} object removed.  As mentioned above, 
   * the caller owns the returned object. <code>null</code> is returned if 
   * the given index is out of range.
   */ public
 ModelDefinition removeModelDefinition(String id) {
    long cPtr = libsbmlJNI.CompSBMLDocumentPlugin_removeModelDefinition__SWIG_1(swigCPtr, this, id);
    return (cPtr == 0) ? null : new ModelDefinition(cPtr, false);
  }

  
/**
   * Returns the {@link ListOf} object that holds each {@link ExternalModelDefinition}.
   <p>
   * @return the {@link ListOf} object that each all {@link ExternalModelDefinition}.
   */ public
 ListOfExternalModelDefinitions getListOfExternalModelDefinitions() {
    long cPtr = libsbmlJNI.CompSBMLDocumentPlugin_getListOfExternalModelDefinitions__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfExternalModelDefinitions(cPtr, false);
  }

  
/**
   * Returns the {@link ExternalModelDefinition} with the given index.
   <p>
   * @param n the index number of the {@link ExternalModelDefinition} to get.
   <p>
   * @return the nth {@link ExternalModelDefinition} in the
   * {@link ListOfExternalModelDefinitions}.  If the index is invalid, <code>null</code> is
   * returned.
   */ public
 ExternalModelDefinition getExternalModelDefinition(long n) {
    long cPtr = libsbmlJNI.CompSBMLDocumentPlugin_getExternalModelDefinition__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new ExternalModelDefinition(cPtr, false);
  }

  
/**
   * Returns the model definition object based on its identifier.
   <p>
   * @param sid a string representing the identifier 
   * of the model definition to get.
   <p>
   * @return {@link ExternalModelDefinition} in the {@link ListOfExternalModelDefinitions} with the given <code>sid</code>
   * or <code>null</code> if no such {@link ExternalModelDefinition} exists.
   <p>
   * @see #getExternalModelDefinition(long n)
   * @see #getListOfExternalModelDefinitions()
   */ public
 ExternalModelDefinition getExternalModelDefinition(String sid) {
    long cPtr = libsbmlJNI.CompSBMLDocumentPlugin_getExternalModelDefinition__SWIG_2(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new ExternalModelDefinition(cPtr, false);
  }

  
/**
   * Searches the model namespace of the document and returns the {@link Model},
   * {@link ModelDefinition}, or ExternalModelDefintion object with the given
   * identifier.
   <p>
   * @param sid a string representing the identifier of the model definition to get.
   <p>
   * @return The {@link SBase} corresponding to the given <code>sid</code> or <code>null</code> if no such
   * model exists.  If no such model exists, this will return <code>null.</code>
   */ public
 SBase getModel(String sid) {
  return libsbml.DowncastSBase(libsbmlJNI.CompSBMLDocumentPlugin_getModel__SWIG_0(swigCPtr, this, sid), false);
}

  
/**
   <p>
   * Sets the boolean value of 'required' attribute of corresponding package
   * in {@link SBMLDocument} element.  The only legal value is 'true' for the 
   * Hierarchical Model Composition package.
   <p>
   * @param value the boolean value of 'required' attribute of corresponding 
   * package in {@link SBMLDocument} element.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setRequired(boolean value) {
    return libsbmlJNI.CompSBMLDocumentPlugin_setRequired(swigCPtr, this, value);
  }

  
/**
   * Adds a copy of the given {@link ExternalModelDefinition} object to the
   * {@link ListOfExternalModelDefinitions}.
   <p>
   * @param externalModelDefinition the {@link ExternalModelDefinition} object to be
   * added to the ListOFExternalModelDefinitions.  Fails if the added
   * {@link ExternalModelDefinition} is <code>null</code>, does not match the
   * level/version/package of the parent object, or cannot be added to the
   * list of external model definitions.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH}
   * </ul>
   */ public
 int addExternalModelDefinition(ExternalModelDefinition externalModelDefinition) {
    return libsbmlJNI.CompSBMLDocumentPlugin_addExternalModelDefinition(swigCPtr, this, ExternalModelDefinition.getCPtr(externalModelDefinition), externalModelDefinition);
  }

  
/**
   * Returns the number of {@link ExternalModelDefinition} objects for this {@link SBMLDocumentPlugin}.
   <p>
   * @return the number of {@link ExternalModelDefinition} objects for this {@link SBMLDocumentPlugin}.
   */ public
 long getNumExternalModelDefinitions() {
    return libsbmlJNI.CompSBMLDocumentPlugin_getNumExternalModelDefinitions(swigCPtr, this);
  }

  
/**
   * Creates a {@link ExternalModelDefinition} object, adds it to the end of the
   * {@link ExternalModelDefinition} objects list and returns a pointer to the newly
   * created object.
   <p>
   * @return a newly created {@link ExternalModelDefinition} object.
   */ public
 ExternalModelDefinition createExternalModelDefinition() {
    long cPtr = libsbmlJNI.CompSBMLDocumentPlugin_createExternalModelDefinition(swigCPtr, this);
    return (cPtr == 0) ? null : new ExternalModelDefinition(cPtr, false);
  }

  
/**
   * Removes the {@link ExternalModelDefinition} with the given index.
   <p>
   * A pointer to the {@link ExternalModelDefinition} that was removed is returned.
   * If no {@link ExternalModelDefinition} has been removed, <code>null</code> is returned.
   <p>
   * @param index the index of the {@link ExternalModelDefinition} object to remove.
   <p>
   * @return the {@link ExternalModelDefinition} object removed.  As mentioned above, 
   * the caller owns the returned object. <code>null</code> is returned if 
   * the given index is out of range.
   */ public
 ExternalModelDefinition removeExternalModelDefinition(long index) {
    long cPtr = libsbmlJNI.CompSBMLDocumentPlugin_removeExternalModelDefinition__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new ExternalModelDefinition(cPtr, false);
  }

  
/**
   * Removes the {@link ExternalModelDefinition} with the given <code>id</code>.
   <p>
   * A pointer to the {@link ExternalModelDefinition} that was removed is returned.
   * If no {@link ExternalModelDefinition} has been removed, <code>null</code> is returned.
   <p>
   * @param id the id of the {@link ExternalModelDefinition} object to remove.
   <p>
   * @return the {@link ExternalModelDefinition} object removed.  As mentioned above, 
   * the caller owns the returned object. <code>null</code> is returned if 
   * the given index is out of range.
   */ public
 ExternalModelDefinition removeExternalModelDefinition(String id) {
    long cPtr = libsbmlJNI.CompSBMLDocumentPlugin_removeExternalModelDefinition__SWIG_1(swigCPtr, this, id);
    return (cPtr == 0) ? null : new ExternalModelDefinition(cPtr, false);
  }

  
/** * @internal */ public
 void connectToChild() {
    libsbmlJNI.CompSBMLDocumentPlugin_connectToChild(swigCPtr, this);
  }

  
/** * @internal */ public
 void connectToParent(SBase parent) {
    libsbmlJNI.CompSBMLDocumentPlugin_connectToParent(swigCPtr, this, SBase.getCPtr(parent), parent);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.CompSBMLDocumentPlugin_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

  
/** * @internal */ public
 boolean getOverrideCompFlattening() {
    return libsbmlJNI.CompSBMLDocumentPlugin_getOverrideCompFlattening(swigCPtr, this);
  }

  
/** * @internal */ public
 void setOverrideCompFlattening(boolean overrideCompFlattening) {
    libsbmlJNI.CompSBMLDocumentPlugin_setOverrideCompFlattening(swigCPtr, this, overrideCompFlattening);
  }

  
/** * @internal */ public
 SBMLDocument getSBMLDocumentFromURI(String uri) {
    long cPtr = libsbmlJNI.CompSBMLDocumentPlugin_getSBMLDocumentFromURI(swigCPtr, this, uri);
    return (cPtr == 0) ? null : new SBMLDocument(cPtr, false);
  }

}
