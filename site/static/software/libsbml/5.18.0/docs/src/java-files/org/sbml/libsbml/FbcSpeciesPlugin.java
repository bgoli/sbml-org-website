/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-fbc"><a href="group__fbc.html">fbc</a></span>
 Extension of {@link Species}.
 <p>
 * The {@link FbcSpeciesPlugin} class codifies an extension of the core SBML {@link Species}
 * class defined in the SBML Level&nbsp;3 <a href='../../../extensions-summary.html#fbc'>Flux Balance Constraints</a> (&ldquo;fbc&rdquo;)
 * package.  The &ldquo;fbc&rdquo; package adds two attributes named 'charge'
 * and 'chemicalFormula' to {@link Species}.
 <p>
 * The optional attribute 'charge' can contain a signed integer that refers
 * to the {@link Species} object's electrical charge (in terms of electrons, not the
 * SI unit of coulombs).  Note that this attribute is therefore defined as it
 * is in the SBML Level&nbsp;2 Version&nbsp;1 specification.  (The charge
 * attribute was removed in higher Versions and Levels of SBML, and is not an
 * attribute of SBML {@link Species} in core SBML Level&nbsp;3.  However, it is
 * useful for flux balance constraints models, and thus, the Level&nbsp;3
 * &ldquo;fbc&rdquo; package adds it.)
 <p>
 * The optional attribute 'chemicalFormula' can contain a text string that
 * represents the elemental composition of the substance represented by the
 * {@link Species} object.  The purpose of the 'chemicalFormula' attribute is to
 * allow balancing and validating reactions.  This is particularly important
 * in constraint-based models.  The format of 'chemicalFormula' must consist
 * only of atomic names (as given in the Periodic Table of elements) or
 * user-defined compounds, either of which take the form of a single capital
 * letter followed by zero or more lowercase letters.  Where there is more
 * than a single atom present, this is indicated with an integer.  With
 * regards to order (and to enhance interoperability of models), users are
 * advised to employ the <a href='https://en.wikipedia.org/wiki/Hill_system'>Hill system order</a>.
 * Using this notation, the number of carbon atoms in a molecule is indicated
 * first, followed by the number of hydrogen atoms, and then the number of
 * all other chemical elements in alphabetical order.  When the formula
 * contains no carbon, all elements including hydrogen are listed
 * alphabetically.
 <p>
 * Here is an example of the XML form of an extended {@link Species} definition with
 * these attributes:
 * <pre class='fragment'>
&lt;species metaid='meta_M_atp_c' id='M_atp_c' name='ATP' compartment='Cytosol'
boundaryCondition='false' initialConcentration='0' hasOnlySubstanceUnits='false'
fbc:charge='-4' fbc:chemicalFormula='C10H12N5O13P3'/&gt;
</pre>
 */

public class FbcSpeciesPlugin extends SBasePlugin {
   private long swigCPtr;

   protected FbcSpeciesPlugin(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.FbcSpeciesPlugin_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(FbcSpeciesPlugin obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (FbcSpeciesPlugin obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_FbcSpeciesPlugin(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link FbcSpeciesPlugin}
   */ public
 FbcSpeciesPlugin(String uri, String prefix, FbcPkgNamespaces fbcns) {
    this(libsbmlJNI.new_FbcSpeciesPlugin__SWIG_0(uri, prefix, FbcPkgNamespaces.getCPtr(fbcns), fbcns), true);
  }

  
/**
   * Copy constructor for {@link FbcSpeciesPlugin}.
   <p>
   * @param orig; the {@link FbcSpeciesPlugin} instance to copy.
   */ public
 FbcSpeciesPlugin(FbcSpeciesPlugin orig) {
    this(libsbmlJNI.new_FbcSpeciesPlugin__SWIG_1(FbcSpeciesPlugin.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link FbcSpeciesPlugin} object.
   <p>
   * @return a (deep) copy of this {@link FbcSpeciesPlugin} object.
   */ public
 SBasePlugin cloneObject() {
    long cPtr = libsbmlJNI.FbcSpeciesPlugin_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new FbcSpeciesPlugin(cPtr, true);
  }

  
/** * @internal */ public
 SBase createObject(XMLInputStream stream) {
  return libsbml.DowncastSBase(libsbmlJNI.FbcSpeciesPlugin_createObject(swigCPtr, this, XMLInputStream.getCPtr(stream), stream), false);
}

  
/** * @internal */ public
 void addExpectedAttributes(SWIGTYPE_p_ExpectedAttributes attributes) {
    libsbmlJNI.FbcSpeciesPlugin_addExpectedAttributes(swigCPtr, this, SWIGTYPE_p_ExpectedAttributes.getCPtr(attributes));
  }

  
/** * @internal */ public
 void readAttributes(XMLAttributes attributes, SWIGTYPE_p_ExpectedAttributes expectedAttributes) {
    libsbmlJNI.FbcSpeciesPlugin_readAttributes(swigCPtr, this, XMLAttributes.getCPtr(attributes), attributes, SWIGTYPE_p_ExpectedAttributes.getCPtr(expectedAttributes));
  }

  
/** * @internal */ public
 void writeAttributes(XMLOutputStream stream) {
    libsbmlJNI.FbcSpeciesPlugin_writeAttributes(swigCPtr, this, XMLOutputStream.getCPtr(stream), stream);
  }

  
/**
   * Returns the value of the 'charge' attribute of this {@link FbcSpeciesPlugin}.
   <p>
   * @return the value of the 'charge' attribute of this {@link FbcSpeciesPlugin} as a integer.
   */ public
 int getCharge() {
    return libsbmlJNI.FbcSpeciesPlugin_getCharge(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'chemicalFormula' attribute of this {@link FbcSpeciesPlugin}.
   <p>
   * @return the value of the 'chemicalFormula' attribute of this {@link FbcSpeciesPlugin} as a string.
   */ public
 String getChemicalFormula() {
    return libsbmlJNI.FbcSpeciesPlugin_getChemicalFormula(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link FbcSpeciesPlugin}'s 'charge' attribute has been set.
   <p>
   * @return <code>true</code> if this {@link FbcSpeciesPlugin}'s 'charge' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetCharge() {
    return libsbmlJNI.FbcSpeciesPlugin_isSetCharge(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link FbcSpeciesPlugin}'s 'chemicalFormula' attribute has been set.
   <p>
   * @return <code>true</code> if this {@link FbcSpeciesPlugin}'s 'chemicalFormula' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetChemicalFormula() {
    return libsbmlJNI.FbcSpeciesPlugin_isSetChemicalFormula(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'charge' attribute of this {@link FbcSpeciesPlugin}.
   <p>
   * @param charge; int value of the 'charge' attribute to be set
   <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setCharge(int charge) {
    return libsbmlJNI.FbcSpeciesPlugin_setCharge(swigCPtr, this, charge);
  }

  
/**
   * Sets the value of the 'chemicalFormula' attribute of this {@link FbcSpeciesPlugin}.
   <p>
   * @param chemicalFormula; String value of the 'chemicalFormula' attribute to be set
   <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setChemicalFormula(String chemicalFormula) {
    return libsbmlJNI.FbcSpeciesPlugin_setChemicalFormula(swigCPtr, this, chemicalFormula);
  }

  
/**
   * Unsets the value of the 'charge' attribute of this {@link FbcSpeciesPlugin}.
   <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetCharge() {
    return libsbmlJNI.FbcSpeciesPlugin_unsetCharge(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'chemicalFormula' attribute of this {@link FbcSpeciesPlugin}.
   <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetChemicalFormula() {
    return libsbmlJNI.FbcSpeciesPlugin_unsetChemicalFormula(swigCPtr, this);
  }

  
/** * @internal */ public
 void connectToParent(SBase sbase) {
    libsbmlJNI.FbcSpeciesPlugin_connectToParent(swigCPtr, this, SBase.getCPtr(sbase), sbase);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.FbcSpeciesPlugin_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

}
