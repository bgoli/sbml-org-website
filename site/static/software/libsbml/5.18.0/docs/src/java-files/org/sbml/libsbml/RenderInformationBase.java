/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 Abstract base class for local and global rendering information.
 <p>
 * In the SBML Level&nbsp;3 Render package, local and global render
 * information representations share many attributes. These are implemented
 * in this abstract base class.  {@link GlobalRenderInformation} and
 * {@link LocalRenderInformation} are the classes that are derived from this base
 * class.
 <p>
 * All render information objects have the following things in common:
 <p>
 * <ul>
 * <li> a set of color definitions
 * <li> a set of gradient definitions
 * <li> a set of line endings
 *
 * </ul> <p>
 * In addition to those, they share attributes for background color and some
 * meta information as to which program created the render information etc.
 */

public class RenderInformationBase extends SBase {
   private long swigCPtr;

   protected RenderInformationBase(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.RenderInformationBase_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(RenderInformationBase obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (RenderInformationBase obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_RenderInformationBase(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link RenderInformationBase} using the given SBML Level, Version
   * and &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link RenderInformationBase}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link RenderInformationBase}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link RenderInformationBase}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 RenderInformationBase(long level, long version, long pkgVersion) {
    this(libsbmlJNI.new_RenderInformationBase__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link RenderInformationBase} using the given SBML Level, Version
   * and &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link RenderInformationBase}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link RenderInformationBase}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link RenderInformationBase}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 RenderInformationBase(long level, long version) {
    this(libsbmlJNI.new_RenderInformationBase__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link RenderInformationBase} using the given SBML Level, Version
   * and &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link RenderInformationBase}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link RenderInformationBase}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link RenderInformationBase}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 RenderInformationBase(long level) {
    this(libsbmlJNI.new_RenderInformationBase__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link RenderInformationBase} using the given SBML Level, Version
   * and &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link RenderInformationBase}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link RenderInformationBase}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link RenderInformationBase}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 RenderInformationBase() {
    this(libsbmlJNI.new_RenderInformationBase__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link RenderInformationBase} using the given {@link RenderPkgNamespaces}
   * object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param renderns the {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 RenderInformationBase(RenderPkgNamespaces renderns) {
    this(libsbmlJNI.new_RenderInformationBase__SWIG_4(RenderPkgNamespaces.getCPtr(renderns), renderns), true);
  }

  
/**
   * Copy constructor for {@link RenderInformationBase}.
   <p>
   * @param orig the {@link RenderInformationBase} instance to copy.
   */ public
 RenderInformationBase(RenderInformationBase orig) {
    this(libsbmlJNI.new_RenderInformationBase__SWIG_5(RenderInformationBase.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link RenderInformationBase} object.
   <p>
   * @return a (deep) copy of this {@link RenderInformationBase} object.
   */ public
 SBase cloneObject() {
  return (RenderInformationBase) libsbml.DowncastSBase(libsbmlJNI.RenderInformationBase_cloneObject(swigCPtr, this), true);
}

  
/**
   * Parses the XML information in the given node and sets the attributes.
   * This method should never be called by the user. It is only used to read render 
   * information from annotations.
   <p>
   * @param pNode the {@link XMLNode} object reference that describes the RenderinformationBase
   * object to be instantiated.
   */ public
 void parseXML(XMLNode pNode) {
    libsbmlJNI.RenderInformationBase_parseXML(swigCPtr, this, XMLNode.getCPtr(pNode), pNode);
  }

  
/**
   * Constructor which creates a {@link RenderInformationBase} object
   * empty color definition, gradient definition
   * and line endings set.
   * For the object to be valid a valid background color value.
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 RenderInformationBase(RenderPkgNamespaces renderns, String id) {
    this(libsbmlJNI.new_RenderInformationBase__SWIG_6(RenderPkgNamespaces.getCPtr(renderns), renderns, id), true);
  }

  
/**
   * Returns the value of the 'id' attribute of this {@link RenderInformationBase}.
   <p>
   * @return the value of the 'id' attribute of this {@link RenderInformationBase} as a
   * string.
   */ public
 String getId() {
    return libsbmlJNI.RenderInformationBase_getId(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'name' attribute of this {@link RenderInformationBase}.
   <p>
   * @return the value of the 'name' attribute of this {@link RenderInformationBase} as
   * a string.
   */ public
 String getName() {
    return libsbmlJNI.RenderInformationBase_getName(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'programName' attribute of this
   * {@link RenderInformationBase}.
   <p>
   * @return the value of the 'programName' attribute of this
   * {@link RenderInformationBase} as a string.
   */ public
 String getProgramName() {
    return libsbmlJNI.RenderInformationBase_getProgramName(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'programVersion' attribute of this
   * {@link RenderInformationBase}.
   <p>
   * @return the value of the 'programVersion' attribute of this
   * {@link RenderInformationBase} as a string.
   */ public
 String getProgramVersion() {
    return libsbmlJNI.RenderInformationBase_getProgramVersion(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'referenceRenderInformation' attribute of this
   * {@link RenderInformationBase}.
   * Returns the id of the referenced render information object.
   * Renderinformation objects can reference other render information objects
   * and information that is not found in the current render information is then
   * expected to be in the referenced render information object.
   <p>
   * Global render information objects can only reference other global 
   * render information objects, local render information objects can reference other local
   * render information objects from the same list of local render information or other
   * global render information.
   <p>
   * @return the value of the 'referenceRenderInformation' attribute of this
   * {@link RenderInformationBase} as a string.
   */ public
 String getReferenceRenderInformationId() {
    return libsbmlJNI.RenderInformationBase_getReferenceRenderInformationId(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'referenceRenderInformation' attribute of this
   * {@link RenderInformationBase}.
   <p>
   * @return the value of the 'referenceRenderInformation' attribute of this
   * {@link RenderInformationBase} as a string.
   */ public
 String getReferenceRenderInformation() {
    return libsbmlJNI.RenderInformationBase_getReferenceRenderInformation(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'backgroundColor' attribute of this
   * {@link RenderInformationBase}.
   <p>
   * @return the value of the 'backgroundColor' attribute of this
   * {@link RenderInformationBase} as a string.
   */ public
 String getBackgroundColor() {
    return libsbmlJNI.RenderInformationBase_getBackgroundColor(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderInformationBase}'s 'id' attribute
   * is set.
   <p>
   * @return <code>true</code> if this {@link RenderInformationBase}'s 'id' attribute has been
   * set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetId() {
    return libsbmlJNI.RenderInformationBase_isSetId(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderInformationBase}'s 'name'
   * attribute is set.
   <p>
   * @return <code>true</code> if this {@link RenderInformationBase}'s 'name' attribute has been
   * set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetName() {
    return libsbmlJNI.RenderInformationBase_isSetName(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderInformationBase}'s 'programName'
   * attribute is set.
   <p>
   * @return <code>true</code> if this {@link RenderInformationBase}'s 'programName' attribute
   * has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetProgramName() {
    return libsbmlJNI.RenderInformationBase_isSetProgramName(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderInformationBase}'s
   * 'programVersion' attribute is set.
   <p>
   * @return <code>true</code> if this {@link RenderInformationBase}'s 'programVersion' attribute
   * has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetProgramVersion() {
    return libsbmlJNI.RenderInformationBase_isSetProgramVersion(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderInformationBase}'s
   * 'referenceRenderInformation' attribute is set.
   <p>
   * @return <code>true</code> if this {@link RenderInformationBase}'s
   * 'referenceRenderInformation' attribute has been set, otherwise <code>false</code> is
   * returned.
   */ public
 boolean isSetReferenceRenderInformation() {
    return libsbmlJNI.RenderInformationBase_isSetReferenceRenderInformation(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RenderInformationBase}'s
   * 'backgroundColor' attribute is set.
   <p>
   * @return <code>true</code> if this {@link RenderInformationBase}'s 'backgroundColor'
   * attribute has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetBackgroundColor() {
    return libsbmlJNI.RenderInformationBase_isSetBackgroundColor(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'id' attribute of this {@link RenderInformationBase}.
   <p>
   * @param id String& value of the 'id' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * Calling this function with <code>id</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetId().
   */ public
 int setId(String id) {
    return libsbmlJNI.RenderInformationBase_setId(swigCPtr, this, id);
  }

  
/**
   * Sets the value of the 'name' attribute of this {@link RenderInformationBase}.
   <p>
   * @param name String& value of the 'name' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * Calling this function with <code>name</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetName().
   */ public
 int setName(String name) {
    return libsbmlJNI.RenderInformationBase_setName(swigCPtr, this, name);
  }

  
/**
   * Sets the value of the 'programName' attribute of this
   * {@link RenderInformationBase}.
   <p>
   * @param programName String& value of the 'programName' attribute to be
   * set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * Calling this function with <code>programName</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetProgramName().
   */ public
 int setProgramName(String programName) {
    return libsbmlJNI.RenderInformationBase_setProgramName(swigCPtr, this, programName);
  }

  
/**
   * Sets the value of the 'programVersion' attribute of this
   * {@link RenderInformationBase}.
   <p>
   * @param programVersion String& value of the 'programVersion' attribute
   * to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * Calling this function with <code>programVersion</code> = <code>null</code> or an empty string
   * is equivalent to calling unsetProgramVersion().
   */ public
 int setProgramVersion(String programVersion) {
    return libsbmlJNI.RenderInformationBase_setProgramVersion(swigCPtr, this, programVersion);
  }

  
/**
   * Sets the value of the 'referenceRenderInformation' attribute of this
   * {@link RenderInformationBase}.
   * The user has to make sure that render information referencing 
   * does not create loops.
   <p>
   * @param id the value for the 'referenceRenderInformation' attribute
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 void setReferenceRenderInformationId(String id) {
    libsbmlJNI.RenderInformationBase_setReferenceRenderInformationId(swigCPtr, this, id);
  }

  
/**
   * Sets the value of the 'referenceRenderInformation' attribute of this
   * {@link RenderInformationBase}.
   <p>
   * @param referenceRenderInformation String& value of the
   * 'referenceRenderInformation' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setReferenceRenderInformation(String referenceRenderInformation) {
    return libsbmlJNI.RenderInformationBase_setReferenceRenderInformation(swigCPtr, this, referenceRenderInformation);
  }

  
/**
   * Sets the value of the 'backgroundColor' attribute of this
   * {@link RenderInformationBase}.
   <p>
   * @param backgroundColor String& value of the 'backgroundColor'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * Calling this function with <code>backgroundColor</code> = <code>null</code> or an empty string
   * is equivalent to calling unsetBackgroundColor().
   */ public
 int setBackgroundColor(String backgroundColor) {
    return libsbmlJNI.RenderInformationBase_setBackgroundColor(swigCPtr, this, backgroundColor);
  }

  
/**
   * Unsets the value of the 'id' attribute of this {@link RenderInformationBase}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetId() {
    return libsbmlJNI.RenderInformationBase_unsetId(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'name' attribute of this {@link RenderInformationBase}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetName() {
    return libsbmlJNI.RenderInformationBase_unsetName(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'programName' attribute of this
   * {@link RenderInformationBase}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetProgramName() {
    return libsbmlJNI.RenderInformationBase_unsetProgramName(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'programVersion' attribute of this
   * {@link RenderInformationBase}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetProgramVersion() {
    return libsbmlJNI.RenderInformationBase_unsetProgramVersion(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'referenceRenderInformation' attribute of this
   * {@link RenderInformationBase}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetReferenceRenderInformation() {
    return libsbmlJNI.RenderInformationBase_unsetReferenceRenderInformation(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'backgroundColor' attribute of this
   * {@link RenderInformationBase}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetBackgroundColor() {
    return libsbmlJNI.RenderInformationBase_unsetBackgroundColor(swigCPtr, this);
  }

  
/**
   * Returns the {@link ListOfColorDefinitions} from this {@link RenderInformationBase}.
   <p>
   * @return the {@link ListOfColorDefinitions} from this {@link RenderInformationBase}.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addColorDefinition(ColorDefinition object)
   * @see #createColorDefinition()
   * @see #getColorDefinition(String sid)
   * @see #getColorDefinition(long n)
   * @see #getNumColorDefinitions()
   * @see #removeColorDefinition(String sid)
   * @see #removeColorDefinition(long n)
   */ public
 ListOfColorDefinitions getListOfColorDefinitions() {
    long cPtr = libsbmlJNI.RenderInformationBase_getListOfColorDefinitions__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfColorDefinitions(cPtr, false);
  }

  
/**
   * Get a {@link ColorDefinition} from the {@link RenderInformationBase}.
   <p>
   * @param n a long integer representing the index of the {@link ColorDefinition} to
   * retrieve.
   <p>
   * @return the nth {@link ColorDefinition} in the {@link ListOfColorDefinitions} within this
   * {@link RenderInformationBase} or <code>null</code> if no such {@link ColorDefinition} exists.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addColorDefinition(ColorDefinition object)
   * @see #createColorDefinition()
   * @see #getColorDefinition(String sid)
   * @see #getNumColorDefinitions()
   * @see #removeColorDefinition(String sid)
   * @see #removeColorDefinition(long n)
   */ public
 ColorDefinition getColorDefinition(long n) {
    long cPtr = libsbmlJNI.RenderInformationBase_getColorDefinition__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new ColorDefinition(cPtr, false);
  }

  
/**
   * Get a {@link ColorDefinition} from the {@link RenderInformationBase} based on its
   * identifier.
   <p>
   * @param sid a string representing the identifier of the {@link ColorDefinition} to
   * retrieve.
   <p>
   * @return the {@link ColorDefinition} in the {@link ListOfColorDefinitions} within this
   * {@link RenderInformationBase} with the given <code>sid</code> or <code>null</code> if no such
   * {@link ColorDefinition} exists.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addColorDefinition(ColorDefinition object)
   * @see #createColorDefinition()
   * @see #getColorDefinition(long n)
   * @see #getNumColorDefinitions()
   * @see #removeColorDefinition(String sid)
   * @see #removeColorDefinition(long n)
   */ public
 ColorDefinition getColorDefinition(String sid) {
    long cPtr = libsbmlJNI.RenderInformationBase_getColorDefinition__SWIG_2(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new ColorDefinition(cPtr, false);
  }

  
/**
   * Adds a copy of the given {@link ColorDefinition} to this {@link RenderInformationBase}.
   <p>
   * @param cd the {@link ColorDefinition} object to add.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
   <p>
   * @see #createColorDefinition()
   * @see #getColorDefinition(String sid)
   * @see #getColorDefinition(long n)
   * @see #getNumColorDefinitions()
   * @see #removeColorDefinition(String sid)
   * @see #removeColorDefinition(long n)
   */ public
 int addColorDefinition(ColorDefinition cd) {
    return libsbmlJNI.RenderInformationBase_addColorDefinition(swigCPtr, this, ColorDefinition.getCPtr(cd), cd);
  }

  
/**
   * Get the number of {@link ColorDefinition} objects in this {@link RenderInformationBase}.
   <p>
   * @return the number of {@link ColorDefinition} objects in this
   * {@link RenderInformationBase}.
   <p>
   * @see #addColorDefinition(ColorDefinition object)
   * @see #createColorDefinition()
   * @see #getColorDefinition(String sid)
   * @see #getColorDefinition(long n)
   * @see #removeColorDefinition(String sid)
   * @see #removeColorDefinition(long n)
   */ public
 long getNumColorDefinitions() {
    return libsbmlJNI.RenderInformationBase_getNumColorDefinitions(swigCPtr, this);
  }

  
/**
   * Creates a new {@link ColorDefinition} object, adds it to this
   * {@link RenderInformationBase} object and returns the {@link ColorDefinition} object
   * created.
   <p>
   * @return a new {@link ColorDefinition} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addColorDefinition(ColorDefinition object)
   * @see #getColorDefinition(String sid)
   * @see #getColorDefinition(long n)
   * @see #getNumColorDefinitions()
   * @see #removeColorDefinition(String sid)
   * @see #removeColorDefinition(long n)
   */ public
 ColorDefinition createColorDefinition() {
    long cPtr = libsbmlJNI.RenderInformationBase_createColorDefinition(swigCPtr, this);
    return (cPtr == 0) ? null : new ColorDefinition(cPtr, false);
  }

  
/**
   * Removes the nth {@link ColorDefinition} from this {@link RenderInformationBase} and
   * returns a pointer to it.
   <p>
   * @param n a long integer representing the index of the {@link ColorDefinition} to
   * remove.
   <p>
   * @return a pointer to the nth {@link ColorDefinition} in this
   * {@link RenderInformationBase}.
   <p>
   * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
   <p>
   * @see #addColorDefinition(ColorDefinition object)
   * @see #createColorDefinition()
   * @see #getColorDefinition(String sid)
   * @see #getColorDefinition(long n)
   * @see #getNumColorDefinitions()
   * @see #removeColorDefinition(String sid)
   */ public
 ColorDefinition removeColorDefinition(long n) {
    long cPtr = libsbmlJNI.RenderInformationBase_removeColorDefinition__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new ColorDefinition(cPtr, false);
  }

  
/**
   * Removes the {@link ColorDefinition} from this {@link RenderInformationBase} based on its
   * identifier and returns a pointer to it.
   <p>
   * @param sid a string representing the identifier of the {@link ColorDefinition} to
   * remove.
   <p>
   * @return the {@link ColorDefinition} in this {@link RenderInformationBase} based on the
   * identifier or null if no such {@link ColorDefinition} exists.
   <p>
   * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
   <p>
   * @see #addColorDefinition(ColorDefinition object)
   * @see #createColorDefinition()
   * @see #getColorDefinition(String sid)
   * @see #getColorDefinition(long n)
   * @see #getNumColorDefinitions()
   * @see #removeColorDefinition(long n)
   */ public
 ColorDefinition removeColorDefinition(String sid) {
    long cPtr = libsbmlJNI.RenderInformationBase_removeColorDefinition__SWIG_1(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new ColorDefinition(cPtr, false);
  }

  
/**
   * Returns the {@link ListOfGradientDefinitions} from this {@link RenderInformationBase}.
   <p>
   * @return the {@link ListOfGradientDefinitions} from this {@link RenderInformationBase}.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addGradientDefinition(GradientBase object)
   * @see #createLinearGradientDefinition()
   * @see #createRadialGradientDefinition()
   * @see #getGradientDefinition(String sid)
   * @see #getGradientDefinition(long n)
   * @see #getNumGradientDefinitions()
   * @see #removeGraidentBase(String sid)
   * @see #removeGradientDefinition(long n)
   */ public
 ListOfGradientDefinitions getListOfGradientDefinitions() {
    long cPtr = libsbmlJNI.RenderInformationBase_getListOfGradientDefinitions__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfGradientDefinitions(cPtr, false);
  }

  
/**
   * Get a {@link GradientBase} from the {@link RenderInformationBase}.
   <p>
   * @param n a long integer representing the index of the {@link GradientBase} to
   * retrieve.
   <p>
   * @return the nth {@link GradientBase} in the {@link ListOfGradientDefinitions} within this
   * {@link RenderInformationBase} or <code>null</code> if no such {@link GradientBase} exists.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addGradientDefinition(GradientBase object)
   * @see #createLinearGradientDefinition()
   * @see #createRadialGradientDefinition()
   * @see #getGradientDefinition(String sid)
   * @see #getNumGradientDefinitions()
   * @see #removeGradientDefinition(String sid)
   * @see #removeGradientDefinition(long n)
   */ public
 GradientBase getGradientDefinition(long n) {
  return (GradientBase) libsbml.DowncastSBase(libsbmlJNI.RenderInformationBase_getGradientDefinition__SWIG_0(swigCPtr, this, n), false);
}

  
/**
   * Get a {@link GradientBase} from the {@link RenderInformationBase} based on its identifier.
   <p>
   * @param sid a string representing the identifier of the {@link GradientBase} to
   * retrieve.
   <p>
   * @return the {@link GradientBase} in the {@link ListOfGradientDefinitions} within this
   * {@link RenderInformationBase} with the given <code>sid</code> or <code>null</code> if no such
   * {@link GradientBase} exists.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addGradientDefinition(GradientBase object)
   * @see #createLinearGradientDefinition()
   * @see #createRadialGradientDefinition()
   * @see #getGradientDefinition(long n)
   * @see #getNumGradientDefinitions()
   * @see #removeGradientDefinition(String sid)
   * @see #removeGradientDefinition(long n)
   */ public
 GradientBase getGradientDefinition(String sid) {
  return (GradientBase) libsbml.DowncastSBase(libsbmlJNI.RenderInformationBase_getGradientDefinition__SWIG_2(swigCPtr, this, sid), false);
}

  
/**
   * Adds a copy of the given {@link GradientBase} to this {@link RenderInformationBase}.
   <p>
   * @param gb the {@link GradientBase} object to add.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
   <p>
   * @see #createLinearGradientDefinition()
   * @see #createRadialGradientDefinition()
   * @see #getGradientDefinition(String sid)
   * @see #getGradientDefinition(long n)
   * @see #getNumGradientDefinitions()
   * @see #removeGradientDefinition(String sid)
   * @see #removeGradientDefinition(long n)
   */ public
 int addGradientDefinition(GradientBase gb) {
    return libsbmlJNI.RenderInformationBase_addGradientDefinition(swigCPtr, this, GradientBase.getCPtr(gb), gb);
  }

  
/**
   * Get the number of {@link GradientBase} objects in this {@link RenderInformationBase}.
   <p>
   * @return the number of {@link GradientBase} objects in this {@link RenderInformationBase}.
   <p>
   * @see #addGradientDefinition(GradientBase object)
   * @see #createLinearGradientDefinition()
   * @see #createRadialGradientDefinition()
   * @see #getGradientDefinition(String sid)
   * @see #getGradientDefinition(long n)
   * @see #removeGradientDefinition(String sid)
   * @see #removeGradientDefinition(long n)
   */ public
 long getNumGradientDefinitions() {
    return libsbmlJNI.RenderInformationBase_getNumGradientDefinitions(swigCPtr, this);
  }

  
/**
   * Creates a new {@link LinearGradient} object, adds it to this {@link RenderInformationBase}
   * object and returns the {@link LinearGradient} object created.
   <p>
   * @return a new {@link LinearGradient} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addGradientDefinition(GradientBase object)
   * @see #getGradientDefinition(String sid)
   * @see #getGradientDefinition(long n)
   * @see #getNumGradientDefinitions()
   * @see #removeGradientDefinition(String sid)
   * @see #removeGradientDefinition(long n)
   */ public
 LinearGradient createLinearGradientDefinition() {
    long cPtr = libsbmlJNI.RenderInformationBase_createLinearGradientDefinition(swigCPtr, this);
    return (cPtr == 0) ? null : new LinearGradient(cPtr, false);
  }

  
/**
   * Creates a new {@link RadialGradient} object, adds it to this {@link RenderInformationBase}
   * object and returns the {@link RadialGradient} object created.
   <p>
   * @return a new {@link RadialGradient} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addGradientDefinition(GradientBase object)
   * @see #getGradientDefinition(String sid)
   * @see #getGradientDefinition(long n)
   * @see #getNumGradientDefinitions()
   * @see #removeGradientDefinition(String sid)
   * @see #removeGradientDefinition(long n)
   */ public
 RadialGradient createRadialGradientDefinition() {
    long cPtr = libsbmlJNI.RenderInformationBase_createRadialGradientDefinition(swigCPtr, this);
    return (cPtr == 0) ? null : new RadialGradient(cPtr, false);
  }

  
/**
   * Removes the nth {@link GradientBase} from this {@link RenderInformationBase} and returns a
   * pointer to it.
   <p>
   * @param n a long integer representing the index of the {@link GradientBase} to
   * remove.
   <p>
   * @return a pointer to the nth {@link GradientBase} in this {@link RenderInformationBase}.
   <p>
   * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
   <p>
   * @see #addGradientDefinition(GradientBase object)
   * @see #createLinearGradientDefinition()
   * @see #createRadialGradientDefinition()
   * @see #getGradientDefinition(String sid)
   * @see #getGradientDefinition(long n)
   * @see #getNumGradientDefinitions()
   * @see #removeGradientDefinition(String sid)
   */ public
 GradientBase removeGradientDefinition(long n) {
  return (GradientBase) libsbml.DowncastSBase(libsbmlJNI.RenderInformationBase_removeGradientDefinition__SWIG_0(swigCPtr, this, n), false);
}

  
/**
   * Removes the {@link GradientBase} from this {@link RenderInformationBase} based on its
   * identifier and returns a pointer to it.
   <p>
   * @param sid a string representing the identifier of the {@link GradientBase} to
   * remove.
   <p>
   * @return the {@link GradientBase} in this {@link RenderInformationBase} based on the
   * identifier or null if no such {@link GradientBase} exists.
   <p>
   * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
   <p>
   * @see #addGradientDefinition(GradientBase object)
   * @see #createLinearGradientDefinition()
   * @see #createRadialGradientDefinition()
   * @see #getGradientDefinition(String sid)
   * @see #getGradientDefinition(long n)
   * @see #getNumGradientDefinitions()
   * @see #removeGradientDefinition(long n)
   */ public
 GradientBase removeGradientDefinition(String sid) {
  return (GradientBase) libsbml.DowncastSBase(libsbmlJNI.RenderInformationBase_removeGradientDefinition__SWIG_1(swigCPtr, this, sid), false);
}

  
/**
   * Returns the {@link ListOfLineEndings} from this {@link RenderInformationBase}.
   <p>
   * @return the {@link ListOfLineEndings} from this {@link RenderInformationBase}.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addLineEnding(LineEnding object)
   * @see #createLineEnding()
   * @see #getLineEnding(String sid)
   * @see #getLineEnding(long n)
   * @see #getNumLineEndings()
   * @see #removeLineEnding(String sid)
   * @see #removeLineEnding(long n)
   */ public
 ListOfLineEndings getListOfLineEndings() {
    long cPtr = libsbmlJNI.RenderInformationBase_getListOfLineEndings__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfLineEndings(cPtr, false);
  }

  
/**
   * Get a {@link LineEnding} from the {@link RenderInformationBase}.
   <p>
   * @param n a long integer representing the index of the {@link LineEnding} to
   * retrieve.
   <p>
   * @return the nth {@link LineEnding} in the {@link ListOfLineEndings} within this
   * {@link RenderInformationBase} or <code>null</code> if no such {@link LineEnding} exists.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addLineEnding(LineEnding object)
   * @see #createLineEnding()
   * @see #getLineEnding(String sid)
   * @see #getNumLineEndings()
   * @see #removeLineEnding(String sid)
   * @see #removeLineEnding(long n)
   */ public
 LineEnding getLineEnding(long n) {
    long cPtr = libsbmlJNI.RenderInformationBase_getLineEnding__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new LineEnding(cPtr, false);
  }

  
/**
   * Get a {@link LineEnding} from the {@link RenderInformationBase} based on its identifier.
   <p>
   * @param sid a string representing the identifier of the {@link LineEnding} to
   * retrieve.
   <p>
   * @return the {@link LineEnding} in the {@link ListOfLineEndings} within this
   * {@link RenderInformationBase} with the given <code>sid</code> or <code>null</code> if no such
   * {@link LineEnding} exists.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addLineEnding(LineEnding object)
   * @see #createLineEnding()
   * @see #getLineEnding(long n)
   * @see #getNumLineEndings()
   * @see #removeLineEnding(String sid)
   * @see #removeLineEnding(long n)
   */ public
 LineEnding getLineEnding(String sid) {
    long cPtr = libsbmlJNI.RenderInformationBase_getLineEnding__SWIG_2(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new LineEnding(cPtr, false);
  }

  
/**
   * Adds a copy of the given {@link LineEnding} to this {@link RenderInformationBase}.
   <p>
   * @param le the {@link LineEnding} object to add.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
   <p>
   * @see #createLineEnding()
   * @see #getLineEnding(String sid)
   * @see #getLineEnding(long n)
   * @see #getNumLineEndings()
   * @see #removeLineEnding(String sid)
   * @see #removeLineEnding(long n)
   */ public
 int addLineEnding(LineEnding le) {
    return libsbmlJNI.RenderInformationBase_addLineEnding(swigCPtr, this, LineEnding.getCPtr(le), le);
  }

  
/**
   * Get the number of {@link LineEnding} objects in this {@link RenderInformationBase}.
   <p>
   * @return the number of {@link LineEnding} objects in this {@link RenderInformationBase}.
   <p>
   * @see #addLineEnding(LineEnding object)
   * @see #createLineEnding()
   * @see #getLineEnding(String sid)
   * @see #getLineEnding(long n)
   * @see #removeLineEnding(String sid)
   * @see #removeLineEnding(long n)
   */ public
 long getNumLineEndings() {
    return libsbmlJNI.RenderInformationBase_getNumLineEndings(swigCPtr, this);
  }

  
/**
   * Creates a new {@link LineEnding} object, adds it to this {@link RenderInformationBase}
   * object and returns the {@link LineEnding} object created.
   <p>
   * @return a new {@link LineEnding} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addLineEnding(LineEnding object)
   * @see #getLineEnding(String sid)
   * @see #getLineEnding(long n)
   * @see #getNumLineEndings()
   * @see #removeLineEnding(String sid)
   * @see #removeLineEnding(long n)
   */ public
 LineEnding createLineEnding() {
    long cPtr = libsbmlJNI.RenderInformationBase_createLineEnding(swigCPtr, this);
    return (cPtr == 0) ? null : new LineEnding(cPtr, false);
  }

  
/**
   * Removes the nth {@link LineEnding} from this {@link RenderInformationBase} and returns a
   * pointer to it.
   <p>
   * @param n a long integer representing the index of the {@link LineEnding} to
   * remove.
   <p>
   * @return a pointer to the nth {@link LineEnding} in this {@link RenderInformationBase}.
   <p>
   * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
   <p>
   * @see #addLineEnding(LineEnding object)
   * @see #createLineEnding()
   * @see #getLineEnding(String sid)
   * @see #getLineEnding(long n)
   * @see #getNumLineEndings()
   * @see #removeLineEnding(String sid)
   */ public
 LineEnding removeLineEnding(long n) {
    long cPtr = libsbmlJNI.RenderInformationBase_removeLineEnding__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new LineEnding(cPtr, false);
  }

  
/**
   * Removes the {@link LineEnding} from this {@link RenderInformationBase} based on its
   * identifier and returns a pointer to it.
   <p>
   * @param sid a string representing the identifier of the {@link LineEnding} to
   * remove.
   <p>
   * @return the {@link LineEnding} in this {@link RenderInformationBase} based on the
   * identifier or null if no such {@link LineEnding} exists.
   <p>
   * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
   <p>
   * @see #addLineEnding(LineEnding object)
   * @see #createLineEnding()
   * @see #getLineEnding(String sid)
   * @see #getLineEnding(long n)
   * @see #getNumLineEndings()
   * @see #removeLineEnding(long n)
   */ public
 LineEnding removeLineEnding(String sid) {
    long cPtr = libsbmlJNI.RenderInformationBase_removeLineEnding__SWIG_1(swigCPtr, this, sid);
    return (cPtr == 0) ? null : new LineEnding(cPtr, false);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link RenderInformationBase} is of
   * type {@link GlobalRenderInformation}
   <p>
   * @return <code>true</code> if this abstract {@link RenderInformationBase} is of type
   * {@link GlobalRenderInformation}, <code>false</code> otherwise
   */ public
 boolean isGlobalRenderInformation() {
    return libsbmlJNI.RenderInformationBase_isGlobalRenderInformation(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link RenderInformationBase} is of
   * type {@link LocalRenderInformation}
   <p>
   * @return <code>true</code> if this abstract {@link RenderInformationBase} is of type
   * {@link LocalRenderInformation}, <code>false</code> otherwise
   */ public
 boolean isLocalRenderInformation() {
    return libsbmlJNI.RenderInformationBase_isLocalRenderInformation(swigCPtr, this);
  }

  
/**
   * <p>
 * Replaces all uses of a given <code>SIdRef</code> type attribute value with another
 * value.
 <p>
 * <p>
 * In SBML, object identifiers are of a data type called <code>SId</code>.
 * In SBML Level&nbsp;3, an explicit data type called <code>SIdRef</code> was
 * introduced for attribute values that refer to <code>SId</code> values; in
 * previous Levels of SBML, this data type did not exist and attributes were
 * simply described to as 'referring to an identifier', but the effective
 * data type was the same as <code>SIdRef</code> in Level&nbsp;3.  These and
 * other methods of libSBML refer to the type <code>SIdRef</code> for all
 * Levels of SBML, even if the corresponding SBML specification did not
 * explicitly name the data type.
 <p>
 * This method works by looking at all attributes and (if appropriate)
 * mathematical formulas in MathML content, comparing the referenced
 * identifiers to the value of <code>oldid</code>.  If any matches are found, the
 * matching values are replaced with <code>newid</code>.  The method does <em>not</em>
 * descend into child elements.
 <p>
 * @param oldid the old identifier.
 * @param newid the new identifier.
   */ public
 void renameSIdRefs(String oldid, String newid) {
    libsbmlJNI.RenderInformationBase_renameSIdRefs(swigCPtr, this, oldid, newid);
  }

  
/**
   * Returns the libSBML type code for this {@link RenderInformationBase} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_RENDER_RENDERINFORMATION_BASE SBML_RENDER_RENDERINFORMATION_BASE}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.RenderInformationBase_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link RenderInformationBase} object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required attributes of this
   * {@link RenderInformationBase} have been set, otherwise <code>false</code> is returned.
   <p>
   * @note The required attributes for the {@link RenderInformationBase} object are:
   * <ul>
   * <li> 'id'
   * </ul>
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.RenderInformationBase_hasRequiredAttributes(swigCPtr, this);
  }

  
/** * @internal */ public
 void connectToChild() {
    libsbmlJNI.RenderInformationBase_connectToChild(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.RenderInformationBase_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

  
/**
   * Returns the first child element that has the given <code>id</code> in the model-wide
   * SId namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id a string representing the id attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>id</code>. If no such
   * object is found, this method returns <code>null.</code>
   */ public
 SBase getElementBySId(String id) {
  return libsbml.DowncastSBase(libsbmlJNI.RenderInformationBase_getElementBySId(swigCPtr, this, id), false);
}

  
/**
   * Returns the first child element that has the given <code>metaid</code>, or <code>null</code>
   * if no such object is found.
   <p>
   * @param metaid a string representing the metaid attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>metaid</code>. If no
   * such object is found this method returns <code>null.</code>
   */ public
 SBase getElementByMetaId(String metaid) {
  return libsbml.DowncastSBase(libsbmlJNI.RenderInformationBase_getElementByMetaId(swigCPtr, this, metaid), false);
}

}
