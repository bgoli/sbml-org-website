/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 Vectors with an absolute value and a relative value.
 <p>
 * For many elements in the render extension, it is necessary to specify
 * coordinates not in terms of absolute values, but rather in terms of
 * relative values or even a combination of absolute and relative values.
 * Such a pair of values where one represents an absolute value and the other
 * represents a relative value can be expressed by a {@link RelAbsVector}.  The
 * {@link RelAbsVector} class represents a pair of numerical values where one value
 * represents an absolute value and the other value is a relative value in
 * percent.
 <p>
 * The relative and absolute values to initialize a {@link RelAbsVector} object can
 * either be given as numerical datatypes (double) or as a valid value
 * string.  A value string is a combination of an absolute value and a
 * relative value and the absolute value if given has to come first. So valid
 * value strings would be: '5.0e3+20%', or '100%' or '4'.
 */

public class RelAbsVector {
   private long swigCPtr;
   protected boolean swigCMemOwn;

   protected RelAbsVector(long cPtr, boolean cMemoryOwn)
   {
     swigCMemOwn = cMemoryOwn;
     swigCPtr    = cPtr;
   }

   protected static long getCPtr(RelAbsVector obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (RelAbsVector obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_RelAbsVector(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  
/**
   * Constructor with two values.
   * First value sets the absolute value, second sets the relative value (%). 
   <p>
   * @param a absolute value
   * @param r relative value in % (50 -> 50%)
   */ public
 RelAbsVector(double a, double r) {
    this(libsbmlJNI.new_RelAbsVector__SWIG_0(a, r), true);
  }

  
/**
   * Constructor with two values.
   * First value sets the absolute value, second sets the relative value (%). 
   <p>
   * @param a absolute value
   * @param r relative value in % (50 -> 50%)
   */ public
 RelAbsVector(double a) {
    this(libsbmlJNI.new_RelAbsVector__SWIG_1(a), true);
  }

  
/**
   * Constructor with two values.
   * First value sets the absolute value, second sets the relative value (%). 
   <p>
   * @param a absolute value
   * @param r relative value in % (50 -> 50%)
   */ public
 RelAbsVector() {
    this(libsbmlJNI.new_RelAbsVector__SWIG_2(), true);
  }

  
/**
   * Constructor with a value string.
   * If the string does not represent a valid value, the relative and the
   * absolute component of the {@link RelAbsVector} are set to NaN.
   <p>
   * @param coordString value as a string
   */ public
 RelAbsVector(String coordString) {
    this(libsbmlJNI.new_RelAbsVector__SWIG_3(coordString), true);
  }

  
/**
   * Copy constructor for {@link RelAbsVector}.
   <p>
   * @param orig the {@link RelAbsVector} instance to copy.
   */ public
 RelAbsVector(RelAbsVector orig) {
    this(libsbmlJNI.new_RelAbsVector__SWIG_4(RelAbsVector.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link RelAbsVector} object.
   <p>
   * @return a (deep) copy of this {@link RelAbsVector} object.
   */ public
 RelAbsVector cloneObject() {
    long cPtr = libsbmlJNI.RelAbsVector_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new RelAbsVector(cPtr, true);
  }

  
/**
   * Returns the absolute coordinate value.
   <p>
   * @return absolute value
   */ public
 double getAbsoluteValue() {
    return libsbmlJNI.RelAbsVector_getAbsoluteValue(swigCPtr, this);
  }

  
/**
   * Returns the relative coordinate value.
   <p>
   * @return absolute value
   */ public
 double getRelativeValue() {
    return libsbmlJNI.RelAbsVector_getRelativeValue(swigCPtr, this);
  }

  
/**
  * Returns the coordinate value.
  <p>
  * @return absolute value
  */ public
 String getCoordinate() {
    return libsbmlJNI.RelAbsVector_getCoordinate(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RelAbsVector}'s 'abs' attribute is set.
   <p>
   * @return <code>true</code> if this {@link RelAbsVector}'s 'abs' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetAbsoluteValue() {
    return libsbmlJNI.RelAbsVector_isSetAbsoluteValue(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link RelAbsVector}'s 'rel' attribute is set.
   <p>
   * @return <code>true</code> if this {@link RelAbsVector}'s 'rel' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetRelativeValue() {
    return libsbmlJNI.RelAbsVector_isSetRelativeValue(swigCPtr, this);
  }

  
/**
  * Predicate returning <code>true</code> if this {@link RelAbsVector}'s coordinate attribute is set.
  <p>
  * @return <code>true</code> if this {@link RelAbsVector}'s coordinate attribute has been set,
  * otherwise <code>false</code> is returned.
  */ public
 boolean isSetCoordinate() {
    return libsbmlJNI.RelAbsVector_isSetCoordinate(swigCPtr, this);
  }

  
/**
   * Sets the absolute coordinate value.
   <p>
   * Calling this function with an argument of <code>0.0</code> or <code>NaN</code> is
   * equivalent to unsetting the value.
   <p>
   * @param abs double value of the 'abs' attribute to be set.
   */ public
 int setAbsoluteValue(double abs) {
    return libsbmlJNI.RelAbsVector_setAbsoluteValue(swigCPtr, this, abs);
  }

  
/**
   * Sets the relative coordinate value.
   <p>
   * Calling this function with an argument of <code>0.0</code> or <code>NaN</code> is
   * equivalent to unsetting the value.
   <p>
   * @param rel double value of the 'rel' attribute to be set.
   */ public
 int setRelativeValue(double rel) {
    return libsbmlJNI.RelAbsVector_setRelativeValue(swigCPtr, this, rel);
  }

  
/**
   * Sets the relative and absolute value.
   <p>
   * Calling this function with an argument of <code>0.0</code> or <code>NaN</code> is
   * equivalent to unsetting the value.
   <p>
   * @param abs absolute value
   * @param rel relative value. If the relative value is omitted, it is set to 0.
   */ public
 int setCoordinate(double abs, double rel) {
    return libsbmlJNI.RelAbsVector_setCoordinate__SWIG_0(swigCPtr, this, abs, rel);
  }

  
/**
   * Sets the relative and absolute value.
   <p>
   * Calling this function with an argument of <code>0.0</code> or <code>NaN</code> is
   * equivalent to unsetting the value.
   <p>
   * @param abs absolute value
   * @param rel relative value. If the relative value is omitted, it is set to 0.
   */ public
 int setCoordinate(double abs) {
    return libsbmlJNI.RelAbsVector_setCoordinate__SWIG_1(swigCPtr, this, abs);
  }

  
/**
   * Sets the coordinates from the given string.
   * If the string does not represent a valid value, the relative and the
   * absolute component of the {@link RelAbsVector} are set to NaN.
   <p>
   * Calling this function with either cooredinate having a value of <code>'0.0'</code> 
   * or <code>'NaN'</code> is equivalent to unsetting the value.
   <p>
   * @param coordString value string
   */ public
 int setCoordinate(String coordString) {
    return libsbmlJNI.RelAbsVector_setCoordinate__SWIG_2(swigCPtr, this, coordString);
  }

  
/**
   * Unsets the value of the 'abs' attribute of this {@link RelAbsVector}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetAbsoluteValue() {
    return libsbmlJNI.RelAbsVector_unsetAbsoluteValue(swigCPtr, this);
  }

  
/**
   * Unsets the value of the relative coordinate attribute of this {@link RelAbsVector}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetRelativeValue() {
    return libsbmlJNI.RelAbsVector_unsetRelativeValue(swigCPtr, this);
  }

  
/**
  * Unsets the value of the 'rel' attribute of this {@link RelAbsVector}.
  <p>
  * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
  * <ul>
  * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
  * </ul>
  */ public
 int unsetCoordinate() {
    return libsbmlJNI.RelAbsVector_unsetCoordinate(swigCPtr, this);
  }

  
/**
   * @return an indication whether this element has been set 
   * (i.e., no zero entries for either relative or absolute coordinate)
   */ public
 boolean empty() {
    return libsbmlJNI.RelAbsVector_empty(swigCPtr, this);
  }

  
/** 
   * @return a string representation of this object
   */ public
 String toString() {
    return libsbmlJNI.RelAbsVector_toString(swigCPtr, this);
  }

  
/** 
   * resets this element by setting the two coordinates to <code>0.0</code>
   */ public
 void erase() {
    libsbmlJNI.RelAbsVector_erase(swigCPtr, this);
  }

}
