/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 Rendering information stored in Layouts.
 <p>
 * {@link LocalRenderInformation} is one of the subclasses of
 * {@link RenderInformationBase}. A 'local rendering information' object contains color
 * definitions, gradient definitions and line endings as defined in
 * {@link RenderInformationBase}.  Additionally it has a list of local styles which
 * specifies type, role and id based render information.  Local render
 * information can specify id based render information because it does belong
 * to a certain layout and it can reference ids of object in that layout.
 */

public class LocalRenderInformation extends RenderInformationBase {
   private long swigCPtr;

   protected LocalRenderInformation(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.LocalRenderInformation_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(LocalRenderInformation obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (LocalRenderInformation obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_LocalRenderInformation(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link LocalRenderInformation} using the given SBML Level, Version
   * and &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link LocalRenderInformation}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link LocalRenderInformation}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link LocalRenderInformation}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 LocalRenderInformation(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_LocalRenderInformation__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link LocalRenderInformation} using the given SBML Level, Version
   * and &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link LocalRenderInformation}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link LocalRenderInformation}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link LocalRenderInformation}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 LocalRenderInformation(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_LocalRenderInformation__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link LocalRenderInformation} using the given SBML Level, Version
   * and &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link LocalRenderInformation}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link LocalRenderInformation}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link LocalRenderInformation}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 LocalRenderInformation(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_LocalRenderInformation__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link LocalRenderInformation} using the given SBML Level, Version
   * and &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link LocalRenderInformation}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link LocalRenderInformation}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link LocalRenderInformation}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 LocalRenderInformation() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_LocalRenderInformation__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link LocalRenderInformation} using the given {@link RenderPkgNamespaces}
   * object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param renderns the {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 LocalRenderInformation(RenderPkgNamespaces renderns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_LocalRenderInformation__SWIG_4(RenderPkgNamespaces.getCPtr(renderns), renderns), true);
  }

  
/**
   * Constructor which creates a {@link LocalRenderInformation} with the given <code>id</code>
   * and all lists empty.
   <p>
   * @param renderns the {@link SBMLNamespaces} object for the SBML 'render' package
   * @param id the new id for the {@link LocalRenderInformation}.
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 LocalRenderInformation(RenderPkgNamespaces renderns, String id) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_LocalRenderInformation__SWIG_5(RenderPkgNamespaces.getCPtr(renderns), renderns, id), true);
  }

  
/**
   * Copy constructor for {@link LocalRenderInformation}.
   <p>
   * @param orig the {@link LocalRenderInformation} instance to copy.
   */ public
 LocalRenderInformation(LocalRenderInformation orig) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_LocalRenderInformation__SWIG_6(LocalRenderInformation.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link LocalRenderInformation} object.
   <p>
   * @return a (deep) copy of this {@link LocalRenderInformation} object.
   */ public
 LocalRenderInformation cloneObject() {
    long cPtr = libsbmlJNI.LocalRenderInformation_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new LocalRenderInformation(cPtr, true);
  }

  
/**
   * Returns the {@link ListOfLocalStyles} from this {@link LocalRenderInformation}.
   <p>
   * @return the {@link ListOfLocalStyles} from this {@link LocalRenderInformation}.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addLocalStyle(LocalStyle object)
   * @see #createLocalStyle()
   * @see #getLocalStyle(String sid)
   * @see #getLocalStyle(long n)
   * @see #getNumLocalStyles()
   * @see #removeLocalStyle(String sid)
   * @see #removeLocalStyle(long n)
   */ public
 ListOfLocalStyles getListOfLocalStyles() {
    long cPtr = libsbmlJNI.LocalRenderInformation_getListOfLocalStyles__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfLocalStyles(cPtr, false);
  }

  
/**
  * Returns the {@link ListOfLocalStyles} from this {@link LocalRenderInformation}.
  <p>
  * @return the {@link ListOfLocalStyles} from this {@link LocalRenderInformation}.
  <p>
  * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
  <p>
  * @see #addLocalStyle(LocalStyle object)
  * @see #createLocalStyle()
  * @see #getLocalStyle(String sid)
  * @see #getLocalStyle(long n)
  * @see #getNumLocalStyles()
  * @see #removeLocalStyle(String sid)
  * @see #removeLocalStyle(long n)
  */ public
 ListOfLocalStyles getListOfStyles() {
    long cPtr = libsbmlJNI.LocalRenderInformation_getListOfStyles__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfLocalStyles(cPtr, false);
  }

  
/**
   * Get a {@link LocalStyle} from the {@link LocalRenderInformation}.
   <p>
   * @param n a long integer representing the index of the {@link LocalStyle} to
   * retrieve.
   <p>
   * @return the nth {@link LocalStyle} in the {@link ListOfLocalStyles} within this
   * {@link LocalRenderInformation}.
   * If the index <code>n</code> is invalid, <code>null</code> is returned.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addLocalStyle(LocalStyle object)
   * @see #createLocalStyle()
   * @see #getLocalStyle(String sid)
   * @see #getNumLocalStyles()
   * @see #removeLocalStyle(String sid)
   * @see #removeLocalStyle(long n)
   */ public
 LocalStyle getLocalStyle(long n) {
    long cPtr = libsbmlJNI.LocalRenderInformation_getLocalStyle__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new LocalStyle(cPtr, false);
  }

  
/**
  * Get a {@link LocalStyle} from the {@link LocalRenderInformation}.
  <p>
  * @param n a long integer representing the index of the {@link LocalStyle} to
  * retrieve.
  <p>
  * @return the nth {@link LocalStyle} in the {@link ListOfLocalStyles} within this
  * {@link LocalRenderInformation}.
  * If the index <code>n</code> is invalid, <code>null</code> is returned.
  <p>
  * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
  <p>
  * @see #addStyle(LocalStyle object)
  * @see #createLocalStyle()
  * @see #getStyle(String sid)
  * @see #getNumStyles()
  * @see #removeStyle(String sid)
  * @see #removeStyle(long n)
  */ public
 LocalStyle getStyle(long n) {
    long cPtr = libsbmlJNI.LocalRenderInformation_getStyle__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new LocalStyle(cPtr, false);
  }

  
/**
  * Returns a pointer to the style with the given <code>id</code>.
  * If the id is invalid, <code>null</code> is returned.
  <p>
  * @param id id of the {@link LocalStyle} to be returned.
  <p>
  * @return pointer to the style with the given <code>id</code> or <code>null</code>
  */ public
 LocalStyle getLocalStyle(String id) {
    long cPtr = libsbmlJNI.LocalRenderInformation_getLocalStyle__SWIG_2(swigCPtr, this, id);
    return (cPtr == 0) ? null : new LocalStyle(cPtr, false);
  }

  
/**
  * Returns a pointer to the style with the given <code>id</code>.
  * If the id is invalid, <code>null</code> is returned.
  <p>
  * @param id id of the {@link LocalStyle} to be returned.
  <p>
  * @return pointer to the style with the given <code>id</code> or <code>null</code>
  */ public
 LocalStyle getStyle(String id) {
    long cPtr = libsbmlJNI.LocalRenderInformation_getStyle__SWIG_2(swigCPtr, this, id);
    return (cPtr == 0) ? null : new LocalStyle(cPtr, false);
  }

  
/**
   * Adds a copy of the given {@link LocalStyle} to this {@link LocalRenderInformation}.
   <p>
   * @param ls the {@link LocalStyle} object to add.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH}
   * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
   *
   * </ul> <p>
   * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
   <p>
   * @see #createLocalStyle()
   * @see #getLocalStyle(String sid)
   * @see #getLocalStyle(long n)
   * @see #getNumLocalStyles()
   * @see #removeLocalStyle(String sid)
   * @see #removeLocalStyle(long n)
   */ public
 int addLocalStyle(LocalStyle ls) {
    return libsbmlJNI.LocalRenderInformation_addLocalStyle(swigCPtr, this, LocalStyle.getCPtr(ls), ls);
  }

  
/**
  * Adds a copy of the given {@link LocalStyle} to this {@link LocalRenderInformation}.
  <p>
  * @param ls the {@link LocalStyle} object to add.
  <p>
  * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
  * <ul>
  * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
  * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
  * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
  * <li> {@link libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH}
  * <li> {@link libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH}
  * <li> {@link libsbmlConstants#LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH}
  * <li> {@link libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID}
  *
  * </ul> <p>
  * <p>
 * @note This method should be used with some caution.  The fact that this
 * method <em>copies</em> the object passed to it means that the caller will be
 * left holding a physically different object instance than the one contained
 * inside this object.  Changes made to the original object instance (such as
 * resetting attribute values) will <em>not affect the instance in this
 * object</em>.  In addition, the caller should make sure to free the
 * original object if it is no longer being used, or else a memory leak will
 * result.  Please see other methods on this class (particularly a
 * corresponding method whose name begins with the word <code>create</code>)
 * for alternatives that do not lead to these issues.
  <p>
  * @see #createLocalStyle()
  * @see #getStyle(String sid)
  * @see #getStyle(long n)
  * @see #getNumStyles()
  * @see #removeStyle(String sid)
  * @see #removeStyle(long n)
  */ public
 int addStyle(LocalStyle ls) {
    return libsbmlJNI.LocalRenderInformation_addStyle(swigCPtr, this, LocalStyle.getCPtr(ls), ls);
  }

  
/**
   * Get the number of {@link LocalStyle} objects in this {@link LocalRenderInformation}.
   <p>
   * @return the number of {@link LocalStyle} objects in this {@link LocalRenderInformation}.
   <p>
   * @see #addLocalStyle(LocalStyle object)
   * @see #createLocalStyle()
   * @see #getLocalStyle(String sid)
   * @see #getLocalStyle(long n)
   * @see #removeLocalStyle(String sid)
   * @see #removeLocalStyle(long n)
   */ public
 long getNumLocalStyles() {
    return libsbmlJNI.LocalRenderInformation_getNumLocalStyles(swigCPtr, this);
  }

  
/**
  * Get the number of {@link LocalStyle} objects in this {@link LocalRenderInformation}.
  <p>
  * @return the number of {@link LocalStyle} objects in this {@link LocalRenderInformation}.
  <p>
  * @see #addStyle(LocalStyle object)
  * @see #createLocalStyle()
  * @see #getStyle(String sid)
  * @see #getStyle(long n)
  * @see #removeStyle(String sid)
  * @see #removeStyle(long n)
  */ public
 long getNumStyles() {
    return libsbmlJNI.LocalRenderInformation_getNumStyles(swigCPtr, this);
  }

  
/**
   * Creates a new {@link LocalStyle} object, adds it to this {@link LocalRenderInformation}
   * object and returns the {@link LocalStyle} object created.
   <p>
   * @return a new {@link LocalStyle} object instance.
   <p>
   * <p>
 * @note
 * The pointer that is returned by this function is not owned by the caller,
 * but may be queried and modified.  Any changes made will be reflected in any
 * resulting SBML document containing the pointer's parent.
   <p>
   * @see #addLocalStyle(LocalStyle object)
   * @see #getLocalStyle(String sid)
   * @see #getLocalStyle(long n)
   * @see #getNumLocalStyles()
   * @see #removeLocalStyle(String sid)
   * @see #removeLocalStyle(long n)
   */ public
 LocalStyle createLocalStyle() {
    long cPtr = libsbmlJNI.LocalRenderInformation_createLocalStyle(swigCPtr, this);
    return (cPtr == 0) ? null : new LocalStyle(cPtr, false);
  }

  
/** * @internal */ public
 LocalStyle createStyle(String id) {
    long cPtr = libsbmlJNI.LocalRenderInformation_createStyle(swigCPtr, this, id);
    return (cPtr == 0) ? null : new LocalStyle(cPtr, false);
  }

  
/**
   * Removes the nth {@link LocalStyle} from this {@link LocalRenderInformation} and returns a
   * pointer to it.
   <p>
   * @param n a long integer representing the index of the {@link LocalStyle} to
   * remove.
   <p>
   * @return a pointer to the nth {@link LocalStyle} in this {@link LocalRenderInformation}.
   <p>
   * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
   <p>
   * @see #addLocalStyle(LocalStyle object)
   * @see #createLocalStyle()
   * @see #getLocalStyle(String sid)
   * @see #getLocalStyle(long n)
   * @see #getNumLocalStyles()
   * @see #removeLocalStyle(String sid)
   */ public
 LocalStyle removeLocalStyle(long n) {
    long cPtr = libsbmlJNI.LocalRenderInformation_removeLocalStyle__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new LocalStyle(cPtr, false);
  }

  
/**
  * Removes the nth {@link LocalStyle} from this {@link LocalRenderInformation} and returns a
  * pointer to it.
  <p>
  * @param n a long integer representing the index of the {@link LocalStyle} to
  * remove.
  <p>
  * @return a pointer to the nth {@link LocalStyle} in this {@link LocalRenderInformation}.
  <p>
  * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
  <p>
  * @see #addStyle(LocalStyle object)
  * @see #createLocalStyle()
  * @see #getStyle(String sid)
  * @see #getStyle(long n)
  * @see #getNumStyles()
  * @see #removeStyle(String sid)
  */ public
 LocalStyle removeStyle(long n) {
    long cPtr = libsbmlJNI.LocalRenderInformation_removeStyle__SWIG_0(swigCPtr, this, n);
    return (cPtr == 0) ? null : new LocalStyle(cPtr, false);
  }

  
/**
  * Removes the {@link LocalStyle} from this {@link LocalRenderInformation} based on its
  * identifier and returns a pointer to it.
  <p>
  * @param id a string representing the identifier of the {@link LocalStyle} to
  * remove.
  <p>
  * @return the {@link LocalStyle} in this {@link LocalRenderInformation} based on the
  * identifier or null if no such {@link LocalStyle} exists.
  <p>
  * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
  <p>
  * @see #addLocalStyle(LocalStyle object)
  * @see #createLocalStyle()
  * @see #getLocalStyle(String sid)
  * @see #getLocalStyle(long n)
  * @see #getNumLocalStyles()
  * @see #removeLocalStyle(String sid)
  */ public
 LocalStyle removeLocalStyle(String id) {
    long cPtr = libsbmlJNI.LocalRenderInformation_removeLocalStyle__SWIG_1(swigCPtr, this, id);
    return (cPtr == 0) ? null : new LocalStyle(cPtr, false);
  }

  
/**
  * Removes the {@link LocalStyle} from this {@link LocalRenderInformation} based on its
  * identifier and returns a pointer to it.
  <p>
  * @param id a string representing the identifier of the {@link LocalStyle} to
  * remove.
  <p>
  * @return the {@link LocalStyle} in this {@link LocalRenderInformation} based on the
  * identifier or null if no such {@link LocalStyle} exists.
  <p>
  * <p>
 * @warning
 * <span class='warning'>The pointer that is returned by this function is owned
 * by the caller, who is responsible for deleting it.  Any changes made to the
 * element will not be reflected in any resulting SBML document unless the
 * element is added to an SBML Document.  Even in this case, the element's
 * deletion is still the responsibility of the caller with two exceptions: if
 * it is used as the 'disownedItem' in the * {@link ListOf#appendAndOwn()} or {@link ListOf#insertAndOwn()} 
 * functions.  All other functions in libsbml add a copy of the element,
 * and do not transfer ownership of the pointer.</span>
  <p>
  * @see #addStyle(LocalStyle object)
  * @see #createLocalStyle()
  * @see #getStyle(String sid)
  * @see #getStyle(long n)
  * @see #getNumStyles()
  * @see #removeStyle(String sid)
  */ public
 LocalStyle removeStyle(String id) {
    long cPtr = libsbmlJNI.LocalRenderInformation_removeStyle__SWIG_1(swigCPtr, this, id);
    return (cPtr == 0) ? null : new LocalStyle(cPtr, false);
  }

  
/**
   * Returns the XML element name of this {@link LocalRenderInformation} object.
   <p>
   * For {@link LocalRenderInformation}, the XML element name is always
   * <code>'renderInformation'.</code>
   <p>
   * @return the name of this element, i.e. <code>'renderInformation'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.LocalRenderInformation_getElementName(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code for this {@link LocalRenderInformation} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_RENDER_LOCALRENDERINFORMATION SBML_RENDER_LOCALRENDERINFORMATION}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.LocalRenderInformation_getTypeCode(swigCPtr, this);
  }

  
/** * @internal */ public
 void connectToChild() {
    libsbmlJNI.LocalRenderInformation_connectToChild(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.LocalRenderInformation_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

  
/**
   * Returns the first child element that has the given <code>id</code> in the model-wide
   * SId namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id a string representing the id attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>id</code>. If no such
   * object is found, this method returns <code>null.</code>
   */ public
 SBase getElementBySId(String id) {
  return libsbml.DowncastSBase(libsbmlJNI.LocalRenderInformation_getElementBySId(swigCPtr, this, id), false);
}

  
/**
   * Returns the first child element that has the given <code>metaid</code>, or <code>null</code>
   * if no such object is found.
   <p>
   * @param metaid a string representing the metaid attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>metaid</code>. If no
   * such object is found this method returns <code>null.</code>
   */ public
 SBase getElementByMetaId(String metaid) {
  return libsbml.DowncastSBase(libsbmlJNI.LocalRenderInformation_getElementByMetaId(swigCPtr, this, metaid), false);
}

  
/**
   * Parses the xml information in the given node and sets the attributes.
   * This method should never be called by the user. It is only used to read render 
   * information from annotations.
   <p>
   * @param node the {@link XMLNode} object reference that describes the {@link LocalRenderInformation}
   * object to be instantiated.
   */ public
 void parseXML(XMLNode node) {
    libsbmlJNI.LocalRenderInformation_parseXML(swigCPtr, this, XMLNode.getCPtr(node), node);
  }

  
/**
   * Creates an {@link XMLNode} object from this {@link LocalRenderInformation} object.
   <p>
   * @return the {@link XMLNode} with the XML representation for the 
   * {@link LocalRenderInformation} object.
   */ public
 XMLNode toXML() {
    return new XMLNode(libsbmlJNI.LocalRenderInformation_toXML(swigCPtr, this), true);
  }

}
