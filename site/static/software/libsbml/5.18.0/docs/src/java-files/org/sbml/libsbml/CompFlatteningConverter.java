/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-comp"><a href="group__comp.html">comp</a></span>
 'Flattens' a model, removing composition.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  It is a class used in
the implementation of extra functionality provided by libSBML.
</p>

 <p>
 * This converter translates a hierarchical model defined with the SBML
 * Level&nbsp;3 Hierarchical Model Composition package to a so-called
 * 'flattened' version of the same model.  A 'flattened' model is one that
 * results from interpreting the hierarchical structure and creating an
 * equivalent model that does not use any Hierarchical Model Composition
 * package constructs; all of the mathematics of the model remain as
 * intended, but the hierarchical structure is removed.
 * {@link CompFlatteningConverter} achieves this by performing the following actions
 * on a model:
 * <ol>
 * <li> Each submodel is instantiated; that is, a copy of every {@link Model} object
 * referenced by every {@link Submodel} object is created.  This is a recursive
 * process: if the instantiated {@link Model} itself has {@link Submodel} children, they are
 * also instantiated.
 <p>
 * <li> The identifier of every component object in every {@link Model} that is
 * instantiated is modified by prepending a prefix to it, to make the
 * identifier unique in the overall flattened SBML model.  The prefix
 * consists of the {@link Submodel} object identifier, plus a small integer if
 * necessary to ensure uniqueness, plus two underscore characters
 * (<code>'__'</code>).  Typically, this results in a final identifier of the
 * form <span
 * class='code-placeholder'>SubmodelIdentifier__</span><span
 * class='code-placeholder2-nospace'>ObjectIdentifier</span>, where <span
 * class='code-placeholder2'>ObjectIdentifier</span> is the object's original
 * identifier and <span
 * class='code-placeholder'>SubmodelIdentifier__</span> is
 * the prefix.  The same process is applied to <em>metaid</em> (meta-identifier)
 * values of every component object as well.
 <p>
 * <li> All deleted elements are removed from the model and all instantiated
 * submodels.
 <p>
 * <li> All replaced elements are removed from the model and all instantiated
 * submodels.
 <p>
 * <li> All references to replaced elements are changed to point to the
 * replacement element instead.
 <p>
 * <li> All remaining elements are placed in a single {@link Model} object; this {@link Model}
 * object is made the new child of the {@link SBMLDocument} container.  The original
 * {@link Model}, {@link ModelDefinition}, and {@link ExternalModelDefinition} objects are all
 * deleted.
 <p>
 * </ol>
 <p>
 * Note an implication of this process is that if conversion is successful,
 * all old pointers to the {@link SBMLDocument} object's {@link Model} object as well as all
 * of its children, will be rendered obsolete, and will no longer work.
 <p>
 * <h2>Summary of options for {@link CompFlatteningConverter}</h2>
 <p>
 * <p>
 * {@link CompFlatteningConverter} is enabled by creating a {@link ConversionProperties}
 * object with the option <em>'flatten</em> comp', and passing this
 * {@link ConversionProperties} object to {@link SBMLDocument#convert(ConversionProperties)}.  The {@link CompFlatteningConverter} converter
 * accepts numerous options influencing its behavior.  The following list
 * briefly summarizes the options:
 * <ul>
 * <li> <em>'flatten comp'</em>: Possible values are <code>'true'</code> or <code>'false'.</code>
 * Setting the option to <code>true</code> (the default) means enable the flattening
 * converter.
 <p>
 * <li> <em>'abortIfUnflattenable'</em>: Possible values are <code>'all'</code>,
 * <code>'requiredOnly'</code> (the default), or <code>'none'.</code>  Controls what happens upon
 * encountering an SBML Level&nbsp;3 package with no flattener
 * implementation.
 <p>
 * <li> <em>'stripUnflattenablePackages'</em>: Possible values are <code>'true'</code> or
 * <code>'false'</code> (the default).  Controls whether the constructs of Level&nbsp;3
 * packages with no flattener implementation are stripped from the output.
 <p>
 * <li> <em>'stripPackages'</em>: The value must be a string representing a
 * comma-separated list of SBML Level&nbsp;3 packages to be stripped before
 * conversion.  (Default value: empty string, meaning, no packages.)
 <p>
 * <li> <em>'basePath'</em>: The value must be a string representing the path where
 * the converter should search for any {@link ExternalModelDefinition} objects.
 * (Default value: '.', meaning, the current directory.)
 <p>
 * <li> <em>'leavePorts'</em>: Possible values are <code>'true'</code> or <code>'false'</code> (the
 * default).  Controls what happens to {@link Port} constructs in the output.
 <p>
 * <li> <em>'listModelDefinitions'</em>: Possible values are <code>'true'</code> or
 * <code>'false'</code> (the default).  Controls what happens to {@link ModelDefinition} and
 * {@link ExternalModelDefinition} objects in the final output.
 <p>
 * <li> <em>'performValidation'</em>: Possible values are <code>'true'</code> (the default)
 * or <code>'false'.</code>  Controls whether whether libSBML validates the model
 * before attempting to flatten it.
 * </ul>
 <p>
 * <h2>Detailed explanation of available options</h2>
 <p>
 * The following sections examine in detail the options understood by
 * {@link CompFlatteningConverter} and their effects on the flattening process.
 <p>
 * <h3>Options for handling Level&nbsp;3 packages</h3>
 <p>
 * If other SBML Level&nbsp;3 packages are used in the {@link SBMLDocument}, the same
 * rules apply to each package's constructs if an implementation of the
 * flattener exists for that Level&nbsp;3 package.  If no implementation
 * exists, the behavior of this {@link CompFlatteningConverter} depends on the values
 * of the options <em>'abortIfUnflattenable'</em> and 
 * <em>'stripUnflattenablePackages'</em>.  Specifically:
 * <ul>
 <p>
 * <li> The option <em>'abortIfUnflattenable'</em> controls whether the flattening
 * process is abandoned.  The following are the possible values for this
 * option and their meanings:
 * <ul style='list-style-type: circle'>
 <p>
 * <li> If the <em>'abortIfUnflattenable'</em> option is set to <code>'all'</code>, then if any
 *     construct is found for a package that has no flattening algorithm
 *     available, the converter will abort, return failure, and avoid
 *     changing the original {@link SBMLDocument} object.
 <p>
 * <li> If <em>'abortIfUnflattenable'</em> is set to <code>'requiredOnly'</code> (the default),
 *     then if any SBML Level&nbsp;3 package construct is found for a package
 *     that is labeled <code>'required=true'</code> and for which no flattening
 *     algorithm is available, the converter will abort, return failure, and
 *     avoid changing the original {@link SBMLDocument} object.  SBML Level&nbsp;3
 *     package constructs from packages set <code>'required=false'</code> for which no
 *     flattening algorithm is implemented will be ignored and the constructs
 *     will be kept or removed depending on the value of the 
 *     <em>'stripUnflattenablePackages'</em> option described below.
 <p>
 * <li> If <em>'abortIfUnflattenable'</em> is set to <code>'none'</code>, constructs from all
 *     unflattenable SBML Level&nbsp;3 packages will be ignored, and their
 *     constructs will be kept or removed depending on the value of the 
 *     <em>'stripUnflattenablePackages'</em> option.
 <p>
 * </ul>
 <p>
 * <li> The option <em>'stripUnflattenablePackages'</em> controls whether SBML
 * Level&nbsp;3 package constructs are removed from the final flattened
 * model.  The following are the possible values for this option and their
 * meanings:
 * <ul style='list-style-type: circle'>
 <p>
 * <li> If the option <em>'stripUnflattenablePackages'</em> is set to <code>'true'</code>, and
 *      the option <em>'abortIfUnflattenable'</em> has the value <code>'requiredOnly'</code>
 *      or <code>'none'</code>, then {@link CompFlatteningConverter} will remove all constructs
 *      belonging to packages that lack a flattening converter.  The XML
 *      namespace declaration for unflattenable SBML Level&nbsp;3 packages
 *      will also be removed.
 <p>
 * <li> If the option <em>'stripUnflattenablePackages'</em> is set to <code>'false'</code>
 *     (the default), {@link CompFlatteningConverter} will leave any package
 *     constructs that cannot be flattened due to the lack of a flattening
 *     implementation.  These Level&nbsp;3 package constructs will remain in
 *     the final model.  Note that any package constructs from an
 *     instantiated {@link Submodel} object that was <em>not</em> a child of a retained
 *     component will be lost (because the SBML component where it was
 *     located was removed from the final, flattened model).
 <p>
 * </ul>
 <p>
 * <li> The option <em>'stripPackages'</em> controls whether SBML Level&nbsp;3
 * package information is stripped from a model before conversion.
 * Regardless of the above options, if an SBML package is listed in this
 * comma-separated list, all constructs from that package will be removed
 * from the model before the flattening algorithm is applied.  This happens
 * whether a flattening algorithm exists for that package or not, and applies
 * to all referenced models, both local and external.  In addition, the
 * removal takes place before any validation is performed by libSBML.
 <p>
 * </ul>
 <p>
 * <h3>Additional general conversion options for {@link CompFlatteningConverter}</h3>
 <p>
 * The following are other, general options offered by CompFlatteningConverter:
 <p>
 * <ul>
 * <li> <em>'basePath'</em>: if there are {@link ExternalModelDefinition} objects that are to
 *     be instantiated in a flattened {@link Submodel}, the <em>'basePath'</em> option may
 *     be set to a location where those external models may be found.  The
 *     default is the working directory (<code>'.'</code>).
 <p>
 * <li> <em>'leavePorts'</em>: if this option is set to <code>'false'</code> (the default), the
 *     flattened model will have no {@link Port} objects in it.  Conversely, if 
 *     <em>'leavePorts'</em> is set to <code>'true'</code>, any {@link Port} objects not referenced by any
 *     Replacement or {@link Deletion} will be left in the resulting flattened {@link Model}.
 <p>
 * <li> <em>'listModelDefinitions'</em>: If this option is set to <code>'false'</code> (the
 *     default), no {@link ModelDefinition} or {@link ExternalModelDefinition} objects will
 *     be present in the flattened {@link SBMLDocument}.  If <em>'listModelDefinitions'</em>
 *     is set to <code>'true'</code>, they will remain, although they will no longer be
 *     referenced by any {@link Submodel} in the flattened {@link Model} child of the
 *     {@link SBMLDocument}.
 <p>
 * <li> <em>'performValidation'</em>: if this option is set to <code>'true'</code> (the
 *     default), the {@link SBMLDocument} will first be validated before flattening
 *     is attempted.  If there are any validation errors, those errors will
 *     be logged with the {@link SBMLDocument}, which will remain otherwise
 *     unchanged, and the conversion process will return a failure code.
 *     Similarly, if the flattened {@link Model} is not valid, those validation
 *     errors will be added to the {@link SBMLDocument}, which will remain otherwise
 *     unchanged, and the conversion attempt will return failure.
 *     Conversely, if the option <em>'performValidation'</em> is set to
 *     <code>'false'</code>, the {@link SBMLDocument} will be flattened regardless of any
 *     validation errors.  The conversion may yet fail if insurmountable
 *     errors are encountered in the course of trying to flatten the model
 *     (for instance, if an element is replaced by something that does not
 *     exist), but no separate validation steps are performed.
 *
 * </ul> <p>
 * Note that if both the option <em>'leavePorts'</em> and <em>'listModelDefinitions'</em>
 * are set to <code>'false'</code> (which they are by default), the Hierarchical Model
 * Composition namespace will be removed from the resulting {@link SBMLDocument}.
 <p>
 * <h2>Complete example of invoking {@link CompFlatteningConverter}</h2>
 <p>
 * In this section, we present a complete example of a program that can take
 * an SBML model containing Level&nbsp;3 Hierarchical Model Composition
 * constructs and flatten it to a plain SBML Level&nbsp;3 model.
 * A version of this program is available in the libSBML distribution's
 * <code>examples/java/comp</code> directory as the
 * program named
 * <code>'flattenModel.java'</code>.  The example
 * XML models shown below are the same models as given in sections
 * 4.1&ndash;4.2 in the specification document for SBML Level&nbsp;3
 * Hierarchical Model Composition.
 <p>
 * <h3>Example program</h3>
 <p>
 * For brevity, we do not give the general scaffolding that a real program
 * would have (such as inclusion of header files, command-line argument
 * checks, additional error checks throughout the code, and so on), and focus
 * instead on the parts relevant to an application using the libSBML 'comp'
 * extension.
 <p>
 * First, our program checks that this copy of libSBML has the 'comp'
 * extension available.  The process for doing that simply involves a call to
 * the extension registry in libSBML:
<p>
<pre class='fragment'>
if (! {@link SBMLExtensionRegistry}.isPackageEnabled('comp'))
{
    System.out.println('This copy of libSBML does not contain the 'comp' extension');
    System.out.println('Unable to proceed with flattening the model.');
    System.exit(1);
}
</pre>
<p>
 * Next, we read the SBML input file.  For this example, we simply
 * assume that the path to the file is given as the first argument
 * to the program; a real program would perform more sophisticated
 * command-line argument processing and error checking.
<p>
<pre class='fragment'>
{@link SBMLReader} reader = new {@link SBMLReader}();
{@link SBMLDocument} doc  = reader.readSBML(args[0]);
if (doc.getErrorLog().getNumFailsWithSeverity(libsbml.LIBSBML_SEV_ERROR) &gt; 0)
{
    doc.printErrors();
    System.exit(1);
}
</pre>
<p>
 * Continuing, we set up options for the call to the converter.
 * The use of {@link ConversionProperties} and the general scheme behind
 * conversion options is explained further below; for the purposes
 * of this example, it is enough to know that the following are the
 * basic lines of code needed to obtain a copy of a libSBML
 * converter object that will invoke CompFlatteningConverter:
<p>
<pre class='fragment'>
{@link ConversionProperties} props = new {@link ConversionProperties}();
props.addOption('flatten comp', true);
</pre>
<p>
 * Now comes the actual invocation of {@link CompFlatteningConverter}.
 * As always, it is critical to check for possible errors by
 * checking the status code returned by the call; we do this
 * in the code below too.
<p>
<pre class='fragment'>
if (doc.convert(props) != libsbml.LIBSBML_OPERATION_SUCCESS)
{
    doc.printErrors();
    System.exit(1);
}
</pre>
<p>
 * If successful, we simply write out the resulting flattened model
 * to an output file which, for the purposes of this simple example,
 * we assume is indicated by the second argument handed to the program
 * on the command line by the user.  
<p>
<pre class='fragment'>
{@link SBMLWriter} writer = new {@link SBMLWriter}();
writer.writeSBML(doc, args[1]);
</pre>
<p>
 * <h3>Example use of the program</h3>
 <p>
 * What is the result of the above on an actual model?  Suppose we
 * have the following SBML Level&nbsp;3 model stored in a file named
 * <code>'enzyme_model.xml':</code>
 <p>
 * <div class="highlight"><pre class="fragment"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;sbml</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.sbml.org/sbml/level3/version1/core&quot;</span> <span class="na">level=</span><span class="s">&quot;3&quot;</span> <span class="na">version=</span><span class="s">&quot;1&quot;</span>
      <span class="na">xmlns:comp=</span><span class="s">&quot;http://www.sbml.org/sbml/level3/version1/comp/version1&quot;</span> <span class="na">comp:required=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>

  <span class="nt">&lt;model</span> <span class="na">id=</span><span class="s">&quot;aggregate&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;comp:listOfSubmodels&gt;</span>
      <span class="nt">&lt;comp:submodel</span> <span class="na">comp:id=</span><span class="s">&quot;submod1&quot;</span> <span class="na">comp:modelRef=</span><span class="s">&quot;enzyme&quot;</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;comp:submodel</span> <span class="na">comp:id=</span><span class="s">&quot;submod2&quot;</span> <span class="na">comp:modelRef=</span><span class="s">&quot;enzyme&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/comp:listOfSubmodels&gt;</span>
  <span class="nt">&lt;/model&gt;</span>
  <span class="nt">&lt;comp:listOfModelDefinitions&gt;</span>
    <span class="nt">&lt;comp:modelDefinition</span> <span class="na">id=</span><span class="s">&quot;enzyme&quot;</span> <span class="na">name=</span><span class="s">&quot;enzyme&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;listOfCompartments&gt;</span>
        <span class="nt">&lt;compartment</span> <span class="na">id=</span><span class="s">&quot;compartment&quot;</span> <span class="na">spatialDimensions=</span><span class="s">&quot;3&quot;</span> <span class="na">size=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;/listOfCompartments&gt;</span>
      <span class="nt">&lt;listOfSpecies&gt;</span>
        <span class="nt">&lt;species</span> <span class="na">id=</span><span class="s">&quot;S&quot;</span>  <span class="na">compartment=</span><span class="s">&quot;compartment&quot;</span> <span class="na">hasOnlySubstanceUnits=</span><span class="s">&quot;false&quot;</span>
                         <span class="na">boundaryCondition=</span><span class="s">&quot;false&quot;</span> <span class="na">constant=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;species</span> <span class="na">id=</span><span class="s">&quot;E&quot;</span>  <span class="na">compartment=</span><span class="s">&quot;compartment&quot;</span> <span class="na">hasOnlySubstanceUnits=</span><span class="s">&quot;false&quot;</span> 
                         <span class="na">boundaryCondition=</span><span class="s">&quot;false&quot;</span> <span class="na">constant=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;species</span> <span class="na">id=</span><span class="s">&quot;D&quot;</span>  <span class="na">compartment=</span><span class="s">&quot;compartment&quot;</span> <span class="na">hasOnlySubstanceUnits=</span><span class="s">&quot;false&quot;</span> 
                         <span class="na">boundaryCondition=</span><span class="s">&quot;false&quot;</span> <span class="na">constant=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;species</span> <span class="na">id=</span><span class="s">&quot;ES&quot;</span> <span class="na">compartment=</span><span class="s">&quot;compartment&quot;</span> <span class="na">hasOnlySubstanceUnits=</span><span class="s">&quot;false&quot;</span>
                         <span class="na">boundaryCondition=</span><span class="s">&quot;false&quot;</span> <span class="na">constant=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;/listOfSpecies&gt;</span>
      <span class="nt">&lt;listOfReactions&gt;</span>
        <span class="nt">&lt;reaction</span> <span class="na">id=</span><span class="s">&quot;J0&quot;</span> <span class="na">reversible=</span><span class="s">&quot;true&quot;</span> <span class="na">fast=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
          <span class="nt">&lt;listOfReactants&gt;</span>
            <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;S&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;E&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/listOfReactants&gt;</span>
          <span class="nt">&lt;listOfProducts&gt;</span>
            <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;ES&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/listOfProducts&gt;</span>
        <span class="nt">&lt;/reaction&gt;</span>
        <span class="nt">&lt;reaction</span> <span class="na">id=</span><span class="s">&quot;J1&quot;</span> <span class="na">reversible=</span><span class="s">&quot;true&quot;</span> <span class="na">fast=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
          <span class="nt">&lt;listOfReactants&gt;</span>
            <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;ES&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/listOfReactants&gt;</span>
          <span class="nt">&lt;listOfProducts&gt;</span>
            <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;E&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;D&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/listOfProducts&gt;</span>
        <span class="nt">&lt;/reaction&gt;</span>
      <span class="nt">&lt;/listOfReactions&gt;</span>
    <span class="nt">&lt;/comp:modelDefinition&gt;</span>
  <span class="nt">&lt;/comp:listOfModelDefinitions&gt;</span>
<span class="nt">&lt;/sbml&gt;</span>
</pre></div>

 <p>
 * Also suppose we have the following SBML Level&nbsp;3 model stored
 * in a file called <code>'main.xml'</code> in the same directory as the
 * file above.  The model below imports the model <code>'enzyme'</code> from
 * the model file above twice; this is used to create two submodels
 * whose identifiers are <code>'A'</code> and <code>'B'.</code>
 <p>
 * <div class="highlight"><pre class="fragment"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;sbml</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.sbml.org/sbml/level3/version1/core&quot;</span> <span class="na">level=</span><span class="s">&quot;3&quot;</span> <span class="na">version=</span><span class="s">&quot;1&quot;</span>
      <span class="na">xmlns:comp=</span><span class="s">&quot;http://www.sbml.org/sbml/level3/version1/comp/version1&quot;</span> <span class="na">comp:required=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;model&gt;</span>
    <span class="nt">&lt;listOfCompartments&gt;</span>
      <span class="nt">&lt;compartment</span> <span class="na">id=</span><span class="s">&quot;compartment&quot;</span> <span class="na">spatialDimensions=</span><span class="s">&quot;3&quot;</span> <span class="na">size=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;comp:listOfReplacedElements&gt;</span>
          <span class="nt">&lt;comp:replacedElement</span> <span class="na">comp:idRef=</span><span class="s">&quot;compartment&quot;</span> <span class="na">comp:submodelRef=</span><span class="s">&quot;A&quot;</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;comp:replacedElement</span> <span class="na">comp:idRef=</span><span class="s">&quot;compartment&quot;</span> <span class="na">comp:submodelRef=</span><span class="s">&quot;B&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/comp:listOfReplacedElements&gt;</span>
      <span class="nt">&lt;/compartment&gt;</span>
    <span class="nt">&lt;/listOfCompartments&gt;</span>
    <span class="nt">&lt;listOfSpecies&gt;</span>
      <span class="nt">&lt;species</span> <span class="na">id=</span><span class="s">&quot;S&quot;</span> <span class="na">compartment=</span><span class="s">&quot;compartment&quot;</span> <span class="na">hasOnlySubstanceUnits=</span><span class="s">&quot;false&quot;</span>
                      <span class="na">boundaryCondition=</span><span class="s">&quot;false&quot;</span> <span class="na">constant=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;comp:listOfReplacedElements&gt;</span>
          <span class="nt">&lt;comp:replacedElement</span> <span class="na">comp:idRef=</span><span class="s">&quot;S&quot;</span> <span class="na">comp:submodelRef=</span><span class="s">&quot;A&quot;</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;comp:replacedElement</span> <span class="na">comp:idRef=</span><span class="s">&quot;S&quot;</span> <span class="na">comp:submodelRef=</span><span class="s">&quot;B&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/comp:listOfReplacedElements&gt;</span>
      <span class="nt">&lt;/species&gt;</span>
    <span class="nt">&lt;/listOfSpecies&gt;</span>
    <span class="nt">&lt;comp:listOfSubmodels&gt;</span>
      <span class="nt">&lt;comp:submodel</span> <span class="na">comp:id=</span><span class="s">&quot;A&quot;</span> <span class="na">comp:modelRef=</span><span class="s">&quot;ExtMod1&quot;</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;comp:submodel</span> <span class="na">comp:id=</span><span class="s">&quot;B&quot;</span> <span class="na">comp:modelRef=</span><span class="s">&quot;ExtMod1&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/comp:listOfSubmodels&gt;</span>
  <span class="nt">&lt;/model&gt;</span>
  <span class="nt">&lt;comp:listOfExternalModelDefinitions&gt;</span>
    <span class="nt">&lt;comp:externalModelDefinition</span> <span class="na">comp:id=</span><span class="s">&quot;ExtMod1&quot;</span> <span class="na">comp:source=</span><span class="s">&quot;enzyme_model.xml&quot;</span>
                                  <span class="na">comp:modelRef=</span><span class="s">&quot;enzyme&quot;</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/comp:listOfExternalModelDefinitions&gt;</span>
<span class="nt">&lt;/sbml&gt;</span>
</pre></div>

 <p>
 * Finally, invoking the example program developed the previous section on the
 * file <code>'main.xml'</code>, we would obtain the following XML output as result a
 * result
 <p>
 * <div class="highlight"><pre class="fragment"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;sbml</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.sbml.org/sbml/level3/version1/core&quot;</span> <span class="na">level=</span><span class="s">&quot;3&quot;</span> <span class="na">version=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;model&gt;</span>
    <span class="nt">&lt;listOfCompartments&gt;</span>
      <span class="nt">&lt;compartment</span> <span class="na">id=</span><span class="s">&quot;compartment&quot;</span> <span class="na">spatialDimensions=</span><span class="s">&quot;3&quot;</span> <span class="na">size=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/listOfCompartments&gt;</span>
    <span class="nt">&lt;listOfSpecies&gt;</span>
      <span class="nt">&lt;species</span> <span class="na">id=</span><span class="s">&quot;S&quot;</span>     <span class="na">compartment=</span><span class="s">&quot;compartment&quot;</span> <span class="na">hasOnlySubstanceUnits=</span><span class="s">&quot;false&quot;</span>
                          <span class="na">boundaryCondition=</span><span class="s">&quot;false&quot;</span> <span class="na">constant=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;species</span> <span class="na">id=</span><span class="s">&quot;A__E&quot;</span>  <span class="na">compartment=</span><span class="s">&quot;compartment&quot;</span> <span class="na">hasOnlySubstanceUnits=</span><span class="s">&quot;false&quot;</span>
                          <span class="na">boundaryCondition=</span><span class="s">&quot;false&quot;</span> <span class="na">constant=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;species</span> <span class="na">id=</span><span class="s">&quot;A__D&quot;</span>  <span class="na">compartment=</span><span class="s">&quot;compartment&quot;</span> <span class="na">hasOnlySubstanceUnits=</span><span class="s">&quot;false&quot;</span>
                          <span class="na">boundaryCondition=</span><span class="s">&quot;false&quot;</span> <span class="na">constant=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;species</span> <span class="na">id=</span><span class="s">&quot;A__ES&quot;</span> <span class="na">compartment=</span><span class="s">&quot;compartment&quot;</span> <span class="na">hasOnlySubstanceUnits=</span><span class="s">&quot;false&quot;</span>
                          <span class="na">boundaryCondition=</span><span class="s">&quot;false&quot;</span> <span class="na">constant=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;species</span> <span class="na">id=</span><span class="s">&quot;B__E&quot;</span>  <span class="na">compartment=</span><span class="s">&quot;compartment&quot;</span> <span class="na">hasOnlySubstanceUnits=</span><span class="s">&quot;false&quot;</span>
                          <span class="na">boundaryCondition=</span><span class="s">&quot;false&quot;</span> <span class="na">constant=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;species</span> <span class="na">id=</span><span class="s">&quot;B__D&quot;</span>  <span class="na">compartment=</span><span class="s">&quot;compartment&quot;</span> <span class="na">hasOnlySubstanceUnits=</span><span class="s">&quot;false&quot;</span>
                          <span class="na">boundaryCondition=</span><span class="s">&quot;false&quot;</span> <span class="na">constant=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;species</span> <span class="na">id=</span><span class="s">&quot;B__ES&quot;</span> <span class="na">compartment=</span><span class="s">&quot;compartment&quot;</span> <span class="na">hasOnlySubstanceUnits=</span><span class="s">&quot;false&quot;</span>
                          <span class="na">boundaryCondition=</span><span class="s">&quot;false&quot;</span> <span class="na">constant=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/listOfSpecies&gt;</span>
    <span class="nt">&lt;listOfReactions&gt;</span>
      <span class="nt">&lt;reaction</span> <span class="na">id=</span><span class="s">&quot;A__J0&quot;</span> <span class="na">reversible=</span><span class="s">&quot;true&quot;</span> <span class="na">fast=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;listOfReactants&gt;</span>
          <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;S&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;A__E&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/listOfReactants&gt;</span>
        <span class="nt">&lt;listOfProducts&gt;</span>
          <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;A__ES&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/listOfProducts&gt;</span>
      <span class="nt">&lt;/reaction&gt;</span>
      <span class="nt">&lt;reaction</span> <span class="na">id=</span><span class="s">&quot;A__J1&quot;</span> <span class="na">reversible=</span><span class="s">&quot;true&quot;</span> <span class="na">fast=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;listOfReactants&gt;</span>
          <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;A__ES&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/listOfReactants&gt;</span>
        <span class="nt">&lt;listOfProducts&gt;</span>
          <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;A__E&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;A__D&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/listOfProducts&gt;</span>
      <span class="nt">&lt;/reaction&gt;</span>
      <span class="nt">&lt;reaction</span> <span class="na">id=</span><span class="s">&quot;B__J0&quot;</span> <span class="na">reversible=</span><span class="s">&quot;true&quot;</span> <span class="na">fast=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;listOfReactants&gt;</span>
          <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;S&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;B__E&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/listOfReactants&gt;</span>
        <span class="nt">&lt;listOfProducts&gt;</span>
          <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;B__ES&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/listOfProducts&gt;</span>
      <span class="nt">&lt;/reaction&gt;</span>
      <span class="nt">&lt;reaction</span> <span class="na">id=</span><span class="s">&quot;B__J1&quot;</span> <span class="na">reversible=</span><span class="s">&quot;true&quot;</span> <span class="na">fast=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;listOfReactants&gt;</span>
          <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;B__ES&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/listOfReactants&gt;</span>
        <span class="nt">&lt;listOfProducts&gt;</span>
          <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;B__E&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;speciesReference</span> <span class="na">species=</span><span class="s">&quot;B__D&quot;</span> <span class="na">stoichiometry=</span><span class="s">&quot;1&quot;</span> <span class="na">constant=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/listOfProducts&gt;</span>
      <span class="nt">&lt;/reaction&gt;</span>
    <span class="nt">&lt;/listOfReactions&gt;</span>
  <span class="nt">&lt;/model&gt;</span>
<span class="nt">&lt;/sbml&gt;</span>
</pre></div>

 <p>
 * The final model is a concrete realization of the effective
 * model defined by <code>'main.xml'</code>, with a single compartment and two
 * reactions; the species <code>'S'</code> can either bind with enzyme <code>'E'</code> (from
 * submodel <code>'A'</code>) to form <code>'D'</code> (from submodel <code>'A'</code>), or with enzyme
 * <code>'E'</code> (from submodel <code>'B'</code>) to form <code>'D'</code> (from submodel <code>'B'</code>).
 * In the flattened model above, note how the identifiers of components
 * inside the {@link ModelDefinition} objects <code>'A'</code> and <code>'B'</code> of our file
 * <code>'enzyme_model.xml'</code> have been rewritten as (for example) <code>'A__E'</code>
 * <code>'B__E'</code>, etc.
 <p>
 * <p>
 * <h2>General information about the use of SBML converters</h2>
 <p>
 * The use of all the converters follows a similar approach.  First, one
 * creates a {@link ConversionProperties} object and calls
 * {@link ConversionProperties#addOption(ConversionOption)}
 * on this object with one argument: a text string that identifies the desired
 * converter.  (The text string is specific to each converter; consult the
 * documentation for a given converter to find out how it should be enabled.)
 <p>
 * Next, for some converters, the caller can optionally set some
 * converter-specific properties using additional calls to
 * {@link ConversionProperties#addOption(ConversionOption)}.
 * Many converters provide the ability to
 * configure their behavior to some extent; this is realized through the use
 * of properties that offer different options.  The default property values
 * for each converter can be interrogated using the method
 * {@link SBMLConverter#getDefaultProperties()} on the converter class in question .
 <p>
 * Finally, the caller should invoke the method
 * {@link SBMLDocument#convert(ConversionProperties)}
 * with the {@link ConversionProperties} object as an argument.
 <p>
 * <h3>Example of invoking an SBML converter</h3>
 <p>
 * The following code fragment illustrates an example using
 * {@link SBMLReactionConverter}, which is invoked using the option string
 * <code>'replaceReactions':</code>
 <p>
<pre class='fragment'>
{@link ConversionProperties} props = new {@link ConversionProperties}();
if (props != null) {
  props.addOption('replaceReactions');
} else {
  // Deal with error.
}
</pre>
<p>
 * In the case of {@link SBMLReactionConverter}, there are no options to affect
 * its behavior, so the next step is simply to invoke the converter on
 * an {@link SBMLDocument} object.  Continuing the example code:
 <p>
<pre class='fragment'>
  // Assume that the variable 'document' has been set to an {@link SBMLDocument} object.
  status = document.convert(config);
  if (status != libsbml.LIBSBML_OPERATION_SUCCESS)
  {
    // Handle error somehow.
    System.out.println('Error: conversion failed due to the following:');
    document.printErrors();
  }
</pre>
<p>
 * Here is an example of using a converter that offers an option. The
 * following code invokes {@link SBMLStripPackageConverter} to remove the
 * SBML Level&nbsp;3 <em>Layout</em> package from a model.  It sets the name
 * of the package to be removed by adding a value for the option named
 * <code>'package'</code> defined by that converter:
 <p>
<pre class='fragment'>
{@link ConversionProperties} config = new {@link ConversionProperties}();
if (config != None) {
  config.addOption('stripPackage');
  config.addOption('package', 'layout');
  status = document.convert(config);
  if (status != LIBSBML_OPERATION_SUCCESS) {
    // Handle error somehow.
    System.out.println('Error: unable to strip the {@link Layout} package');
    document.printErrors();
  }
} else {
  // Handle error somehow.
  System.out.println('Error: unable to create {@link ConversionProperties} object');
}
</pre>
<p>
 * <h3>Available SBML converters in libSBML</h3>
 <p>
 * LibSBML provides a number of built-in converters; by convention, their
 * names end in <em>Converter</em>. The following are the built-in converters
 * provided by libSBML 5.18.0:
 <p>
 * <p>
 * <ul>
 * <li> {@link CobraToFbcConverter}
 * <li> {@link CompFlatteningConverter}
 * <li> {@link FbcToCobraConverter}
 * <li> {@link FbcV1ToV2Converter}
 * <li> {@link FbcV2ToV1Converter}
 * <li> RenderLayoutConverter
 * <li> {@link SBMLFunctionDefinitionConverter}
 * <li> {@link SBMLIdConverter}
 * <li> {@link SBMLInferUnitsConverter}
 * <li> {@link SBMLInitialAssignmentConverter}
 * <li> {@link SBMLLevel1Version1Converter}
 * <li> {@link SBMLLevelVersionConverter}
 * <li> {@link SBMLLocalParameterConverter}
 * <li> SBMLRateOfConverter
 * <li> {@link SBMLReactionConverter}
 * <li> {@link SBMLRuleConverter}
 * <li> {@link SBMLStripPackageConverter}
 * <li> {@link SBMLUnitsConverter}
 *
 * </ul>
 */

public class CompFlatteningConverter extends SBMLConverter {
   private long swigCPtr;

   protected CompFlatteningConverter(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.CompFlatteningConverter_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(CompFlatteningConverter obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (CompFlatteningConverter obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_CompFlatteningConverter(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/** * @internal */ public
 static void init() {
    libsbmlJNI.CompFlatteningConverter_init();
  }

  
/**
   * Creates a new {@link CompFlatteningConverter} object.
   */ public
 CompFlatteningConverter() {
    this(libsbmlJNI.new_CompFlatteningConverter__SWIG_0(), true);
  }

  
/**
   * Copy constructor.
   <p>
   * This creates a copy of a {@link CompFlatteningConverter} object.
   <p>
   * @param orig the {@link CompFlatteningConverter} instance to copy.
   */ public
 CompFlatteningConverter(CompFlatteningConverter orig) {
    this(libsbmlJNI.new_CompFlatteningConverter__SWIG_1(CompFlatteningConverter.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link CompFlatteningConverter}.
   <p>
   * @return a (deep) copy of this {@link CompFlatteningConverter}.
   */ public
 SBMLConverter cloneObject() {
    long cPtr = libsbmlJNI.CompFlatteningConverter_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new CompFlatteningConverter(cPtr, true);
  }

  
/**
   * Returns <code>true</code> if this converter matches the given properties.
   <p>
   * Given a {@link ConversionProperties} object <code>props</code>, this method checks that 
   * <code>props</code> possesses an option value to enable the {@link CompFlatteningConverter}.  If
   * it does, this method returns <code>true.</code>
   <p>
   * @param props the properties to match.
   <p>
   * @return <code>true</code> if the properties <code>props</code> would match the necessary
   * properties for {@link CompFlatteningConverter} type of converter, <code>false</code>
   * otherwise.
   */ public
 boolean matchesProperties(ConversionProperties props) {
    return libsbmlJNI.CompFlatteningConverter_matchesProperties(swigCPtr, this, ConversionProperties.getCPtr(props), props);
  }

  
/**
   * Performs the conversion.
   <p>
   * This method causes {@link CompFlatteningConverter} to do the actual conversion
   * work, that is, to convert the {@link SBMLDocument} object set by
   * {@link SBMLConverter#setDocument(SBMLDocument)} and with
   * the configuration options set by {@link SBMLConverter#setProperties(ConversionProperties)}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT}
   * </ul>
   */ public
 int convert() {
    return libsbmlJNI.CompFlatteningConverter_convert(swigCPtr, this);
  }

  
/** * @internal */ public
 int performConversion() {
    return libsbmlJNI.CompFlatteningConverter_performConversion(swigCPtr, this);
  }

  
/**
   * Returns the default properties of this converter.
   <p>
   * A given converter exposes one or more properties that can be adjusted in
   * order to influence the behavior of the converter.  This method returns
   * the <em>default</em> property settings for {@link CompFlatteningConverter}.  It is
   * meant to be called in order to be able to programmatically discover all
   * the settings for the converter object.
   <p>
   * <p>
 * {@link CompFlatteningConverter} is enabled by creating a {@link ConversionProperties}
 * object with the option <em>'flatten</em> comp', and passing this
 * {@link ConversionProperties} object to {@link SBMLDocument#convert(ConversionProperties)}.  The {@link CompFlatteningConverter} converter
 * accepts numerous options influencing its behavior.  The following list
 * briefly summarizes the options:
 * <ul>
 * <li> <em>'flatten comp'</em>: Possible values are <code>'true'</code> or <code>'false'.</code>
 * Setting the option to <code>true</code> (the default) means enable the flattening
 * converter.
 <p>
 * <li> <em>'abortIfUnflattenable'</em>: Possible values are <code>'all'</code>,
 * <code>'requiredOnly'</code> (the default), or <code>'none'.</code>  Controls what happens upon
 * encountering an SBML Level&nbsp;3 package with no flattener
 * implementation.
 <p>
 * <li> <em>'stripUnflattenablePackages'</em>: Possible values are <code>'true'</code> or
 * <code>'false'</code> (the default).  Controls whether the constructs of Level&nbsp;3
 * packages with no flattener implementation are stripped from the output.
 <p>
 * <li> <em>'stripPackages'</em>: The value must be a string representing a
 * comma-separated list of SBML Level&nbsp;3 packages to be stripped before
 * conversion.  (Default value: empty string, meaning, no packages.)
 <p>
 * <li> <em>'basePath'</em>: The value must be a string representing the path where
 * the converter should search for any {@link ExternalModelDefinition} objects.
 * (Default value: '.', meaning, the current directory.)
 <p>
 * <li> <em>'leavePorts'</em>: Possible values are <code>'true'</code> or <code>'false'</code> (the
 * default).  Controls what happens to {@link Port} constructs in the output.
 <p>
 * <li> <em>'listModelDefinitions'</em>: Possible values are <code>'true'</code> or
 * <code>'false'</code> (the default).  Controls what happens to {@link ModelDefinition} and
 * {@link ExternalModelDefinition} objects in the final output.
 <p>
 * <li> <em>'performValidation'</em>: Possible values are <code>'true'</code> (the default)
 * or <code>'false'.</code>  Controls whether whether libSBML validates the model
 * before attempting to flatten it.
 * </ul>
   <p>
   * @return the {@link ConversionProperties} object describing the default properties
   * for this converter.
   <p>
   * @note Previously, {@link CompFlatteningConverter} also offered an 
   * <em>'ignorePackages'</em> option, whose name proved to be confusing.  This option
   * has been deprecated and replaced by the <em>'stripUnflattenablePackages'</em>
   * option.
   */ public
 ConversionProperties getDefaultProperties() {
    return new ConversionProperties(libsbmlJNI.CompFlatteningConverter_getDefaultProperties(swigCPtr, this), true);
  }

}
