/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-comp"><a href="group__comp.html">comp</a></span>
 Base extension class for the package.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 */

public class CompExtension extends SBMLExtension {
   private long swigCPtr;

   protected CompExtension(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.CompExtension_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(CompExtension obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (CompExtension obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_CompExtension(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

	/**
         * @internal
         */
	public SBasePlugin DowncastSBasePlugin(long cPtr, boolean owner)
	{
		if (cPtr == 0) return null;
		
		SBasePlugin sbp = new SBasePlugin(cPtr, false);
		SBase sb = sbp.getParentSBMLObject();
		
				if (sb == null) 
		{
			return new SBasePlugin(cPtr,owner);
		}
		
		switch( sb.getTypeCode() )
		{
			case (int) libsbml.SBML_DOCUMENT:
				return new CompSBMLDocumentPlugin(cPtr,owner);
    
			case (int) libsbml.SBML_MODEL:
			case (int) libsbml.SBML_COMP_MODELDEFINITION:
				return new CompModelPlugin(cPtr, owner);
			case (int) libsbml.SBML_COMPARTMENT:
			case (int) libsbml.SBML_COMPARTMENT_TYPE:
			case (int) libsbml.SBML_CONSTRAINT:
			case (int) libsbml.SBML_EVENT:
			case (int) libsbml.SBML_EVENT_ASSIGNMENT:
			case (int) libsbml.SBML_FUNCTION_DEFINITION:
			case (int) libsbml.SBML_INITIAL_ASSIGNMENT:
			case (int) libsbml.SBML_KINETIC_LAW:
			case (int) libsbml.SBML_LIST_OF:
			case (int) libsbml.SBML_PARAMETER:
			case (int) libsbml.SBML_REACTION:
			case (int) libsbml.SBML_RULE:
			case (int) libsbml.SBML_SPECIES:
			case (int) libsbml.SBML_SPECIES_REFERENCE:
			case (int) libsbml.SBML_SPECIES_TYPE:
			case (int) libsbml.SBML_MODIFIER_SPECIES_REFERENCE:
			case (int) libsbml.SBML_UNIT_DEFINITION:
			case (int) libsbml.SBML_UNIT:
			case (int) libsbml.SBML_ALGEBRAIC_RULE:
			case (int) libsbml.SBML_ASSIGNMENT_RULE:
			case (int) libsbml.SBML_RATE_RULE:
			case (int) libsbml.SBML_SPECIES_CONCENTRATION_RULE:
			case (int) libsbml.SBML_COMPARTMENT_VOLUME_RULE:
			case (int) libsbml.SBML_PARAMETER_RULE:
			case (int) libsbml.SBML_TRIGGER:
			case (int) libsbml.SBML_DELAY:
			case (int) libsbml.SBML_STOICHIOMETRY_MATH:
			case (int) libsbml.SBML_LOCAL_PARAMETER:
			case (int) libsbml.SBML_COMP_SUBMODEL:
			case (int) libsbml.SBML_COMP_SBASEREF:
			case (int) libsbml.SBML_COMP_REPLACEDELEMENT:
			case (int) libsbml.SBML_COMP_REPLACEDBY:
			case (int) libsbml.SBML_COMP_PORT:
			case (int) libsbml.SBML_COMP_EXTERNALMODELDEFINITION:
			case (int) libsbml.SBML_COMP_DELETION:
				return new CompSBasePlugin(cPtr,owner);
			default: 
				return new SBasePlugin(cPtr,owner);		
		}
	}
	
	/**
         * @internal
         */
	public SBase DowncastSBase(long cPtr, boolean owner)
	{
		if (cPtr == 0) return null;
		
		SBase sb = new SBase(cPtr, false);
		switch( sb.getTypeCode() )
		{
			case (int) libsbml.SBML_LIST_OF:
			     String name = sb.getElementName();
		         if(name =="listOfDeletions")
			     {
					return new ListOfDeletions(cPtr, owner);
                 }
		         else if(name =="listOfExternalModelDefinitions")
			     {
		            return new ListOfExternalModelDefinitions(cPtr, owner);
                 }
				 else if(name =="listOfModelDefinitions")
			     {
		            return new ListOfModelDefinitions(cPtr, owner);
                 }
				 else if(name =="listOfPorts")
			     {
		            return new ListOfPorts(cPtr, owner);
                 }
				 else if(name =="listOfReplacedElements")
			     {
		            return new ListOfReplacedElements(cPtr, owner);
                 }
				 else if(name =="listOfSubmodels")
			     {
		            return new ListOfSubmodels(cPtr, owner);
                 }
		         return new ListOf(cPtr, owner);
				
			case (int) libsbml.SBML_COMP_DELETION:
				return new Deletion(cPtr, owner);
				
			case (int) libsbml.SBML_COMP_MODELDEFINITION:
				return new ModelDefinition(cPtr, owner);

			case (int) libsbml.SBML_COMP_EXTERNALMODELDEFINITION:
				return new ExternalModelDefinition(cPtr, owner);
				
			case (int) libsbml.SBML_COMP_PORT:
				return new Port(cPtr, owner);
				
			case (int) libsbml.SBML_COMP_REPLACEDELEMENT:
				return new ReplacedElement(cPtr, owner);
							
			case (int) libsbml.SBML_COMP_REPLACEDBY:
				return new ReplacedBy(cPtr, owner);

			case (int) libsbml.SBML_COMP_SBASEREF:
				return new SBaseRef(cPtr, owner);
				
			case (int) libsbml.SBML_COMP_SUBMODEL:
				return new Submodel(cPtr, owner);
				
			default:
				return new SBase(cPtr, owner);
		}
	}
	

  
/**
   * Returns the nickname of the SBML Level&nbsp;3 package implemented by
   * this libSBML extension.
   <p>
   * @return the package nickname, as a string.
   <p>
   * 
   */ public
 static String getPackageName() {
    return libsbmlJNI.CompExtension_getPackageName();
  }

  
/**
   * Returns the default SBML Level used by this libSBML package extension.
   <p>
   * @return the SBML Level.
   <p>
   * 
   */ public
 static long getDefaultLevel() {
    return libsbmlJNI.CompExtension_getDefaultLevel();
  }

  
/**
   * Returns the default SBML Version used by this libSBML package extension.
   <p>
   * @return the Version within the default SBML Level.
   <p>
   * 
   */ public
 static long getDefaultVersion() {
    return libsbmlJNI.CompExtension_getDefaultVersion();
  }

  
/**
   * Returns the default version of the SBML Level&nbsp;3 package implemented
   * by this libSBML extension.
   <p>
   * @return the default version number of the SBML Level&nbsp;3 package
   * definition.
   <p>
   * 
   */ public
 static long getDefaultPackageVersion() {
    return libsbmlJNI.CompExtension_getDefaultPackageVersion();
  }

  
/**
   * Returns the XML namespace URI of the SBML Level&nbsp;3 package
   * implemented by this libSBML extension.
   <p>
   * @return the XML namespace as a string.
   <p>
   * 
   */ public
 static String getXmlnsL3V1V1() {
    return libsbmlJNI.CompExtension_getXmlnsL3V1V1();
  }

  
/**
   * Creates a new {@link CompExtension} instance.
   */ public
 CompExtension() {
    this(libsbmlJNI.new_CompExtension__SWIG_0(), true);
  }

  
/**
   * Copy constructor.
   <p>
   * @param source the instance to copy.
   */ public
 CompExtension(CompExtension source) {
    this(libsbmlJNI.new_CompExtension__SWIG_1(CompExtension.getCPtr(source), source), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link CompExtension} object.
   <p>
   * @return a (deep) copy of this {@link CompExtension} object.
   */ public
 SBMLExtension cloneObject() {
    long cPtr = libsbmlJNI.CompExtension_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new CompExtension(cPtr, true);
  }

  
/**
   * Returns the name of this package as a short-form label
   * (&quot;<code>comp</code>&quot;).
   <p>
   * @return the name of this package.
   */ public
 String getName() {
    return libsbmlJNI.CompExtension_getName(swigCPtr, this);
  }

  
/**
   * Returns a string representing the SBML XML namespace of this SBML
   * Level&nbsp;3 package.
   <p>
   * The namespace URI constructed by this method corresponds to the
   * combination of the Level and Version of SBML, and the Version of the SBML
   * Level&nbsp;3 package. (At the time of this writing, the only SBML Level
   * that supports packages is Level&nbsp;3, so the value of <code>sbmlLevel</code> must
   * necessarily always be <code>3</code>.)
   <p>
   * @param sbmlLevel the level of SBML.
   * @param sbmlVersion the version of SBML.
   * @param pkgVersion the version of the package.
   <p>
   * @return a string of the package URI, or an empty string if no
   * corresponding URI exists.
   */ public
 String getURI(long sbmlLevel, long sbmlVersion, long pkgVersion) {
    return libsbmlJNI.CompExtension_getURI(swigCPtr, this, sbmlLevel, sbmlVersion, pkgVersion);
  }

  
/**
   * Returns the SBML Level for the given URI of this package.
   <p>
   * @param uri a URI that represents a version of this package.
   <p>
   * @return the SBML Level for the given URI of this package, or <code>0</code> if the
   * given URI is invalid, or for a different package.
   */ public
 long getLevel(String uri) {
    return libsbmlJNI.CompExtension_getLevel(swigCPtr, this, uri);
  }

  
/**
   * Returns the Version within the SBML Level for the given URI of this
   * package.
   <p>
   * @param uri a URI that represents a version of this package.
   <p>
   * @return the SBML Version within the SBML Level for the given URI of this
   * package, or <code>0</code> if the given URI is invalid, or for a different package.
   */ public
 long getVersion(String uri) {
    return libsbmlJNI.CompExtension_getVersion(swigCPtr, this, uri);
  }

  
/**
   * Returns the SBML Level&nbsp;3 package version for the given URI of this
   * package.
   <p>
   * @param uri a URI that represents one of the valid versions of this
   * package.
   <p>
   * @return the version of the SBML Level&nbsp;3 package with the given URI,
   * or <code>0</code> if the given URI is invalid, or for a different package.
   */ public
 long getPackageVersion(String uri) {
    return libsbmlJNI.CompExtension_getPackageVersion(swigCPtr, this, uri);
  }

  
/**
   * Returns a {@link CompPkgNamespaces} object.
   <p>
   * @param uri a URI that represents one of the valid versions of the
   * &ldquo;comp&rdquo; package.
   <p>
   * @return an {@link CompPkgNamespaces} object corresponding to the given <code>uri</code>, or
   * <code>null</code> if the URI is not defined in the Hierarchical Model Composition
   * package.
   */ public
 SBMLNamespaces getSBMLExtensionNamespaces(String uri) {
  return libsbml.DowncastSBMLNamespaces(libsbmlJNI.CompExtension_getSBMLExtensionNamespaces(swigCPtr, this, uri), false);
}

  
/**
   * Takes a type code of the &ldquo;comp&rdquo; package and returns a string
   * describing the code.
   <p>
   * @param typeCode a libSBML type code defined by the libSBML extension
   * implementing support for the SBML Level&nbsp;3 &ldquo;comp&rdquo; package.
   <p>
   * @return a text string representing the type code given by <code>typeCode</code>.
   * If the type code is unrecognized for this implementation of the libSBML
   * &ldquo;comp&rdquo; package, the string returned will be
   * <code>'(Unknown SBML Comp Type)'</code>.
   */ public
 String getStringFromTypeCode(int typeCode) {
    return libsbmlJNI.CompExtension_getStringFromTypeCode(swigCPtr, this, typeCode);
  }

  
/** * @internal */ public
 static void init() {
    libsbmlJNI.CompExtension_init();
  }

  
/** * @internal */ public
 SWIGTYPE_p_packageErrorTableEntry getErrorTable(long index) {
    return new SWIGTYPE_p_packageErrorTableEntry(libsbmlJNI.CompExtension_getErrorTable(swigCPtr, this, index), true);
  }

  
/** * @internal */ public
 long getErrorTableIndex(long errorId) {
    return libsbmlJNI.CompExtension_getErrorTableIndex(swigCPtr, this, errorId);
  }

  
/** * @internal */ public
 long getErrorIdOffset() {
    return libsbmlJNI.CompExtension_getErrorIdOffset(swigCPtr, this);
  }

}
