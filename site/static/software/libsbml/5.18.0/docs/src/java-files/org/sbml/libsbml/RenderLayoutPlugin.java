/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 LibSBML implementation for the extension to the
 * {@link Layout} class by the Render extension.
 <p>
 * The Render package extends the {@link Layout} object from the {@link Layout} package 
 * with the addition of an optional {@link ListOfLocalRenderInformation} object.
 */

public class RenderLayoutPlugin extends SBasePlugin {
   private long swigCPtr;

   protected RenderLayoutPlugin(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.RenderLayoutPlugin_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(RenderLayoutPlugin obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (RenderLayoutPlugin obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_RenderLayoutPlugin(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Constructor
   */ public
 RenderLayoutPlugin(String uri, String prefix, RenderPkgNamespaces groupsns) {
    this(libsbmlJNI.new_RenderLayoutPlugin__SWIG_0(uri, prefix, RenderPkgNamespaces.getCPtr(groupsns), groupsns), true);
  }

  
/**
   * Copy constructor. Creates a copy of this {@link SBase} object.
   */ public
 RenderLayoutPlugin(RenderLayoutPlugin orig) {
    this(libsbmlJNI.new_RenderLayoutPlugin__SWIG_1(RenderLayoutPlugin.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link RenderLayoutPlugin}  object.
   <p>
   * @return a (deep) copy of this {@link RenderLayoutPlugin} object
   */ public
 SBasePlugin cloneObject() {
    long cPtr = libsbmlJNI.RenderLayoutPlugin_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderLayoutPlugin(cPtr, true);
  }

  
/**
   * Returns a pointer to the list object that contains local render information.
   */ public
 ListOfLocalRenderInformation getListOfLocalRenderInformation() {
    long cPtr = libsbmlJNI.RenderLayoutPlugin_getListOfLocalRenderInformation__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfLocalRenderInformation(cPtr, false);
  }

  
/**
   * Returns the number of local render information objects.
   */ public
 long getNumLocalRenderInformationObjects() {
    return libsbmlJNI.RenderLayoutPlugin_getNumLocalRenderInformationObjects(swigCPtr, this);
  }

  
/**
   * Returns a pointer to the local render information object with the given
   * index.
   * If the index is invalid, <code>null</code> is returned.
   */ public
 LocalRenderInformation getRenderInformation(long index) {
    long cPtr = libsbmlJNI.RenderLayoutPlugin_getRenderInformation__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new LocalRenderInformation(cPtr, false);
  }

  
/**
   * Returns a pointer to the local render information object with the given
   * id.
   * If no object with the given <code>id</code> exists, <code>null</code> is returned.
   */ public
 LocalRenderInformation getRenderInformation(String id) {
    long cPtr = libsbmlJNI.RenderLayoutPlugin_getRenderInformation__SWIG_2(swigCPtr, this, id);
    return (cPtr == 0) ? null : new LocalRenderInformation(cPtr, false);
  }

  
/**
   * Adds a copy of the given local render information object to the list of
   * local render information objects.
   * If an object with the same id exists, it is replaced.
   */ public
 void addLocalRenderInformation(LocalRenderInformation pLRI) {
    libsbmlJNI.RenderLayoutPlugin_addLocalRenderInformation(swigCPtr, this, LocalRenderInformation.getCPtr(pLRI), pLRI);
  }

  
/**
   * Creates a new local render information object and adds it to the list.
   * The created object does not have a id and it is the responsibility of
   * the calling code to ensure that it gets one.
   * For constraints on the id, please consult the render information document.
   */ public
 LocalRenderInformation createLocalRenderInformation() {
    long cPtr = libsbmlJNI.RenderLayoutPlugin_createLocalRenderInformation(swigCPtr, this);
    return (cPtr == 0) ? null : new LocalRenderInformation(cPtr, false);
  }

  
/**
   * Removed the render information with the given index from the list.
   * The removed object is returned. It is the responsibility of the calling
   * code to delete the object.
   * If the index is not valid, <code>null</code> is returned.
   */ public
 LocalRenderInformation removeLocalRenderInformation(long index) {
    long cPtr = libsbmlJNI.RenderLayoutPlugin_removeLocalRenderInformation__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new LocalRenderInformation(cPtr, false);
  }

  
/**
   * Removed the render information with the given <code>id</code> from the list.
   * The removed object is returned. It is the responsibility of the calling
   * code to delete the object.
   * If an object with the given <code>id</code> does not exist, <code>null</code> is returned.
   */ public
 LocalRenderInformation removeLocalRenderInformation(String id) {
    long cPtr = libsbmlJNI.RenderLayoutPlugin_removeLocalRenderInformation__SWIG_1(swigCPtr, this, id);
    return (cPtr == 0) ? null : new LocalRenderInformation(cPtr, false);
  }

  
/** * @internal */ public
 SBase createObject(XMLInputStream stream) {
  return libsbml.DowncastSBase(libsbmlJNI.RenderLayoutPlugin_createObject(swigCPtr, this, XMLInputStream.getCPtr(stream), stream), false);
}

  
/** * @internal */ public
 void writeAttributes(XMLOutputStream stream) {
    libsbmlJNI.RenderLayoutPlugin_writeAttributes(swigCPtr, this, XMLOutputStream.getCPtr(stream), stream);
  }

  
/** * @internal */ public
 boolean hasRequiredElements() {
    return libsbmlJNI.RenderLayoutPlugin_hasRequiredElements(swigCPtr, this);
  }

  
/** * @internal */ public
 void connectToParent(SBase sbase) {
    libsbmlJNI.RenderLayoutPlugin_connectToParent(swigCPtr, this, SBase.getCPtr(sbase), sbase);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.RenderLayoutPlugin_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

}
