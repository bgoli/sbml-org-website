/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-qual"><a href="group__qual.html">qual</a></span>

 Base extension class for the package.
 */

public class QualExtension extends SBMLExtension {
   private long swigCPtr;

   protected QualExtension(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.QualExtension_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(QualExtension obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (QualExtension obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_QualExtension(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

	/**
         * @internal
         */
	public SBasePlugin DowncastSBasePlugin(long cPtr, boolean owner)
	{
		if (cPtr == 0) return null;
		
		SBasePlugin sbp = new SBasePlugin(cPtr, false);
		SBase sb = sbp.getParentSBMLObject();

    if (sb instanceof Model)
    {
      return new QualModelPlugin(cPtr, owner);
    }
    
		switch( sb.getTypeCode() )
		{
			case (int) libsbml.SBML_MODEL:
				return new QualModelPlugin(cPtr,owner);
			default:
				return new SBasePlugin(cPtr,owner);
		}
	}
	
	/**
         * @internal
         */
	public SBase DowncastSBase(long cPtr, boolean owner)
	{
		if (cPtr == 0) return null;
		
		SBase sb = new SBase(cPtr, false);
		switch( sb.getTypeCode() )
		{
			case (int) libsbml.SBML_LIST_OF:
				String name = sb.getElementName();
		       if(name =="listOfFunctionTerms")
			     {
		           return new ListOfFunctionTerms(cPtr, owner);
           }
		       else if(name =="listOfInputs")
			     {
		           return new ListOfInputs(cPtr, owner);
           }
		       else if(name =="listOfOutputs")
			     {
		           return new ListOfOutputs(cPtr, owner);
           }
		       else if(name =="listOfQualitativeSpecies")
			     {
		           return new ListOfQualitativeSpecies(cPtr, owner);
           }
		       else if(name =="listOfTransitions")
			     {
		           return new ListOfTransitions(cPtr, owner);
           }
		       
		       return new ListOf(cPtr, owner);
				
			case (int) libsbml.SBML_QUAL_QUALITATIVE_SPECIES:
				return new QualitativeSpecies(cPtr, owner);
				
			case (int) libsbml.SBML_QUAL_TRANSITION:
				return new Transition(cPtr, owner);
				
			case (int) libsbml.SBML_QUAL_INPUT:
				return new Input(cPtr, owner);
				
			case (int) libsbml.SBML_QUAL_OUTPUT:
				return new Output(cPtr, owner);
				
			case (int) libsbml.SBML_QUAL_FUNCTION_TERM:
				return new FunctionTerm(cPtr, owner);
				
			case (int) libsbml.SBML_QUAL_DEFAULT_TERM:
				return new DefaultTerm(cPtr, owner);
				
			default:
				return new SBase(cPtr, owner);
		}
	}
	
	
  
/**
   * Returns the nickname of the SBML Level&nbsp;3 package implemented by
   * this libSBML extension.
   <p>
   * @return the package nickname, as a string.
   <p>
   * 
   */ public
 static String getPackageName() {
    return libsbmlJNI.QualExtension_getPackageName();
  }

  
/**
   * Returns the default SBML Level used by this libSBML package extension.
   <p>
   * @return the SBML Level.
   <p>
   * 
   */ public
 static long getDefaultLevel() {
    return libsbmlJNI.QualExtension_getDefaultLevel();
  }

  
/**
   * Returns the default SBML Version used by this libSBML package extension.
   <p>
   * @return the Version within the default SBML Level.
   <p>
   * 
   */ public
 static long getDefaultVersion() {
    return libsbmlJNI.QualExtension_getDefaultVersion();
  }

  
/**
   * Returns the default version of the SBML Level&nbsp;3 package implemented
   * by this libSBML extension.
   <p>
   * @return the default version number of the SBML Level&nbsp;3 package
   * definition.
   <p>
   * 
   */ public
 static long getDefaultPackageVersion() {
    return libsbmlJNI.QualExtension_getDefaultPackageVersion();
  }

  
/**
   * Returns the XML namespace URI of the SBML Level&nbsp;3 package
   * implemented by this libSBML extension.
   <p>
   * @return the XML namespace as a string.
   <p>
   * 
   */ public
 static String getXmlnsL3V1V1() {
    return libsbmlJNI.QualExtension_getXmlnsL3V1V1();
  }

  
/**
   * Creates a new {@link QualExtension} instance.
   */ public
 QualExtension() {
    this(libsbmlJNI.new_QualExtension__SWIG_0(), true);
  }

  
/**
   * Copy constructor.
   <p>
   * @param orig the instance to copy.
   */ public
 QualExtension(QualExtension orig) {
    this(libsbmlJNI.new_QualExtension__SWIG_1(QualExtension.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link QualExtension} object.
   <p>
   * @return a (deep) copy of this {@link SBase} object.
   */ public
 QualExtension cloneObject() {
    long cPtr = libsbmlJNI.QualExtension_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new QualExtension(cPtr, true);
  }

  
/**
   * Returns the name of this package ('qual')
   <p>
   * @return a string representing the name of this package ('qual').
   */ public
 String getName() {
    return libsbmlJNI.QualExtension_getName(swigCPtr, this);
  }

  
/**
   * Returns a string representing the SBML XML namespace of this SBML
   * Level&nbsp;3 package.
   <p>
   * The namespace URI constructed by this method corresponds to the
   * combination of the Level and Version of SBML, and the Version of the SBML
   * Level&nbsp;3 package. (At the time of this writing, the only SBML Level
   * that supports packages is Level&nbsp;3, so the value of <code>sbmlLevel</code> must
   * necessarily always be <code>3</code>.)
   <p>
   * @param sbmlLevel the level of SBML.
   * @param sbmlVersion the version of SBML.
   * @param pkgVersion the version of the package.
   <p>
   * @return a string of the package URI, or an empty string if no
   * corresponding URI exists.
   */ public
 String getURI(long sbmlLevel, long sbmlVersion, long pkgVersion) {
    return libsbmlJNI.QualExtension_getURI(swigCPtr, this, sbmlLevel, sbmlVersion, pkgVersion);
  }

  
/**
   * Returns the SBML Level for the given URI of this package.
   <p>
   * @param uri a URI that represents a version of this package.
   <p>
   * @return the SBML Level for the given URI of this package, or <code>0</code> if the
   * given URI is invalid, or for a different package.
   */ public
 long getLevel(String uri) {
    return libsbmlJNI.QualExtension_getLevel(swigCPtr, this, uri);
  }

  
/**
   * Returns the Version within the SBML Level for the given URI of this
   * package.
   <p>
   * @param uri a URI that represents a version of this package.
   <p>
   * @return the SBML Version within the SBML Level for the given URI of this
   * package, or <code>0</code> if the given URI is invalid, or for a different package.
   */ public
 long getVersion(String uri) {
    return libsbmlJNI.QualExtension_getVersion(swigCPtr, this, uri);
  }

  
/**
   * Returns the SBML Level&nbsp;3 package version for the given URI of this
   * package.
   <p>
   * @param uri a URI that represents one of the valid versions of this
   * package.
   <p>
   * @return the version of the SBML Level&nbsp;3 package with the given URI,
   * or <code>0</code> if the given URI is invalid, or for a different package.
   */ public
 long getPackageVersion(String uri) {
    return libsbmlJNI.QualExtension_getPackageVersion(swigCPtr, this, uri);
  }

  
/**
   * Returns a {@link QualPkgNamespaces} object.
   <p>
   * @param uri a URI that represents one of the valid versions of the
   * &ldquo;qual&rdquo; package.
   <p>
   * @return a {@link QualPkgNamespaces} object corresponding to the given <code>uri</code>, or
   * <code>null</code> if the URI is not defined in the Qual
   * package.
   */ public
 SBMLNamespaces getSBMLExtensionNamespaces(String uri) {
  return libsbml.DowncastSBMLNamespaces(libsbmlJNI.QualExtension_getSBMLExtensionNamespaces(swigCPtr, this, uri), false);
}

  
/**
   * Takes a type code of the &ldquo;qual&rdquo; package and returns a string
   * describing the code.
   <p>
   * @param typeCode a libSBML type code defined by the libSBML extension
   * implementing support for the SBML Level&nbsp;3 &ldquo;qual&rdquo; package.
   <p>
   * @return a text string representing the type code given by <code>typeCode</code>.
   * If the type code is unrecognized for this implementation of the libSBML
   * &ldquo;qual&rdquo; package, the string returned will be
   * <code>'(Unknown SBML Qual Type)'</code>.
   */ public
 String getStringFromTypeCode(int typeCode) {
    return libsbmlJNI.QualExtension_getStringFromTypeCode(swigCPtr, this, typeCode);
  }

  
/** * @internal */ public
 static void init() {
    libsbmlJNI.QualExtension_init();
  }

  
/** * @internal */ public
 SWIGTYPE_p_packageErrorTableEntry getErrorTable(long index) {
    return new SWIGTYPE_p_packageErrorTableEntry(libsbmlJNI.QualExtension_getErrorTable(swigCPtr, this, index), true);
  }

  
/** * @internal */ public
 long getErrorTableIndex(long errorId) {
    return libsbmlJNI.QualExtension_getErrorTableIndex(swigCPtr, this, errorId);
  }

  
/** * @internal */ public
 long getErrorIdOffset() {
    return libsbmlJNI.QualExtension_getErrorIdOffset(swigCPtr, this);
  }

}
