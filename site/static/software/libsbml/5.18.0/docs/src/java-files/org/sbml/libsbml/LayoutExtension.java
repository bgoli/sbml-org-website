/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-layout"><a href="group__layout.html">layout</a></span>

 Base extension class for the package.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 */

public class LayoutExtension extends SBMLExtension {
   private long swigCPtr;

   protected LayoutExtension(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.LayoutExtension_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(LayoutExtension obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (LayoutExtension obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_LayoutExtension(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

	/**
         * @internal
         */
	public SBasePlugin DowncastSBasePlugin(long cPtr, boolean owner)
	{
		if (cPtr == 0) return null;
		
		SBasePlugin sbp = new SBasePlugin(cPtr,false);
		SBase sb = sbp.getParentSBMLObject();
		
		if (sb == null) 
		{
			return new SBasePlugin(cPtr,owner);
		}
    
    
    if (sb instanceof Model)
    {
      return new LayoutModelPlugin(cPtr, owner);
    }
		
		switch( sb.getTypeCode() )
		{
			case libsbmlConstants.SBML_MODEL:
				return new LayoutModelPlugin(cPtr,owner);
			case libsbmlConstants.SBML_SPECIES_REFERENCE:
			case libsbmlConstants.SBML_MODIFIER_SPECIES_REFERENCE:
				return new LayoutSpeciesReferencePlugin(cPtr,owner);
			default: 
				return new SBasePlugin(cPtr,owner);
		}
	}
	
	/**
	 * SBMLExtension derived classes must override this method
	 *
	 * @return the most specific Java object possible for the given SBase
	 *
	 * @internal
	 */
	public SBase DowncastSBase(long cPtr, boolean owner)
	{
		if (cPtr == 0) return null;
		
		SBase sb = new SBase(cPtr,false);
		
		switch( sb.getTypeCode() )
		{
			case libsbmlConstants.SBML_LIST_OF:
				String name = sb.getElementName();
				if(name.equals("listOfCompartmentGlyphs")){
					return new ListOfCompartmentGlyphs(cPtr, owner);
				}
				else if(name.equals("listOfAdditionalGraphicalObjects")){
					return new ListOfGraphicalObjects(cPtr, owner);
				}
				else if(name.equals("listOfLayouts")){
					return new ListOfLayouts(cPtr, owner);
				}
				else if(name.equals("listOfCurveSegments")){
					return new ListOfLineSegments(cPtr, owner);
				}
				else if(name.equals("listOfSpeciesGlyphs")){
					return new ListOfSpeciesGlyphs(cPtr, owner);
				}
				else if(name.equals("listOfSpeciesReferenceGlyphs")){
					return new ListOfSpeciesReferenceGlyphs(cPtr, owner);
				}
				else if(name.equals("listOfReactionGlyphs")){
					return new ListOfReactionGlyphs(cPtr, owner);
				}
				else if(name.equals("listOfTextGlyphs")){
					return new ListOfTextGlyphs(cPtr, owner);
				}
				else if(name.equals("listOfReferenceGlyphs")){
					return new ListOfReferenceGlyphs(cPtr, owner);
				}
				return new ListOf(cPtr, owner);
				
			case libsbmlConstants.SBML_LAYOUT_BOUNDINGBOX:
				return new BoundingBox(cPtr, owner);
				
			case libsbmlConstants.SBML_LAYOUT_COMPARTMENTGLYPH:
				return new CompartmentGlyph(cPtr, owner);
				
			case libsbmlConstants.SBML_LAYOUT_CUBICBEZIER:
				return new CubicBezier(cPtr, owner);
				
			case libsbmlConstants.SBML_LAYOUT_CURVE:
				return new Curve(cPtr, owner);
				
			case libsbmlConstants.SBML_LAYOUT_DIMENSIONS:
				return new Dimensions(cPtr, owner);
				
			case libsbmlConstants.SBML_LAYOUT_GRAPHICALOBJECT:
				return new GraphicalObject(cPtr, owner);
				
			case libsbmlConstants.SBML_LAYOUT_LAYOUT:
				return new Layout(cPtr, owner);
				
			case libsbmlConstants.SBML_LAYOUT_LINESEGMENT:
				return new LineSegment(cPtr, owner);
				
			case libsbmlConstants.SBML_LAYOUT_POINT:
				return new Point(cPtr, owner);
				
			case libsbmlConstants.SBML_LAYOUT_REACTIONGLYPH:
				return new ReactionGlyph(cPtr, owner);
				
			case libsbmlConstants.SBML_LAYOUT_SPECIESGLYPH:
				return new SpeciesGlyph(cPtr, owner);
				
			case libsbmlConstants.SBML_LAYOUT_SPECIESREFERENCEGLYPH:
				return new SpeciesReferenceGlyph(cPtr, owner);
				
			case libsbmlConstants.SBML_LAYOUT_TEXTGLYPH:
				return new TextGlyph(cPtr, owner);
			
			case (int) libsbml.SBML_LAYOUT_REFERENCEGLYPH:
				return new ReferenceGlyph(cPtr, owner);
			
			case (int) libsbml.SBML_LAYOUT_GENERALGLYPH:
				return new GeneralGlyph(cPtr, owner);
				
			default:
				return new SBase(cPtr, owner);
		}
	}
	
  
/**
   * Returns the nickname of the SBML Level&nbsp;3 package implemented by
   * this libSBML extension.
   <p>
   * @return the package nickname, as a string.
   <p>
   * 
   */ public
 static String getPackageName() {
    return libsbmlJNI.LayoutExtension_getPackageName();
  }

  
/**
   * Returns the default SBML Level used by this libSBML package extension.
   <p>
   * @return the SBML Level.
   <p>
   * 
   */ public
 static long getDefaultLevel() {
    return libsbmlJNI.LayoutExtension_getDefaultLevel();
  }

  
/**
   * Returns the default SBML Version used by this libSBML package extension.
   <p>
   * @return the Version within the default SBML Level.
   <p>
   * 
   */ public
 static long getDefaultVersion() {
    return libsbmlJNI.LayoutExtension_getDefaultVersion();
  }

  
/**
   * Returns the default version of the SBML Level&nbsp;3 package implemented
   * by this libSBML extension.
   <p>
   * @return the default version number of the SBML Level&nbsp;3 package
   * definition.
   <p>
   * 
   */ public
 static long getDefaultPackageVersion() {
    return libsbmlJNI.LayoutExtension_getDefaultPackageVersion();
  }

  
/**
   * Returns the XML namespace URI of the SBML Level&nbsp;3 package
   * implemented by this libSBML extension.
   <p>
   * @return the XML namespace as a string.
   <p>
   * 
   */ public
 static String getXmlnsL3V1V1() {
    return libsbmlJNI.LayoutExtension_getXmlnsL3V1V1();
  }

  
/**
   * Returns the XML namespace URI of the SBML Level&nbsp;2 version
   * of the package implemented by this libSBML Extension.
   <p>
   * Unique among the SBML Level&nbsp;3 packages, the {@link Layout} package existed
   * and was in widespread use prior to the introduction of SBML
   * Level&nbsp;3.  The {@link Layout} package was used as model annotations in SBML
   * Level&nbsp;2.  This method returns the SBML annotation XML namespace
   * used for Level&nbsp;2.
   <p>
   * @return the XML namespace as a string.
   <p>
   * 
   */ public
 static String getXmlnsL2() {
    return libsbmlJNI.LayoutExtension_getXmlnsL2();
  }

  
/**
   * Returns the XML namespace URI of any additional XML namespaces needed
   * or used by this SBML Level&nbsp;3 package.
   <p>
   * @return the XML namespace as a string.
   <p>
   * 
   */ public
 static String getXmlnsXSI() {
    return libsbmlJNI.LayoutExtension_getXmlnsXSI();
  }

  
/**
   * Creates a new {@link LayoutExtension} instance.
   */ public
 LayoutExtension() {
    this(libsbmlJNI.new_LayoutExtension__SWIG_0(), true);
  }

  
/**
   * Copy constructor.
   <p>
   * @param orig the instance to copy.
   */ public
 LayoutExtension(LayoutExtension orig) {
    this(libsbmlJNI.new_LayoutExtension__SWIG_1(LayoutExtension.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link LayoutExtension} object.
   <p>
   * @return a (deep) copy of this {@link LayoutExtension} object.
   */ public
 LayoutExtension cloneObject() {
    long cPtr = libsbmlJNI.LayoutExtension_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new LayoutExtension(cPtr, true);
  }

  
/**
   * Returns the name of this package ('layout')
   <p>
   * @return the name of this package ('layout').
   */ public
 String getName() {
    return libsbmlJNI.LayoutExtension_getName(swigCPtr, this);
  }

  
/**
   * Returns a string representing the SBML XML namespace of this SBML
   * Level&nbsp;3 package.
   <p>
   * The namespace URI constructed by this method corresponds to the
   * combination of the Level and Version of SBML, and the Version of the SBML
   * Level&nbsp;3 package. (At the time of this writing, the only SBML Level
   * that supports packages is Level&nbsp;3, so the value of <code>sbmlLevel</code> must
   * necessarily always be <code>3</code>.)
   <p>
   * @param sbmlLevel the level of SBML.
   * @param sbmlVersion the version of SBML.
   * @param pkgVersion the version of the package.
   <p>
   * @return a string of the package URI, or an empty string if no
   * corresponding URI exists.
   */ public
 String getURI(long sbmlLevel, long sbmlVersion, long pkgVersion) {
    return libsbmlJNI.LayoutExtension_getURI(swigCPtr, this, sbmlLevel, sbmlVersion, pkgVersion);
  }

  
/**
   * Returns the SBML Level for the given URI of this package.
   <p>
   * @param uri a URI that represents a version of this package.
   <p>
   * @return the SBML Level for the given URI of this package, or <code>0</code> if the
   * given URI is invalid, or for a different package.
   */ public
 long getLevel(String uri) {
    return libsbmlJNI.LayoutExtension_getLevel(swigCPtr, this, uri);
  }

  
/**
   * Returns the Version within the SBML Level for the given URI of this
   * package.
   <p>
   * @param uri a URI that represents a version of this package.
   <p>
   * @return the SBML Version within the SBML Level for the given URI of this
   * package, or <code>0</code> if the given URI is invalid, or for a different package.
   */ public
 long getVersion(String uri) {
    return libsbmlJNI.LayoutExtension_getVersion(swigCPtr, this, uri);
  }

  
/**
   * Returns the SBML Level&nbsp;3 package version for the given URI of this
   * package.
   <p>
   * @param uri a URI that represents one of the valid versions of this
   * package.
   <p>
   * @return the version of the SBML Level&nbsp;3 package with the given URI,
   * or <code>0</code> if the given URI is invalid, or for a different package.
   */ public
 long getPackageVersion(String uri) {
    return libsbmlJNI.LayoutExtension_getPackageVersion(swigCPtr, this, uri);
  }

  
/**
   * Takes a type code of the &ldquo;layout&rdquo; package and returns a string
   * describing the code.
   <p>
   * @param typeCode a libSBML type code defined by the libSBML extension.
   * implementing support for the SBML Level&nbsp;3 &ldquo;layout&rdquo; package.
   <p>
   * @return a text string representing the type code given by <code>typeCode</code>.
   * If the type code is unrecognized for this implementation of the libSBML
   * &ldquo;layout&rdquo; package, the string returned will be
   * <code>'(Unknown SBML {@link Layout} Type)'</code>.
   */ public
 String getStringFromTypeCode(int typeCode) {
    return libsbmlJNI.LayoutExtension_getStringFromTypeCode(swigCPtr, this, typeCode);
  }

  
/**
   * Returns a {@link LayoutPkgNamespaces} object.
   <p>
   * @param uri a URI that represents one of the valid versions of the
   * &ldquo;layout&rdquo; package.
   <p>
   * @return a {@link LayoutPkgNamespaces} object corresponding to the given <code>uri</code>,
   * or <code>null</code> if the URI is not defined in the {@link Layout} package.
   */ public
 SBMLNamespaces getSBMLExtensionNamespaces(String uri) {
  return libsbml.DowncastSBMLNamespaces(libsbmlJNI.LayoutExtension_getSBMLExtensionNamespaces(swigCPtr, this, uri), false);
}

  
/** * @internal */ public
 static void init() {
    libsbmlJNI.LayoutExtension_init();
  }

  
/**
   * Removes the L2 Namespace from a document. 
   <p>
   * This method is overridden here since {@link Layout} does serialize
   * to an L2 annotation.
   */ public
 void removeL2Namespaces(XMLNamespaces xmlns) {
    libsbmlJNI.LayoutExtension_removeL2Namespaces(swigCPtr, this, XMLNamespaces.getCPtr(xmlns), xmlns);
  }

  
/**
   * adds all L2 Extension namespaces to the namespace list. 
   <p>
   * This method is overridden here since {@link Layout} does serialize
   * to an L2 annotation.
   */ public
 void addL2Namespaces(XMLNamespaces xmlns) {
    libsbmlJNI.LayoutExtension_addL2Namespaces(swigCPtr, this, XMLNamespaces.getCPtr(xmlns), xmlns);
  }

  
/**
   * Adds the L2 Namespace to the document and enables the extension.
   <p>
   * This method is overridden here since {@link Layout} does serialize
   * to an L2 annotation.
   */ public
 void enableL2NamespaceForDocument(SBMLDocument doc) {
    libsbmlJNI.LayoutExtension_enableL2NamespaceForDocument(swigCPtr, this, SBMLDocument.getCPtr(doc), doc);
  }

  
/**
   * Determines whether this extension is being used by the given {@link SBMLDocument}
   <p>
   * The implementation returns true if the model object contains one 
   * or more layouts.
   <p>
   * @param doc the sbml document to test.
   <p>
   * @return a boolean indicating whether the extension is actually being used
   *         by the document. 
   */ public
 boolean isInUse(SBMLDocument doc) {
    return libsbmlJNI.LayoutExtension_isInUse(swigCPtr, this, SBMLDocument.getCPtr(doc), doc);
  }

  
/** * @internal */ public
 SWIGTYPE_p_packageErrorTableEntry getErrorTable(long index) {
    return new SWIGTYPE_p_packageErrorTableEntry(libsbmlJNI.LayoutExtension_getErrorTable(swigCPtr, this, index), true);
  }

  
/** * @internal */ public
 long getErrorTableIndex(long errorId) {
    return libsbmlJNI.LayoutExtension_getErrorTableIndex(swigCPtr, this, errorId);
  }

  
/** * @internal */ public
 long getErrorIdOffset() {
    return libsbmlJNI.LayoutExtension_getErrorIdOffset(swigCPtr, this);
  }

}
