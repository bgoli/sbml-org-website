/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 Representation of images.
 <p>
 * The image class represents a bitmap image representation.  It is derived
 * from {@link Transformation2D} and inherits all its attributes.
 <p>
 * There is an attribute that can be used to specify a file URL where that
 * specifies where the image data can be found. If the URL is a relative
 * path, it is considered to be relative to the document that contains the
 * render extension info.  The path should be the location of a JPEG or PNG
 * image, other image formats are currently not supported by the SBML
 * Level&nbsp;3 Render package.
 <p>
 * Additionally it provides an id attribute as well as attributes that
 * determine the dimensions and the position of the image relative to its
 * viewport.
 */

public class Image extends Transformation2D {
   private long swigCPtr;

   protected Image(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.Image_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(Image obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (Image obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_Image(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link Image} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Image}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Image}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Image}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Image(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Image__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link Image} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Image}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Image}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Image}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Image(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Image__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link Image} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Image}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Image}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Image}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Image(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Image__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link Image} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Image}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Image}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Image}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Image() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Image__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link Image} using the given {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param renderns the {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Image(RenderPkgNamespaces renderns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Image__SWIG_4(RenderPkgNamespaces.getCPtr(renderns), renderns), true);
  }

  
/**
   * Creates a new {@link Image} object from the given {@link XMLNode} object.
   * The {@link XMLNode} object has to contain a valid XML representation of a 
   * {@link Image} object as defined in the render extension specification.
   * This method is normally called when render information is read from a file and 
   * should normally not have to be called explicitly.
   <p>
   * @param node the {@link XMLNode} object reference that describes the {@link Image}
   * object to be instantiated.
   <p>
   * @param l2version an integer indicating the version of SBML Level&nbsp;2
   */ public
 Image(XMLNode node, long l2version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Image__SWIG_5(XMLNode.getCPtr(node), node, l2version), true);
  }

  
/**
   * Creates a new {@link Image} object from the given {@link XMLNode} object.
   * The {@link XMLNode} object has to contain a valid XML representation of a 
   * {@link Image} object as defined in the render extension specification.
   * This method is normally called when render information is read from a file and 
   * should normally not have to be called explicitly.
   <p>
   * @param node the {@link XMLNode} object reference that describes the {@link Image}
   * object to be instantiated.
   <p>
   * @param l2version an integer indicating the version of SBML Level&nbsp;2
   */ public
 Image(XMLNode node) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Image__SWIG_6(XMLNode.getCPtr(node), node), true);
  }

  
/**
   * Instantiates an {@link Image} object with the given <code>id</code>.
   * The image reference is unset, the position and the dimensions
   * values of the image are set to 0.
   <p>
   * For the image to be valid, the reference has to be set and it has to 
   * have dimensions different from and larger than 0.
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 Image(RenderPkgNamespaces renderns, String id) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Image__SWIG_7(RenderPkgNamespaces.getCPtr(renderns), renderns, id), true);
  }

  
/**
   * Copy constructor for {@link Image}.
   <p>
   * @param orig the {@link Image} instance to copy.
   */ public
 Image(Image orig) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Image__SWIG_8(Image.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link Image} object.
   <p>
   * @return a (deep) copy of this {@link Image} object.
   */ public
 Image cloneObject() {
    long cPtr = libsbmlJNI.Image_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new Image(cPtr, true);
  }

  
/**
   * Returns the value of the 'id' attribute of this {@link Image}.
   <p>
   * @return the value of the 'id' attribute of this {@link Image} as a string.
   */ public
 String getId() {
    return libsbmlJNI.Image_getId(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'href' attribute of this {@link Image}.
   <p>
   * @return the value of the 'href' attribute of this {@link Image} as a string.
   */ public
 String getHref() {
    return libsbmlJNI.Image_getHref(swigCPtr, this);
  }

  
/**
   * Returns the image reference URL string.
   <p>
   * @return The path to the image data as a string.
   */ public
 String getImageReference() {
    return libsbmlJNI.Image_getImageReference(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Image}'s 'id' attribute is set.
   <p>
   * @return <code>true</code> if this {@link Image}'s 'id' attribute has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetId() {
    return libsbmlJNI.Image_isSetId(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Image}'s 'href' attribute is set.
   <p>
   * @return <code>true</code> if this {@link Image}'s 'href' attribute has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetHref() {
    return libsbmlJNI.Image_isSetHref(swigCPtr, this);
  }

  
/**
   * Returns <code>true</code> if the image reference has been set.
   * The image reference is considered set if the string does not
   * only contain whitespace characters.
   <p>
   * @return <code>true</code> if the image reference has been set.
   */ public
 boolean isSetImageReference() {
    return libsbmlJNI.Image_isSetImageReference(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'id' attribute of this {@link Image}.
   <p>
   * @param id String& value of the 'id' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * Calling this function with <code>id</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetId().
   */ public
 int setId(String id) {
    return libsbmlJNI.Image_setId(swigCPtr, this, id);
  }

  
/**
   * Sets the value of the 'href' attribute of this {@link Image}.
   <p>
   * @param href String& value of the 'href' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * Calling this function with <code>href</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetHref().
   */ public
 int setHref(String href) {
    return libsbmlJNI.Image_setHref(swigCPtr, this, href);
  }

  
/**
   * Sets the reference to the image location.
   * Relative paths are relative to the document that contains the render information.
   * The path should be the location to a JPEG or PNG bitmap image; other formats are
   * currently not supported.
   <p>
   * @param ref A URL string that specifies where the image is located on the disk.
   */ public
 int setImageReference(String ref) {
    return libsbmlJNI.Image_setImageReference(swigCPtr, this, ref);
  }

  
/**
   * Unsets the value of the 'id' attribute of this {@link Image}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetId() {
    return libsbmlJNI.Image_unsetId(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'href' attribute of this {@link Image}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetHref() {
    return libsbmlJNI.Image_unsetHref(swigCPtr, this);
  }

  
/**
   * Unsets the reference to the image location.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetImageReference() {
    return libsbmlJNI.Image_unsetImageReference(swigCPtr, this);
  }

  
/**
   * Returns a  reference to the x coordinate of the image position.
   <p>
   * @return  reference to the x coordinate of the image position.
   */ public
 RelAbsVector getX() {
    return new RelAbsVector(libsbmlJNI.Image_getX__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns a  reference to the y coordinate of the image position.
   <p>
   * @return  reference to the y coordinate of the image position.
   */ public
 RelAbsVector getY() {
    return new RelAbsVector(libsbmlJNI.Image_getY__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns a  reference to the z coordinate of the image position.
   <p>
   * @return  reference to the z coordinate of the image position.
   */ public
 RelAbsVector getZ() {
    return new RelAbsVector(libsbmlJNI.Image_getZ__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns a  reference to the width of the image.
   <p>
   * @return  reference to the width
   */ public
 RelAbsVector getWidth() {
    return new RelAbsVector(libsbmlJNI.Image_getWidth__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns a  reference to the height of the image.
   <p>
   * @return  reference to the height
   */ public
 RelAbsVector getHeight() {
    return new RelAbsVector(libsbmlJNI.Image_getHeight__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Image}'s 'x' element is set.
   <p>
   * @return <code>true</code> if this {@link Image}'s 'x' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetX() {
    return libsbmlJNI.Image_isSetX(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Image}'s 'y' element is set.
   <p>
   * @return <code>true</code> if this {@link Image}'s 'y' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetY() {
    return libsbmlJNI.Image_isSetY(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Image}'s 'z' element is set.
   <p>
   * @return <code>true</code> if this {@link Image}'s 'z' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetZ() {
    return libsbmlJNI.Image_isSetZ(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Image}'s 'width' element is set.
   <p>
   * @return <code>true</code> if this {@link Image}'s 'width' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetWidth() {
    return libsbmlJNI.Image_isSetWidth(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Image}'s 'height' element is set.
   <p>
   * @return <code>true</code> if this {@link Image}'s 'height' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetHeight() {
    return libsbmlJNI.Image_isSetHeight(swigCPtr, this);
  }

  
/**
   * Sets the position of the image relative to its viewport.
   * The position can either be specified in relative or in absolute coordinates
   * or a combination of both.
   * The z coordinate can be omitted. In that case it is set to 0.
   <p>
   * @param x x coordinate of the image position
   * @param y y coordinate of the image position
   * @param z z coordinate of the image position
   */ public
 void setCoordinates(RelAbsVector x, RelAbsVector y, RelAbsVector z) {
    libsbmlJNI.Image_setCoordinates__SWIG_0(swigCPtr, this, RelAbsVector.getCPtr(x), x, RelAbsVector.getCPtr(y), y, RelAbsVector.getCPtr(z), z);
  }

  
/**
   * Sets the position of the image relative to its viewport.
   * The position can either be specified in relative or in absolute coordinates
   * or a combination of both.
   * The z coordinate can be omitted. In that case it is set to 0.
   <p>
   * @param x x coordinate of the image position
   * @param y y coordinate of the image position
   * @param z z coordinate of the image position
   */ public
 void setCoordinates(RelAbsVector x, RelAbsVector y) {
    libsbmlJNI.Image_setCoordinates__SWIG_1(swigCPtr, this, RelAbsVector.getCPtr(x), x, RelAbsVector.getCPtr(y), y);
  }

  
/**
   * Sets the dimensions of the image.
   * The dimensions can be set as relative values or absolute values, or 
   * a combination of both.
   <p>
   * @param width the width of the image when rendered
   * @param height the height of the image when rendered
   */ public
 void setDimensions(RelAbsVector width, RelAbsVector height) {
    libsbmlJNI.Image_setDimensions(swigCPtr, this, RelAbsVector.getCPtr(width), width, RelAbsVector.getCPtr(height), height);
  }

  
/**
   * Sets the x coordinate of the image position.
   * The position can either be specified in relative or in absolute coordinates
   * or a combination of both.
   <p>
   * @param coord x-coordinate of the image position
   */ public
 int setX(RelAbsVector coord) {
    return libsbmlJNI.Image_setX(swigCPtr, this, RelAbsVector.getCPtr(coord), coord);
  }

  
/**
   * Sets the y coordinate of the image position.
   * The position can either be specified in relative or in absolute coordinates
   * or a combination of both.
   <p>
   * @param coord y-coordinate of the image position
   */ public
 int setY(RelAbsVector coord) {
    return libsbmlJNI.Image_setY(swigCPtr, this, RelAbsVector.getCPtr(coord), coord);
  }

  
/**
   * Sets the z coordinate of the image position.
   * The position can either be specified in relative or in absolute coordinates
   * or a combination of both.
   <p>
   * @param coord z-coordinate of the image position
   */ public
 int setZ(RelAbsVector coord) {
    return libsbmlJNI.Image_setZ(swigCPtr, this, RelAbsVector.getCPtr(coord), coord);
  }

  
/**
   * Sets the width of the image when rendered.
   * The width can be set as relative values or absolute values, or 
   * a combination of both.
   <p>
   * @param width the width of the image when rendered
   */ public
 int setWidth(RelAbsVector width) {
    return libsbmlJNI.Image_setWidth(swigCPtr, this, RelAbsVector.getCPtr(width), width);
  }

  
/**
   * Sets the height of the image when rendered.
   * The height can be set as relative values or absolute values, or 
   * a combination of both.
   <p>
   * @param height the height of the image when rendered
   */ public
 int setHeight(RelAbsVector height) {
    return libsbmlJNI.Image_setHeight(swigCPtr, this, RelAbsVector.getCPtr(height), height);
  }

  
/**
   * Unsets the value of the 'x' element of this {@link Image}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetX() {
    return libsbmlJNI.Image_unsetX(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'y' element of this {@link Image}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetY() {
    return libsbmlJNI.Image_unsetY(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'z' element of this {@link Image}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetZ() {
    return libsbmlJNI.Image_unsetZ(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'width' element of this {@link Image}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetWidth() {
    return libsbmlJNI.Image_unsetWidth(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'height' element of this {@link Image}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetHeight() {
    return libsbmlJNI.Image_unsetHeight(swigCPtr, this);
  }

  
/**
   * Returns the XML element name of this {@link Image} object.
   <p>
   * For {@link Image}, the XML element name is always <code>'image'.</code>
   <p>
   * @return the name of this element, i.e. <code>'image'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.Image_getElementName(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code for this {@link Image} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_RENDER_IMAGE SBML_RENDER_IMAGE}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.Image_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes for this {@link Image}
   * object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required attributes of this {@link Image}
   * have been set, otherwise <code>false</code> is returned.
   <p>
   * @note The required attributes for the {@link Image} object are:
   * <ul>
   * <li> 'x'
   * <li> 'y'
   * <li> 'width'
   * <li> 'height'
   * <li> 'href'
   * </ul>
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.Image_hasRequiredAttributes(swigCPtr, this);
  }

  
/**
   * Creates an {@link XMLNode} object from this {@link Image} object.
   <p>
   * @return the {@link XMLNode} with the XML representation for the 
   * {@link Image} object.
   */ public
 XMLNode toXML() {
    return new XMLNode(libsbmlJNI.Image_toXML(swigCPtr, this), true);
  }

}
