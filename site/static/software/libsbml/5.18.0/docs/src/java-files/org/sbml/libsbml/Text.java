/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 Representation of text elements.
 <p>
 * The {@link Text} class represents text to be rendered in the context of a style.
 * The {@link Text} class inherits all attributes and methods from its base class
 * {@link GraphicalPrimitive1D}.
 <p>
 * The text also holds a string for the actual text that is to be rendered
 * for the {@link Text} object.
 <p>
 * Additional attributes specify how the text is to be rendered, for example
 * which font family is to be used and how the text is to be aligned within
 * the viewport.
 */

public class Text extends GraphicalPrimitive1D {
   private long swigCPtr;

   protected Text(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.Text_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(Text obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (Text obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_Text(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link Text} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Text}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Text}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Text}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Text(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Text__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link Text} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Text}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Text}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Text}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Text(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Text__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link Text} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Text}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Text}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Text}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Text(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Text__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link Text} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link Text}.
   <p>
   * @param version a long integer, the SBML Version to assign to this {@link Text}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link Text}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Text() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Text__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link Text} using the given {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param renderns the {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Text(RenderPkgNamespaces renderns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Text__SWIG_4(RenderPkgNamespaces.getCPtr(renderns), renderns), true);
  }

  
/**
   * Creates a new {@link Text} object from the given {@link XMLNode} object.
   * The {@link XMLNode} object has to contain a valid XML representation of a 
   * {@link Text} object as defined in the render extension specification.
   * This method is normally called when render information is read from a file and 
   * should normally not have to be called explicitly.
   <p>
   * @param node the {@link XMLNode} object reference that describes the {@link Text}
   * object to be instantiated.
   <p>
   * @param l2version an integer indicating the version of SBML Level&nbsp;2
   */ public
 Text(XMLNode node, long l2version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Text__SWIG_5(XMLNode.getCPtr(node), node, l2version), true);
  }

  
/**
   * Creates a new {@link Text} object from the given {@link XMLNode} object.
   * The {@link XMLNode} object has to contain a valid XML representation of a 
   * {@link Text} object as defined in the render extension specification.
   * This method is normally called when render information is read from a file and 
   * should normally not have to be called explicitly.
   <p>
   * @param node the {@link XMLNode} object reference that describes the {@link Text}
   * object to be instantiated.
   <p>
   * @param l2version an integer indicating the version of SBML Level&nbsp;2
   */ public
 Text(XMLNode node) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Text__SWIG_6(XMLNode.getCPtr(node), node), true);
  }

  
/**
   * Instantiates a new {@link Text} object with the given <code>id</code> and position offset.
   * The position offset coordinates can be omitted and will be set to 0 in
   * that case.
   <p>
   * All attributes are set as described for the default constructor
   * of {@link GraphicalPrimitive1D}.
   * All the font rendering attributes as well 
   * as the text to be rendered are unset.
   <p>
   * @param renderns the {@link SBMLNamespaces} object for the SBML 'render' package
   * @param id id string for the {@link Text} object
   * @param x x coordinate of the position offset
   * @param y y coordinate of the position offset
   * @param z z coordinate of the position offset
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 Text(RenderPkgNamespaces renderns, String id, RelAbsVector x, RelAbsVector y, RelAbsVector z) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Text__SWIG_7(RenderPkgNamespaces.getCPtr(renderns), renderns, id, RelAbsVector.getCPtr(x), x, RelAbsVector.getCPtr(y), y, RelAbsVector.getCPtr(z), z), true);
  }

  
/**
   * Instantiates a new {@link Text} object with the given <code>id</code> and position offset.
   * The position offset coordinates can be omitted and will be set to 0 in
   * that case.
   <p>
   * All attributes are set as described for the default constructor
   * of {@link GraphicalPrimitive1D}.
   * All the font rendering attributes as well 
   * as the text to be rendered are unset.
   <p>
   * @param renderns the {@link SBMLNamespaces} object for the SBML 'render' package
   * @param id id string for the {@link Text} object
   * @param x x coordinate of the position offset
   * @param y y coordinate of the position offset
   * @param z z coordinate of the position offset
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 Text(RenderPkgNamespaces renderns, String id, RelAbsVector x, RelAbsVector y) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Text__SWIG_8(RenderPkgNamespaces.getCPtr(renderns), renderns, id, RelAbsVector.getCPtr(x), x, RelAbsVector.getCPtr(y), y), true);
  }

  
/**
   * Instantiates a new {@link Text} object with the given <code>id</code> and position offset.
   * The position offset coordinates can be omitted and will be set to 0 in
   * that case.
   <p>
   * All attributes are set as described for the default constructor
   * of {@link GraphicalPrimitive1D}.
   * All the font rendering attributes as well 
   * as the text to be rendered are unset.
   <p>
   * @param renderns the {@link SBMLNamespaces} object for the SBML 'render' package
   * @param id id string for the {@link Text} object
   * @param x x coordinate of the position offset
   * @param y y coordinate of the position offset
   * @param z z coordinate of the position offset
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 Text(RenderPkgNamespaces renderns, String id, RelAbsVector x) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Text__SWIG_9(RenderPkgNamespaces.getCPtr(renderns), renderns, id, RelAbsVector.getCPtr(x), x), true);
  }

  
/**
   * Instantiates a new {@link Text} object with the given <code>id</code> and position offset.
   * The position offset coordinates can be omitted and will be set to 0 in
   * that case.
   <p>
   * All attributes are set as described for the default constructor
   * of {@link GraphicalPrimitive1D}.
   * All the font rendering attributes as well 
   * as the text to be rendered are unset.
   <p>
   * @param renderns the {@link SBMLNamespaces} object for the SBML 'render' package
   * @param id id string for the {@link Text} object
   * @param x x coordinate of the position offset
   * @param y y coordinate of the position offset
   * @param z z coordinate of the position offset
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 Text(RenderPkgNamespaces renderns, String id) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Text__SWIG_10(RenderPkgNamespaces.getCPtr(renderns), renderns, id), true);
  }

  
/**
   * Copy constructor for {@link Text}.
   <p>
   * @param orig the {@link Text} instance to copy.
   */ public
 Text(Text orig) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Text__SWIG_11(Text.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link Text} object.
   <p>
   * @return a (deep) copy of this {@link Text} object.
   */ public
 Text cloneObject() {
    long cPtr = libsbmlJNI.Text_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new Text(cPtr, true);
  }

  
/**
   * Returns the value of the 'font-family' attribute of this {@link Text}.
   <p>
   * @return the value of the 'font-family' attribute of this {@link Text} as a string.
   */ public
 String getFontFamily() {
    return libsbmlJNI.Text_getFontFamily(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'font-weight' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   <p>
   * @return the value of the 'font-weight' attribute of this {@link Text} object.
   <p>
   * The possible values returned by this method are:
   * <ul>
   * <li> {@link libsbmlConstants#FONT_WEIGHT_BOLD FONT_WEIGHT_BOLD}
   * <li> {@link libsbmlConstants#FONT_WEIGHT_NORMAL FONT_WEIGHT_NORMAL}
   * </ul>
   */ public
 int getFontWeight() {
    return libsbmlJNI.Text_getFontWeight(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'font-weight' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   <p>
   * @return the value of the 'font-weight' attribute of this {@link Text} as a string.
   * The possible values returned by this method are:
   * <ul>
   * <li> <code>'bold'</code>
   * <li> <code>'normal'</code>
   * <li> <code>'</code>(Unknown FontWeight value)'
   * </ul>
   */ public
 String getFontWeightAsString() {
    return libsbmlJNI.Text_getFontWeightAsString(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'font-style' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   <p>
   * @return the value of the 'font-style' attribute of this {@link Text} object.
   <p>
   * The possible values returned by this method are:
   * <ul>
   * <li> {@link libsbmlConstants#FONT_STYLE_ITALIC FONT_STYLE_ITALIC}
   * <li> {@link libsbmlConstants#FONT_STYLE_NORMAL FONT_STYLE_NORMAL}
   * </ul>
   */ public
 int getFontStyle() {
    return libsbmlJNI.Text_getFontStyle(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'font-style' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   <p>
   * @return the value of the 'font-style' attribute of this {@link Text} as a string.
   * The possible values returned by this method are:
   * <ul>
   * <li> <code>'italic'</code>
   * <li> <code>'normal'</code>
   * <li> <code>'</code>(Unknown FontStyle value)'
   * </ul>
   */ public
 String getFontStyleAsString() {
    return libsbmlJNI.Text_getFontStyleAsString(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'text-anchor' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   <p>
   * @return the value of the 'text-anchor' attribute of this {@link Text} object.
   *  The possible values returned by this method are:
   * <ul>
   * <li> {@link libsbmlConstants#H_TEXTANCHOR_START H_TEXTANCHOR_START}
   * <li> {@link libsbmlConstants#H_TEXTANCHOR_MIDDLE H_TEXTANCHOR_MIDDLE}
   * <li> {@link libsbmlConstants#H_TEXTANCHOR_END H_TEXTANCHOR_END}
   * </ul>
   */ public
 int getTextAnchor() {
    return libsbmlJNI.Text_getTextAnchor(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'text-anchor' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   <p>
   * @return the value of the 'text-anchor' attribute of this {@link Text} as a string.
   * The possible values returned by this method are:
   * <ul>
   * <li> <code>'start'</code>
   * <li> <code>'middle'</code>
   * <li> <code>'end'</code>
   * <li> <code>'</code>(Unknown HTextAnchor value)'
   * </ul>
   */ public
 String getTextAnchorAsString() {
    return libsbmlJNI.Text_getTextAnchorAsString(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'vtext-anchor' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   <p>
   * @return the value of the 'vtext-anchor' attribute of this {@link Text} object.
   *  The possible values returned by this method are:
   * <ul>
   * <li> {@link libsbmlConstants#V_TEXTANCHOR_TOP V_TEXTANCHOR_TOP}
   * <li> {@link libsbmlConstants#V_TEXTANCHOR_MIDDLE V_TEXTANCHOR_MIDDLE}
   * <li> {@link libsbmlConstants#V_TEXTANCHOR_BOTTOM V_TEXTANCHOR_BOTTOM}
   * <li> {@link libsbmlConstants#V_TEXTANCHOR_BASELINE V_TEXTANCHOR_BASELINE}
   * </ul>
   */ public
 int getVTextAnchor() {
    return libsbmlJNI.Text_getVTextAnchor(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'vtext-anchor' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   <p>
   * @return the value of the 'vtext-anchor' attribute of this {@link Text} as a
   * string.
   * The possible values returned by this method are:
   * <ul>
   * <li> <code>'top'</code>
   * <li> <code>'middle'</code>
   * <li> <code>'bottom'</code>
   * <li> <code>'baseline'</code>
   * <li> <code>'</code>(Unknown VTextAnchor value)'
   * </ul>
   */ public
 String getVTextAnchorAsString() {
    return libsbmlJNI.Text_getVTextAnchorAsString(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Text}'s 'font-family' attribute is set.
   <p>
   * @return <code>true</code> if this {@link Text}'s 'font-family' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetFontFamily() {
    return libsbmlJNI.Text_isSetFontFamily(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Text}'s 'font-weight' attribute is set.
   <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   <p>
   * @return <code>true</code> if this {@link Text}'s 'font-weight' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetFontWeight() {
    return libsbmlJNI.Text_isSetFontWeight(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Text}'s 'font-style' attribute is set.
   <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   <p>
   * @return <code>true</code> if this {@link Text}'s 'font-style' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetFontStyle() {
    return libsbmlJNI.Text_isSetFontStyle(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Text}'s 'text-anchor' attribute is set.
   <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   <p>
   * @return <code>true</code> if this {@link Text}'s 'text-anchor' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetTextAnchor() {
    return libsbmlJNI.Text_isSetTextAnchor(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Text}'s 'vtext-anchor' attribute is
   * set.
   <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   <p>
   * @return <code>true</code> if this {@link Text}'s 'vtext-anchor' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetVTextAnchor() {
    return libsbmlJNI.Text_isSetVTextAnchor(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'font-family' attribute of this {@link Text}.
   <p>
   * @param fontFamily String& value of the 'font-family' attribute to be
   * set.
   * Calling this function with <code>fontFamily</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetFontFamily().
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int setFontFamily(String fontFamily) {
    return libsbmlJNI.Text_setFontFamily(swigCPtr, this, fontFamily);
  }

  
/**
   * Sets the value of the 'font-weight' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   <p>
   * @param fontWeight int value of the
   * 'font-weight' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setFontWeight(int fontWeight) {
    return libsbmlJNI.Text_setFontWeight__SWIG_0(swigCPtr, this, fontWeight);
  }

  
/**
   * Sets the value of the 'font-weight' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   <p>
   * @param fontWeight the value of the 'font-weight' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setFontWeight(String fontWeight) {
    return libsbmlJNI.Text_setFontWeight__SWIG_2(swigCPtr, this, fontWeight);
  }

  
/**
   * Sets the value of the 'font-style' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   <p>
   * @param fontStyle int value of the
   * 'font-style' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setFontStyle(int fontStyle) {
    return libsbmlJNI.Text_setFontStyle__SWIG_0(swigCPtr, this, fontStyle);
  }

  
/**
   * Sets the value of the 'font-style' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   <p>
   * @param fontStyle the 'font-style' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setFontStyle(String fontStyle) {
    return libsbmlJNI.Text_setFontStyle__SWIG_2(swigCPtr, this, fontStyle);
  }

  
/**
   * Sets the value of the 'text-anchor' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   <p>
   * @param textAnchor int value of the
   * 'text-anchor' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setTextAnchor(int textAnchor) {
    return libsbmlJNI.Text_setTextAnchor__SWIG_0(swigCPtr, this, textAnchor);
  }

  
/**
   * Sets the value of the 'text-anchor' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   <p>
   * @param textAnchor the value of the 'text-anchor' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setTextAnchor(String textAnchor) {
    return libsbmlJNI.Text_setTextAnchor__SWIG_2(swigCPtr, this, textAnchor);
  }

  
/**
   * Sets the value of the 'vtext-anchor' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   <p>
   * @param vtextAnchor int value of the
   * 'vtext-anchor' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setVTextAnchor(int vtextAnchor) {
    return libsbmlJNI.Text_setVTextAnchor__SWIG_0(swigCPtr, this, vtextAnchor);
  }

  
/**
   * Sets the value of the 'vtext-anchor' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   <p>
   * @param vtextAnchor the value of the 'vtext-anchor' attribute to be
   * set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setVTextAnchor(String vtextAnchor) {
    return libsbmlJNI.Text_setVTextAnchor__SWIG_2(swigCPtr, this, vtextAnchor);
  }

  
/**
   * Unsets the value of the 'font-family' attribute of this {@link Text}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetFontFamily() {
    return libsbmlJNI.Text_unsetFontFamily(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'font-weight' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'font-weight' is used to specify whether 
 * the text is to be 'normal' or 'bold'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-weight':
 * <ul>
 * <li> <code>'bold'</code>, darker and/or thicker than normal print.
 <p>
 * <li> <code>'normal'</code>, the typical print weight; lighter and/or thinner than 'bold'.
 <p>
 * </ul>
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetFontWeight() {
    return libsbmlJNI.Text_unsetFontWeight(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'font-style' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'font-style' is used to specify whether 
 * the text is to be 'normal' or 'italic'.  If omitted, the text may be rendered
 * in either way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'font-style':
 * <ul>
 * <li> <code>'italic'</code>, slanted print
 <p>
 * <li> <code>'normal'</code>, upright print
 <p>
 * </ul>
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetFontStyle() {
    return libsbmlJNI.Text_unsetFontStyle(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'text-anchor' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'text-anchor' is used to specify the 
 * horizontal alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'text-anchor':
 * <ul>
 * <li> <code>'start'</code>, the start of the text is aligned to the  horizontal center 
 * of the box.
 <p>
 * <li> <code>'middle'</code>, the horizontal center of the text is aligned to the
 * horizontal center of the box.
 <p>
 * <li> <code>'end'</code>, the end of the text is aligned to the horizontal center of 
 * the box.
 <p>
 * </ul>
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetTextAnchor() {
    return libsbmlJNI.Text_unsetTextAnchor(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'vtext-anchor' attribute of this {@link Text}.
   <p>
   * <p>
 * The attribute 'vtext-anchor' is used to specify the 
 * vertical alignment of the text.  If omitted, the text may be aligned
 * in any way.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable values for 'vtext-anchor':
 * <ul>
 * <li> <code>'top'</code>, the top of the text is aligned to the vertical center of
 * the box.
 <p>
 * <li> <code>'middle'</code>, the vertical center of the text is aligned with the 
 * vertical center of the box.
 <p>
 * <li> <code>'bottom'</code>, the bottom of the text (i.e. the very bottom of any 
 * descending letter like 'y' or 'p') is aligned with the vertical 
 * center of the box.
 <p>
 * <li> <code>'baseline'</code>, the baseline of the text (i.e. the bottom of any 
 * non-descending letter like 'a' or e') is aligned with the vertical center
 * of the box.
 <p>
 * </ul>
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * </ul>
   */ public
 int unsetVTextAnchor() {
    return libsbmlJNI.Text_unsetVTextAnchor(swigCPtr, this);
  }

  
/**
   * Returns the x position offset as a  reference.
   * This offset is applied after alignment.
   <p>
   * @return  reference of x position offset
   */ public
 RelAbsVector getX() {
    return new RelAbsVector(libsbmlJNI.Text_getX__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns the y position offset as a  reference.
   * This offset is applied after alignment.
   <p>
   * @return  reference of y position offset
   */ public
 RelAbsVector getY() {
    return new RelAbsVector(libsbmlJNI.Text_getY__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns the z position offset as a  reference.
   * This offset is applied after alignment.
   <p>
   * @return  reference of z position offset
   */ public
 RelAbsVector getZ() {
    return new RelAbsVector(libsbmlJNI.Text_getZ__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns the font size as a  reference.
   <p>
   * @return  reference to the size to be used for rendering text.
   */ public
 RelAbsVector getFontSize() {
    return new RelAbsVector(libsbmlJNI.Text_getFontSize__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Text}'s 'x' element is set.
   <p>
   * @return <code>true</code> if this {@link Text}'s 'x' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetX() {
    return libsbmlJNI.Text_isSetX(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Text}'s 'y' element is set.
   <p>
   * @return <code>true</code> if this {@link Text}'s 'y' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetY() {
    return libsbmlJNI.Text_isSetY(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Text}'s 'z' element is set.
   <p>
   * @return <code>true</code> if this {@link Text}'s 'z' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetZ() {
    return libsbmlJNI.Text_isSetZ(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Text}'s 'font-size' element is set.
   <p>
   * @return <code>true</code> if this {@link Text}'s 'font-size' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetFontSize() {
    return libsbmlJNI.Text_isSetFontSize(swigCPtr, this);
  }

  
/**
   * Sets the position of the text within the viewport.
   * This is like an offset that is applied after alignment.
   * If the z coordinate is omitted, it is set to 0.
   <p>
   * @param x x coordinate of the position offset
   * @param y y coordinate of the position offset
   * @param z z coordinate of the position offset
   */ public
 void setCoordinates(RelAbsVector x, RelAbsVector y, RelAbsVector z) {
    libsbmlJNI.Text_setCoordinates__SWIG_0(swigCPtr, this, RelAbsVector.getCPtr(x), x, RelAbsVector.getCPtr(y), y, RelAbsVector.getCPtr(z), z);
  }

  
/**
   * Sets the position of the text within the viewport.
   * This is like an offset that is applied after alignment.
   * If the z coordinate is omitted, it is set to 0.
   <p>
   * @param x x coordinate of the position offset
   * @param y y coordinate of the position offset
   * @param z z coordinate of the position offset
   */ public
 void setCoordinates(RelAbsVector x, RelAbsVector y) {
    libsbmlJNI.Text_setCoordinates__SWIG_1(swigCPtr, this, RelAbsVector.getCPtr(x), x, RelAbsVector.getCPtr(y), y);
  }

  
/**
   * Sets the x position of the text within the viewport.
   * This is like an offset that is applied after alignment.
   <p>
   * @param x x coordinate of the position offset
   */ public
 int setX(RelAbsVector x) {
    return libsbmlJNI.Text_setX(swigCPtr, this, RelAbsVector.getCPtr(x), x);
  }

  
/**
   * Sets the y position of the text within the viewport.
   * This is like an offset that is applied after alignment.
   <p>
   * @param y y coordinate of the position offset
   */ public
 int setY(RelAbsVector y) {
    return libsbmlJNI.Text_setY(swigCPtr, this, RelAbsVector.getCPtr(y), y);
  }

  
/**
   * Sets the z position of the text within the viewport.
   * This is like an offset that is applied after alignment.
   <p>
   * @param z z coordinate of the position offset
   */ public
 int setZ(RelAbsVector z) {
    return libsbmlJNI.Text_setZ(swigCPtr, this, RelAbsVector.getCPtr(z), z);
  }

  
/**
   * Sets the font size.
   * Normally this is an absolute value, e.g. 18 for a 18pt font.
   * It is however allowed the specify the font size in terms of relative values
   * in relation to the current viewport. In most cases the viewport will be the 
   * dimensions of a bounding box of a layout object.
   <p>
   * @param size the new font size.
   */ public
 int setFontSize(RelAbsVector size) {
    return libsbmlJNI.Text_setFontSize(swigCPtr, this, RelAbsVector.getCPtr(size), size);
  }

  
/**
   * Unsets the value of the 'x' element of this {@link Text}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetX() {
    return libsbmlJNI.Text_unsetX(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'y' element of this {@link Text}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetY() {
    return libsbmlJNI.Text_unsetY(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'z' element of this {@link Text}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetZ() {
    return libsbmlJNI.Text_unsetZ(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'font-size' element of this {@link Text}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetFontSize() {
    return libsbmlJNI.Text_unsetFontSize(swigCPtr, this);
  }

  
/**
   * Returns the text for the {@link Text} object.
   <p>
   * @return the text string to be rendered for the {@link Text} object.
   */ public
 String getText() {
    return libsbmlJNI.Text_getText(swigCPtr, this);
  }

  
/**
   * Returns <code>true</code> if the text is set to something else than the empty string.
   <p>
   * @return <code>true</code> if the text is not empty.
   */ public
 boolean isSetText() {
    return libsbmlJNI.Text_isSetText(swigCPtr, this);
  }

  
/**
   * Sets the text for the text element.
   <p>
   * @param text The text to be rendered for the {@link Text} object.
   */ public
 int setText(String text) {
    return libsbmlJNI.Text_setText(swigCPtr, this, text);
  }

  
/**
   * Unsets the text for the text element.
   */ public
 int unsetText() {
    return libsbmlJNI.Text_unsetText(swigCPtr, this);
  }

  
/**
   * Returns the XML element name of this {@link Text} object.
   <p>
   * For {@link Text}, the XML element name is always <code>'text'.</code>
   <p>
   * @return the name of this element, i.e. <code>'text'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.Text_getElementName(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code for this {@link Text} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_RENDER_TEXT SBML_RENDER_TEXT}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.Text_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes for this {@link Text}
   * object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required attributes of this {@link Text}
   * have been set, otherwise <code>false</code> is returned.
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.Text_hasRequiredAttributes(swigCPtr, this);
  }

  
/**
   * Creates an {@link Text} object from this {@link Group} object.
   <p>
   * @return the {@link XMLNode} with the XML representation for the 
   * {@link Text} object.
   */ public
 XMLNode toXML() {
    return new XMLNode(libsbmlJNI.Text_toXML(swigCPtr, this), true);
  }

  // FONT_WEIGHT 
  public final static int WEIGHT_UNSET = 0;
  public final static int WEIGHT_NORMAL = WEIGHT_UNSET + 1;
  public final static int WEIGHT_BOLD = WEIGHT_NORMAL + 1;
  public final static int WEIGHT_INVALID = WEIGHT_BOLD + 1;

  // FONT_STYLE 
  public final static int STYLE_UNSET = 0;
  public final static int STYLE_NORMAL = STYLE_UNSET + 1;
  public final static int STYLE_ITALIC = STYLE_NORMAL + 1;
  public final static int STYLE_INVALID = STYLE_ITALIC + 1;

  // TEXT_ANCHOR 
  public final static int ANCHOR_UNSET = 0;
  public final static int ANCHOR_START = 1;
  public final static int ANCHOR_MIDDLE = 2;
  public final static int ANCHOR_END = 3;
  public final static int ANCHOR_TOP = 1;
  public final static int ANCHOR_BOTTOM = 3;
  public final static int ANCHOR_BASELINE = 4;
  public final static int ANCHOR_INVALID = ANCHOR_BASELINE + 1;

}
