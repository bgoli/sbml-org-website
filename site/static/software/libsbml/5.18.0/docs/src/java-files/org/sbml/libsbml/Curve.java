/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-layout"><a href="group__layout.html">layout</a></span>

 A curve connecting elements in a diagram.
 <p>
 * The {@link Curve} class describes how to connect elements in a diagram defined
 * with the use of the &ldquo;layout&rdquo; package. A curve is fully
 * specified by a mandatory listOfCurveSegments element and is used in four
 * places in the &ldquo;layout&rdquo; package:
 <p>
 * <ul>
 * <li> SpeciesReferenceGlyph: Here it describes a curve from/to the center
 * piece of the parent {@link ReactionGlyph} to/from the {@link SpeciesGlyph} it represents.
 <p>
 * <li> ReactionGlyph: Here it describes a curve for the center piece of a
 * reaction.
 <p>
 * <li> ReferenceGlyph: Here it describes a curve from/to the center piece of
 * the parent {@link GeneralGlyph} to/from the glyph it represents.
 <p>
 * <li> GeneralGlyph: Here it describes a curve for the center piece of an
 * additional relationship.
 *
 * </ul> <p>
 * In the text above, the term 'center piece' refers to either the {@link Curve}
 * element of a {@link ReactionGlyph}, or its {@link BoundingBox}.
 */

public class Curve extends SBase {
   private long swigCPtr;

   protected Curve(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.Curve_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(Curve obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (Curve obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_Curve(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a curve with an empty list of segments.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Curve(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Curve__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a curve with an empty list of segments.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Curve(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Curve__SWIG_1(level, version), true);
  }

  
/**
   * Creates a curve with an empty list of segments.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Curve(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Curve__SWIG_2(level), true);
  }

  
/**
   * Creates a curve with an empty list of segments.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Curve() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Curve__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link Curve} with the given {@link LayoutPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param layoutns the {@link LayoutPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 Curve(LayoutPkgNamespaces layoutns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Curve__SWIG_4(LayoutPkgNamespaces.getCPtr(layoutns), layoutns), true);
  }

  
/**
   * Creates a new {@link Curve} from the given {@link XMLNode}
   */ public
 Curve(XMLNode node, long l2version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Curve__SWIG_5(XMLNode.getCPtr(node), node, l2version), true);
  }

  
/**
   * Creates a new {@link Curve} from the given {@link XMLNode}
   */ public
 Curve(XMLNode node) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Curve__SWIG_6(XMLNode.getCPtr(node), node), true);
  }

  
/**
   * Copy constructor.
   <p>
   * @param source the instance to copy.
   */ public
 Curve(Curve source) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_Curve__SWIG_7(Curve.getCPtr(source), source), true);
  }

  
/**
   * Does nothing since no defaults are defined for {@link Curve}.
   */ public
 void initDefaults() {
    libsbmlJNI.Curve_initDefaults(swigCPtr, this);
  }

  
/**
   * Returns a refernce to the {@link ListOf} object That holds all the curve
   * segments.
   <p>
   * @return the {@link ListOfLineSegments} of this {@link Curve} defined as the child 
   * listOfCurveSegments.  Will never return null; the listOfCurveSegments 
   * is always created, even if empty.
   */ public
 ListOfLineSegments getListOfCurveSegments() {
    long cPtr = libsbmlJNI.Curve_getListOfCurveSegments(swigCPtr, this);
    return (cPtr == 0) ? null : new ListOfLineSegments(cPtr, false);
  }

  
/**
   * Returns a pointer to the curve segment with the given index.
   * If the index is invalid, <code>null</code> is returned.
   <p>
   * @param index the index value of the curve segment to return.
   <p>
   * @return the {@link LineSegment} representing the child 'curveSegment'
   * with the appropriate <code>index</code>, or <code>null</code> if no such {@link LineSegment}
   * exists.
   */ public
 LineSegment getCurveSegment(long index) {
	return (LineSegment) libsbml.DowncastSBase(libsbmlJNI.Curve_getCurveSegment__SWIG_0(swigCPtr, this, index), false);
}

  
/**
   * Adds a copy of the given {@link LineSegment} to the end of the 
   * {@link ListOfLineSegments}.
   <p>
   * @param segment the {@link LineSegment} to add as a new child 
   * 'curveSegment' of the listOfCurveSegments.
   */ public
 int addCurveSegment(LineSegment segment) {
    return libsbmlJNI.Curve_addCurveSegment(swigCPtr, this, LineSegment.getCPtr(segment), segment);
  }

  
/**
   * Returns the number of curve segments.
   <p>
   * @return the number of 'curveSegment' children of this {@link Curve}.
   */ public
 long getNumCurveSegments() {
    return libsbmlJNI.Curve_getNumCurveSegments(swigCPtr, this);
  }

  
/**
   * Creates a new {@link LineSegment} and adds it to the end of the list.  A
   * reference to the new {@link LineSegment} object is returned.
   <p>
   * @return the {@link LineSegment} created as a new child 'curveSegment'
   * of this {@link Curve}.
   */ public
 LineSegment createLineSegment() {
	return (LineSegment) libsbml.DowncastSBase(libsbmlJNI.Curve_createLineSegment(swigCPtr, this), false);
}

  
/**
   * Creates a new {@link CubicBezier} and adds it to the end of the list.  A
   * reference to the new {@link CubicBezier} object is returned.
   <p>
   * @return the {@link CubicBezier} created as a new child 'curveSegment' of 
   * this {@link Curve}.
   */ public
 CubicBezier createCubicBezier() {
    long cPtr = libsbmlJNI.Curve_createCubicBezier(swigCPtr, this);
    return (cPtr == 0) ? null : new CubicBezier(cPtr, false);
  }

  
/**
   * Returns the XML element name of
   * this SBML object.
   <p>
   * @return the string of the name of this element.
   */ public
 String getElementName() {
    return libsbmlJNI.Curve_getElementName(swigCPtr, this);
  }

  
/**
   * Creates and returns a deep copy of this {@link Curve}.
   <p>
   * @return a (deep) copy of this {@link Curve}.
   */ public
 Curve cloneObject() {
    long cPtr = libsbmlJNI.Curve_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new Curve(cPtr, true);
  }

  
/**
   * Returns the libSBML type code of this object instance.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_LAYOUT_CURVE SBML_LAYOUT_CURVE}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.Curve_getTypeCode(swigCPtr, this);
  }

  
/**
    * Creates an {@link XMLNode} object from this.
    */ public
 XMLNode toXML() {
    return new XMLNode(libsbmlJNI.Curve_toXML(swigCPtr, this), true);
  }

  public void connectToChild() {
    libsbmlJNI.Curve_connectToChild(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.Curve_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

}
