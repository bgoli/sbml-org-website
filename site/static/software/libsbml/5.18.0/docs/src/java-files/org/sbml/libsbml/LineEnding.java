/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 Decoration element for the start and/or end of curves.
 <p>
 * LineEndings in the SBML Level&nbsp;3 Render package are used to apply
 * certain decorations to the end of curves. Since many curves in layout
 * diagrams use the same decoration for the beginnings and start of a line,
 * it would be highly redundant to encode those decorations with each
 * line. Therefore, {@link LineEnding} objects can be defined which are then applied
 * to the beginning or the ends of several curve objects.
 <p>
 * A {@link LineEnding} contains an id by which it can be referenced from curve
 * styles, it contains a visual representation of the decoration in the form
 * of a render extension {@link Group} object and it has some attributes that define
 * the viewport and how the {@link LineEnding} is to be applied to a curve.
 <p>
 * A {@link LineEnding} object is only valid if it has an id, a viewport that has an
 * area which is not 0 and a valid group object.
 */

public class LineEnding extends GraphicalPrimitive2D {
   private long swigCPtr;

   protected LineEnding(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.LineEnding_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(LineEnding obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (LineEnding obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_LineEnding(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a new {@link LineEnding} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link LineEnding}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link LineEnding}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link LineEnding}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 LineEnding(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_LineEnding__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a new {@link LineEnding} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link LineEnding}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link LineEnding}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link LineEnding}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 LineEnding(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_LineEnding__SWIG_1(level, version), true);
  }

  
/**
   * Creates a new {@link LineEnding} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link LineEnding}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link LineEnding}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link LineEnding}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 LineEnding(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_LineEnding__SWIG_2(level), true);
  }

  
/**
   * Creates a new {@link LineEnding} using the given SBML Level, Version and
   * &ldquo;render&rdquo; package version.
   <p>
   * @param level a long integer, the SBML Level to assign to this {@link LineEnding}.
   <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link LineEnding}.
   <p>
   * @param pkgVersion a long integer, the SBML Render Version to assign to
   * this {@link LineEnding}.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 LineEnding() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_LineEnding__SWIG_3(), true);
  }

  
/**
   * Creates a new {@link LineEnding} using the given {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param renderns the {@link RenderPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 LineEnding(RenderPkgNamespaces renderns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_LineEnding__SWIG_4(RenderPkgNamespaces.getCPtr(renderns), renderns), true);
  }

  
/**
   * Creates a new {@link LineEnding} object from the given {@link XMLNode} object.
   * The {@link XMLNode} object has to contain a valid XML representation of a 
   * {@link LineEnding} object as defined in the render extension specification.
   * This method is normally called when render information is read from a file and 
   * should normally not have to be called explicitly.
   <p>
   * @param node the {@link XMLNode} object reference that describes the {@link LineEnding}
   * object to be instantiated.
   <p>
   * @param l2version The version of SBML Level&nbsp;2.
   */ public
 LineEnding(XMLNode node, long l2version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_LineEnding__SWIG_5(XMLNode.getCPtr(node), node, l2version), true);
  }

  
/**
   * Constructor which creates a {@link LineEnding} with an empty group object,
   * and a viewport with a size of 0.
   * The id is set to the given value.
   * In order to get a valid object, the group object has to be valid,
   * the group object has to have descendants other than groups and
   * the viewport has to have a positive size.
   <p>
   * @param renderns the {@link SBMLNamespaces} object for the SBML 'render' package
   * @param id The id for the {@link LineEnding}.
   <p>
   * <p>
 * @warning <span class='warning'>This constructor is deprecated. The new
 * libSBML API uses constructors that either take the SBML Level and Version,
 * <em>or</em> take an {@link SBMLNamespaces} object.</span>
   */ public
 LineEnding(RenderPkgNamespaces renderns, String id) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_LineEnding__SWIG_6(RenderPkgNamespaces.getCPtr(renderns), renderns, id), true);
  }

  
/**
   * Copy constructor for {@link LineEnding}.
   <p>
   * @param orig the {@link LineEnding} instance to copy.
   */ public
 LineEnding(LineEnding orig) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_LineEnding__SWIG_7(LineEnding.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link LineEnding} object.
   <p>
   * @return a (deep) copy of this {@link LineEnding} object.
   */ public
 LineEnding cloneObject() {
    long cPtr = libsbmlJNI.LineEnding_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new LineEnding(cPtr, true);
  }

  
/**
   * Returns the value of the 'id' attribute of this {@link LineEnding}.
   <p>
   * @return the value of the 'id' attribute of this {@link LineEnding} as a string.
   */ public
 String getId() {
    return libsbmlJNI.LineEnding_getId(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'enableRotationalMapping' attribute of this
   * {@link LineEnding}.
   <p>
   * @return the value of the 'enableRotationalMapping' attribute of this
   * {@link LineEnding} as a boolean.
   */ public
 boolean getEnableRotationalMapping() {
    return libsbmlJNI.LineEnding_getEnableRotationalMapping(swigCPtr, this);
  }

  
/**
   * Returns whether rotational mapping is enabled or not.
   <p>
   * @return boolean value that specifies if rotational mapping is 
   * enabled for the {@link LineEnding} or not.
   */ public
 boolean getIsEnabledRotationalMapping() {
    return libsbmlJNI.LineEnding_getIsEnabledRotationalMapping(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link LineEnding}'s 'id' attribute is set.
   <p>
   * @return <code>true</code> if this {@link LineEnding}'s 'id' attribute has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetId() {
    return libsbmlJNI.LineEnding_isSetId(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link LineEnding}'s 'enableRotationalMapping'
   * attribute is set.
   <p>
   * @return <code>true</code> if this {@link LineEnding}'s 'enableRotationalMapping' attribute
   * has been set, otherwise <code>false</code> is returned.
   */ public
 boolean isSetEnableRotationalMapping() {
    return libsbmlJNI.LineEnding_isSetEnableRotationalMapping(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'id' attribute of this {@link LineEnding}.
   <p>
   * @param id String& value of the 'id' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * Calling this function with <code>id</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetId().
   */ public
 int setId(String id) {
    return libsbmlJNI.LineEnding_setId(swigCPtr, this, id);
  }

  
/**
   * Sets the value of the 'enableRotationalMapping' attribute of this
   * {@link LineEnding}.
   <p>
   * @param enableRotationalMapping boolean value of the 'enableRotationalMapping'
   * attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setEnableRotationalMapping(boolean enableRotationalMapping) {
    return libsbmlJNI.LineEnding_setEnableRotationalMapping(swigCPtr, this, enableRotationalMapping);
  }

  
/**
   * Unsets the value of the 'id' attribute of this {@link LineEnding}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetId() {
    return libsbmlJNI.LineEnding_unsetId(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'enableRotationalMapping' attribute of this
   * {@link LineEnding}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetEnableRotationalMapping() {
    return libsbmlJNI.LineEnding_unsetEnableRotationalMapping(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'group' element of this {@link LineEnding}.
   <p>
   * @return the value of the 'group' element of this {@link LineEnding} as a
   * {@link RenderGroup}.
   */ public
 RenderGroup getGroup() {
    long cPtr = libsbmlJNI.LineEnding_getGroup__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderGroup(cPtr, false);
  }

  
/**
   * Returns the value of the 'boundingBox' element of this {@link LineEnding}.
   <p>
   * @return the value of the 'boundingBox' element of this {@link LineEnding} as a
   * {@link BoundingBox}.
   */ public
 BoundingBox getBoundingBox() {
    long cPtr = libsbmlJNI.LineEnding_getBoundingBox__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new BoundingBox(cPtr, false);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link LineEnding}'s 'group' element is set.
   <p>
   * @return <code>true</code> if this {@link LineEnding}'s 'group' element has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetGroup() {
    return libsbmlJNI.LineEnding_isSetGroup(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link LineEnding}'s 'boundingBox' element is
   * set.
   <p>
   * @return <code>true</code> if this {@link LineEnding}'s 'boundingBox' element has been set,
   * otherwise <code>false</code> is returned.
   */ public
 boolean isSetBoundingBox() {
    return libsbmlJNI.LineEnding_isSetBoundingBox(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'group' element of this {@link LineEnding}.
   <p>
   * @param group {@link RenderGroup} value of the 'group' element to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setGroup(RenderGroup group) {
    return libsbmlJNI.LineEnding_setGroup(swigCPtr, this, RenderGroup.getCPtr(group), group);
  }

  
/**
   * Sets the value of the 'boundingBox' element of this {@link LineEnding}.
   <p>
   * @param boundingBox {@link BoundingBox} value of the 'boundingBox' element to be
   * set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setBoundingBox(BoundingBox boundingBox) {
    return libsbmlJNI.LineEnding_setBoundingBox(swigCPtr, this, BoundingBox.getCPtr(boundingBox), boundingBox);
  }

  
/**
   * Creates a new {@link RenderGroup} object, adds it to this {@link LineEnding} object and
   * returns the {@link RenderGroup} object created.
   <p>
   * @return a new {@link RenderGroup} object instance.
   */ public
 RenderGroup createGroup() {
    long cPtr = libsbmlJNI.LineEnding_createGroup(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderGroup(cPtr, false);
  }

  
/**
   * Creates a new {@link BoundingBox} object, adds it to this {@link LineEnding} object and
   * returns the {@link BoundingBox} object created.
   <p>
   * @return a new {@link BoundingBox} object instance.
   */ public
 BoundingBox createBoundingBox() {
    long cPtr = libsbmlJNI.LineEnding_createBoundingBox(swigCPtr, this);
    return (cPtr == 0) ? null : new BoundingBox(cPtr, false);
  }

  
/**
   * Unsets the value of the 'group' element of this {@link LineEnding}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetGroup() {
    return libsbmlJNI.LineEnding_unsetGroup(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'boundingBox' element of this {@link LineEnding}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetBoundingBox() {
    return libsbmlJNI.LineEnding_unsetBoundingBox(swigCPtr, this);
  }

  
/**
   * Returns the XML element name of this {@link LineEnding} object.
   <p>
   * For {@link LineEnding}, the XML element name is always <code>'lineEnding'.</code>
   <p>
   * @return the name of this element, i.e. <code>'lineEnding'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.LineEnding_getElementName(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code for this {@link LineEnding} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_RENDER_LINEENDING SBML_RENDER_LINEENDING}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.LineEnding_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link LineEnding} object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required attributes of this
   * {@link LineEnding} have been set, otherwise <code>false</code> is returned.
   <p>
   * @note The required attributes for the {@link LineEnding} object are:
   * <ul>
   * <li> 'id'
   * </ul>
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.LineEnding_hasRequiredAttributes(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required elements for this
   * {@link LineEnding} object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required elements of this
   * {@link LineEnding} have been set, otherwise <code>false</code> is returned.
   <p>
   * @note The required elements for the {@link LineEnding} object are:
   */ public
 boolean hasRequiredElements() {
    return libsbmlJNI.LineEnding_hasRequiredElements(swigCPtr, this);
  }

  
/** * @internal */ public
 void connectToChild() {
    libsbmlJNI.LineEnding_connectToChild(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.LineEnding_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

  
/**
   * Returns the first child element that has the given <code>id</code> in the model-wide
   * SId namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id a string representing the id attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>id</code>. If no such
   * object is found, this method returns <code>null.</code>
   */ public
 SBase getElementBySId(String id) {
  return libsbml.DowncastSBase(libsbmlJNI.LineEnding_getElementBySId(swigCPtr, this, id), false);
}

  
/**
   * Returns the first child element that has the given <code>metaid</code>, or <code>null</code>
   * if no such object is found.
   <p>
   * @param metaid a string representing the metaid attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>metaid</code>. If no
   * such object is found this method returns <code>null.</code>
   */ public
 SBase getElementByMetaId(String metaid) {
  return libsbml.DowncastSBase(libsbmlJNI.LineEnding_getElementByMetaId(swigCPtr, this, metaid), false);
}

  
/**
   * Creates an {@link XMLNode} object from this {@link LineEnding} object.
   <p>
   * @return the {@link XMLNode} with the XML representation for the 
   * {@link LineEnding} object.
   */ public
 XMLNode toXML() {
    return new XMLNode(libsbmlJNI.LineEnding_toXML(swigCPtr, this), true);
  }

}
