/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-render"><a href="group__render.html">render</a></span>

 Abstract base class for local and global styles.
 <p>
 * Local and global styles in the SBML Level&nbsp;3 Render package have many
 * attributes and methods in common.  These have been implemented in the
 * abstract base class {@link Style}.
 <p>
 * A style is a graphical representation for certain layout objects. The
 * assignment of styles to individual layout objects can either be done
 * through layout object ids (local styles only), layout object types
 * (SPECIES, COMPARTMENT, etc.) or layout object roles.
 */

public class Style extends SBase {
   private long swigCPtr;

   protected Style(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.Style_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(Style obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (Style obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_Style(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Copy constructor for {@link Style}.
   <p>
   * @param orig the {@link Style} instance to copy.
   */ public
 Style(Style orig) {
    this(libsbmlJNI.new_Style__SWIG_7(Style.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link Style} object.
   <p>
   * @return a (deep) copy of this {@link Style} object.
   */ public
 SBase cloneObject() {
  return (Style) libsbml.DowncastSBase(libsbmlJNI.Style_cloneObject(swigCPtr, this), true);
}

  
/**
   * Returns the value of the 'id' attribute of this {@link Style}.
   <p>
   * @return the value of the 'id' attribute of this {@link Style} as a string.
   */ public
 String getId() {
    return libsbmlJNI.Style_getId(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'name' attribute of this {@link Style}.
   <p>
   * @return the value of the 'name' attribute of this {@link Style} as a string.
   */ public
 String getName() {
    return libsbmlJNI.Style_getName(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Style}'s 'id' attribute is set.
   <p>
   * @return <code>true</code> if this {@link Style}'s 'id' attribute has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetId() {
    return libsbmlJNI.Style_isSetId(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Style}'s 'name' attribute is set.
   <p>
   * @return <code>true</code> if this {@link Style}'s 'name' attribute has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetName() {
    return libsbmlJNI.Style_isSetName(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'id' attribute of this {@link Style}.
   <p>
   * @param id String& value of the 'id' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   *
   * </ul> <p>
   * Calling this function with <code>id</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetId().
   */ public
 int setId(String id) {
    return libsbmlJNI.Style_setId(swigCPtr, this, id);
  }

  
/**
   * Sets the value of the 'name' attribute of this {@link Style}.
   <p>
   * @param name String& value of the 'name' attribute to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   This particular
 * function only does one thing irrespective of user input or 
 * object state, and thus will only return a single value:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   *
   * </ul> <p>
   * Calling this function with <code>name</code> = <code>null</code> or an empty string is
   * equivalent to calling unsetName().
   */ public
 int setName(String name) {
    return libsbmlJNI.Style_setName(swigCPtr, this, name);
  }

  
/**
   * Unsets the value of the 'id' attribute of this {@link Style}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetId() {
    return libsbmlJNI.Style_unsetId(swigCPtr, this);
  }

  
/**
   * Unsets the value of the 'name' attribute of this {@link Style}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetName() {
    return libsbmlJNI.Style_unsetName(swigCPtr, this);
  }

  
/**
   * Returns the value of the 'roleList' attribute of this {@link Style}.
   <p>
   * @return the value of the 'roleList' attribute of this {@link Style} as a string.
   */ public
 StringSet getRoleList() {
    return new StringSet(libsbmlJNI.Style_getRoleList__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns the number of ids in the role list.
   <p>
   * @return the number of roles in the role list. 
   */ public
 long getNumRoles() {
    return libsbmlJNI.Style_getNumRoles(swigCPtr, this);
  }

  
/**
   * Checks whether a given role is in the role list.
   <p>
   * @param role role string to check for in the role list.
   */ public
 boolean isInRoleList(String role) {
    return libsbmlJNI.Style_isInRoleList(swigCPtr, this, role);
  }

  
/**
   * Adds an id to the role list.
   <p>
   * @param role New role to be added to the role list.
   */ public
 int addRole(String role) {
    return libsbmlJNI.Style_addRole(swigCPtr, this, role);
  }

  
/** 
   * @return the string of all roles
   */ public
 String createRoleString() {
    return libsbmlJNI.Style_createRoleString(swigCPtr, this);
  }

  
/**
   * Removes the given role from the role list.
   <p>
   * @param role role string to be removed from the role list.
   */ public
 int removeRole(String role) {
    return libsbmlJNI.Style_removeRole(swigCPtr, this, role);
  }

  
/**
   * Sets the complete role list to a copy of the given list.
   <p>
   * @param roleList New list of role strings to be set on the style.
   */ public
 int setRoleList(StringSet roleList) {
    return libsbmlJNI.Style_setRoleList(swigCPtr, this, StringSet.getCPtr(roleList), roleList);
  }

  
/**
   * Returns the type list.
   <p>
   * @return  reference to the type list.
   <p>
   * <p>
 * The attribute 'typeList' for {@link LocalStyle} and {@link GlobalStyle} objects contains
 * a list of StyleType entries that describe what sorts of object to apply
 * the style to.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable entries in a whitespace-separated 'typeList':
 * <ul>
 * <li> <code>'COMPARTMENTGLYPH':</code> The style is to be applied to all compartment
 * glyphs.
 <p>
 * <li> <code>'SPECIESGLYPH':</code> The style is to be applied to all species
 * glyphs.
 <p>
 * <li> <code>'REACTIONGLYPH':</code> The style is to be applied to all reaction
 * glyphs.
 <p>
 * <li> <code>'SPECIESREFERENCEGLYPH':</code> The style is to be applied to all
 * species reference glyphs.
 <p>
 * <li> <code>'TEXTGLYPH':</code> The style is to be applied to all text
 * glyphs.
 <p>
 * <li> <code>'GENERALGLYPH':</code> The style is to be applied to all general
 * glyphs.
 <p>
 * <li> <code>'GRAPHICALOBJECT':</code> The style is to be applied to all graphical
 * objects.
 <p>
 * <li> <code>'ANY':</code> The style is to be applied to any and all glyphs and 
 * graphical objects.  Equivalent to explicitly listing all other keywords.
 <p>
 * </ul>
   */ public
 StringSet getTypeList() {
    return new StringSet(libsbmlJNI.Style_getTypeList__SWIG_0(swigCPtr, this), false);
  }

  
/**
   * Returns the number of types in the type list.
   <p>
   * @return number of types in type list.
   */ public
 long getNumTypes() {
    return libsbmlJNI.Style_getNumTypes(swigCPtr, this);
  }

  
/**
   * Checks whether a given type string is in the type list.
   <p>
   * @param type string to be searched for in the type list
   <p>
   * @return <code>true</code> or <code>false</code> depending on whether the given string was
   * found in the type list.
   <p>
   * <p>
 * The attribute 'typeList' for {@link LocalStyle} and {@link GlobalStyle} objects contains
 * a list of StyleType entries that describe what sorts of object to apply
 * the style to.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable entries in a whitespace-separated 'typeList':
 * <ul>
 * <li> <code>'COMPARTMENTGLYPH':</code> The style is to be applied to all compartment
 * glyphs.
 <p>
 * <li> <code>'SPECIESGLYPH':</code> The style is to be applied to all species
 * glyphs.
 <p>
 * <li> <code>'REACTIONGLYPH':</code> The style is to be applied to all reaction
 * glyphs.
 <p>
 * <li> <code>'SPECIESREFERENCEGLYPH':</code> The style is to be applied to all
 * species reference glyphs.
 <p>
 * <li> <code>'TEXTGLYPH':</code> The style is to be applied to all text
 * glyphs.
 <p>
 * <li> <code>'GENERALGLYPH':</code> The style is to be applied to all general
 * glyphs.
 <p>
 * <li> <code>'GRAPHICALOBJECT':</code> The style is to be applied to all graphical
 * objects.
 <p>
 * <li> <code>'ANY':</code> The style is to be applied to any and all glyphs and 
 * graphical objects.  Equivalent to explicitly listing all other keywords.
 <p>
 * </ul>
   */ public
 boolean isInTypeList(String type) {
    return libsbmlJNI.Style_isInTypeList(swigCPtr, this, type);
  }

  
/**
   * Adds a type string to the type list.
   <p>
   * @param type new type string to be added to the type list
   */ public
 int addType(String type) {
    return libsbmlJNI.Style_addType(swigCPtr, this, type);
  }

  
/** 
   * @return the string of all types
   */ public
 String createTypeString() {
    return libsbmlJNI.Style_createTypeString(swigCPtr, this);
  }

  
/**
   * Removes a type string from the type list.
   <p>
   * @param type type string to be removed from the type list.
   */ public
 int removeType(String type) {
    return libsbmlJNI.Style_removeType(swigCPtr, this, type);
  }

  
/**
   * Sets the complete type list to a copy of the given list.
   <p>
   * @param typeList the list of types to be set for the style.
   <p>
   * <p>
 * The attribute 'typeList' for {@link LocalStyle} and {@link GlobalStyle} objects contains
 * a list of StyleType entries that describe what sorts of object to apply
 * the style to.
 * In the SBML
 * Level&nbsp;3 Version&nbsp;1 Render specification, the following are the
 * allowable entries in a whitespace-separated 'typeList':
 * <ul>
 * <li> <code>'COMPARTMENTGLYPH':</code> The style is to be applied to all compartment
 * glyphs.
 <p>
 * <li> <code>'SPECIESGLYPH':</code> The style is to be applied to all species
 * glyphs.
 <p>
 * <li> <code>'REACTIONGLYPH':</code> The style is to be applied to all reaction
 * glyphs.
 <p>
 * <li> <code>'SPECIESREFERENCEGLYPH':</code> The style is to be applied to all
 * species reference glyphs.
 <p>
 * <li> <code>'TEXTGLYPH':</code> The style is to be applied to all text
 * glyphs.
 <p>
 * <li> <code>'GENERALGLYPH':</code> The style is to be applied to all general
 * glyphs.
 <p>
 * <li> <code>'GRAPHICALOBJECT':</code> The style is to be applied to all graphical
 * objects.
 <p>
 * <li> <code>'ANY':</code> The style is to be applied to any and all glyphs and 
 * graphical objects.  Equivalent to explicitly listing all other keywords.
 <p>
 * </ul>
   */ public
 int setTypeList(StringSet typeList) {
    return libsbmlJNI.Style_setTypeList(swigCPtr, this, StringSet.getCPtr(typeList), typeList);
  }

  
/**
   * Returns the value of the 'group' element of this {@link Style}.
   <p>
   * @return the value of the 'group' element of this {@link Style} as a {@link RenderGroup}.
   */ public
 RenderGroup getGroup() {
    long cPtr = libsbmlJNI.Style_getGroup__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderGroup(cPtr, false);
  }

  
/**
   * Predicate returning <code>true</code> if this {@link Style}'s 'group' element is set.
   <p>
   * @return <code>true</code> if this {@link Style}'s 'group' element has been set, otherwise
   * <code>false</code> is returned.
   */ public
 boolean isSetGroup() {
    return libsbmlJNI.Style_isSetGroup(swigCPtr, this);
  }

  
/**
   * Sets the value of the 'group' element of this {@link Style}.
   <p>
   * @param group {@link RenderGroup} value of the 'group' element to be set.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * </ul>
   */ public
 int setGroup(RenderGroup group) {
    return libsbmlJNI.Style_setGroup(swigCPtr, this, RenderGroup.getCPtr(group), group);
  }

  
/**
   * Creates a new {@link RenderGroup} object, adds it to this {@link Style} object and returns
   * the {@link RenderGroup} object created.
   <p>
   * @return a new {@link RenderGroup} object instance.
   */ public
 RenderGroup createGroup() {
    long cPtr = libsbmlJNI.Style_createGroup(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderGroup(cPtr, false);
  }

  
/**
   * Unsets the value of the 'group' element of this {@link Style}.
   <p>
   * <p>
 * @return integer value indicating success/failure of the
 * function.   The possible values
 * returned by this function are:
   * <ul>
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * </ul>
   */ public
 int unsetGroup() {
    return libsbmlJNI.Style_unsetGroup(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Style} is of type
   * {@link GlobalStyle}
   <p>
   * @return <code>true</code> if this abstract {@link Style} is of type {@link GlobalStyle}, <code>false</code>
   * otherwise
   */ public
 boolean isGlobalStyle() {
    return libsbmlJNI.Style_isGlobalStyle(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if this abstract {@link Style} is of type {@link LocalStyle}
   <p>
   * @return <code>true</code> if this abstract {@link Style} is of type {@link LocalStyle}, <code>false</code>
   * otherwise
   */ public
 boolean isLocalStyle() {
    return libsbmlJNI.Style_isLocalStyle(swigCPtr, this);
  }

  
/**
   * Returns the XML element name of this {@link Style} object.
   <p>
   * For {@link Style}, the XML element name is always <code>'style'.</code>
   <p>
   * @return the name of this element, i.e. <code>'style'.</code>
   */ public
 String getElementName() {
    return libsbmlJNI.Style_getElementName(swigCPtr, this);
  }

  
/**
   * Returns the libSBML type code for this {@link Style} object.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_RENDER_STYLE_BASE SBML_RENDER_STYLE_BASE}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.Style_getTypeCode(swigCPtr, this);
  }

  
/**
   * Predicate returning <code>true</code> if all the required attributes for this {@link Style}
   * object have been set.
   <p>
   * @return <code>true</code> to indicate that all the required attributes of this {@link Style}
   * have been set, otherwise <code>false</code> is returned.
   */ public
 boolean hasRequiredAttributes() {
    return libsbmlJNI.Style_hasRequiredAttributes(swigCPtr, this);
  }

  
/** * @internal */ public
 void connectToChild() {
    libsbmlJNI.Style_connectToChild(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.Style_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

  
/**
   * Returns the first child element that has the given <code>id</code> in the model-wide
   * SId namespace, or <code>null</code> if no such object is found.
   <p>
   * @param id a string representing the id attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>id</code>. If no such
   * object is found, this method returns <code>null.</code>
   */ public
 SBase getElementBySId(String id) {
  return libsbml.DowncastSBase(libsbmlJNI.Style_getElementBySId(swigCPtr, this, id), false);
}

  
/**
   * Returns the first child element that has the given <code>metaid</code>, or <code>null</code>
   * if no such object is found.
   <p>
   * @param metaid a string representing the metaid attribute of the object to
   * retrieve.
   <p>
   * @return a pointer to the {@link SBase} element with the given <code>metaid</code>. If no
   * such object is found this method returns <code>null.</code>
   */ public
 SBase getElementByMetaId(String metaid) {
  return libsbml.DowncastSBase(libsbmlJNI.Style_getElementByMetaId(swigCPtr, this, metaid), false);
}

  
/**
   * Creates an {@link XMLNode} object from this {@link Style} object.
   <p>
   * @return the {@link XMLNode} with the XML representation for the 
   * {@link Style} object.
   */ public
 XMLNode toXML() {
    return new XMLNode(libsbmlJNI.Style_toXML(swigCPtr, this), true);
  }

}
