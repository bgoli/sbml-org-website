/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-comp"><a href="group__comp.html">comp</a></span>
 Convenience class for {@link SBase}-derived classes.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * The {@link CompBase} class derives from {@link SBase}, and defines a few functions and
 * features common to all {@link SBase}-derived classes in the SBML Level&nbsp;3
 * <a href='../../../extensions-summary.html#comp'>Hierarchical Model Composition</a> (&ldquo;comp&rdquo;) package.
 */

public class CompBase extends SBase {
   private long swigCPtr;

   protected CompBase(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.CompBase_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(CompBase obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (CompBase obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_CompBase(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Returns the XML namespace (URI) of the package extension
   * of this object.
   <p>
   * @return the URI of the package extension of this plugin object.
   */ public
 String getPackageURI() {
    return libsbmlJNI.CompBase_getPackageURI(swigCPtr, this);
  }

  
/**
   * Returns the package name of this plugin object.
   <p>
   * @return the package name of this plugin object.
   */ public
 String getPackageName() {
    return libsbmlJNI.CompBase_getPackageName(swigCPtr, this);
  }

  
/**
   * Returns the package version of the package extension of
   * this plugin object.
   <p>
   * @return the package version of the package extension of
   * this plugin object.
   */ public
 long getPackageVersion() {
    return libsbmlJNI.CompBase_getPackageVersion(swigCPtr, this);
  }

  
/**
   * Returns the {@link Model} object to which the referenced child object belongs.
   */ public
 static Model getParentModel(SBase child) {
    long cPtr = libsbmlJNI.CompBase_getParentModel(SBase.getCPtr(child), child);
    return (cPtr == 0) ? null : new Model(cPtr, false);
  }

}
