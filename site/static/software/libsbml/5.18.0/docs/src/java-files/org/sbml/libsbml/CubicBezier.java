/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 * <span class="pkg-marker pkg-color-layout"><a href="group__layout.html">layout</a></span>

 A Cubic B&eacute;zier smooth curve.
 <p>
 * In order to be able to represent smooth curves the &ldquo;layout&rdquo;
 * package defines the class {@link CubicBezier}. It represents a Bezier curve, and
 * is readily available in most graphics APIs.  The class {@link CubicBezier} is
 * derived from {@link LineSegment}. It consists of four elements: the two inherited
 * elements 'start' and 'end', which specify the starting point and the
 * endpoint of the cubic bezier curve, and two elements 'basePoint1' and
 * 'basePoint2', which specify the two additional base points that are needed
 * to describe a cubic bezier curve.
 */

public class CubicBezier extends LineSegment {
   private long swigCPtr;

   protected CubicBezier(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.CubicBezier_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(CubicBezier obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (CubicBezier obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_CubicBezier(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  
/**
   * Creates a {@link CubicBezier} and returns the pointer.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 CubicBezier(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_CubicBezier__SWIG_0(level, version, pkgVersion), true);
  }

  
/**
   * Creates a {@link CubicBezier} and returns the pointer.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 CubicBezier(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_CubicBezier__SWIG_1(level, version), true);
  }

  
/**
   * Creates a {@link CubicBezier} and returns the pointer.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 CubicBezier(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_CubicBezier__SWIG_2(level), true);
  }

  
/**
   * Creates a {@link CubicBezier} and returns the pointer.
   <p>
   * @param level the SBML Level.
   * @param version the Version within the SBML Level.
   * @param pkgVersion the version of the package.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 CubicBezier() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_CubicBezier__SWIG_3(), true);
  }

  
/**
   * Constructor.
   <p>
   * <p>
 * The package namespaces object used in this constructor is derived from a
 * {@link SBMLNamespaces} object, which encapsulates SBML Level/Version/namespaces
 * information.  It is used to communicate the SBML Level, Version, and 
 * package version and name information used in addition to SBML Level&nbsp;3 Core.  A
 * common approach to using libSBML's {@link SBMLNamespaces} facilities is to create an
 * package namespace object somewhere in a program once, then hand that object
 * as needed to object constructors of that package that accept it as and
 * argument, such as this one.
   <p>
   * @param layoutns the {@link LayoutPkgNamespaces} object.
   <p>
   * <p>
 * @note Attempting to add an object to an {@link SBMLDocument} having a different
 * combination of SBML Level, Version and XML namespaces than the object
 * itself will result in an error at the time a caller attempts to make the
 * addition.  A parent object must have compatible Level, Version and XML
 * namespaces.  (Strictly speaking, a parent may also have more XML
 * namespaces than a child, but the reverse is not permitted.)  The
 * restriction is necessary to ensure that an SBML model has a consistent
 * overall structure.  This requires callers to manage their objects
 * carefully, but the benefit is increased flexibility in how models can be
 * created by permitting callers to create objects bottom-up if desired.  In
 * situations where objects are not yet attached to parents (e.g.,
 * {@link SBMLDocument}), knowledge of the intented SBML Level and Version help
 * libSBML determine such things as whether it is valid to assign a
 * particular value to an attribute.  For packages, this means that the 
 * parent object to which this package element is being added must have
 * been created with the package namespace, or that the package namespace
 * was added to it, even if that parent is not a package object itself.
   */ public
 CubicBezier(LayoutPkgNamespaces layoutns) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_CubicBezier__SWIG_4(LayoutPkgNamespaces.getCPtr(layoutns), layoutns), true);
  }

  
/**
   * Creates a {@link CubicBezier} with the given 2D coordinates and returns the
   * pointer.
   <p>
   * (FOR BACKWARD COMPATIBILITY)
   */ public
 CubicBezier(LayoutPkgNamespaces layoutns, double x1, double y1, double x2, double y2) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_CubicBezier__SWIG_5(LayoutPkgNamespaces.getCPtr(layoutns), layoutns, x1, y1, x2, y2), true);
  }

  
/**
   * Creates a {@link CubicBezier} with the given 3D coordinates and returns the
   * pointer.
   <p>
   * (FOR BACKWARD COMPATIBILITY)
   */ public
 CubicBezier(LayoutPkgNamespaces layoutns, double x1, double y1, double z1, double x2, double y2, double z2) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_CubicBezier__SWIG_6(LayoutPkgNamespaces.getCPtr(layoutns), layoutns, x1, y1, z1, x2, y2, z2), true);
  }

  
/**
   * Copy constructor.
   <p>
   * (FOR BACKWARD COMPATIBILITY)
   */ public
 CubicBezier(CubicBezier orig) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_CubicBezier__SWIG_7(CubicBezier.getCPtr(orig), orig), true);
  }

  
/**
   * Creates a {@link CubicBezier} with the given points and returns the pointer.
   <p>
   * (FOR BACKWARD COMPATIBILITY)
   */ public
 CubicBezier(LayoutPkgNamespaces layoutns, Point start, Point end) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_CubicBezier__SWIG_8(LayoutPkgNamespaces.getCPtr(layoutns), layoutns, Point.getCPtr(start), start, Point.getCPtr(end), end), true);
  }

  
/**
   * Creates a {@link CubicBezier} with the given points and returns the pointer.
   <p>
   * (FOR BACKWARD COMPATIBILITY)
   */ public
 CubicBezier(LayoutPkgNamespaces layoutns, Point start, Point base1, Point base2, Point end) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_CubicBezier__SWIG_9(LayoutPkgNamespaces.getCPtr(layoutns), layoutns, Point.getCPtr(start), start, Point.getCPtr(base1), base1, Point.getCPtr(base2), base2, Point.getCPtr(end), end), true);
  }

  
/**
   * Creates a new {@link Layout} from the given {@link XMLNode}
   <p>
   * (FOR BACKWARD COMPATIBILITY)
   */ public
 CubicBezier(XMLNode node, long l2version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_CubicBezier__SWIG_10(XMLNode.getCPtr(node), node, l2version), true);
  }

  
/**
   * Creates a new {@link Layout} from the given {@link XMLNode}
   <p>
   * (FOR BACKWARD COMPATIBILITY)
   */ public
 CubicBezier(XMLNode node) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_CubicBezier__SWIG_11(XMLNode.getCPtr(node), node), true);
  }

  
/**
   * Returns the first base point of the curve (the one closer to the
   * starting point).
   <p>
   * @return the {@link Point} child 'basePoint1'.  Will always return an
   * actual object: if previously unset, the {@link Point} will exist, but
   * have no set attributes nor children.
   */ public
 Point getBasePoint1() {
    long cPtr = libsbmlJNI.CubicBezier_getBasePoint1(swigCPtr, this);
    return (cPtr == 0) ? null : new Point(cPtr, false);
  }

  
/**
   * Initializes first base point with a copy of the given point.
   <p>
   * @param p the {@link Point} to use as 'basePoint1' (creates a copy).
   */ public
 void setBasePoint1(Point p) {
    libsbmlJNI.CubicBezier_setBasePoint1__SWIG_0(swigCPtr, this, Point.getCPtr(p), p);
  }

  
/**
   * Initializes first base point with the given coordinates.  It is impossible to create a {@link Point} with <em>no</em> 'z' attribute in this way; if no value is supplied, '0.0' will be used.
   <p>
   * @param x the value to use for the 'x' attribute of the basePoint1 {@link Point}.
   * @param y the value to use for the 'y' attribute of the basePoint1 {@link Point}.
   * @param z the value to use for the 'z' attribute of the basePoint1 {@link Point}.
   */ public
 void setBasePoint1(double x, double y, double z) {
    libsbmlJNI.CubicBezier_setBasePoint1__SWIG_1(swigCPtr, this, x, y, z);
  }

  
/**
   * Initializes first base point with the given coordinates.  It is impossible to create a {@link Point} with <em>no</em> 'z' attribute in this way; if no value is supplied, '0.0' will be used.
   <p>
   * @param x the value to use for the 'x' attribute of the basePoint1 {@link Point}.
   * @param y the value to use for the 'y' attribute of the basePoint1 {@link Point}.
   * @param z the value to use for the 'z' attribute of the basePoint1 {@link Point}.
   */ public
 void setBasePoint1(double x, double y) {
    libsbmlJNI.CubicBezier_setBasePoint1__SWIG_2(swigCPtr, this, x, y);
  }

  
/**
   * Returns the second base point of the curve (the one closer to the end
   * point).
   <p>
   * @return the {@link Point} child 'basePoint2'.  Will always return an
   * actual object: if previously unset, the {@link Point} will exist, but
   * have no set attributes nor children.
   */ public
 Point getBasePoint2() {
    long cPtr = libsbmlJNI.CubicBezier_getBasePoint2(swigCPtr, this);
    return (cPtr == 0) ? null : new Point(cPtr, false);
  }

  
/**
   * Initializes second base point with a copy of the given point.
   <p>
   * @param p the {@link Point} to use as 'basePoint2' (creates a copy).
   */ public
 void setBasePoint2(Point p) {
    libsbmlJNI.CubicBezier_setBasePoint2__SWIG_0(swigCPtr, this, Point.getCPtr(p), p);
  }

  
/**
   * Initializes second base point with the given coordinates.  It is impossible to create a {@link Point} with <em>no</em> 'z' attribute in this way; if no value is supplied, '0.0' will be used.
   <p>
   * @param x the value to use for the 'x' attribute of the basePoint2 {@link Point}.
   * @param y the value to use for the 'y' attribute of the basePoint2 {@link Point}.
   * @param z the value to use for the 'z' attribute of the basePoint2 {@link Point}.
   */ public
 void setBasePoint2(double x, double y, double z) {
    libsbmlJNI.CubicBezier_setBasePoint2__SWIG_1(swigCPtr, this, x, y, z);
  }

  
/**
   * Initializes second base point with the given coordinates.  It is impossible to create a {@link Point} with <em>no</em> 'z' attribute in this way; if no value is supplied, '0.0' will be used.
   <p>
   * @param x the value to use for the 'x' attribute of the basePoint2 {@link Point}.
   * @param y the value to use for the 'y' attribute of the basePoint2 {@link Point}.
   * @param z the value to use for the 'z' attribute of the basePoint2 {@link Point}.
   */ public
 void setBasePoint2(double x, double y) {
    libsbmlJNI.CubicBezier_setBasePoint2__SWIG_2(swigCPtr, this, x, y);
  }

  
/** * @internal */ public
 boolean getBasePt1ExplicitlySet() {
    return libsbmlJNI.CubicBezier_getBasePt1ExplicitlySet(swigCPtr, this);
  }

  
/** * @internal */ public
 boolean getBasePt2ExplicitlySet() {
    return libsbmlJNI.CubicBezier_getBasePt2ExplicitlySet(swigCPtr, this);
  }

  
/**
   * Calls initDefaults from {@link LineSegment}.
   */ public
 void initDefaults() {
    libsbmlJNI.CubicBezier_initDefaults(swigCPtr, this);
  }

  
/**
   * Turns the {@link CubicBezier} into a line by setting both 'basepoint1' and
   * 'basepoint2' children to the midpoint between the 'start' and the 
   * 'end' points.
   */ public
 void straighten() {
    libsbmlJNI.CubicBezier_straighten(swigCPtr, this);
  }

  
/**
   * Returns the XML element name of
   * this SBML object.
   <p>
   * @return the string of the name of this element.
   */ public
 String getElementName() {
    return libsbmlJNI.CubicBezier_getElementName(swigCPtr, this);
  }

  
/**
   * Creates and returns a deep copy of this {@link CubicBezier}.
   <p>
   * @return a (deep) copy of this {@link CubicBezier}.
   */ public
 CubicBezier cloneObject() {
    long cPtr = libsbmlJNI.CubicBezier_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new CubicBezier(cPtr, true);
  }

  
/**
   * Returns the libSBML type code of this object instance.
   <p>
   * <p>
 * LibSBML attaches an identifying code to every kind of SBML object.  These
 * are integer constants known as <em>SBML type codes</em>.  The names of all
 * the codes begin with the characters <code>SBML_</code>.
 * In the Java language interface for libSBML, the
 * type codes are defined as static integer constants in the interface class
 * {@link libsbmlConstants}.    Note that different Level&nbsp;3
 * package plug-ins may use overlapping type codes; to identify the package
 * to which a given object belongs, call the 
 * <code>{@link SBase#getPackageName()}
 * </code>
 * method on the object.
 <p>
 * The exception to this is lists:  all SBML-style list elements have the type 
 * {@link libsbmlConstants#SBML_LIST_OF SBML_LIST_OF}, regardless of what package they 
 * are from.
   <p>
   * @return the SBML type code for this object:
   * {@link libsbmlConstants#SBML_LAYOUT_CUBICBEZIER SBML_LAYOUT_CUBICBEZIER}.
   <p>
   * <p>
 * @warning <span class='warning'>The specific integer values of the possible
 * type codes may be reused by different libSBML plug-ins for SBML Level&nbsp;3.
 * packages,  To fully identify the correct code, <strong>it is necessary to
 * invoke both getPackageName() and getTypeCode()</strong> (or 
 * {@link ListOf#getItemTypeCode()}).</span>
   <p>
   * @see #getElementName()
   * @see #getPackageName()
   */ public
 int getTypeCode() {
    return libsbmlJNI.CubicBezier_getTypeCode(swigCPtr, this);
  }

  
/**
    * Creates an {@link XMLNode} object from this.
    */ public
 XMLNode toXML() {
    return new XMLNode(libsbmlJNI.CubicBezier_toXML(swigCPtr, this), true);
  }

  public void connectToChild() {
    libsbmlJNI.CubicBezier_connectToChild(swigCPtr, this);
  }

  
/** * @internal */ public
 void enablePackageInternal(String pkgURI, String pkgPrefix, boolean flag) {
    libsbmlJNI.CubicBezier_enablePackageInternal(swigCPtr, this, pkgURI, pkgPrefix, flag);
  }

}
