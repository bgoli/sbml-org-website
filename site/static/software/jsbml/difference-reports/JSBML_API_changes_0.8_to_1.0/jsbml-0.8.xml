<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Thu Sep 25 04:25:53 GMT-08:00 2014 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="jsbml-0.8"
  jdversion="1.1.1">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /home/rodrigue/src/jdiff-1.1.1/jdiff.jar:/home/rodrigue/src/jdiff-1.1.1/xerces.jar -d /home/rodrigue/src/jsbml_all/trunk/doc/jdiff/JSBML_API_changes_0.8_to_1.0 -classpath /usr/share/java/ant.jar:/usr/share/java/ant-launcher.jar:/usr/share/java/jaxp_parser_impl.jar:/usr/share/java/xml-commons-apis.jar:/usr/share/java/antlr.jar:/usr/share/java/ant/ant-antlr.jar:/usr/share/java/bcel.jar:/usr/share/java/ant/ant-apache-bcel.jar:/usr/share/java/bsf.jar:/usr/share/java/ant/ant-apache-bsf.jar:/usr/share/java/log4j.jar:/usr/share/java/ant/ant-apache-log4j.jar:/usr/share/java/oro.jar:/usr/share/java/ant/ant-apache-oro.jar:/usr/share/java/regexp.jar:/usr/share/java/ant/ant-apache-regexp.jar:/usr/share/java/xml-commons-resolver.jar:/usr/share/java/ant/ant-apache-resolver.jar:/usr/share/java/jakarta-commons-logging.jar:/usr/share/java/ant/ant-commons-logging.jar:/usr/share/java/jakarta-commons-net.jar:/usr/share/java/ant/ant-commons-net.jar:/usr/share/java/javamail.jar:/usr/share/java/jaf.jar:/usr/share/java/ant/ant-javamail.jar:/usr/share/java/jdepend.jar:/usr/share/java/ant/ant-jdepend.jar:/usr/share/java/jsch.jar:/usr/share/java/ant/ant-jsch.jar:/usr/share/java/junit.jar:/usr/share/java/ant/ant-junit.jar:/usr/share/java/ant/ant-nodeps.jar:/usr/share/java/ant/ant-swing.jar:/usr/share/java/jaxp_transform_impl.jar:/usr/share/java/ant/ant-trax.jar:/usr/share/java/xalan-j2-serializer.jar:/usr/lib/jvm/java-1.6.0-openjdk.x86_64/lib/tools.jar:/usr/share/ant/lib/ant-apache-bsf.jar:/usr/share/ant/lib/ant-apache-log4j.jar:/usr/share/ant/lib/ant-trax.jar:/usr/share/ant/lib/ant-javamail.jar:/usr/share/ant/lib/ant-apache-bcel.jar:/usr/share/ant/lib/ant-bootstrap.jar:/usr/share/ant/lib/ant-apache-regexp.jar:/usr/share/ant/lib/ant-commons-logging.jar:/usr/share/ant/lib/ant-jdepend.jar:/usr/share/ant/lib/ant-apache-resolver.jar:/usr/share/ant/lib/ant-junit.jar:/usr/share/ant/lib/ant-launcher.jar:/usr/share/ant/lib/ant.jar:/usr/share/ant/lib/ant-jsch.jar:/usr/share/ant/lib/ant-swing.jar:/usr/share/ant/lib/ant-nodeps.jar:/usr/share/ant/lib/ant-antlr.jar:/usr/share/ant/lib/ant-commons-net.jar:/usr/share/ant/lib/ant-apache-oro.jar -sourcepath /home/rodrigue/src/jsbml_all/branches/jsbml-0.8/src -apiname jsbml-0.8 -baseURI http://www.w3.org -apidir /home/rodrigue/src/jsbml_all/trunk/doc/jdiff/JSBML_API_changes_0.8_to_1.0 -source 1.5 -->
<package name="org.sbml.jsbml">
  <!-- start class org.sbml.jsbml.AbstractMathContainer -->
  <class name="AbstractMathContainer" extends="org.sbml.jsbml.AbstractSBase"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.MathContainer"/>
    <constructor name="AbstractMathContainer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a MathContainer instance. By default, the math object is null.]]>
      </doc>
    </constructor>
    <constructor name="AbstractMathContainer" type="org.sbml.jsbml.AbstractMathContainer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a MathContainer instance from a given MathContainer.
 
 @param sb an <code>AbstractMathContainer</code> object to clone]]>
      </doc>
    </constructor>
    <constructor name="AbstractMathContainer" type="org.sbml.jsbml.ASTNode, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a MathContainer instance from an ASTNode, level and version. By
 default, the math is null.
 
 @param math the ASTNode representing the math.
 @param level the SBML level
 @param version the SBML version]]>
      </doc>
    </constructor>
    <constructor name="AbstractMathContainer" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a MathContainer instance from a level and version. By default,
 the formula, math and mathBuffer are null.
 
 @param level the SBML level
 @param version the SBML version]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.AbstractMathContainer"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="containsUndeclaredUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDerivedUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDerivedUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFormula" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMath" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMathMLString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetMath" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="setFormula"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="formula" type="java.lang.String"/>
      <exception name="ParseException" type="org.sbml.jsbml.text.parser.ParseException"/>
    </method>
    <method name="setMath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="math" type="org.sbml.jsbml.ASTNode"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetFormula"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetMath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Base class for all the SBML components which contain MathML nodes.
 
 @author Andreas Dr&auml;ger
 @author marine
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.AbstractMathContainer -->
  <!-- start class org.sbml.jsbml.AbstractNamedSBase -->
  <class name="AbstractNamedSBase" extends="org.sbml.jsbml.AbstractSBase"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.NamedSBase"/>
    <constructor name="AbstractNamedSBase"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an {@link AbstractNamedSBase}. By default, id and name are null.]]>
      </doc>
    </constructor>
    <constructor name="AbstractNamedSBase" type="org.sbml.jsbml.AbstractNamedSBase"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an {@link AbstractNamedSBase} from a given {@link AbstractNamedSBase}.
 
 @param nsb an <code>AbstractNamedSBase</code> object to clone]]>
      </doc>
    </constructor>
    <constructor name="AbstractNamedSBase" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an {@link AbstractNamedSBase} from a level and version. By default, id
 and name are null.
 
 @param level the SBML level
 @param version the SBML version]]>
      </doc>
    </constructor>
    <constructor name="AbstractNamedSBase" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an {@link AbstractNamedSBase} with the given identifier. Note
 that with this constructor the level and version of the element are not
 specified. These elements are however required to ensure the validity of
 the SBML data structure. Without level and version, it may not be
 possible to serialize this class to SBML.
 
 @param id the id of this <code>AbstractNamedSBase</code>]]>
      </doc>
    </constructor>
    <constructor name="AbstractNamedSBase" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AbctractNamedSBase from an id, level and version.
 
 @param id the id of this <code>AbstractNamedSBase</code>
 @param level the SBML level
 @param version the SBML version]]>
      </doc>
    </constructor>
    <constructor name="AbstractNamedSBase" type="java.lang.String, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AbctractNamedSBase from an id, name, level and version.
 
 @param id the id of this <code>AbstractNamedSBase</code>
 @param name the name of this <code>AbstractNamedSBase</code>
 @param level the SBML level
 @param version the SBML version]]>
      </doc>
    </constructor>
    <method name="isValidId" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="idCandidate" type="java.lang.String"/>
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Checks whether the given idCandidate is a valid identifier according to
 the SBML specifications.
 
 @param idCandidate
            The {@link String} to be tested.
 @param level
            Level of the SBML to be used.
 @param version
            Version of the SBML to be used.
 @return True if the argument satisfies the specification of identifiers
         in the SBML specifications or false otherwise.]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetId" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetName" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="setId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
    </method>
    <method name="setName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the component, if it is available. Otherwise,
 the identifier is returned. If both is not possible, the class name of
 this element is returned.]]>
      </doc>
    </method>
    <method name="unsetId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[The base class for each SBML element with an optional id and name.
 
 @author Andreas Dr&auml;ger
 @author Nicolas Rodriguez
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.AbstractNamedSBase -->
  <!-- start class org.sbml.jsbml.AbstractNamedSBaseWithUnit -->
  <class name="AbstractNamedSBaseWithUnit" extends="org.sbml.jsbml.AbstractNamedSBase"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.NamedSBaseWithDerivedUnit"/>
    <implements name="org.sbml.jsbml.SBaseWithUnit"/>
    <constructor name="AbstractNamedSBaseWithUnit"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="AbstractNamedSBaseWithUnit" type="org.sbml.jsbml.AbstractNamedSBaseWithUnit"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param nsbu]]>
      </doc>
    </constructor>
    <constructor name="AbstractNamedSBaseWithUnit" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="AbstractNamedSBaseWithUnit" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id]]>
      </doc>
    </constructor>
    <constructor name="AbstractNamedSBaseWithUnit" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="AbstractNamedSBaseWithUnit" type="java.lang.String, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id
 @param name
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.AbstractNamedSBaseWithUnit"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="containsUndeclaredUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getDerivedUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDerivedUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPredefinedUnitID" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the predefined unit identifier for this data type with the
 current level/version combination.
 
 @return an identifier of a unit in the containing {@link Model}. This can
         be one of the predefined unit identifiers if there are any.]]>
      </doc>
    </method>
    <method name="getUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isPredefinedUnitsID" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unitsID" type="java.lang.String"/>
      <doc>
      <![CDATA[Checks whether or not a given identifier for a {@link Kind} or
 {@link UnitDefinition} equals a predefined unit identifier for this type.
 
 @param unitsID the identifier to be checked.
 @return true if the given identifier equals the unit definition
         identifier that is predefined under the Level/Version combination
         for this data type.]]>
      </doc>
    </method>
    <method name="isSetUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unitKind" type="org.sbml.jsbml.Unit.Kind"/>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="org.sbml.jsbml.Unit"/>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="units" type="org.sbml.jsbml.UnitDefinition"/>
    </method>
    <method name="unsetUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="unitsID" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The unit attribute of this variable.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This simple implementation of the interfaces
 {@link NamedSBaseWithDerivedUnit} and {@link SBaseWithUnit} defines elements
 that can be addressed by their identifier and are or can be associated with a
 defined {@link Unit} or {@link UnitDefinition}. Derived elements from this
 class might be directly or indirectly associated with some value, i.e., the
 value might be derived by evaluating some expression in form of an
 {@link ASTNode}, or it might be directly defined as an attribute.
 
 @author Andreas Dr&auml;ger
 @date 2010-12-16
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.AbstractNamedSBaseWithUnit -->
  <!-- start class org.sbml.jsbml.AbstractSBase -->
  <class name="AbstractSBase" extends="org.sbml.jsbml.AbstractTreeNode"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.SBase"/>
    <constructor name="AbstractSBase"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AbstractSBase instance. 
 
 <p>By default, the sboTerm is -1, the
 metaid, notes, parentSBMLObject, annotation, and
 notes are null. The level and version are set to -1.
 The setOfListeners list is empty.]]>
      </doc>
    </constructor>
    <constructor name="AbstractSBase" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an {@link AbstractSBase} instance with the given Level and
 Version.
 
 <p>
 By default, the sboTerm is -1, the metaid, notes,
 {@link #parent}, {@link #annotation}, and notes are null. The
 {@link #setOfListeners} list is empty.
 
 @param level
            the SBML level
 @param version
            the SBML version]]>
      </doc>
    </constructor>
    <constructor name="AbstractSBase" type="org.sbml.jsbml.SBase"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AbstractSBase instance from a given AbstractSBase.
 
 @param sb an <code>AbstractSBase</code> object to clone]]>
      </doc>
    </constructor>
    <method name="isValidLevelAndVersionCombination" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Returns true is the level and version combination is a valid one, false otherwise.
 
 @param level the SBML level
 @param version the SBML version
 @return true is the level and version combination is a valid one, false otherwise.]]>
      </doc>
    </method>
    <method name="addCVTerm" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="term" type="org.sbml.jsbml.CVTerm"/>
    </method>
    <method name="addNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespace" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds an additional namespace to the set of namespaces of this
 {@link SBase} if the given namespace is not yet present within this
 {@link SortedSet}.
 
 @param namespace the namespace to add]]>
      </doc>
    </method>
    <method name="removeNamespace" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespace" type="java.lang.String"/>
      <doc>
      <![CDATA[@param namespace
 @return if operation was a success.]]>
      </doc>
    </method>
    <method name="addDeclaredNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <param name="namespace" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds an additional name space to the set of declared namespaces of this
 {@link SBase}.
 
 @param prefix the prefix of the namespace to add
 @param namespace the namespace to add]]>
      </doc>
    </method>
    <method name="appendNotes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notes" type="java.lang.String"/>
    </method>
    <method name="appendNotes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notes" type="org.sbml.jsbml.xml.XMLNode"/>
      <doc>
      <![CDATA[Appends notes to the existing notes.
 <p>This allows other notes to be preserved whilst
 adding additional information.
 
 @param notes]]>
      </doc>
    </method>
    <method name="checkLevelAndVersionCompatibility" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="sbase" type="org.sbml.jsbml.SBase"/>
      <doc>
      <![CDATA[Checks whether or not the given {@link SBase} has the same level and
 version configuration than this element. If the L/V combination for the
 given <code>sbase</code> is not yet defined, this method sets it to the
 identical values as it is for the current object.
 
 @param sbase
            the element to be checked.
 @return {@code true} if the given <code>sbase</code> and this object
         have the same L/V configuration.
 @throws LevelVersionError
             In case the given {@link SBase} has a different, but defined
             Level/Version combination than this current {@link SBase}, an
             {@link LevelVersionError} is thrown. This method is only
             package-wide visible because it is not intended to be a
             "real" check, rather than to indicate potential errors.]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.AbstractSBase"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="filterCVTerms" return="java.util.List&lt;org.sbml.jsbml.CVTerm&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="qualifier" type="org.sbml.jsbml.CVTerm.Qualifier"/>
    </method>
    <method name="filterCVTerms" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="qualifier" type="org.sbml.jsbml.CVTerm.Qualifier"/>
      <param name="pattern" type="java.lang.String"/>
    </method>
    <method name="notifyChildChange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="oldChild" type="javax.swing.tree.TreeNode"/>
      <param name="newChild" type="javax.swing.tree.TreeNode"/>
    </method>
    <method name="fireNodeRemovedEvent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAnnotation" return="org.sbml.jsbml.Annotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAnnotationString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link Annotation} of this SBML object as a {@link String}.
 
 @return the {@link Annotation} of this SBML object as a {@link String} or
         an empty {@link String} if there are no {@link Annotation}.]]>
      </doc>
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="childIndex" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCVTerm" return="org.sbml.jsbml.CVTerm"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="getCVTerms" return="java.util.List&lt;org.sbml.jsbml.CVTerm&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getElementName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getHistory" return="org.sbml.jsbml.History"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLevel" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLevelAndVersion" return="org.sbml.jsbml.util.ValuePair&lt;java.lang.Integer, java.lang.Integer&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMetaId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getModel" return="org.sbml.jsbml.Model"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNamespaces" return="java.util.SortedSet&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDeclaredNamespaces" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNotes" return="org.sbml.jsbml.xml.XMLNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an <code>XMLNode</code> object that represent the notes of this element.
 
 @return an <code>XMLNode</code> object that represent the notes of this element.]]>
      </doc>
    </method>
    <method name="getNotesString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNumCVTerms" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParent" return="org.sbml.jsbml.SBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This is equivalent to calling {@link #getParentSBMLObject()}, but this
 method is needed for {@link TreeNode}.
 
 @return the parent element of this element.
 @see #getParentSBMLObject()]]>
      </doc>
    </method>
    <method name="getParentSBMLObject" return="org.sbml.jsbml.SBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSBMLDocument" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSBOTerm" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSBOTermID" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getVersion" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasValidAnnotation" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasValidLevelVersionNamespaceCombination" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetAnnotation" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetHistory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetLevel" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetLevelAndVersion" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetMetaId" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetNotes" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetParentSBMLObject" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetSBOTerm" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetVersion" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="registerChild"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbase" type="org.sbml.jsbml.SBase"/>
      <exception name="LevelVersionError" type="org.sbml.jsbml.LevelVersionError"/>
    </method>
    <method name="unregister"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbase" type="org.sbml.jsbml.SBase"/>
    </method>
    <method name="setAnnotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="annotation" type="org.sbml.jsbml.Annotation"/>
    </method>
    <method name="setHistory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="history" type="org.sbml.jsbml.History"/>
    </method>
    <method name="setLevel"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
    </method>
    <method name="setMetaId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="metaId" type="java.lang.String"/>
    </method>
    <method name="setNotes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notes" type="java.lang.String"/>
    </method>
    <method name="setNotes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notes" type="org.sbml.jsbml.xml.XMLNode"/>
    </method>
    <method name="setParentSBML"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="parent" type="org.sbml.jsbml.SBase"/>
    </method>
    <method name="setParentSBMLObject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="sbase" type="org.sbml.jsbml.SBase"/>
      <exception name="LevelVersionError" type="org.sbml.jsbml.LevelVersionError"/>
      <doc>
      <![CDATA[Checks the Level/Version configuration of the new parent (if it is
 compliant to the one of this {@link SBase}), adds all changeListeners from
 the parent to this {@link SBase}, fires a
 {@link TreeNodeChangeListener#nodeAdded(TreeNode)} event, and and finally,
 it will forward the new parent to {@link #setParentSBML(SBase)}.
 Note that this will cause another event to be triggered:
 {@link TreeNodeChangeListener#propertyChange(java.beans.PropertyChangeEvent)}
 with the old and the new parent.
 
 @param sbase
        the new parent element.
 @throws LevelVersionError
         if the SBML Level and Version configuration of the new parent
         differs from the one of this {@link SBase}.
 @see {@link #setParentSBML(SBase)}]]>
      </doc>
    </method>
    <method name="setSBOTerm"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="term" type="int"/>
    </method>
    <method name="setSBOTerm"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboid" type="java.lang.String"/>
    </method>
    <method name="setThisAsParentSBMLObject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbase" type="org.sbml.jsbml.SBase"/>
      <exception name="LevelVersionError" type="org.sbml.jsbml.LevelVersionError"/>
    </method>
    <method name="setVersion"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="version" type="int"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetAnnotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetCVTerms"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetHistory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetMetaId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetNotes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetSBOTerm"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[The base class for each {@link SBase} component.
 
 @author Andreas Dr&auml;ger
 @author Nicolas Rodriguez
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.AbstractSBase -->
  <!-- start class org.sbml.jsbml.AbstractTreeNode -->
  <class name="AbstractTreeNode" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.util.TreeNodeWithChangeSupport"/>
    <constructor name="AbstractTreeNode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="AbstractTreeNode" type="javax.swing.tree.TreeNode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor for cloning. {@link AbstractTreeNode} has two properties:
 {@link #parent} and {@link #listOfListeners}. Both of them are not cloned
 by this method, for two reasons:
 <ul>
 <li>
 The {@link #parent} is not cloned and is left as {@code null}
 because the new {@link AbstractTreeNode} will get a parent set as soon as
 it is added/linked again to a {@link Model}. Note that only the top-level
 element of the cloned sub-tree will have a {@code null} value as its
 parent. All sub-element will point to their correct parent element..</li>
 <li>{@link #listOfListeners} is needed in all other setXX() methods.
 Cloning these might lead to strange and unexpected behavior, because when
 doing a deep cloning, the listeners of the old object would suddenly be
 informed about all value changes within this new object. Since we do
 cloning, all values of all child elements have to be touched, i.e., all
 listeners would be informed many times, but each time receive the
 identical value as it was before. Since it is totally unclear of which
 type listeners are, a deep cloning of these is not possible.</li>
 </ul>
 Therefore, it is necessary to keep in mind that the parent of the clone
 will be null and that you have to care by yourself if you are using
 {@link TreeNodeChangeListener}s.
 
 @param node
            The original {@link TreeNode} to be cloned.]]>
      </doc>
    </constructor>
    <method name="indexOf" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="javax.swing.tree.TreeNode"/>
      <param name="child" type="javax.swing.tree.TreeNode"/>
      <doc>
      <![CDATA[Searches the given child in the list of sub-nodes of the parent element.
 
 @param parent
 @param child
 @return the index of the child in the parent's list of childs or -1 if no
         such child can be found.]]>
      </doc>
    </method>
    <method name="addAllChangeListeners" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listeners" type="java.util.Collection&lt;org.sbml.jsbml.util.TreeNodeChangeListener&gt;"/>
    </method>
    <method name="addTreeNodeChangeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
    </method>
    <method name="addTreeNodeChangeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
      <param name="recursive" type="boolean"/>
    </method>
    <method name="children" return="java.util.Enumeration&lt;javax.swing.tree.TreeNode&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="javax.swing.tree.TreeNode"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="fireNodeAddedEvent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="fireNodeRemovedEvent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTreeNodeChangeListenerCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="firePropertyChange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="propertyName" type="java.lang.String"/>
      <param name="oldValue" type="java.lang.Object"/>
      <param name="newValue" type="java.lang.Object"/>
    </method>
    <method name="getIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="javax.swing.tree.TreeNode"/>
    </method>
    <method name="getListOfTreeNodeChangeListeners" return="java.util.List&lt;org.sbml.jsbml.util.TreeNodeChangeListener&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNumChildren" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #getChildCount()}">
      <doc>
      <![CDATA[Returns the number of child elements of this {@link TreeNode}.
 
 @return the number of children TreeNodes the receiver contains.
 @deprecated use {@link #getChildCount()}]]>
      </doc>
    </method>
    <method name="getParent" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isLeaf" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isRoot" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetParent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="notifyChildChange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="oldChild" type="javax.swing.tree.TreeNode"/>
      <param name="newChild" type="javax.swing.tree.TreeNode"/>
      <doc>
      <![CDATA[This method is called when one child has been swapped with another one
 and can be used to check certain properties of the resulting changed
 tree.
 
 @param oldChild
            the element that was a child of this node before the change.
 @param newChild
            the new child whose new parent is this node.]]>
      </doc>
    </method>
    <method name="removeAllTreeNodeChangeListeners"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="removeTreeNodeChangeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
    </method>
    <method name="removeTreeNodeChangeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
      <param name="recursive" type="boolean"/>
    </method>
    <method name="setParent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="parent" type="javax.swing.tree.TreeNode"/>
      <doc>
      <![CDATA[@param parent
            the parent to set]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="listOfListeners" type="java.util.List&lt;org.sbml.jsbml.util.TreeNodeChangeListener&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link List} of listeners for this component]]>
      </doc>
    </field>
    <field name="parent" type="javax.swing.tree.TreeNode"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The parent element of this {@link Annotation}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A basic implementation of the {@link TreeNode} interface.
 
 @author Andreas Dr&auml;ger
 @version $Rev: 1447 $
 @since 0.8
 @date 11.07.2011]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.AbstractTreeNode -->
  <!-- start class org.sbml.jsbml.AlgebraicRule -->
  <class name="AlgebraicRule" extends="org.sbml.jsbml.Rule"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AlgebraicRule"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AlgebraicRule instance.]]>
      </doc>
    </constructor>
    <constructor name="AlgebraicRule" type="org.sbml.jsbml.AlgebraicRule"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AlgebraicRule instance from a given {@link AlgebraicRule}
 instance.
 
 @param ar an AlgebraicRule to clone.]]>
      </doc>
    </constructor>
    <constructor name="AlgebraicRule" type="org.sbml.jsbml.ASTNode, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AlgebraicRule instance from math, level and version.
 
 @param math the math of the AlgebraicRule
 @param level the SBML level
 @param version the SBML version]]>
      </doc>
    </constructor>
    <constructor name="AlgebraicRule" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AlgebraicRule instance from level and version.
 
 @param level the SBML level
 @param version the SBML version]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.AlgebraicRule"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isCompartmentVolume" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isParameter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDerivedVariable" return="org.sbml.jsbml.Variable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ModelOverdeterminedException" type="org.sbml.jsbml.validator.ModelOverdeterminedException"/>
      <doc>
      <![CDATA[Provides a convenient way to obtain the variable whose amount
 is determined by this rule. However, you should better directly use the
 {@link OverdeterminationValidator} instead of calling this method. Each
 time you call this method, the bipartite matching between all
 {@link MathContainer}s in the model and all
 {@link NamedSBaseWithDerivedUnit}s will be executed again, leading to a
 probably high computational effort.
 
 An example of how to use the {@link OverdeterminationValidator} is given
 here:
 
 <pre>
 int ruleIndex = 0; // some arbitrary algebraic rule
 AlgebraicRule ar = model.getRule(ruleIndex);
 OverdeterminationValidator odv = new OverdeterminationValidator(model);
 Variable varialbe;
 if (!odv.isOverdetermined()) {
 	variable = (Variable) odv.getMatching().get(ar);
  System.out.printf("Rule %d determines Variable %s.", ruleIndex, variable.getId());
 }
 </pre>
 
 @return The {@link Variable} determined by this {@link AlgebraicRule}
 @throws ModelOverdeterminedException
             if the model containing this {@link Rule} is over determined.
 @throws NullPointerException
             Calling this method requires that this {@link Rule} is
             already part of a {@link Model}. If you just created a
             {@link Rule} and didn't add it to a {@link Model} you'll
             receive a {@link NullPointerException}.]]>
      </doc>
    </method>
    <method name="isSpeciesConcentration" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the algebraicRule XML element of a SBML file.
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.AlgebraicRule -->
  <!-- start class org.sbml.jsbml.Annotation -->
  <class name="Annotation" extends="org.sbml.jsbml.AnnotationElement"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Annotation"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an Annotation instance. By default, the {@link History} and
 otherAnnotation Strings are null. The list of {@link CVTerm}s, annotationNamespaces, 
 rdfAnnotationNamespaces and extensions are empty.]]>
      </doc>
    </constructor>
    <constructor name="Annotation" type="org.sbml.jsbml.Annotation"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new Annotation instance by cloning the given Annotation.
 
 @param annotation the annotation to be cloned.]]>
      </doc>
    </constructor>
    <constructor name="Annotation" type="java.util.List&lt;org.sbml.jsbml.CVTerm&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an {@link Annotation} instance from a list of {@link CVTerm}
 objects. By default, the {@link History} and otherAnnotation {@link String}s are
 null. The {@link Map}s annotationNamespaces, rdfAnnotationNamespaces and
 extensions are empty.
 
 @param cvTerms
            the list of {@link CVTerm}.]]>
      </doc>
    </constructor>
    <constructor name="Annotation" type="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an {@link Annotation} instance from a given {@link Map} of
 annotations. By default, the {@link History} and otherAnnotation {@link String}s
 are null. The list of {@link CVTerm}s, rdfAnnotationNamespaces and
 extensions are empty.
 
 @param annotations
            a map containing an XML name space and a {@link String}
            containing all the annotation elements of this name space.]]>
      </doc>
    </constructor>
    <constructor name="Annotation" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an {@link Annotation} instance from a {@link String} containing non RDF
 annotation. By default, the {@link History} is null, the list of {@link CVTerm}s
 is empty. The {@link Map}s annotationNamespaces, rdfAnnotationNamespaces
 and extensions are empty.
 
 @param annotation
            a {@link String} containing non RDF annotation, it will be parsed to
            create a {@link Map} containing an XML name space associated with a
            {@link String} representing all the annotation elements of
            this name space.]]>
      </doc>
    </constructor>
    <constructor name="Annotation" type="java.lang.String, java.util.List&lt;org.sbml.jsbml.CVTerm&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an {@link Annotation} instance from a {@link String} containing
 non RDF annotation and a list of {@link CVTerm}. By default, the
 {@link History} is null. The {@link Map}s annotationNamespaces,
 rdfAnnotationNamespaces and extensions are empty.
 
 @param annotation
            a {@link String} containing non RDF annotation, it will be
            parsed to create a {@link Map} containing an XML name space
            associated with a {@link String} representing all the
            annotation elements of this name space.
 @param cvTerms
            the {@link List} of {@link CVTerm}.]]>
      </doc>
    </constructor>
    <method name="getElementNameEquivalentToQualifier" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="qualifier" type="org.sbml.jsbml.CVTerm.Qualifier"/>
      <doc>
      <![CDATA[Returns a {@link String} which represents the given {@link Qualifier}.
 
 @param qualifier a <code>Qualifier</code>
 @return a {@link String} which represents the given {@link Qualifier}.]]>
      </doc>
    </method>
    <method name="addAnnotationNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespaceName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds a namespace to the map annotationNamespace of this object.
 
 @param namespaceName an XML namespace name.
 @param prefix an optional prefix for the namespace.
 @param URI the URI of the namespace]]>
      </doc>
    </method>
    <method name="addCVTerm" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cvTerm" type="org.sbml.jsbml.CVTerm"/>
      <doc>
      <![CDATA[Adds a {@link CVTerm} and checks whether the required name spaces have
 already been added to the {@link #rdfAnnotationNamespaces}. If name
 spaces are missing, these are added automatically.
 
 @param cvTerm
            the {@link CVTerm} to add.
 @return true if the 'cvTerm' element has been added to the {@link List}
         of {@link Qualifier}s.]]>
      </doc>
    </method>
    <method name="addExtension"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespace" type="java.lang.String"/>
      <param name="annotation" type="org.sbml.jsbml.Annotation"/>
      <doc>
      <![CDATA[Adds an Annotation extension object to the extensions map of this object.
 
 @param namespace the name space.
 @param annotation the annotation extension object.]]>
      </doc>
    </method>
    <method name="addRDFAnnotationNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespaceName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds a name space to the rdfAnnotationNamespaces {@link Map} of this
 object.
 
 @param namespaceName
            the name space name
 @param prefix
            the name space prefix
 @param URI
            the name space URI]]>
      </doc>
    </method>
    <method name="appendNoRDFAnnotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="annotation" type="java.lang.String"/>
      <doc>
      <![CDATA[Appends some'annotation' to the non RDF annotation StringBuilder of this object.
 
 @param annotation some non RDF annotations.]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.Annotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="filterCVTerms" return="java.util.List&lt;org.sbml.jsbml.CVTerm&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="qualifier" type="org.sbml.jsbml.CVTerm.Qualifier"/>
      <doc>
      <![CDATA[Returns a list of CVTerm having the given qualifier.
 
 @param qualifier the qualifier
 @return a list of CVTerm having the given qualifier, an empty
 list is returned if no CVTerm are found.]]>
      </doc>
    </method>
    <method name="filterCVTerms" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="qualifier" type="org.sbml.jsbml.CVTerm.Qualifier"/>
      <param name="pattern" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a list of CVTerm having the given qualifier and
 where the URI contains the given pattern. The pattern can only be plain text.
 
 @param qualifier the qualifier.
 @param pattern a plain text pattern.
 @return a list of CVTerm having the given qualifier and
 where the URI matches the given pattern.]]>
      </doc>
    </method>
    <method name="getAbout" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the about String of this object.
 
 @return the about String of this object.]]>
      </doc>
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAnnotationBuilder" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the StringBuilder representing non RDF annotations.
 
 @return the StringBuilder representing non RDF annotations.]]>
      </doc>
    </method>
    <method name="getAnnotationNamespaces" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the annotationNamespace map of this object.
 
 @return the annotationNamespace map of this object.]]>
      </doc>
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="childIndex" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCVTerm" return="org.sbml.jsbml.CVTerm"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[Returns the CVTerm at the ith position in the list of CVTerms.
 
 @param i the index of the CVTerm to retrieve.
 @return the CVTerm at the ith position in the list of CVTerms.]]>
      </doc>
    </method>
    <method name="getExtension" return="org.sbml.jsbml.Annotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespace" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the Annotation extension object matching 'namespace'. Return null
         if there is no matching object.
 
 @param namespace the namespace
 @return the Annotation extension object matching 'namespace'. Return null
         if there is no matching object.]]>
      </doc>
    </method>
    <method name="getHistory" return="org.sbml.jsbml.History"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link History} of the Annotation.
 
 @return the {@link History} of the Annotation.]]>
      </doc>
    </method>
    <method name="getListOfCVTerms" return="java.util.List&lt;org.sbml.jsbml.CVTerm&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of CVTerms. If they are no CVTerm, an empty list is returned.
 
 @return the list of CVTerms.]]>
      </doc>
    </method>
    <method name="getNamespaces" return="java.util.Set&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of all the namespaces of all the packages which extend
         this object.
 
 @return the list of all the namespaces of all the packages which extend
         this object.]]>
      </doc>
    </method>
    <method name="getNonRDFannotation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the String containing annotations other than RDF
         annotation.
 
 @return the String containing annotations other than RDF
         annotation. Return null if there are none.]]>
      </doc>
    </method>
    <method name="getNumCVTerms" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gives the number of {@link CVTerm}s in this {@link Annotation}.
 
 @return the number of controlled vocabulary terms in this {@link Annotation}.]]>
      </doc>
    </method>
    <method name="getRDFAnnotationNamespaces" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the rdfAnnotationNamespaces {@link Map} of this object.
 
 @return the rdfAnnotationNamespaces {@link Map} of this object.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="insertNoRDFAnnotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="annotation" type="java.lang.String"/>
      <param name="offset" type="int"/>
      <doc>
      <![CDATA[Inserts 'annotation' to the non RDF annotation StringBuilder
 at position 'offset'.
 
 @param annotation the piece of annotation to add.
 @param offset the position where to add it in the StringBuilder.]]>
      </doc>
    </method>
    <method name="isEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetAbout" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks whether the 'about' element has been initialized.
 
 @return true if the 'about' element has been initialized.]]>
      </doc>
    </method>
    <method name="isSetAnnotation" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if the Annotation is initialised.
  
 <p>An Annotation is initialised if
 at least one of the following is true :
 <li> there is some non RDF annotation
 <li> one or more CVTerm are defined
 <li> there is an history defined.
 <p>
 
 @return true if the Annotation is initialised]]>
      </doc>
    </method>
    <method name="isSetHistory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if the {@link History} is initialised
 
 @return true if the {@link History} is initialised]]>
      </doc>
    </method>
    <method name="isSetListOfCVTerms" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if the list of {@link CVTerm} is not empty.
 
 @return true if there is one or more {@link CVTerm} defined.]]>
      </doc>
    </method>
    <method name="isSetNonRDFannotation" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if the non RDF part of the Annotation is initialised.
  
 <p>An Annotation is initialised if
  there is some non RDF annotation
 <p>
 
 @return true if the non RDF part of the Annotation is initialised.]]>
      </doc>
    </method>
    <method name="isSetOtherAnnotationThanRDF" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="please use {@link #isSetNonRDFannotation()}">
      <doc>
      <![CDATA[Returns true if there is some non RDF annotation.
 <p>Same as {@link #isSetNonRDFannotation()}
 
 @return true if there is some non RDF annotation.
 @see #isSetNonRDFannotation()
 @deprecated please use {@link #isSetNonRDFannotation()}]]>
      </doc>
    </method>
    <method name="isSetRDFannotation" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if the RDF part of the Annotation is initialised.
  
 <p>An Annotation is initialised if
 at least one of the following is true :
 <li> one or more CVTerm are defined
 <li> there is an history defined.
 <p>
 
 @return true if the RDF part of the Annotation is initialised]]>
      </doc>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the about instance of this object if the attributeName is equal to
 'about'.
 
 @param attributeName the attribute name.
 @param prefix the attribute prefix.
 @param value the attribute value.
 @return true if an about XML attribute has been read]]>
      </doc>
    </method>
    <method name="setAbout"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="about" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the value of the about String of this object.
 
 @param about the about String to set.]]>
      </doc>
    </method>
    <method name="setAnnotationAttributes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="annotationNamespaces" type="org.w3c.dom.NamedNodeMap"/>
      <doc>
      <![CDATA[Sets the annotationNamespaces.
 
 @param annotationNamespaces the annotationNamespaces to set]]>
      </doc>
    </method>
    <method name="setAnnotationNamespaces"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="annotationNamespaces" type="java.util.Map&lt;java.lang.String, java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the annotationNamespaces.
 
 @param annotationNamespaces the annotationNamespaces to set]]>
      </doc>
    </method>
    <method name="setHistory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="history" type="org.sbml.jsbml.History"/>
      <doc>
      <![CDATA[Changes the {@link History} instance to 'history'
 
 @param history the history to set.]]>
      </doc>
    </method>
    <method name="setNonRDFAnnotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nonRDFAnnotation" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the value of the non RDF annotations
 
 @param nonRDFAnnotation]]>
      </doc>
    </method>
    <method name="setRdfAnnotationNamespaces"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rdfAnnotationNamespaces" type="java.util.Map&lt;java.lang.String, java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the rdfAnnotationNamespace map to 'rdfAnnotationNamespaces'.
 
 @param rdfAnnotationNamespaces the rdfAnnotationNamespace {@link Map} to set.]]>
      </doc>
    </method>
    <method name="unsetCVTerms"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clears the {@link List} of {@link CVTerm}s and removes unnecessary
 entries from the {@link #rdfAnnotationNamespaces}.]]>
      </doc>
    </method>
    <method name="unsetHistory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the {@link History} instance of this object to null.]]>
      </doc>
    </method>
    <method name="unsetNonRDFannotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the non RDF annotation String to null.]]>
      </doc>
    </method>
    <field name="URI_RDF_SYNTAX_NS" type="java.lang.String"
      transient="true" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The RDF syntax name space definition URI.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[An Annotation represents the annotations of an {@link SBase} element. It
 contains the list of {@link CVTerm} objects, a {@link Map} containing an XML
 name space and a {@link String} containing all the annotation elements of
 this name space.
 
 @author Marine Dumousseau
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Annotation -->
  <!-- start class org.sbml.jsbml.AnnotationElement -->
  <class name="AnnotationElement" extends="org.sbml.jsbml.AbstractTreeNode"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AnnotationElement"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="AnnotationElement" type="org.sbml.jsbml.AnnotationElement"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param annotation]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[A common super class for all those elements that can be part of an {@link Annotation}.
 
 @author Andreas Dr&auml;ger
 @version $Rev: 1447 $
 @since 0.8
 @date 08.07.2011]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.AnnotationElement -->
  <!-- start interface org.sbml.jsbml.Assignment -->
  <interface name="Assignment"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.MathContainer"/>
    <method name="getVariable" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the variableID of this {@link Assignment}. Returns an empty
         {@link String} if it is not set.
 
 @return the variableID of this {@link Assignment}. Returns an empty
         {@link String} if it is not set.]]>
      </doc>
    </method>
    <method name="getVariableInstance" return="org.sbml.jsbml.Variable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link Variable} instance which has the variableID of this
         {@link Assignment} as id. Return null if it doesn't exist.
 
 @return the {@link Variable} instance which has the variableID of this
         {@link Assignment} as id. Return null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="isSetVariable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the variableID of this {@link Assignment} is not null.
 
 @return true if the variableID of this {@link Assignment} is not null.]]>
      </doc>
    </method>
    <method name="isSetVariableInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the {@link Variable} instance which has the variableID of
         this {@link Assignment} as id is not null.
 
 @return true if the {@link Variable} instance which has the variableID of
         this {@link Assignment} as id is not null.]]>
      </doc>
    </method>
    <method name="setVariable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variableID" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the variableID of this {@link Assignment} to the given value. Listeners
 are notified about this change.
 
 @param variableID
            : the variable to set]]>
      </doc>
    </method>
    <method name="setVariable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="org.sbml.jsbml.Variable"/>
      <doc>
      <![CDATA[Sets the variableID of this {@link Assignment} to the id of the
 {@link Variable} 'variable'.Listeners are notified about this change.
 
 @param variable
            : the variable to set]]>
      </doc>
    </method>
    <method name="unsetVariable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the reference from this InitialAssignment to its {@link Variable}
 if there was any, i.e., the {@link Variable} is set to null. Listeners
 are notified about this change.]]>
      </doc>
    </method>
    <field name="ILLEGAL_VARIABLE_EXCEPTION_MSG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Error message to indicate that a {@link SpeciesReference} cannot be used
 as the {@link Variable} in this {@link Assignment} because the SBML Level
 < 3.]]>
      </doc>
    </field>
    <field name="ILLEGAL_CONSTANT_VARIABLE_MSG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Error message to be displayed in case that a {@link Variable} with
 constant property set to {@code true} is to be assigned to this
 {@link Assignment}.]]>
      </doc>
    </field>
    <field name="NO_SUCH_VARIABLE_EXCEPTION_MSG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Message to be displayed if no {@link Variable} can be found in the
 associated {@link Model} that would have the desired identifier.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[An {@link Assignment} can be seen as a mathematical equation with a
 {@link Variable} on the left hand side and an equation on the right hand side
 that assigns a value to the {@link Variable}.
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.Assignment -->
  <!-- start class org.sbml.jsbml.AssignmentRule -->
  <class name="AssignmentRule" extends="org.sbml.jsbml.ExplicitRule"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AssignmentRule"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AssignmentRule instance. By default, the variableID is null.]]>
      </doc>
    </constructor>
    <constructor name="AssignmentRule" type="org.sbml.jsbml.AssignmentRule"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a cloned AssignmentRule instance from a given AssignmentRule.
 
 @param ar the AssignmentRule to clone.]]>
      </doc>
    </constructor>
    <constructor name="AssignmentRule" type="org.sbml.jsbml.ExplicitRule"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a cloned AssignmentRule instance from a given {@link ExplicitRule}.
 
 @param rule the AssignmentRule to clone.]]>
      </doc>
    </constructor>
    <constructor name="AssignmentRule" type="org.sbml.jsbml.ASTNode, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AssignmentRule instance from a given math, level and version.
 
 @param math the math
 @param level the SBML level
 @param version the SBML version]]>
      </doc>
    </constructor>
    <constructor name="AssignmentRule" type="org.sbml.jsbml.ASTNode, org.sbml.jsbml.Parameter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AssignmentRule instance from a given math and Parameter.
 
 @param math the math
 @param parameter the parameter]]>
      </doc>
    </constructor>
    <constructor name="AssignmentRule" type="org.sbml.jsbml.ASTNode, org.sbml.jsbml.Variable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AssignmentRule instance from a given math and {@link Variable}.
 
 @param math the math
 @param variable the variable]]>
      </doc>
    </constructor>
    <constructor name="AssignmentRule" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AssignmentRule instance with the given level and version.
 
 @param level
            the SBML level
 @param version
            the SBML version]]>
      </doc>
    </constructor>
    <constructor name="AssignmentRule" type="org.sbml.jsbml.Parameter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AssignmentRule instance from a given Parameter.
 
 @param parameter the parameter]]>
      </doc>
    </constructor>
    <constructor name="AssignmentRule" type="org.sbml.jsbml.Parameter, org.sbml.jsbml.ASTNode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AssignmentRule instance from a given math and Parameter.
 
 @param parameter the parameter
 @param math the math]]>
      </doc>
    </constructor>
    <constructor name="AssignmentRule" type="org.sbml.jsbml.Variable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AssignmentRule instance from a given variable. Takes level and
 version from the variable.
 
 @param variable the {@link Variable}]]>
      </doc>
    </constructor>
    <constructor name="AssignmentRule" type="org.sbml.jsbml.Variable, org.sbml.jsbml.ASTNode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AssignmentRule instance from a given variable and math. Takes
 level and version from the variable.
 
 @param variable the {@link Variable}
 @param math the math]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.AssignmentRule"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getElementName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isScalar" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the assignmentRule XML element of a SBML file.
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.AssignmentRule -->
  <!-- start class org.sbml.jsbml.ASTNode -->
  <class name="ASTNode" extends="org.sbml.jsbml.AbstractTreeNode"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ASTNode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link ASTNode} of unspecified type and without a pointer
 to its containing {@link MathContainer}.]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="org.sbml.jsbml.ASTNode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Copy constructor; Creates a deep copy of the given {@link ASTNode}.
 
 @param astNode
            the ASTNode to be copied.]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="org.sbml.jsbml.CallableSBase"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a new {@link ASTNode} referring to the given {@link CallableSBase}.
 @param nsb]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="org.sbml.jsbml.CallableSBase, org.sbml.jsbml.MathContainer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a new {@link ASTNode} referring to the given {@link CallableSBase}.
 
 @param nsb
 @param parent]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="char"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link ASTNode} representing an operator, i.e., an internal
 node.
 
 @param operator]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="char, org.sbml.jsbml.MathContainer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link ASTNode} representing an operator, i.e., an internal
 node.
 
 @param operator
 @param parent]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="double"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a new {@link ASTNode}.
 
 @param real]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="double, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a new {@link ASTNode}.
 
 @param mantissa
 @param exponent]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="double, int, org.sbml.jsbml.MathContainer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a new {@link ASTNode}.
 
 @param mantissa
 @param exponent
 @param parent]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="double, org.sbml.jsbml.MathContainer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a new {@link ASTNode}.
 
 @param real
 @param parent]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a new {@link ASTNode} with the given integer value.
 
 @param integer]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="int, org.sbml.jsbml.MathContainer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a new {@link ASTNode} with the given integer value for
 the
 given {@link MathContainer} as its parent SBML object.
 
 @param integer
 @param parent]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="int, java.lang.String, org.sbml.jsbml.MathContainer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a new {@link ASTNode} with the given integer value with
 the given associated {@link #unitId} for the
 given {@link MathContainer} as its parent SBML object.
 
 @param integer
 @param unitsID
 @param parent]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="org.sbml.jsbml.MathContainer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a new {@link ASTNode}.
 
 By default, the returned node will have a type of {@link Type#UNKNOWN}.
 The calling code should set the node type to something else as soon as
 possible using setType(int)
 
 @param parent
            the parent SBML object]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a new {@link ASTNode} with the given name.
 
 @param name  the name of this ASTNode]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="java.lang.String, org.sbml.jsbml.MathContainer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a new {@link ASTNode} with the given name.
 
 @param name the name of this ASTNode
 @param parent
            the parent SBML object.]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="org.sbml.jsbml.ASTNode.Type"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link ASTNode} of the given {@link Type} but without a
 pointer to its {@link MathContainer}.
 
 @param type]]>
      </doc>
    </constructor>
    <constructor name="ASTNode" type="org.sbml.jsbml.ASTNode.Type, org.sbml.jsbml.MathContainer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a new ASTNode.
 
 @param type
            the type of the ASTNode to create.
 @param parent
            the parent SBML object.]]>
      </doc>
    </constructor>
    <method name="abs" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="double"/>
      <param name="parent" type="org.sbml.jsbml.MathContainer"/>
      <doc>
      <![CDATA[Creates and returns an {@link ASTNode} that computes the absolute value
 of the given double value.
 
 @param d a double value
 @param parent the parent ASTNode
 @return an {@link ASTNode} that computes the absolute value
 of the given double value.]]>
      </doc>
    </method>
    <method name="abs" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="integer" type="int"/>
      <param name="parent" type="org.sbml.jsbml.MathContainer"/>
      <doc>
      <![CDATA[Creates and returns an {@link ASTNode} that computes the absolute value
 of the given integer value.
 
 @param integer an integer value
 @param parent  the parent ASTNode
 @return an {@link ASTNode} that computes the absolute value
 of the given integer value.]]>
      </doc>
    </method>
    <method name="diff" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ast" type="org.sbml.jsbml.ASTNode[]"/>
      <doc>
      <![CDATA[Creates a new ASTNode of type MINUS and adds the given nodes as children
 
 @param ast the children of the new ASTNode
 @return a new ASTNode of type MINUS and adds the given nodes as children]]>
      </doc>
    </method>
    <method name="eq" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Creates a new ASTNode of type RELATIONAL_EQ.
 
 @param left the left child.
 @param right the right child.
 @return a new ASTNode of type RELATIONAL_EQ.]]>
      </doc>
    </method>
    <method name="exp" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exponent" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Returns a new ASTNode that represents Euler's constant raised by the
 power of the given exponent.
 
 @param exponent the exponent
 @return a new ASTNode that represents Euler's constant raised by the
 power of the given exponent.]]>
      </doc>
    </method>
    <method name="formulaToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tree" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Returns the formula from the given ASTNode as an SBML Level 1 text-string
         mathematical formula. 
         
 
 @param tree
            the root of the ASTNode formula expression tree
 @return the formula from the given AST as an SBML Level 1 text-string
         mathematical formula. The caller owns the returned string and is
         responsible for freeing it when it is no longer needed. NULL is
         returned if the given argument is NULL.
 @throws SBMLException
 @see #toFormula()]]>
      </doc>
    </method>
    <method name="frac" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="org.sbml.jsbml.ASTNode"/>
      <param name="denominator" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Creates a new ASTNode of type DIVIDE with the given nodes as children.
 
 @param numerator the numerator
 @param denominator the denominator
 @return a new ASTNode of type DIVIDE with the given nodes as children.]]>
      </doc>
    </method>
    <method name="frac" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="int"/>
      <param name="denominator" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Creates a new ASTNode that of type DIVIDE with the given numerator and
 denominator.
 
 @param numerator the numerator
 @param denominator the denominator
 @return a new ASTNode that of type DIVIDE with the given numerator and
 denominator.]]>
      </doc>
    </method>
    <method name="frac" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="container" type="org.sbml.jsbml.MathContainer"/>
      <param name="numerator" type="org.sbml.jsbml.CallableSBase"/>
      <param name="denominator" type="org.sbml.jsbml.CallableSBase"/>
      <doc>
      <![CDATA[Creates a new ASTNode that divides two named sbase objects.
 
 @param container the parent object
 @param numerator the numerator
 @param denominator the denominator
 @return a new ASTNode that divides two named sbase objects.]]>
      </doc>
    </method>
    <method name="frac" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="container" type="org.sbml.jsbml.MathContainer"/>
      <param name="numeratorId" type="java.lang.String"/>
      <param name="denominatorId" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a new ASTNode that of type DIVIDE with the two entities as numerator and denominator.
 
 @param container the parent object
 @param numeratorId the numerator
 @param denominatorId the numerator
 @return a new ASTNode that of type DIVIDE with the two entities as numerator and denominator.]]>
      </doc>
    </method>
    <method name="geq" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Creates an {@link ASTNode} representing greater or equal for
 the two given nodes.
 
 @param left the left child.
 @param right the right child.
 @return an {@link ASTNode} representing greater or equal.]]>
      </doc>
    </method>
    <method name="gt" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Creates an {@link ASTNode} representing greater than for
 the two given left and right child.
 
 @param left the left child.
 @param right the right child.
 @return an {@link ASTNode} representing greater than for
 the two given left and right child.]]>
      </doc>
    </method>
    <method name="leq" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Creates an {@link ASTNode} representing less or equal for
 the two given left and right child.
 
 @param left the left child.
 @param right the right child.
 @return an {@link ASTNode} representing less or equal for
 the two given left and right child.]]>
      </doc>
    </method>
    <method name="log" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Creates an {@link ASTNode} representing a logarithm to base 10 of the given value.
 
 @param value the value which is the argument of the logarithm.
 @return an {@link ASTNode} representing a logarithm to base 10 of the given value.]]>
      </doc>
    </method>
    <method name="log" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="base" type="org.sbml.jsbml.ASTNode"/>
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Creates an {@link ASTNode} that represents the logarithm function with
 the given base and value. The parent SBML object will be taken from the
 {@link ASTNode} value.
 
 @param base
            The basis of this logarithm. Can be null; then a base of 10
            will be assumed.
 @param value
            Must not be null.
 @return An {@link ASTNode} representing the logarithm of the given value
         with respect to the given base or to the base 10 if base is null.]]>
      </doc>
    </method>
    <method name="lt" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Creates an {@link ASTNode} that performs a less than comparison between
 two {@link ASTNode}s. The parent SBML object of the resulting node will
 be taken from the left node.
 
 @param left the left child.
 @param right the right child.
 @return an {@link ASTNode} that performs a less than comparison between
 two {@link ASTNode}s.]]>
      </doc>
    </method>
    <method name="lt" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="java.lang.String"/>
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Creates an {@link ASTNode} that performs a less than comparison between a
 variable and another {@link ASTNode}. The parent SBML object will be
 taken from the given {@link ASTNode}.
 
 @param variable the left child.
 @param node the right child.
 @return an {@link ASTNode} that performs a less than comparison between a
 variable and another {@link ASTNode}.]]>
      </doc>
    </method>
    <method name="neq" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Creates an {@link ASTNode} that performs a not equal comparison between
 two {@link ASTNode}s.
 
 @param left the left child.
 @param right the right child.
 @return an {@link ASTNode} that performs a not equal comparison between
 two {@link ASTNode}s.]]>
      </doc>
    </method>
    <method name="parseFormula" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="formula" type="java.lang.String"/>
      <exception name="ParseException" type="org.sbml.jsbml.text.parser.ParseException"/>
      <doc>
      <![CDATA[Parses a text-string mathematical formula and returns a representation as
 an Abstract Syntax Tree.
 
 @param formula
            a text-string mathematical formula.
 @return an {@link ASTNode} representing the formula.
 @throws ParseException
             If the given formula is not of valid format or cannot be
             parsed for other reasons.]]>
      </doc>
    </method>
    <method name="piecewise" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <param name="nodes" type="org.sbml.jsbml.ASTNode[]"/>
      <doc>
      <![CDATA[Creates a piecewise {@link ASTNode}. 
 
 <p>At least one {@link ASTNode} must be given
 as a child. The parent SBML object of this first node will be the parent
 of the resulting {@link ASTNode}.
 
 @param node the parent SBML object of this node will be the parent
 of the resulting {@link ASTNode}.
 @param nodes the children of the new piecewise ASTNode
 @return a piecewise {@link ASTNode}.]]>
      </doc>
    </method>
    <method name="pow" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="basis" type="org.sbml.jsbml.ASTNode"/>
      <param name="exponent" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Creates a power {@link ASTNode}. 
 
 @param basis the basis
 @param exponent the exponent
 @return a power {@link ASTNode}.]]>
      </doc>
    </method>
    <method name="pow" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="basis" type="org.sbml.jsbml.ASTNode"/>
      <param name="exponent" type="double"/>
      <doc>
      <![CDATA[Creates a power {@link ASTNode}.
 
 @param basis the basis
 @param exponent the exponent
 @return a power {@link ASTNode}.]]>
      </doc>
    </method>
    <method name="pow" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="basis" type="org.sbml.jsbml.ASTNode"/>
      <param name="exponent" type="int"/>
      <doc>
      <![CDATA[Creates a power {@link ASTNode}.
 
 @param basis the basis
 @param exponent the exponent
 @return a power {@link ASTNode}.]]>
      </doc>
    </method>
    <method name="pow" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="container" type="org.sbml.jsbml.MathContainer"/>
      <param name="basis" type="org.sbml.jsbml.CallableSBase"/>
      <param name="exponent" type="org.sbml.jsbml.CallableSBase"/>
      <doc>
      <![CDATA[Raises the given basis by the power of the given exponent.
 
 @param container the parent object
 @param basis the basis
 @param exponent the exponent
 @return a power {@link ASTNode}.]]>
      </doc>
    </method>
    <method name="readMathMLFromString" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xml" type="java.lang.String"/>
      <doc>
      <![CDATA[Reads the MathML from the given XML string.
 
 <p>Constructs a corresponding
 abstract syntax tree, and returns a pointer to the root of the tree.
 
 @param xml
            the MathML XML string.
 @return an {@link ASTNode}]]>
      </doc>
    </method>
    <method name="root" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootExponent" type="org.sbml.jsbml.ASTNode"/>
      <param name="radicand" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Creates a root {@link ASTNode}.
 
 @param radicand the radicand
 @param rootExponent the exponent of the root element. 
 @return a root {@link ASTNode}.]]>
      </doc>
    </method>
    <method name="sqrt" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="radicand" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Creates a root {@link ASTNode}.
 
 @param radicand
 @return a root {@link ASTNode}.]]>
      </doc>
    </method>
    <method name="sum" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ast" type="org.sbml.jsbml.ASTNode[]"/>
      <doc>
      <![CDATA[Creates a new ASTNode of type Plus with the given nodes as children.
 
 @param ast the children nodes.
 @return a new ASTNode of type Plus with the given nodes as children.]]>
      </doc>
    </method>
    <method name="sum" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.sbml.jsbml.MathContainer"/>
      <param name="sbase" type="org.sbml.jsbml.CallableSBase[]"/>
      <doc>
      <![CDATA[Sum of several NamedSBase objects.
 
 @param parent the parent
 @param sbase
 @return the sum of several NamedSBase objects.]]>
      </doc>
    </method>
    <method name="times" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ast" type="org.sbml.jsbml.ASTNode[]"/>
      <doc>
      <![CDATA[Creates an ASTNode of type times and adds the given nodes as children.
 
 @param ast
 @return an ASTNode of type times and adds the given nodes as children.]]>
      </doc>
    </method>
    <method name="times" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.sbml.jsbml.MathContainer"/>
      <param name="sbase" type="org.sbml.jsbml.CallableSBase[]"/>
      <doc>
      <![CDATA[Multiplies several NamedSBase objects.
 
 @param parent
 @param sbase
 @return the multiplication of several NamedSBase objects.]]>
      </doc>
    </method>
    <method name="uMinus" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ast" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Creates a new ASTNode that has exactly one child and which is of type
 minus, i.e., this negates what is encoded in ast.
 
 @param ast
 @return a new ASTNode that has exactly one child and which is of type
 minus, i.e., this negates what is encoded in ast.]]>
      </doc>
    </method>
    <method name="uMinus" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="container" type="org.sbml.jsbml.MathContainer"/>
      <param name="sbase" type="org.sbml.jsbml.CallableSBase"/>
      <doc>
      <![CDATA[Creates a new ASTNode that has exactly one child and which is of type
 minus, i.e., this negates what is encoded in ast.
 
 @param container
 @param sbase
 @return a new ASTNode that has exactly one child and which is of type
 minus, i.e., this negates what is encoded in ast.]]>
      </doc>
    </method>
    <method name="addChild"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="child" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Adds a child to this node.
 
 @param child
            the node to add as child.]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="compiler" type="org.sbml.jsbml.util.compilers.ASTNodeCompiler"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Compiles this {@link ASTNode} and returns the result.
 
 @param compiler
            An instance of an {@link ASTNodeCompiler} that provides
            methods to translate this {@link ASTNode} into something
            different.
 @return Some value wrapped in an {@link ASTNodeValue}. The content of the
         wrapper depends on the {@link ASTNodeCompiler} used to create it.
         However, this {@link ASTNode} will ensure that level and version
         are set appropriately according to this node's parent SBML
         object.
 @throws SBMLException
             Thrown if an error occurs during the compilation process.]]>
      </doc>
    </method>
    <method name="containsUndeclaredUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether this
 {@link ASTNode} refers to elements such as parameters or numbers with
 undeclared units.
 
 A return value of true indicates that the <code>UnitDefinition</code>
 returned by {@link Variable#getDerivedUnitDefinition()} may not accurately
 represent the units of the expression.
 
 @return {@code true} if the math expression of this {@link ASTNode}
         includes parameters/numbers with undeclared units,
         {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="deriveUnit" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Evaluates recursively this ASTNode and creates a new UnitDefinition with
 respect of all referenced elements.
 
 @return the derived unit of the node.
 @throws SBMLException
             if they are problems going through the ASTNode tree.]]>
      </doc>
    </method>
    <method name="divideBy" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ast" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Divides this node by the given node
 
 @param ast
            an ASTNode
 @return the current node for convenience.]]>
      </doc>
    </method>
    <method name="divideBy" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namedSBase" type="org.sbml.jsbml.CallableSBase"/>
      <doc>
      <![CDATA[Divides this node by the given SBML element.
 
 @param namedSBase
            an SBML element that can be represented by a value.
 @return the current node for convenience.]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="findReferencedGlobalParameters" return="java.util.List&lt;org.sbml.jsbml.Parameter&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Goes through the formula and identifies all global parameters that are
 referenced by this rate equation.
 
 @return all global parameters that are referenced by this rate equation.]]>
      </doc>
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCharacter" return="char"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the value of this node as a single character. This function should
 be called only when ASTNode.getType() is one of PLUS, MINUS, TIMES,
 DIVIDE or POWER.
 
 @return the value of this ASTNode as a single character
 @throws IllegalArgumentException
             if the type of the node is not one of PLUS, MINUS, TIMES,
             DIVIDE or POWER.]]>
      </doc>
    </method>
    <method name="getChild" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Gets a child of this node according to an index number.
 
 @param index
            the index of the child to get
 @return the child of this {@link ASTNode} with the given index.
 @throws IndexOutOfBoundsException
             - if the index is out of range (index < 0 || index >=
             size()).]]>
      </doc>
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getChildren" return="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of children of the current ASTNode.
 
 @return the list of children of the current ASTNode.]]>
      </doc>
    </method>
    <method name="getClassName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the class name of the mathML element represented by this ASTNode.
 
 @return the class name of the mathML element represented by this ASTNode.]]>
      </doc>
    </method>
    <method name="getDefinitionURL" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the definitionURL
 
 @return the definitionURL]]>
      </doc>
    </method>
    <method name="getDenominator" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the value of the denominator of this node. This function should be
 called only when getType() == RATIONAL, otherwise an Exception is thrown.
 
 @return the value of the denominator of this ASTNode.
 @throws IllegalArgumentException
             if the method is called on a node that is not of type
             rational.]]>
      </doc>
    </method>
    <method name="getEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the encoding of the mathML element represented by this ASTNode.
 
 @return the encoding of the mathML element represented by this ASTNode.]]>
      </doc>
    </method>
    <method name="getExponent" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the exponent value of this ASTNode. This function should be called
 only when getType() returns REAL_E or REAL, otherwise an Exception is
 thrown.
 
 @return the value of the exponent of this ASTNode.
 @throws IllegalArgumentException
             if the method is called on a node that is not of type real.]]>
      </doc>
    </method>
    <method name="getId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the id of the mathML element represented by this ASTNode.
 
 @return the id of the mathML element represented by this ASTNode.]]>
      </doc>
    </method>
    <method name="getInteger" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the value of this node as an integer. This function should be called
 only when getType() == INTEGER, otherwise an Exception is thrown.
 
 @return the value of this ASTNode as an integer.
 @throws IllegalArgumentException
             if the node is not of type integer.]]>
      </doc>
    </method>
    <method name="getLeftChild" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the left child of this node.
 
 @return the left child of this ASTNode. This is equivalent to
         getChild(0);]]>
      </doc>
    </method>
    <method name="getListOfNodes" return="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of children of the current ASTNode.
 
 @return the list of children of the current ASTNode.]]>
      </doc>
    </method>
    <method name="getListOfNodes" return="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filter" type="org.sbml.jsbml.util.filters.Filter"/>
      <doc>
      <![CDATA[Returns the list of children of the current ASTNode that satisfy the
 given filter.
 
 @param filter
 @return the list of children of the current ASTNode that satisfy the
         given filter.]]>
      </doc>
    </method>
    <method name="getMantissa" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the mantissa value of this node. This function should be called only
 when getType() returns REAL_E or REAL, otherwise an Exception is thrown.
 If getType() returns REAL, this method is identical to getReal().
 
 @return the value of the mantissa of this ASTNode.]]>
      </doc>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the name of this node. This method may be called on nodes that are
 not operators (isOperator() == false) or numbers (isNumber() == false).
 
 @return the name of this node.
 @throws IllegalArgumentException
             if the method is called on nodes that are operators or
             numbers.]]>
      </doc>
    </method>
    <method name="getNumerator" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the value of the numerator of this node. This method should be
 called only when getType() == RATIONAL, otherwise an Exception is thrown.
 
 
 @return the value of the numerator of this ASTNode.
 @throws IllegalArgumentException
             if this method is called on a node type other than rational.]]>
      </doc>
    </method>
    <method name="getParent" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParentSBMLObject" return="org.sbml.jsbml.MathContainer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method is convenient when holding an object nested inside other
 objects in an SBML model. It allows direct access to the
 {@link MathContainer}; element containing it. From this
 {@link MathContainer} even the overall {@link Model} can be accessed.
 
 @return Returns the parent SBML object.]]>
      </doc>
    </method>
    <method name="getReal" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the real-numbered value of this node. This function should be called
 only when isReal() == true, otherwise and Exception is thrown.
 
 This function performs the necessary arithmetic if the node type is
 REAL_E (mantissa^exponent) or RATIONAL (numerator / denominator).
 
 @return the value of this ASTNode as a real (double).
 @throws IllegalArgumentException
             if this node is not of type real.]]>
      </doc>
    </method>
    <method name="getReferencedNamedSBases" return="java.util.Set&lt;org.sbml.jsbml.NamedSBase&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a set of all the {@link NamedSBase} referenced on this node and
 all his descendant.
 
 Just for testing purposes...
 
 @return a set of all the {@link NamedSBase} referenced on this node and
         all his descendant.]]>
      </doc>
    </method>
    <method name="getRightChild" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the last child in the list of children of this node.
 
 @return This is equivalent to calling
         <code>getListOfNodes().getLast()</code>.]]>
      </doc>
    </method>
    <method name="getStyle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the style of the mathML element represented by this ASTNode.
 
 @return the style of the mathML element represented by this ASTNode.]]>
      </doc>
    </method>
    <method name="getType" return="org.sbml.jsbml.ASTNode.Type"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the type of this node.
 
 @return the type of this node.]]>
      </doc>
    </method>
    <method name="getUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the units attribute.
 
 @return the units attribute.]]>
      </doc>
    </method>
    <method name="getUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates or obtains a {@link UnitDefinition} corresponding to the unit
 that has been set for this {@link ASTNode} and returns a pointer to it.
 Note that in case that this {@link ASTNode} is associated with a
 {@link Kind}, the created {@link UnitDefinition} will not be part of the
 model, it is just a container for the {@link Kind}.
 
 @return A {@link UnitDefinition} or null.]]>
      </doc>
    </method>
    <method name="getUserObject" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the userObject]]>
      </doc>
    </method>
    <method name="getVariable" return="org.sbml.jsbml.CallableSBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the variable of this node. This function should be called only
 when {@link #isVariable()} == {@code true}, otherwise an Exception is thrown.
 
 @return the variable of this node
 @throws IllegalArgumentException
             if {@link #isVariable()} returns false.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the current ASTNode or any of his descendant has a unit
 defined.
 
 @return true if the current ASTNode or any of his descendant has a unit
         defined.]]>
      </doc>
    </method>
    <method name="insertChild"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <param name="newChild" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Inserts the given ASTNode at point n in the list of children of this
 ASTNode. Inserting a child within an ASTNode may result in an inaccurate
 representation.
 
 @param n
            long the index of the ASTNode being added
 @param newChild
            ASTNode to insert as the nth child]]>
      </doc>
    </method>
    <method name="isBoolean" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node has a boolean type (a logical operator, a
 relational operator, or the constants true or false).
 
 @return true if this ASTNode is a boolean, false otherwise.]]>
      </doc>
    </method>
    <method name="isConstant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node represents a MathML constant (e.g., true, Pi).
 
 @return true if this ASTNode is a MathML constant, false otherwise.]]>
      </doc>
    </method>
    <method name="isDifference" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if this {@link ASTNode} represents a difference.
 
 @return true if this {@link ASTNode} represents a difference, false
         otherwise.]]>
      </doc>
    </method>
    <method name="isFunction" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node represents a function. In this context, the
 term function means pre-defined functions such as "ceil", "abs" or "sin"
 or whether this {@link ASTNode} refers to a user-defined
 {@link FunctionDefinition} object. Without having a valid reference to
 the {@link MathContainer} that owns this {@link ASTNode} it is impossible
 to identify the referenced {@link FunctionDefinition}.
 
 @return true if this {@link ASTNode} is a function, false otherwise.]]>
      </doc>
    </method>
    <method name="isInfinity" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node represents the special IEEE 754 value infinity,
 false otherwise.
 
 @return true if this ASTNode is the special IEEE 754 value infinity,
         false otherwise.]]>
      </doc>
    </method>
    <method name="isInteger" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node contains an integer value, false otherwise.
 
 @return true if this ASTNode is of type INTEGER, false otherwise.]]>
      </doc>
    </method>
    <method name="isLambda" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node is a MathML &lt;lambda&gt;, false otherwise.
 
 @return true if this ASTNode is of type LAMBDA, false otherwise.]]>
      </doc>
    </method>
    <method name="isLog10" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node represents a log10() function, false otherwise.
 More precisely, this predicate returns true if the node type is
 FUNCTION_LOG with two children, the first of which is an INTEGER equal to
 10.
 
 @return true if the given ASTNode represents a log10() function, false
         otherwise.]]>
      </doc>
    </method>
    <method name="isLogical" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node is a MathML logical operator (i.e., and, or,
 not, xor).
 
 @return true if this ASTNode is a MathML logical operator.]]>
      </doc>
    </method>
    <method name="isMinusOne" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this astnode represents the number minus one (either as
 integer or as real value).
 
 @return true if this astnode represents the number minus one (either as
 integer or as real value).]]>
      </doc>
    </method>
    <method name="isName" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} if this node is a user-defined {@link Variable} name in SBML L1, L2
 (MathML), or the special symbols delay or time. The predicate returns
 {@code false} otherwise.
 
 @return {@code true} if this {@link ASTNode} is a user-defined variable name in SBML L1,
         L2 (MathML) or the special symbols time or Avogadro.]]>
      </doc>
    </method>
    <method name="isNaN" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node is a type Real and represents the special IEEE
 754 value 'not a number' {@link Double#NaN}, false otherwise.
 
 @return true if this ASTNode is the {@link Double#NaN}]]>
      </doc>
    </method>
    <method name="isNegInfinity" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node represents the special IEEE 754 value 'negative
 infinity' {@link Double#NEGATIVE_INFINITY}, false otherwise.
 
 @return true if this ASTNode is {@link Double#NEGATIVE_INFINITY}, false
         otherwise.]]>
      </doc>
    </method>
    <method name="isNumber" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node contains a number, false otherwise. This is
 functionally equivalent to the following code:
 
 <pre>
 isInteger() || isReal()
 </pre>
 
 @return true if this ASTNode is a number, false otherwise.]]>
      </doc>
    </method>
    <method name="isOne" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this {@link ASTNode} represents the number one (either as
 integer or as real value).
 
 @return true if this {@link ASTNode} represents the number one.]]>
      </doc>
    </method>
    <method name="isOperator" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node is a mathematical operator, meaning, +, -, *, /
 or ^ (power).
 
 @return true if this ASTNode is an operator.]]>
      </doc>
    </method>
    <method name="isPiecewise" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node is the MathML &lt;piecewise&gt; construct,
 false otherwise.
 
 @return true if this ASTNode is a MathML piecewise function]]>
      </doc>
    </method>
    <method name="isRational" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node represents a rational number, false otherwise.
 
 @return true if this ASTNode is of type {@link Type#RATIONAL}.]]>
      </doc>
    </method>
    <method name="isReal" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node can represent a real number, false otherwise.
 More precisely, this node must be of one of the following types: REAL,
 REAL_E or RATIONAL.
 
 @return true if the value of this ASTNode can represented a real number,
         false otherwise.]]>
      </doc>
    </method>
    <method name="isRelational" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node is a MathML relational operator, meaning ==,
 >=, >, <, and !=.
 
 @return true if this ASTNode is a MathML relational operator, false
         otherwise.]]>
      </doc>
    </method>
    <method name="isSetClassName" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetDefinitionURL" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetEncoding" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetId" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetName" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetNumberType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the number type is set.
 
 @return  true if the number type is set.]]>
      </doc>
    </method>
    <method name="isSetParentSBMLObject" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if a parent SBML object, i.e., a {@link MathContainer}, is set as a
 parent SBML object for this {@link ASTNode}.
 
 @return]]>
      </doc>
    </method>
    <method name="isSetStyle" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if a unit is defined on this node.
 
 @return true if a unit is defined on this node.]]>
      </doc>
    </method>
    <method name="isSetUserObject" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSqrt" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node represents a square root function, false
 otherwise.
 
 More precisely, the node type must be {@link Type#FUNCTION_ROOT} with two
 children, the first of which is an {@link Type#INTEGER} node having value
 equal to 2.
 
 @return true if the given ASTNode represents a sqrt() function, false
         otherwise.]]>
      </doc>
    </method>
    <method name="isString" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} if this node is a name or refers to a
 {@link FunctionDefinition}.
 
 @return true if this {@link ASTNode} is a user-defined variable name in SBML L1,
         L2 (MathML) or the special symbols time or Avogadro.
 @see #isName()]]>
      </doc>
    </method>
    <method name="isSum" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if this {@link ASTNode} represents a sum.
 
 @return true if this {@link ASTNode} represents a sum, false otherwise.]]>
      </doc>
    </method>
    <method name="isUMinus" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node is a unary minus operator, false otherwise. A
 node is defined as a unary minus node if it is of type MINUS and has
 exactly one child.
 
 For numbers, unary minus nodes can be 'collapsed' by negating the number.
 In fact, SBML_parseFormula() does this during its parse. However, unary
 minus nodes for symbols (NAMES) cannot be 'collapsed', so this predicate
 function is necessary.
 
 @return true if this ASTNode is a unary minus, false otherwise.]]>
      </doc>
    </method>
    <method name="isUnary" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks whether the number of child nodes is exactly one.
 
 @return true if the number of child nodes is exactly one.]]>
      </doc>
    </method>
    <method name="isUnknown" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node has an unknown type.
 
 'Unknown' nodes have the type UNKNOWN. Nodes with unknown types will not
 appear in an ASTNode tree returned by libSBML based upon valid SBML
 input; the only situation in which a node with type UNKNOWN may appear is
 immediately after having create a new, untyped node using the ASTNode
 constructor. Callers creating nodes should endeavor to set the type to a
 valid node type as soon as possible after creating new nodes.
 
 @return true if this ASTNode is of type UNKNOWN, false otherwise.]]>
      </doc>
    </method>
    <method name="isVariable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node represents a {@link Variable}.
 
 @return true if this node represents a {@link Variable}.]]>
      </doc>
    </method>
    <method name="isZero" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this node represents the number zero (either as integer
 or as real value).
 
 @return true if this node represents the number zero.]]>
      </doc>
    </method>
    <method name="minus" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ast" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Subtracts the given ASTNode from this node.
 
 @param ast
            an <code>ASTNode</code>
 @return the current node for convenience.]]>
      </doc>
    </method>
    <method name="minus" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="real" type="double"/>
      <doc>
      <![CDATA[Subtracts the given number from this node.
 
 @param real
            a double number.
 @return the current node for convenience.]]>
      </doc>
    </method>
    <method name="minus" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="integer" type="int"/>
      <doc>
      <![CDATA[Subtracts the given integer from this node.
 
 @param integer
            an integer number.
 @return the current node for convenience.]]>
      </doc>
    </method>
    <method name="minus" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="integer" type="int"/>
      <param name="unitsID" type="java.lang.String"/>
      <doc>
      <![CDATA[@param integer
 @param unitsID
 @return]]>
      </doc>
    </method>
    <method name="multiplyWith" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ast" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Multiplies this ASTNode with the given node
 
 @param ast
            an <code>ASTNode</code>
 @return the current node for convenience.]]>
      </doc>
    </method>
    <method name="multiplyWith" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="org.sbml.jsbml.ASTNode[]"/>
      <doc>
      <![CDATA[Multiplies this ASTNode with the given nodes, i.e., all given nodes will
 be children of this node, whose type will be set to {@link Type#TIMES}.
 
 @param nodes
            some <code>ASTNode</code>
 @return The current node for convenience.]]>
      </doc>
    </method>
    <method name="multiplyWith" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nsb" type="org.sbml.jsbml.CallableSBase"/>
      <doc>
      <![CDATA[Multiplies this ASTNode with the given SBML element.
 
 @param nsb
            an SBML element that can be represented by a value.
 @return the current node for convenience.]]>
      </doc>
    </method>
    <method name="plus" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ast" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Adds a given node to this node.
 
 @param ast
            an <code>ASTNode</code>
 @return the current node for convenience.]]>
      </doc>
    </method>
    <method name="plus" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nsb" type="org.sbml.jsbml.CallableSBase"/>
      <doc>
      <![CDATA[Adds an SBML element to this node.
 
 @param nsb
            an SBML element that can be represented by a value.
 @return the current node for convenience.]]>
      </doc>
    </method>
    <method name="plus" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="real" type="double"/>
      <doc>
      <![CDATA[Adds a number to this node.
 
 @param real
            a double number.
 @return the current node for convenience.]]>
      </doc>
    </method>
    <method name="plus" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="integer" type="int"/>
      <doc>
      <![CDATA[Adds an integer number to this node.
 
 @param integer
            an integer number.
 @return the current node for convenience.]]>
      </doc>
    </method>
    <method name="prependChild"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="child" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Adds the given node as a child of this ASTNode. This method adds child
 nodes from right to left.
 
 @param child
            an <code>ASTNode</code>]]>
      </doc>
    </method>
    <method name="raiseByThePowerOf" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exponent" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Raises this ASTNode by the power of the value of the given node.
 
 @param exponent
            an <code>ASTNode</code>
 @return the current node for convenience.]]>
      </doc>
    </method>
    <method name="raiseByThePowerOf" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nsb" type="org.sbml.jsbml.CallableSBase"/>
      <doc>
      <![CDATA[Raises this ASTNode by the power of the value of this named SBase object.
 
 @param nsb
            an SBML element that can be represented by a value.
 @return the current node for convenience.]]>
      </doc>
    </method>
    <method name="raiseByThePowerOf" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exponent" type="double"/>
      <doc>
      <![CDATA[Raises this ASTNode by the power of the given number.
 
 @param exponent
            a double number.
 @return the current node for convenience.]]>
      </doc>
    </method>
    <method name="refersTo" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns true if this node or one of its descendants contains some
 identifier with the given id. This method can be used to scan a formula
 for a specific parameter or species and detect whether this component is
 used by this formula. This search is done using a DFS.
 
 @param id
            the id of an SBML element.
 @return true if this node or one of its descendants contains the given
         id.]]>
      </doc>
    </method>
    <method name="removeChild" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Removes child n of this ASTNode. Removing a child from an ASTNode may
 result in an inaccurate representation.
 
 @param n
            the index of the child to remove
 @return boolean indicating the success or failure of the operation]]>
      </doc>
    </method>
    <method name="replaceArgument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bvar" type="java.lang.String"/>
      <param name="arg" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Replaces occurrences of a name within this ASTNode with the
 name/value/formula represented by the second argument ASTNode, e.g., if
 the formula in this ASTNode is x + y; bvar is x and arg is an ASTNode
 representing the real value 3 ReplaceArgument substitutes 3 for x within
 this ASTNode.
 
 @param bvar
            a string representing the variable name to be substituted
 @param arg
            an ASTNode representing the name/value/formula to substitute]]>
      </doc>
    </method>
    <method name="replaceChild" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <param name="newChild" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Replaces the nth child of this ASTNode with the given ASTNode.
 
 @param n
            long the index of the child to replace
 @param newChild
            ASTNode to replace the nth child
 @return the element previously at the specified position]]>
      </doc>
    </method>
    <method name="setCharacter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="char"/>
      <doc>
      <![CDATA[Sets the value of this ASTNode to the given character. If character is
 one of +, -, *, / or ^, the node type will be set accordingly. For all
 other characters, the node type will be set to UNKNOWN.
 
 @param value
            the character value to which the node's value should be set.]]>
      </doc>
    </method>
    <method name="setClassName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="className" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the class name of the mathML element represented by this ASTNode.
 
 @param className
            the class name.]]>
      </doc>
    </method>
    <method name="setDefinitionURL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="definitionURL" type="java.lang.String"/>
      <doc>
      <![CDATA[@param definitionURL]]>
      </doc>
    </method>
    <method name="setEncoding"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="encoding" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the encoding of the mathML element represented by this ASTNode.
 
 @param encoding
            the encoding]]>
      </doc>
    </method>
    <method name="setId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the id of the mathML element represented by this ASTNode.
 
 @param id
            the id.]]>
      </doc>
    </method>
    <method name="setIsSetNumberType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isSetNumberType" type="boolean"/>
      <doc>
      <![CDATA[@param isSetNumberType]]>
      </doc>
    </method>
    <method name="setName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the value of this ASTNode to the given name.
 
 The node type will be set (to NAME) only if the ASTNode was previously an
 operator (isOperator(node) == true) or number (isNumber(node) == true).
 This allows names to be set for FUNCTIONs and the like.
 
 @param name]]>
      </doc>
    </method>
    <method name="setStyle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="style" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the style of the mathML element represented by this ASTNode.
 
 @param style
            the style.]]>
      </doc>
    </method>
    <method name="setType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="typeStr" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the type from a String. The method accept all the supported mathML
 elements, the possible types of cn elements or the possible definitionURL
 of csymbol elements.
 
 @param typeStr
            the type as a String.]]>
      </doc>
    </method>
    <method name="setType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="org.sbml.jsbml.ASTNode.Type"/>
      <doc>
      <![CDATA[Sets the type of this ASTNode to the given Type. A side-effect of doing
 this is that any numerical values previously stored in this node are
 reset to zero.
 
 @param type
            the type to which this node should be set]]>
      </doc>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unitId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the units attribute.
 
 @param unitId
 @throws IllegalArgumentException
             if the ASTNode is not a kind of numbers (<cn> in mathml) or
             if the <code>unitId</code> is not a valid unit kind or the id
             of a unit definition.]]>
      </doc>
    </method>
    <method name="setUserObject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userObject" type="java.lang.Object"/>
      <doc>
      <![CDATA[@param userObject
            the userObject to set]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Sets the value of this ASTNode to the given double number and sets the
 node type to REAL.
 
 This is functionally equivalent to:
 
 <pre>
 setValue(value, 0);
 </pre>
 
 @param value
            the double format number to which this node's value should be
            set]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mantissa" type="double"/>
      <param name="exponent" type="int"/>
      <doc>
      <![CDATA[Sets the value of this ASTNode to the given real (double) in two parts:
 the mantissa and the exponent. The node type is set to REAL_E.
 
 @param mantissa
            the mantissa of this node's real-numbered value
 @param exponent
            the exponent of this node's real-numbered value]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Sets the value of this ASTNode to the given (long) integer and sets the
 node type to INTEGER.
 
 @param value]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="int"/>
      <param name="denominator" type="int"/>
      <doc>
      <![CDATA[Sets the value of this ASTNode to the given rational in two parts: the
 numerator and denominator. The node type is set to RATIONAL.
 
 @param numerator
            the numerator value of the rational
 @param denominator
            the denominator value of the rational]]>
      </doc>
    </method>
    <method name="setVariable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="org.sbml.jsbml.CallableSBase"/>
      <doc>
      <![CDATA[@param variable]]>
      </doc>
    </method>
    <method name="sqrt" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Applies the square root function on this syntax tree and returns the
 resulting tree.
 
 @return the current node for convenience.]]>
      </doc>
    </method>
    <method name="swapChildren"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="that" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[<p>
 Swaps the children of this {@link ASTNode} with the children of that
 {@link ASTNode}.
 </p>
 <p>
 Unfortunately, when swapping child nodes, we have to recursively traverse
 the entire subtrees in order to make sure that all pointers to the parent
 SBML object are correct. However, this must only be done if the parent SBML
 object of that differs from the one surrounding this node.
 </p>
 <p>
 In any case, the pointer from each sub-node to its parent must be changed.
 In contrast to other SBML elements, {@link ASTNode}s have sub-nodes as
 direct children, i.e., there is no child called 'ListOfNodes'. The
 {@code setParent} method is also not recursive.
 </p>
 <p>
 However, this might cause many calls to listeners.
 </p>
 
 @param that
        the other node whose children should be used to replace this
        node's children]]>
      </doc>
    </method>
    <method name="toFormula" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[<p>
 Converts this ASTNode to a text string using a specific syntax for
 mathematical formulas.
 </p>
 <p>
 The text-string form of mathematical formulas produced by
 formulaToString() and read by parseFormula() are simple C-inspired infix
 notation taken from SBML Level 1. A formula in this text-string form
 therefore can be handed to a program that understands SBML Level 1
 mathematical expressions, or used as part of a formula translation
 system. The syntax is described in detail in the documentation for
 ASTNode.
 </p>
 
 @return the formula from the given AST as an SBML Level 1 text-string
         mathematical formula. The caller owns the returned string and is
         responsible for freeing it when it is no longer needed. NULL is
         returned if the given argument is NULL.
 @throws SBMLException
             if there is a problem in the ASTNode tree.]]>
      </doc>
    </method>
    <method name="toLaTeX" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Converts this node recursively into a LaTeX formatted String.
 
 @return A String representing the LaTeX code necessary to write the
         formula corresponding to this node in a document.
 @throws SBMLException
             if there is a problem in the ASTNode tree.]]>
      </doc>
    </method>
    <method name="toMathML" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Converts this node recursively into a MathML string that corresponds to
 the subset of MathML defined in the SBML specification.
 
 @return the representation of this node in MathML.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unset the units attribute.]]>
      </doc>
    </method>
    <method name="unsetUserObject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="updateVariables"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[For a better performance ASTNodes can store a direct pointer to a
 variable element. This is particularly useful when performing more
 complex computation on these data structures. However, if the model is
 changed, it may happen that these pointer become invalid. For instance, a
 previously local parameter may be added to the model in form of a global
 parameter while keeping the same identifier. The local parameter may then
 be removed. Whenever performing changes like this, you may want to update
 pointers within {@link ASTNode} constructs as well.]]>
      </doc>
    </method>
    <field name="INVALID_OPERATOR_MSG" type="java.lang.String"
      transient="true" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Message to indicate that an {@link ASTNode.Type} type has been chosen
 which cannot be used as an operator.]]>
      </doc>
    </field>
    <field name="URI_AVOGADRO_DEFINITION" type="java.lang.String"
      transient="true" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The URI for the definition of the csymbol for avogadro.]]>
      </doc>
    </field>
    <field name="URI_DELAY_DEFINITION" type="java.lang.String"
      transient="true" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The URI for the definition of the csymbol for delay.]]>
      </doc>
    </field>
    <field name="URI_MATHML_DEFINITION" type="java.lang.String"
      transient="true" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[URI for the definition of MathML.]]>
      </doc>
    </field>
    <field name="URI_MATHML_PREFIX" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[URI prefix for the definition of MathML, it will be used to write the sbml file]]>
      </doc>
    </field>
    <field name="URI_TIME_DEFINITION" type="java.lang.String"
      transient="true" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The URI for the definition of the csymbol for time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A node in the Abstract Syntax Tree (AST) representation of a mathematical
 expression.
 
 @author Andreas Dr&auml;ger
 @author Nicolas Rodriguez
 @author Alexander D&ouml;rr
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.ASTNode -->
  <!-- start class org.sbml.jsbml.ASTNode.Type -->
  <class name="ASTNode.Type" extends="java.lang.Enum&lt;org.sbml.jsbml.ASTNode.Type&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.sbml.jsbml.ASTNode.Type[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.sbml.jsbml.ASTNode.Type"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getTypeFor" return="org.sbml.jsbml.ASTNode.Type"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the {@link Type} corresponding to the given {@link String}.
 
 @param type
            e.g., sin, asin, exp, and so on. See the specification of
            the MathML subset used in SBML.
 @return The type corresponding to the given {@link String} or
         {@link #UNKNOWN} if no matching can be found.]]>
      </doc>
    </method>
    <method name="isDefinedIn" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Checks whether this type is valid for the given SBML
 Level/Version combination.
 
 @jsbml.warning this method is not implemented
 
 @param level
 @param version
 @return whether this type is valid for the given SBML
 Level/Version combination.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An enumeration of all possible types that can be represented by an
 abstract syntax tree node.
 
 @author Andreas Dr&auml;ger]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.ASTNode.Type -->
  <!-- start interface org.sbml.jsbml.CallableSBase -->
  <interface name="CallableSBase"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.NamedSBaseWithDerivedUnit"/>
    <doc>
    <![CDATA[The interface {@link CallableSBase} represents an {@link SBase} that can be
 called in mathematical expressions, i.e., {@link ASTNode}, via its
 identifier. In terms of serialized SBML files, the identifiers of instances
 of {@link CallableSBase} can be used in <code>ci</code> elements within
 MathML expressions. All these elements can be found in the specification of
 SBML Level 3 Version 1 Core, Table 1 on page 21. Furthermore,
 {@link LocalParameter} also belongs to these elements.
 
 @author Andreas Dr&auml;ger
 @date 2011-02-15
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.CallableSBase -->
  <!-- start class org.sbml.jsbml.Compartment -->
  <class name="Compartment" extends="org.sbml.jsbml.Symbol"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Compartment"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Compartment instance. By default, if the level is set and is
 superior or equal to 3, sets the compartmentType, outsideID and
 spatialDimension to null.]]>
      </doc>
    </constructor>
    <constructor name="Compartment" type="org.sbml.jsbml.Compartment"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Compartment instance from a given compartment.
 
 @param compartment the compartment object to clone.]]>
      </doc>
    </constructor>
    <constructor name="Compartment" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Compartment instance from a level and version. By default, if
 the level is set and is superior or equal to 3, sets the compartmentType,
 outsideID and spatialDimension to null.
 
 @param level the SBML level
 @param version  the SBML level]]>
      </doc>
    </constructor>
    <constructor name="Compartment" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Compartment instance with the given id. 
 
 @param id the compartment id.]]>
      </doc>
    </constructor>
    <constructor name="Compartment" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Compartment instance from an id, level and version. By default,
 sets the compartmentType, outsideID and spatialDimension to null.
 
 @param id  the compartment id.
 @param level the SBML level
 @param version  the SBML level]]>
      </doc>
    </constructor>
    <constructor name="Compartment" type="java.lang.String, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Compartment instance from an id, name, level and version. By
 default, if the level is set and is superior or equal to 3, sets the
 compartmentType, outsideID and spatialDimension to null.
 
 @param id  the compartment id.
 @param name the compartment name.
 @param level the SBML level
 @param version  the SBML level]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.Compartment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getCompartmentType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Only defined in SBML Level 2 Versions 2 through 4.">
      <doc>
      <![CDATA[Returns the compartmentType id of this compartment. Return an empty
 String if it is not set.
 
 @return the compartmentType id of this compartment. Return an empty
         String if it is not set.
 @deprecated Only defined in SBML Level 2 Versions 2 through 4.]]>
      </doc>
    </method>
    <method name="getCompartmentTypeInstance" return="org.sbml.jsbml.CompartmentType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the compartmentType instance in Model for this compartment
         compartmentTypeID. Return null if there is no compartmentType
         instance which matches this compartmentTypeID.
         
 @return the compartmentType instance in Model for this compartment
         compartmentTypeID. Return null if there is no compartmentType
         instance which matches this compartmentTypeID.]]>
      </doc>
    </method>
    <method name="getDerivedUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOutside" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the outside id of this compartment. Return "" if it is not set.
 
 @return the outside id of this compartment. Return "" if it is not set.]]>
      </doc>
    </method>
    <method name="getOutsideInstance" return="org.sbml.jsbml.Compartment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the compartment instance which matches the outside id in Model.
         Return null if no compartment instance matches the outside id.
 
 @return the compartment instance which matches the outside id in Model.
         Return null if no compartment instance matches the outside id.]]>
      </doc>
    </method>
    <method name="getPredefinedUnitID" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSize" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the size of this compartment.
 
 @return the size of this compartment.]]>
      </doc>
    </method>
    <method name="getSpatialDimensions" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link #spatialDimensions} of this {@link Compartment}. If it
 is not set and the level of this {@link Compartment} is either one or two
 it returns the default SBML Level 2 value, which is 3. In all other
 cases, {@link Double#NaN} will be returned.
 
 @return the {@link #spatialDimensions} of this {@link Compartment} or 3
         if {@link #spatialDimensions} is not set and level is 1 or 2.]]>
      </doc>
    </method>
    <method name="getSpatialDimensionsAsDouble" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #getSpatialDimensions()}">
      <doc>
      <![CDATA[@return
 @deprecated use {@link #getSpatialDimensions()}]]>
      </doc>
    </method>
    <method name="getVolume" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The volume attribute is only defined in SBML Level 1. Please
             use {@link #getSize()}.">
      <doc>
      <![CDATA[Gets the volume of this Compartment
 
 This method is identical to getSize(). In SBML Level 1, compartments are
 always three-dimensional constructs and only have volumes, whereas in
 SBML Level 2, compartments may be other than three-dimensional and
 therefore the 'volume' attribute is named 'size' in Level 2. LibSBML
 provides both getSize() and getVolume() for easier compatibility between
 SBML Levels.
 
 @return the volume of this {@link Compartment}
 @deprecated The volume attribute is only defined in SBML Level 1. Please
             use {@link #getSize()}.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the default values using the current Level/Version configuration.]]>
      </doc>
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Initializes the default values using the current Level/Version configuration.
 
 @param level
 @param version]]>
      </doc>
    </method>
    <method name="isSetCompartmentType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the compartmentID of this compartment is not null.
 
 @return true if the compartmentID of this compartment is not null.]]>
      </doc>
    </method>
    <method name="isSetCompartmentTypeInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the compartmentType instance which matches the
         compartmentTypeID of this compartment is not null.
         
 @return true if the compartmentType instance which matches the
         compartmentTypeID of this compartment is not null.]]>
      </doc>
    </method>
    <method name="isSetOutside" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the outsideID of this compartment is not null.
 
 @return true if the outsideID of this compartment is not null.]]>
      </doc>
    </method>
    <method name="isSetOutsideInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the compartment instance which matches the outsideID of
         this compartment is not null.
 
 @return true if the compartment instance which matches the outsideID of
         this compartment is not null.]]>
      </doc>
    </method>
    <method name="isSetSize" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the size of this compartment has been set by a user.
 
 @return true if the size of this compartment has been set by a user.]]>
      </doc>
    </method>
    <method name="isSetSpatialDimensions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the spatialDimensions of this compartment has been set by a user.
 
 @return true if the spatialDimensions of this compartment has been set by a user.]]>
      </doc>
    </method>
    <method name="isSetVolume" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The volume attribute is only defined in SBML Level 1. Please
             use {@link #isSetSize()}">
      <doc>
      <![CDATA[<p>
 Returns true or false depending on whether this Compartment's 'volume'
 attribute has been set.
 </p>
 <p>
 Some words of explanation about the set/unset/isSet methods: SBML Levels
 1 and 2 define certain attributes on some classes of objects as optional.
 This requires an application to be careful about the distinction between
 two cases: (1) a given attribute has never been set to a value, and
 therefore should be assumed to have the SBML-defined default value, and
 (2) a given attribute has been set to a value, but the value happens to
 be an empty string. LibSBML supports these distinctions by providing
 methods to set, unset, and query the status of attributes that are
 optional. The methods have names of the form setAttribute(...),
 unsetAttribute(), and isSetAttribute(), where Attribute is the the name
 of the optional attribute in question.
 </p>
 <p>
 This method is similar but not identical to {@link #isSetSize()}. The
 latter should not be used in the context of SBML Level 1 models because
 this method (isSetVolume()) performs extra processing to take into
 account the difference in default values between SBML Levels 1 and 2.
 </p>
 
 @return true if the 'volume' attribute ('size' in L2) of this Compartment
         has been set, false otherwise.
 @see #isSetSize()
 @jsbml.note In SBML Level 1, a compartment's volume has a default value (
             1.0) and therefore this method will always return true. In
             Level 2, a compartment's size (the equivalent of SBML Level
             1's 'volume') is optional and has no default value, and
             therefore may or may not be set.
 @deprecated The volume attribute is only defined in SBML Level 1. Please
             use {@link #isSetSize()}]]>
      </doc>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="setCompartmentType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="compartmentType" type="org.sbml.jsbml.CompartmentType"/>
      <doc>
      <![CDATA[Sets the compartmentTypeID value of this compartment to the id of
 'compartmentType'
 
 @param compartmentType
 @sbml.deprecated Level 3 Version 1]]>
      </doc>
    </method>
    <method name="setCompartmentType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Only valid in Level 2.">
      <param name="compartmentTypeID" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the compartmentTypeID of this compartment to 'compartmentTypeID'
 
 @param compartmentTypeID
 @deprecated Only valid in Level 2.
 @throws PropertyNotAvailableException if Level is not 2.]]>
      </doc>
    </method>
    <method name="setOutside"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outside" type="org.sbml.jsbml.Compartment"/>
      <doc>
      <![CDATA[Sets the outsideID of this compartment to the id of 'outside'.
 
 @param outside
 @sbml.deprecated Level 3 Version 1]]>
      </doc>
    </method>
    <method name="setOutside"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="since Level 3 Version 1">
      <param name="outside" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the outsideID of this compartment to 'outside'.
 
 @param outside
 @deprecated since Level 3 Version 1
 @throws PropertyNotAvailableException if Level greater than 2.]]>
      </doc>
    </method>
    <method name="setSize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="size" type="double"/>
      <doc>
      <![CDATA[Sets the size of this compartment to 'size'.
 
 @param size
 @throws PropertyNotAvailableException
             in case of Level < 2.]]>
      </doc>
    </method>
    <method name="setSpatialDimensions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="spatialDimension" type="double"/>
      <doc>
      <![CDATA[Sets the spatialDimensions of this compartment to 'i'.
 
 @param spatialDimension
 @throws IllegalArgumentException
             if spatialDimension < 0 or if spatialDimension > 3
 @throws PropertyNotAvailableException if Level < 2.]]>
      </doc>
    </method>
    <method name="setSpatialDimensions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="spatialDimensions" type="int"/>
      <doc>
      <![CDATA[@param spatialDimensions]]>
      </doc>
    </method>
    <method name="setSpatialDimensions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="spatialDimensions" type="short"/>
      <doc>
      <![CDATA[Sets the spatialDimensions of this compartment to 'spatialDimensiosn'.
 
 @param spatialDimensions
 @throws IllegalArgumentException
             if spatialDimension < 0 or if spatialDimension > 3]]>
      </doc>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="units" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the unitsID of this {@link QuantityWithUnit}. Only valid unit
 kind names or identifiers of already existing {@link UnitDefinition}s are
 allowed arguments of this function.
 
 @param units
            the identifier of an already existing {@link UnitDefinition}
            or an {@link Unit.Kind} identifier for the current
            level/version combination of this unit. Passing a null value
            to this method is equivalent to calling {@link #unsetUnits()}.
 
 @throws IllegalArgumentException
             if the unit is not valid or if spatialDimensions = 0.]]>
      </doc>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="org.sbml.jsbml.Unit"/>
      <doc>
      <![CDATA[Sets the {@link Unit} of this {@link Compartment}.
 
 @param unit
 
 @throws IllegalArgumentException
             if spatialDimensions = 0.]]>
      </doc>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unitKind" type="org.sbml.jsbml.Unit.Kind"/>
      <doc>
      <![CDATA[Sets the unit of this Compartment.
 
 A new Unit object will be created base on this kind.
 
 @param unitKind
 
 @throws IllegalArgumentException
             if spatialDimensions = 0.]]>
      </doc>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unitDefinition" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Set the unit attribute of this Compartment to the given unit definition.
 
 @param unitDefinition
 
 @throws IllegalArgumentException
             if spatialDimensions <= 0.]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
    </method>
    <method name="setVolume"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="This method is only available for SBML Level 1. You should
             either use {@link #setSize(double)} or
             {@link #setValue(double)}.">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[<p>
 Sets the 'volume' attribute (or 'size' in SBML Level 2) of this
 Compartment.
 </p>
 <p>
 Some words of explanation about the set/unset/isSet methods: SBML Levels
 1 and 2 define certain attributes on some classes of objects as optional.
 This requires an application to be careful about the distinction between
 two cases: (1) a given attribute has never been set to a value, and
 therefore should be assumed to have the SBML-defined default value, and
 (2) a given attribute has been set to a value, but the value happens to
 be an empty string. LibSBML supports these distinctions by providing
 methods to set, unset, and query the status of attributes that are
 optional. The methods have names of the form setAttribute(...),
 unsetAttribute(), and isSetAttribute(), where Attribute is the the name
 of the optional attribute in question.
 </p>
 <p>
 This method is identical to {@link #setSize(double)} and is provided for
 compatibility between SBML Level 1 and Level 2.
 </p>
 
 @param value
            a double representing the volume of this compartment instance
            in whatever units are in effect for the compartment.
 @deprecated This method is only available for SBML Level 1. You should
             either use {@link #setSize(double)} or
             {@link #setValue(double)}.
 @throws PropertyNotAvailableException if Level is not 1.]]>
      </doc>
    </method>
    <method name="unsetCompartmentType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the compartmentTypeID of this {@link Compartment} to null.]]>
      </doc>
    </method>
    <method name="unsetOutside"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="since Level 3 Version 1">
      <doc>
      <![CDATA[Sets the outsideID of this compartment to null.
 
 @deprecated since Level 3 Version 1]]>
      </doc>
    </method>
    <method name="unsetSize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Unsets the value of the 'size' attribute of this Compartment.
 </p>
 <p>
 Some words of explanation about the set/unset/isSet methods: SBML Levels
 1 and 2 define certain attributes on some classes of objects as optional.
 This requires an application to be careful about the distinction between
 two cases: (1) a given attribute has never been set to a value, and
 therefore should be assumed to have the SBML-defined default value, and
 (2) a given attribute has been set to a value, but the value happens to
 be an empty string. LibSBML supports these distinctions by providing
 methods to set, unset, and query the status of attributes that are
 optional. The methods have names of the form setAttribute(...),
 unsetAttribute(), and isSetAttribute(), where Attribute is the the name
 of the optional attribute in question.
 </p>]]>
      </doc>
    </method>
    <method name="unsetSpatialDimensions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the spatialDimensions of this compartment to null.]]>
      </doc>
    </method>
    <method name="unsetVolume"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The volume attribute is only defined in SBML Level 1. Please
             use {@link #unsetSize()}">
      <doc>
      <![CDATA[<p>
 Unsets the value of the 'volume' attribute of this Compartment.
 </p>
 <p>
 Some words of explanation about the set/unset/isSet methods: SBML Levels
 1 and 2 define certain attributes on some classes of objects as optional.
 This requires an application to be careful about the distinction between
 two cases: (1) a given attribute has never been set to a value, and
 therefore should be assumed to have the SBML-defined default value, and
 (2) a given attribute has been set to a value, but the value happens to
 be an empty string. LibSBML supports these distinctions by providing
 methods to set, unset, and query the status of attributes that are
 optional. The methods have names of the form setAttribute(...),
 unsetAttribute(), and isSetAttribute(), where Attribute is the the name
 of the optional attribute in question.
 </p>
 <p>
 In SBML Level 1, a Compartment volume has a default value (1.0) and
 therefore should always be set. In Level 2, 'size' is optional with no
 default value and as such may or may not be set.
 </p>
 
 @deprecated The volume attribute is only defined in SBML Level 1. Please
             use {@link #unsetSize()}]]>
      </doc>
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the compartment in a model, i.e., a variable element with name,
 identifier, unit, and value that may change during a simulation. This is the
 container for reacting species.
 
 @author Andreas Dr&auml;ger
 @author Nicolas Rodriguez
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Compartment -->
  <!-- start class org.sbml.jsbml.CompartmentType -->
  <class name="CompartmentType" extends="org.sbml.jsbml.AbstractNamedSBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="Only valid in SBML Level 2 for Versions 2 through 4.">
    <implements name="org.sbml.jsbml.UniqueNamedSBase"/>
    <constructor name="CompartmentType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a CompartmentType instance.]]>
      </doc>
    </constructor>
    <constructor name="CompartmentType" type="org.sbml.jsbml.CompartmentType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a CompartmentType instance from a given CompartmentType.
 
 @param nsb]]>
      </doc>
    </constructor>
    <constructor name="CompartmentType" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a CompartmentType instance from a level and version.
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="CompartmentType" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[Creates a CompartmentType instance from an id.
 
 @param id
 @deprecated]]>
      </doc>
    </constructor>
    <constructor name="CompartmentType" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a CompartmentType instance from an id, level and version.
 
 @param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="CompartmentType" type="java.lang.String, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a CompartmentType instance from an id, name, level and version.
 
 @param id
 @param name
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.CompartmentType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParent" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.CompartmentType&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isIdMandatory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the compartmentType XML element of a SBML file. It is deprecated
 since level 3 and not defined in SBML before Level 2 Version 2.
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $
 @deprecated Only valid in SBML Level 2 for Versions 2 through 4.]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.CompartmentType -->
  <!-- start class org.sbml.jsbml.Constraint -->
  <class name="Constraint" extends="org.sbml.jsbml.AbstractMathContainer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Constraint"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link Constraint} instance. By default, the message is null.]]>
      </doc>
    </constructor>
    <constructor name="Constraint" type="org.sbml.jsbml.ASTNode, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link Constraint} instance from an {@link ASTNode}, a level and a version. By
 default, the message is null.
 
 @param math
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Constraint" type="org.sbml.jsbml.Constraint"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link Constraint} instance from a given {@link Constraint}.
 
 @param sb]]>
      </doc>
    </constructor>
    <constructor name="Constraint" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link Constraint} instance from a level and a version. By default, the
 message is null.
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.Constraint"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMessage" return="org.sbml.jsbml.xml.XMLNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the message of this {@link Constraint}. Returns null if the
         message is not set.
 
 @return the message of this {@link Constraint}. Returns null if the
         message is not set.]]>
      </doc>
    </method>
    <method name="getMessageString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the message of this {@link Constraint} as an XML {@link String}.
 
 @return  the message of this {@link Constraint} as an XML {@link String}.]]>
      </doc>
    </method>
    <method name="getParent" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Constraint&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetMessage" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the message of this {@link Constraint} is not null.
 
 @return true if the message of this {@link Constraint} is not null.]]>
      </doc>
    </method>
    <method name="setMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the message of this {@link Constraint} to 'message'.
 
 @param message
            : the message to set]]>
      </doc>
    </method>
    <method name="setMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="org.sbml.jsbml.xml.XMLNode"/>
      <doc>
      <![CDATA[Sets the message of this {@link Constraint} to 'message'.
 
 @param message
            : the message to set]]>
      </doc>
    </method>
    <method name="unsetMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the message of this {@link Constraint} to null.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Represents the constraint XML element of a SBML file.
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Constraint -->
  <!-- start class org.sbml.jsbml.Creator -->
  <class name="Creator" extends="org.sbml.jsbml.AnnotationElement"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Creator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link Creator} instance. By default, the email, familyName,
 givenName, organisation are null.]]>
      </doc>
    </constructor>
    <constructor name="Creator" type="org.sbml.jsbml.Creator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link Creator} instance from a given {@link Creator}.
 
 @param creator]]>
      </doc>
    </constructor>
    <constructor name="Creator" type="java.lang.String, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link Creator} instance. 
 
 @param givenName
 @param familyName
 @param organization
 @param email]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.Creator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="childIndex" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getEmail" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the email from the {@link Creator}. Returns an empty String if it is
         not set.
 
 @return the email from the {@link Creator}. Returns an empty String if it is
         not set.]]>
      </doc>
    </method>
    <method name="getFamilyName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the familyName from the {@link Creator}. Returns an empty String if
         it is not set.
 
 @return the familyName from the {@link Creator}. Returns an empty String if
         it is not set.]]>
      </doc>
    </method>
    <method name="getGivenName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the givenName from the {@link Creator}. Returns an empty String if
 it is not set.
 
 @return the givenName from the {@link Creator}. Returns an empty String if
 it is not set.]]>
      </doc>
    </method>
    <method name="getOrganisation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the organisation from the {@link Creator}. Returns an empty String
 if it is not set.
 
 @return the organisation from the {@link Creator}. Returns an empty String
 if it is not set.]]>
      </doc>
    </method>
    <method name="getOrganization" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the organisation from the {@link Creator}. Returns an empty String
 if it is not set.
 <p>
 Equal to {@link #getOrganisation()}
 
 @return the organisation from the {@link Creator}. Returns an empty String
 if it is not set.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetEmail" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true or false depending on whether this
 {@link Creator}'s email has been set.
 
 @return true if the email of this {@link Creator} is not null.]]>
      </doc>
    </method>
    <method name="isSetFamilyName" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true or false depending on whether this
 {@link Creator}'s familyName has been set.
 
 @return true if the familyName of this {@link Creator} is not null.]]>
      </doc>
    </method>
    <method name="isSetGivenName" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true or false depending on whether this
 {@link Creator}'s givenName has been set.
 
 @return true if the givenName of this {@link Creator} is not null.]]>
      </doc>
    </method>
    <method name="isSetOrganisation" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true or false depending on whether this
 {@link Creator}'s organisation has been set.
 
 @return true if the organisation of this {@link Creator} is not null.]]>
      </doc>
    </method>
    <method name="isSetOrganization" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true or false depending on whether this
 {@link Creator}'s organisation has been set.
 <p>Equal to {@link #isSetOrganisation()}
 
 @return true or false depending on whether this
 {@link Creator}'s organisation has been set.]]>
      </doc>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns true if the XML attribute is known by this {@link Creator}.
 
 @return true if the XML attribute is known by this {@link Creator}.]]>
      </doc>
    </method>
    <method name="setEmail" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="email" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the email
 
 @param email
 @return {@link JSBML#OPERATION_SUCCESS}]]>
      </doc>
    </method>
    <method name="setFamilyName" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="familyName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the family name
 
 @param familyName
 @return {@link JSBML#OPERATION_SUCCESS}]]>
      </doc>
    </method>
    <method name="setGivenName" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="givenName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the given name
 
 @param givenName
 @return {@link JSBML#OPERATION_SUCCESS}]]>
      </doc>
    </method>
    <method name="setOrganisation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="organisation" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the organisation
 
 @param organisation]]>
      </doc>
    </method>
    <method name="setOrganization"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="organization" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the organisation
 <p>Equal to {@link #setOrganisation(String)}.
 
 @param organization]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the information about the creator as a String.
 
 @return the information about the creator as a String.]]>
      </doc>
    </method>
    <method name="toXML"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="indent" type="java.lang.String"/>
      <param name="buffer" type="java.lang.StringBuffer"/>
      <doc>
      <![CDATA[Converts the {@link Creator} into XML
 
 @param indent
 @param buffer]]>
      </doc>
    </method>
    <method name="unsetEmail" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the email of this {@link Creator}.
 
 @return {@link JSBML#OPERATION_SUCCESS}]]>
      </doc>
    </method>
    <method name="unsetFamilyName" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the familyName of this {@link Creator}.
 
 @return {@link JSBML#OPERATION_SUCCESS}]]>
      </doc>
    </method>
    <method name="unsetGivenName" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the givenName of this {@link Creator}.
 
 @return {@link JSBML#OPERATION_SUCCESS}]]>
      </doc>
    </method>
    <method name="unsetOrganization"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the organisation of this {@link Creator}.]]>
      </doc>
    </method>
    <field name="URI_RDF_VCARD_NS" type="java.lang.String"
      transient="true" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[URI for the RDF syntax name space definition for VCards.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Contains all the information about a creator of a {@link Model} (or other {@link SBase} in level
 3).
 
 @author marine3
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Creator -->
  <!-- start class org.sbml.jsbml.CVTerm -->
  <class name="CVTerm" extends="org.sbml.jsbml.AnnotationElement"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CVTerm"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link CVTerm} instance. By default, the type and qualifier of
 this {@link CVTerm} are null. The list of resourceURIS is empty.]]>
      </doc>
    </constructor>
    <constructor name="CVTerm" type="org.sbml.jsbml.CVTerm"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link CVTerm} instance from a given {@link CVTerm}.
 
 @param term the {@link CVTerm} to clone]]>
      </doc>
    </constructor>
    <constructor name="CVTerm" type="org.sbml.jsbml.CVTerm.Qualifier, java.lang.String[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Guesses the {@link Type} argument and sets the {@link Qualifier}
 attribute appropriately. Then it adds all the given resources.
 
 @param qualifier
 @param resources]]>
      </doc>
    </constructor>
    <constructor name="CVTerm" type="org.sbml.jsbml.CVTerm.Type, org.sbml.jsbml.CVTerm.Qualifier, java.lang.String[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link CVTerm} with the given {@link Type} and
 {@link Qualifier} pointing to all given resources.
 
 @param type
 @param qualifier
 @param resources
 @throws IllegalArgumentException
             if the combination of the given type and qualifier is not
             possible or if the given resources are invalid.]]>
      </doc>
    </constructor>
    <method name="addResource" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="urn" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds a resource to the {@link CVTerm}.
 
 <p>Same method a {@link #addResourceURI(String)}
 
 @param urn
            string representing the resource; e.g.,
            'urn:miriam:kegg.reaction:R00351'
 @return true as specified in {@link Collection#add(Object)}]]>
      </doc>
    </method>
    <method name="addResources" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resources" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Adds list of resources to the {@link CVTerm}.
 
 @param resources a list of strings representing the resources; e.g.,
            'urn:miriam:kegg.reaction:R00351'
 @return true if all the resources have been added properly.]]>
      </doc>
    </method>
    <method name="addResourceURI" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds a resource to the {@link CVTerm}.
 
 <p>Same method a {@link #addResource(String)}
 
 @param uri
            string representing the resource; e.g.,
            'urn:miriam:kegg.reaction:R00351'
            
 @return true if 'uri' has been added to the list of resourceURI of this
         CVTerm.]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.CVTerm"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="filterResources" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pattern" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a list of resources that contain the given pattern. This is
 useful to obtain, e.g., all KEGG resources this term points to.
 
 @param pattern
            e.g., "urn:miriam:kegg.reaction:R" or just "kegg".
 @return A list of all resources that contain the given pattern. This list
         can be empty.]]>
      </doc>
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getBiologicalQualifierType" return="org.sbml.jsbml.CVTerm.Qualifier"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Biological QualifierType code for this CVTerm.
 
 @return the Biological QualifierType code for this CVTerm.]]>
      </doc>
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="childIndex" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getModelQualifierType" return="org.sbml.jsbml.CVTerm.Qualifier"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Model QualifierType code for this CVTerm.
 
 @return the Model QualifierType code for this CVTerm.]]>
      </doc>
    </method>
    <method name="getNumResources" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of resources for this CVTerm.
 
 @return the number of resources for this CVTerm.]]>
      </doc>
    </method>
    <method name="getQualifierType" return="org.sbml.jsbml.CVTerm.Type"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Qualifier Type code for this CVTerm.
 
 @return the Qualifier Type code for this CVTerm.]]>
      </doc>
    </method>
    <method name="getResources" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the resources for this CVTerm.
 
 @return the list of urns that store the resources of this CVTerm.]]>
      </doc>
    </method>
    <method name="getResourceURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[Returns the value of the nth resource for this CVTerm.
 
 @param i
            : index of the resourceURI in the list of the resourceURI.
 @return the value of the nth resource for this CVTerm.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isBiologicalQualifier" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this qualifier is a biological qualifier.
 
 @return true if this qualifier is a biological qualifier, false otherwise.]]>
      </doc>
    </method>
    <method name="isModelQualifier" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this qualifier is a model qualifier.
 
 @return true if this qualifier is a model qualifier, false otherwise.]]>
      </doc>
    </method>
    <method name="isSetBiologicalQualifierType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetModelQualifierType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetQualifierType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks whether or not the {@link Qualifier} has been set for this
 {@link CVTerm}.
 
 @return]]>
      </doc>
    </method>
    <method name="isSetType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the Type of this CVTerm is set.
 
 @return true if the Type of this CVTerm is set.]]>
      </doc>
    </method>
    <method name="isSetTypeQualifier" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the Qualifier of this CVTerm is set.
 
 @return true if the Qualifier of this CVTerm is set.]]>
      </doc>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="removeResource"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resource" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes a resource from the CVTerm.
 
 @param resource]]>
      </doc>
    </method>
    <method name="setBiologicalQualifierType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="specificQualifierType" type="int"/>
      <doc>
      <![CDATA[Sets the biological qualifier type.
 
 @param specificQualifierType]]>
      </doc>
    </method>
    <method name="setBiologicalQualifierType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="qualifier" type="org.sbml.jsbml.CVTerm.Qualifier"/>
      <doc>
      <![CDATA[Sets the biological qualifier type of this CVTerm.
 
 @param qualifier]]>
      </doc>
    </method>
    <method name="setModelQualifierType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="specificQualifierType" type="int"/>
      <doc>
      <![CDATA[Sets the model qualifier type of this CVTerm.
 
 @param specificQualifierType]]>
      </doc>
    </method>
    <method name="setModelQualifierType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="qualifier" type="org.sbml.jsbml.CVTerm.Qualifier"/>
      <doc>
      <![CDATA[Sets the model qualifier type of this CVTerm.
 
 @param qualifier]]>
      </doc>
    </method>
    <method name="setQualifierType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="qualifierType" type="int"/>
      <doc>
      <![CDATA[Sets the type of this CVTerm to the Type represented by 'qualifierType'.
 
 @param qualifierType the Type to set as an integer.]]>
      </doc>
    </method>
    <method name="setQualifierType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="org.sbml.jsbml.CVTerm.Type"/>
      <doc>
      <![CDATA[Sets the type of this CVTerm to 'type'
 
 @param type]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a {@link String} containing the qualifier and all the resource
         URIs of this {@link CVTerm}.
 
 @return a {@link String} containing the qualifier and all the resource
         URIs of this {@link CVTerm}.]]>
      </doc>
    </method>
    <method name="unsetBiologicalQualifierType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the biological qualifier if it is set.]]>
      </doc>
    </method>
    <method name="unsetModelQualifierType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the model qualifier if it is set.]]>
      </doc>
    </method>
    <method name="unsetQualifierType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the qualifier type if it is set.]]>
      </doc>
    </method>
    <method name="toXML"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="indent" type="java.lang.String"/>
      <param name="buffer" type="java.lang.StringBuffer"/>
      <doc>
      <![CDATA[Writes all the MIRIAM annotations of the {@link CVTerm} in 'buffer'
 
 @param indent
 @param buffer]]>
      </doc>
    </method>
    <field name="URI_BIOMODELS_NET_MODEL_QUALIFIERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="URI_BIOMODELS_NET_BIOLOGY_QUALIFIERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Contains all the MIRIAM URIs for a MIRIAM qualifier in the annotation element
 of a SBML component.
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.CVTerm -->
  <!-- start class org.sbml.jsbml.CVTerm.Qualifier -->
  <class name="CVTerm.Qualifier" extends="java.lang.Enum&lt;org.sbml.jsbml.CVTerm.Qualifier&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.sbml.jsbml.CVTerm.Qualifier[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.sbml.jsbml.CVTerm.Qualifier"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getElementNameEquivalent" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a name corresponding to this Qualifier Object.
 
 @return a name corresponding to this Qualifier Object.]]>
      </doc>
    </method>
    <method name="isBiologicalQualifier" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this qualifier is a biological qualifier.
 
 @return true if this qualifier is a biological qualifier, false otherwise.]]>
      </doc>
    </method>
    <method name="isModelQualifier" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this qualifier is a model qualifier.
 
 @return true if this qualifier is a model qualifier, false otherwise.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This <code>enum</code> list all the possible MIRIAM qualifiers.]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.CVTerm.Qualifier -->
  <!-- start class org.sbml.jsbml.CVTerm.Type -->
  <class name="CVTerm.Type" extends="java.lang.Enum&lt;org.sbml.jsbml.CVTerm.Type&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.sbml.jsbml.CVTerm.Type[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.sbml.jsbml.CVTerm.Type"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getElementNameEquivalent" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a name corresponding to this Type of qualifier Object.
 
 @return a name corresponding to this Type of qualifier Object.]]>
      </doc>
    </method>
    <method name="getNamespaceURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name space associated to this {@link Type}.
 @return]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This enum list all the possible MIRIAM qualifiers type.]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.CVTerm.Type -->
  <!-- start class org.sbml.jsbml.Delay -->
  <class name="Delay" extends="org.sbml.jsbml.AbstractMathContainer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Delay"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Delay instance.]]>
      </doc>
    </constructor>
    <constructor name="Delay" type="org.sbml.jsbml.ASTNode, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Delay instance from an ASTNode, level and version.
 
 @param math]]>
      </doc>
    </constructor>
    <constructor name="Delay" type="org.sbml.jsbml.Delay"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Delay instance from a given Delay.
 
 @param sb]]>
      </doc>
    </constructor>
    <constructor name="Delay" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Delay instance from a level and version.
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.Delay"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParent" return="org.sbml.jsbml.Event"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the delay subnode of an event element.
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Delay -->
  <!-- start class org.sbml.jsbml.Event -->
  <class name="Event" extends="org.sbml.jsbml.AbstractNamedSBaseWithUnit"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.UniqueNamedSBase"/>
    <constructor name="Event"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an Event instance. By default, if the level is set and is
 superior or equal to 3, the trigger, delay, listOfEventAssignemnts and
 timeUnitsID are null.]]>
      </doc>
    </constructor>
    <constructor name="Event" type="org.sbml.jsbml.Event"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an Event instance from a given event.
 
 @param event]]>
      </doc>
    </constructor>
    <constructor name="Event" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an Event from a level and version. By default, if the level is
 set and is superior or equal to 3, the trigger, delay,
 listOfEventAssignemnts and timeUnitsID are null.
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Event" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id]]>
      </doc>
    </constructor>
    <constructor name="Event" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an Event instance from an id, level and version. By default, if
 the level is set and is superior or equal to 3, the trigger, delay,
 listOfEventAssignemnts and timeUnitsID are null.
 
 @param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Event" type="java.lang.String, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an Event instance from an id, name, level and version. By
 default, if the level is set and is superior or equal to 3, the trigger,
 delay, listOfEventAssignemnts and timeUnitsID are null.
 
 @param id
 @param name
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="addEventAssignment" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="eventass" type="org.sbml.jsbml.EventAssignment"/>
      <doc>
      <![CDATA[Adds an EventAssignment instance to the list of EventAssignments of this
 Event.
 
 @param eventass
 @return {@code true} if the {@link #listOfEventAssignments} was
         changed as a result of this call.]]>
      </doc>
    </method>
    <method name="clearListOfEventAssignments"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Remove all the EventAssignments of the listOfEventAssignments of this
 Event.]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.Event"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="containsUndeclaredUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="createDelay" return="org.sbml.jsbml.Delay"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="createDelay" return="org.sbml.jsbml.Delay"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="math" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[@param math
 @return]]>
      </doc>
    </method>
    <method name="createEventAssignment" return="org.sbml.jsbml.EventAssignment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the new EventAssignment instance.]]>
      </doc>
    </method>
    <method name="createEventAssignment" return="org.sbml.jsbml.EventAssignment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="java.lang.String"/>
      <param name="math" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[@param variable
 @param math
 @return]]>
      </doc>
    </method>
    <method name="createEventAssignment" return="org.sbml.jsbml.EventAssignment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="org.sbml.jsbml.Variable"/>
      <param name="math" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[@param variable
 @param math
 @return]]>
      </doc>
    </method>
    <method name="createPriority" return="org.sbml.jsbml.Priority"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new, empty {@link Priority}, adds it to this {@link Event} and
 returns the {@link Priority}.
 
 @return the newly created {@link Priority} object instance]]>
      </doc>
    </method>
    <method name="createPriority" return="org.sbml.jsbml.Priority"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="math" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[@param math
 @return]]>
      </doc>
    </method>
    <method name="createTrigger" return="org.sbml.jsbml.Trigger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="createTrigger" return="org.sbml.jsbml.Trigger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initialValue" type="boolean"/>
      <param name="persistent" type="boolean"/>
      <doc>
      <![CDATA[@param initialValue
 @param persistent
 @return]]>
      </doc>
    </method>
    <method name="createTrigger" return="org.sbml.jsbml.Trigger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initialValue" type="boolean"/>
      <param name="persistent" type="boolean"/>
      <param name="math" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[@param initialValue
 @param persistent
 @param math
 @return]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDelay" return="org.sbml.jsbml.Delay"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the Delay instance of this Event.]]>
      </doc>
    </method>
    <method name="getDerivedUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDerivedUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getEventAssignment" return="org.sbml.jsbml.EventAssignment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[@param n
 @return the nth EventAssignment instance of the list of EventAssignments
         for this Event.]]>
      </doc>
    </method>
    <method name="getListOfEventAssignments" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.EventAssignment&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the list of eventAssignments of this Event.]]>
      </doc>
    </method>
    <method name="getNumEventAssignments" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the number of EventAssignments in the list of EventAssignements
         of this Event.]]>
      </doc>
    </method>
    <method name="getParent" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Event&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPredefinedUnitID" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPriority" return="org.sbml.jsbml.Priority"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the priority]]>
      </doc>
    </method>
    <method name="getTimeUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[@return The timeUnitsID of this Event. Return an empty String if it is
         not set.
 @deprecated]]>
      </doc>
    </method>
    <method name="getTimeUnitsID" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[@return the timeUnitsID
 @deprecated]]>
      </doc>
    </method>
    <method name="getTimeUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[@return the {@link UnitDefinition} instance of the model which matches
         the timesUnitsID of this {@link Event}. Returns null if there is
         no {@link UnitDefinition} id which matches the
         {@link #timeUnitsID} of this {@link Event}.
 @deprecated]]>
      </doc>
    </method>
    <method name="getTrigger" return="org.sbml.jsbml.Trigger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the Trigger instance of this Event.]]>
      </doc>
    </method>
    <method name="getUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUseValuesFromTriggerTime" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the useValuesFromTriggerTime instance of this Event. it is null
         if it has not been set.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the default values using the current Level/Version configuration.]]>
      </doc>
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Initializes the default values of this {@link Event}.]]>
      </doc>
    </method>
    <method name="isIdMandatory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetDelay" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the delay of this Event is not null.]]>
      </doc>
    </method>
    <method name="isSetListOfEventAssignments" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the listOfEventAssignments of this Event is not null and
         not empty;]]>
      </doc>
    </method>
    <method name="isSetPriority" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetTimeUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[@return true if the timeUnitsID of this {@link Event} is not null.
 @deprecated]]>
      </doc>
    </method>
    <method name="isSetTimeUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[@return true if the UnitDefinition which has the timeUnitsID of this
         Event as id is not null.
 @deprecated]]>
      </doc>
    </method>
    <method name="isSetTrigger" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the trigger of this Event is not null.]]>
      </doc>
    </method>
    <method name="isSetUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetUseValuesFromTriggerTime" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true is the useValuesFromTriggerTime of this Event is not null.]]>
      </doc>
    </method>
    <method name="isUseValuesFromTriggerTime" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the boolean value of the useValuesFromTriggerTime of this {@link Event}
         if it has been set, false otherwise.]]>
      </doc>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="removeEventAssignment" return="org.sbml.jsbml.EventAssignment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[@param i
 @return the removed ith EventAssignment instance.]]>
      </doc>
    </method>
    <method name="removeEventAssignment" return="org.sbml.jsbml.EventAssignment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[@param id
 @return the removed EventAssignment instance which has 'id' as id.]]>
      </doc>
    </method>
    <method name="setDelay"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="delay" type="org.sbml.jsbml.Delay"/>
      <doc>
      <![CDATA[Sets the delay of this Event to 'delay'. It automatically sets the Delay
 parentSBML object to this Event instance.
 
 @param delay]]>
      </doc>
    </method>
    <method name="setListOfEventAssignments"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfEventAssignments" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.EventAssignment&gt;"/>
      <doc>
      <![CDATA[Sets the {@link #listOfEventAssignments} of this {@link Event} to
 'listOfEventAssignments'. It automatically sets the SBMLParent object of
 the listOfEventAssignments and all the {@link EventAssignment}s in this list to
 this {@link Event} instance.
 
 @param listOfEventAssignments]]>
      </doc>
    </method>
    <method name="setPriority"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="priority" type="org.sbml.jsbml.Priority"/>
      <doc>
      <![CDATA[@param priority
            the priority to set
 @throws PropertyNotAvailableException if Level < 3.]]>
      </doc>
    </method>
    <method name="setTimeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="This is only applicable for SBML Level 2, Versions 1 and 2.">
      <param name="timeUnits" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the timeUnitsID of this {@link Event} to 'timeUnits'.
 
 @param timeUnits
 @deprecated This is only applicable for SBML Level 2, Versions 1 and 2.]]>
      </doc>
    </method>
    <method name="setTimeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeUnits" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Sets the timeUnitsID of this {@link Event} to the id of the {@link UnitDefinition}
 'timeUnits'.
 
 @param timeUnits]]>
      </doc>
    </method>
    <method name="setTimeUnitsID"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <param name="timeUnitsID" type="java.lang.String"/>
      <doc>
      <![CDATA[@param timeUnitsID
            the timeUnitsID to set
 @deprecated]]>
      </doc>
    </method>
    <method name="setTrigger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trigger" type="org.sbml.jsbml.Trigger"/>
      <doc>
      <![CDATA[Sets the trigger of this Event to 'trigger'. It automatically sets the
 {@link Trigger} parentSBML object to this Event instance.
 
 @param trigger]]>
      </doc>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeUnitKind" type="org.sbml.jsbml.Unit.Kind"/>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeUnits" type="java.lang.String"/>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeUnit" type="org.sbml.jsbml.Unit"/>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeUnits" type="org.sbml.jsbml.UnitDefinition"/>
    </method>
    <method name="setUseValuesFromTriggerTime"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="useValuesFromTriggerTime" type="boolean"/>
      <doc>
      <![CDATA[Sets the useValuesFromTriggerTime of this {@link Event} to
 'useValuesFromTriggerTime'.
 
 @param useValuesFromTriggerTime
 @throws PropertyNotAvailableException if the Level/Version combination is lower than 2.4.]]>
      </doc>
    </method>
    <method name="unsetDelay" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the delay of this {@link Event} to null.]]>
      </doc>
    </method>
    <method name="unsetListOfEventAssignments" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfEventAssignments} from this {@link Model} and
 notifies all registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <method name="unsetPriority" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the {@link Priority} of this {@link Event} to null and notifies
 {@link TreeNodeChangeListener}s.]]>
      </doc>
    </method>
    <method name="unsetTimeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the timeUnitsID of this {@link Event} to null.]]>
      </doc>
    </method>
    <method name="unsetTrigger" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the trigger of this {@link Event} to null and notifies
 {@link TreeNodeChangeListener}s.]]>
      </doc>
    </method>
    <method name="unsetUseValuesFromTriggerTime"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the useValuesFromTriggerTime of this Event to null.]]>
      </doc>
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the event XML element of a SBML file. Since {@link Event}s were
 introduced to SBML in Level 2, this class must not be used for models in 
 Level 1.
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Event -->
  <!-- start class org.sbml.jsbml.EventAssignment -->
  <class name="EventAssignment" extends="org.sbml.jsbml.AbstractMathContainer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.Assignment"/>
    <constructor name="EventAssignment"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an EventAssignment instance. By default, the variableID is null.]]>
      </doc>
    </constructor>
    <constructor name="EventAssignment" type="org.sbml.jsbml.EventAssignment"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an EventAssignment instance from a given EventAssignment.
 
 @param eventAssignment]]>
      </doc>
    </constructor>
    <constructor name="EventAssignment" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an EventAssignment instance from a level and version. By default,
 the variableID is null.]]>
      </doc>
    </constructor>
    <method name="checkAndSetVariable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the variableID of this EventAssignment to 'variable'. If 'variable'
 doesn't match any id of Compartment , Species, SpeciesReference or
 Parameter in Model, an {@link IllegalArgumentException} is thrown.
 
 @param variable
 @throws IllegalArgumentException]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.EventAssignment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getParent" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.EventAssignment&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getVariable" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getVariableInstance" return="org.sbml.jsbml.Variable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetVariable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetVariableInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="setVariable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="java.lang.String"/>
    </method>
    <method name="setVariable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="org.sbml.jsbml.Variable"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetVariable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the eventAssignment XML element of a SBML file.
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.EventAssignment -->
  <!-- start class org.sbml.jsbml.ExplicitRule -->
  <class name="ExplicitRule" extends="org.sbml.jsbml.Rule"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.Assignment"/>
    <implements name="org.sbml.jsbml.SBaseWithUnit"/>
    <constructor name="ExplicitRule"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link ExplicitRule}.]]>
      </doc>
    </constructor>
    <constructor name="ExplicitRule" type="org.sbml.jsbml.ASTNode, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link ExplicitRule}
 
 @param math
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="ExplicitRule" type="org.sbml.jsbml.ASTNode, org.sbml.jsbml.Variable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link ExplicitRule} with the given {@link ASTNode} element
 for the assignment to the given {@link Variable} or the derivative of the
 {@link Variable}.
 
 @param math
            An assignment
 @param variable
            Either the variable itself or its derivative is to be modified
            with the given.]]>
      </doc>
    </constructor>
    <constructor name="ExplicitRule" type="org.sbml.jsbml.ExplicitRule"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link ExplicitRule}
 
 @param rule]]>
      </doc>
    </constructor>
    <constructor name="ExplicitRule" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link ExplicitRule}
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="ExplicitRule" type="org.sbml.jsbml.Parameter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link ExplicitRule}
 
 @param parameter]]>
      </doc>
    </constructor>
    <constructor name="ExplicitRule" type="org.sbml.jsbml.Parameter, org.sbml.jsbml.ASTNode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link ExplicitRule}
 
 @param parameter
 @param math]]>
      </doc>
    </constructor>
    <constructor name="ExplicitRule" type="org.sbml.jsbml.Variable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an {@link ExplicitRule} instance from a given {@link Variable}.
 Takes level and version from the variable.
 
 @param variable]]>
      </doc>
    </constructor>
    <constructor name="ExplicitRule" type="org.sbml.jsbml.Variable, org.sbml.jsbml.ASTNode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link ExplicitRule}
 
 @param variable
 @param math]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.ExplicitRule"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link AssignmentRule} represents the SBML
             element ParameterRule.">
      <doc>
      <![CDATA[Returns the unitsID of this object.
 
 @return the unitsID of this object.
 @deprecated This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link AssignmentRule} represents the SBML
             element ParameterRule.]]>
      </doc>
    </method>
    <method name="getUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link AssignmentRule} represents the SBML
             element ParameterRule.">
      <doc>
      <![CDATA[@return the UnitDefinition instance which matches the unitsID of this
         object.
 @deprecated This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link AssignmentRule} represents the SBML
             element ParameterRule.]]>
      </doc>
    </method>
    <method name="getVariable" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getVariableInstance" return="org.sbml.jsbml.Variable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isCompartmentVolume" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isParameter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isScalar" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate returning true or false depending on whether this Rule is an
 AssignmentRule (SBML Level 2) or has a 'type' attribute value of 'scalar'
 (SBML Level 1).
 
 @return true if this Rule is an AssignmentRule (Level 2) or has type
         'scalar' (Level 1), false otherwise.]]>
      </doc>
    </method>
    <method name="isSetUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link AssignmentRule} represents the SBML
             element ParameterRule.">
      <doc>
      <![CDATA[@return true if the unitsID of this object is not null.
 @deprecated This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link AssignmentRule} represents the SBML
             element ParameterRule.]]>
      </doc>
    </method>
    <method name="isSetUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link AssignmentRule} represents the SBML
             element ParameterRule.">
      <doc>
      <![CDATA[@return true if the UnitsID of this object matches a no null
         UniDefinition of the model instance.
 @deprecated This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link AssignmentRule} represents the SBML
             element ParameterRule.]]>
      </doc>
    </method>
    <method name="isSetVariable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetVariableInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSpeciesConcentration" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unitKind" type="org.sbml.jsbml.Unit.Kind"/>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link AssignmentRule} represents the SBML
             element ParameterRule.">
      <param name="unitsID" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the unitsID to 'unitsID'.
 
 @param unitsID
            A valid identifier of a {@link UnitDefinition} in the
            {@link Model} or the name of one of the {@link Unit.Kind} base
            types.
 @deprecated This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link AssignmentRule} represents the SBML
             element ParameterRule.
 @throws PropertyNotAvailableException if Level is not 1.]]>
      </doc>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="org.sbml.jsbml.Unit"/>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link AssignmentRule} represents the SBML
             element ParameterRule.">
      <param name="units" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Sets the unitsID of this object with the id of 'units'.
 
 @param variable
 @deprecated This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link AssignmentRule} represents the SBML
             element ParameterRule.]]>
      </doc>
    </method>
    <method name="setVariable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="java.lang.String"/>
    </method>
    <method name="setVariable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="org.sbml.jsbml.Variable"/>
    </method>
    <method name="unsetUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link ExplicitRule} represents the SBML
             element ParameterRule.">
      <doc>
      <![CDATA[Unsets the unitsID of this {@link ExplicitRule}.
 
 @deprecated This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link ExplicitRule} represents the SBML
             element ParameterRule.]]>
      </doc>
    </method>
    <method name="unsetVariable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="unitsID" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link AssignmentRule} represents the SBML
             element ParameterRule.">
      <doc>
      <![CDATA[Represents the 'units' XML attribute of a ParameterRule.
 
 @deprecated This is a requirement for Level 1 Version 1 and Version 2,
             but can only be used in conjunction with {@link Parameter}s.
             In this case this {@link AssignmentRule} represents the SBML
             element ParameterRule.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[An explicit {@link Rule} is a rule that explicitly declares its variable
 element. Hence, this class provides methods to access and manipulate the
 variable field of the underlying {@link Rule}.
 
 @author Andreas Dr&auml;ger
 @date 2010-08-05
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.ExplicitRule -->
  <!-- start class org.sbml.jsbml.FunctionDefinition -->
  <class name="FunctionDefinition" extends="org.sbml.jsbml.AbstractMathContainer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.CallableSBase"/>
    <implements name="org.sbml.jsbml.UniqueNamedSBase"/>
    <constructor name="FunctionDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a FunctionDefinition instance. By default, id and name are null.]]>
      </doc>
    </constructor>
    <constructor name="FunctionDefinition" type="org.sbml.jsbml.FunctionDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a FunctionDefinition instance from a given FunctionDefinition.
 
 @param sb]]>
      </doc>
    </constructor>
    <constructor name="FunctionDefinition" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a FunctionDefinition instance from a level and version. By
 default, name is null.
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="FunctionDefinition" type="java.lang.String, org.sbml.jsbml.ASTNode, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a FunctionDefinition instance from an id, ASTNode, level and
 version. By default, name is null. If the ASTNode is not of type lambda,
 an IllegalArgumentException is thrown.
 
 @param id
 @param lambda
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="FunctionDefinition" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a FunctionDefinition instance from an id, level and version.
 
 @param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.FunctionDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getArgument" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Get the nth argument to this function.
 
 Callers should first find out the number of arguments to the function by
 calling {@link #getNumArguments()}.
 
 @param n
            an integer index for the argument sought.
 @return the nth argument (bound variable) passed to this
         {@link FunctionDefinition}.]]>
      </doc>
    </method>
    <method name="getArgument" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Get the argument named name to this {@link FunctionDefinition}.
 
 @param name
            the exact name (case-sensitive) of the sought-after argument
 @return the argument (bound variable) having the given name, or null if
         no such argument exists.]]>
      </doc>
    </method>
    <method name="getBody" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the mathematical expression that is the body of this
 {@link FunctionDefinition} object.
 
 @return the body of this {@link FunctionDefinition} as an Abstract Syntax
         Tree, or null if no body is defined.]]>
      </doc>
    </method>
    <method name="getId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNumArguments" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the number of arguments (bound variables) taken by this
 {@link FunctionDefinition}.
 
 @return the number of arguments (bound variables) that must be passed to
         this {@link FunctionDefinition}.]]>
      </doc>
    </method>
    <method name="getParent" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.FunctionDefinition&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isIdMandatory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetId" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetName" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="setFormula"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="formula" type="java.lang.String"/>
      <exception name="ParseException" type="org.sbml.jsbml.text.parser.ParseException"/>
    </method>
    <method name="setId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
    </method>
    <method name="setMath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="math" type="org.sbml.jsbml.ASTNode"/>
    </method>
    <method name="setName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the functionDefinition XML element of a SBML file. Since
 {@link FunctionDefinition}s were introduced to SBML in Level 2, this 
 class must not be used for models in Level 1.
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.FunctionDefinition -->
  <!-- start class org.sbml.jsbml.History -->
  <class name="History" extends="org.sbml.jsbml.AnnotationElement"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="History"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link History} instance. By default, the creation and modified
 are null. The {@link #listOfModification} and {@link #listOfCreators} are empty.]]>
      </doc>
    </constructor>
    <constructor name="History" type="org.sbml.jsbml.History"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link History} instance from a given {@link History}.
 
 @param modelHistory]]>
      </doc>
    </constructor>
    <method name="addCreator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mc" type="org.sbml.jsbml.Creator"/>
      <doc>
      <![CDATA[Adds a {@link Creator} instance to this {@link History}.
 
 @param mc]]>
      </doc>
    </method>
    <method name="addModifiedDate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
      <doc>
      <![CDATA[Adds a {@link Date} of modification to this {@link History}.
 
 @param date]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.History"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="childIndex" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCreatedDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the createdDate from the {@link History}.
 
 @return {@link Date} object representing the createdDate from the {@link History}.
         Can be null if it is not set.]]>
      </doc>
    </method>
    <method name="getCreator" return="org.sbml.jsbml.Creator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[Get the nth {@link Creator} object in this {@link History}.
 
 @param i
 @return the nth {@link Creator} of this {@link History}. Can be null.]]>
      </doc>
    </method>
    <method name="getListOfCreators" return="java.util.List&lt;org.sbml.jsbml.Creator&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of {@link Creator} objects in this {@link History}.
 
 @return the list of {@link Creator}s for this {@link History}.]]>
      </doc>
    </method>
    <method name="getListOfModifiedDates" return="java.util.List&lt;java.util.Date&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of ModifiedDate objects in this {@link History}.
 
 @return the list of ModifiedDates for this {@link History}.]]>
      </doc>
    </method>
    <method name="getModifiedDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the modifiedDate from the {@link History}.
 
 @return Date object representing the modifiedDate from the {@link History}.
         Can be null if it is not set.]]>
      </doc>
    </method>
    <method name="getModifiedDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Get the nth {@link Date} object in the list of ModifiedDates in this
 {@link History}.
 
 @param n
            the nth {@link Date} in the list of ModifiedDates of this
            {@link History}.
 @return the nth {@link Date} object in the list of ModifiedDates in this
         {@link History}. Can be null if it is not set.]]>
      </doc>
    </method>
    <method name="getNumCreators" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the number of {@link Creator} objects in this {@link History}.
 
 @return the number of {@link Creator}s in this {@link History}.]]>
      </doc>
    </method>
    <method name="getNumModifiedDates" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the number of ModifiedDate objects in this {@link History}.
 
 @return the number of ModifiedDates in this {@link History}.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks whether at least one attribute has been set for this
 {@link History}.
 
 @return true if at least one of the possible attributes is set, i.e., not
         null:
         <ul>
         <li> {@link #creation} date</li>
         <li> {@link #listOfCreators} is not null and contains at least one
         element</li>
         <li>
         {@link #listOfModification} is not null and contains at least one
         element.</li>
         <li> {@link #modified} is not null.</li>
         </ul>]]>
      </doc>
    </method>
    <method name="isSetCreatedDate" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate returning true or false depending on whether this
 {@link History}'s createdDate has been set.
 
 @return true if the createdDate of this {@link History} has been set, false
         otherwise.]]>
      </doc>
    </method>
    <method name="isSetListOfCreators" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetListOfModification" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetModifiedDate" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate returning true or false depending on whether this
 {@link History}'s modifiedDate has been set.
 
 @return true if the modifiedDate of this {@link History} has been set, false
         otherwise.]]>
      </doc>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodeName" type="java.lang.String"/>
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[@param nodeName
 @param attributeName
 @param prefix
 @param value
 @return true if the XML attribute is known by this {@link History}.]]>
      </doc>
    </method>
    <method name="removeCreator" return="org.sbml.jsbml.Creator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[If there is no i<sup>th</sup> {@link Creator}, it returns null.
 
 @param i
 @return the {@link Creator} removed from the {@link #listOfCreators}.]]>
      </doc>
    </method>
    <method name="removeModifiedDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[If there is no i<sup>th</sup> modified {@link Date}, it returns null.
 
 @param i
 @return the modified {@link Date} removed from the listOfModification.]]>
      </doc>
    </method>
    <method name="setCreatedDate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
      <doc>
      <![CDATA[Sets the createdDate.
 
 @param date
            a {@link Date} object representing the date the {@link History} was
            created.]]>
      </doc>
    </method>
    <method name="setModifiedDate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
      <doc>
      <![CDATA[Sets the modifiedDate.
 
 @param date
            a {@link Date} object representing the date the {@link History} was
            modified.]]>
      </doc>
    </method>
    <method name="unsetCreatedDate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the created of this {@link History} to null.]]>
      </doc>
    </method>
    <method name="unsetListOfModifiedDates"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the created of this {@link History} to null.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Contains all the history information about a {@link Model} (or other
 {@link SBase} if level >= 3).
 
 @author Marine Dumousseau
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.History -->
  <!-- start class org.sbml.jsbml.IdentifierException -->
  <class name="IdentifierException" extends="org.sbml.jsbml.SBMLException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IdentifierException" type="org.sbml.jsbml.NamedSBase, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param sb
 @param id]]>
      </doc>
    </constructor>
    <constructor name="IdentifierException" type="org.sbml.jsbml.SBase, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param abstractSBase
 @param metaId]]>
      </doc>
    </constructor>
    <field name="DUPLICATE_IDENTIFIER_MSG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This exception is thrown when trying to set or add an identifier to an
 instance of {@link NamedSBase} but if the given identifier is already
 registered in the containing {@link Model}.
 
 @author Andreas Dr&auml;ger
 @version $Rev: 1447 $
 @since 0.8
 @date 19.09.2011]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.IdentifierException -->
  <!-- start class org.sbml.jsbml.InitialAssignment -->
  <class name="InitialAssignment" extends="org.sbml.jsbml.AbstractMathContainer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.Assignment"/>
    <constructor name="InitialAssignment"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an InitialAssignment instance. By default, variableID is null.]]>
      </doc>
    </constructor>
    <constructor name="InitialAssignment" type="org.sbml.jsbml.InitialAssignment"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an InitialAssignment instance from a given InitialAssignment.
 
 @param sb]]>
      </doc>
    </constructor>
    <constructor name="InitialAssignment" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an InitialAssignment from level and version.
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="InitialAssignment" type="org.sbml.jsbml.Variable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an InitialAssignment instance from a {@link Variable}. Takes
 level and version from the given variable.
 
 @param variable]]>
      </doc>
    </constructor>
    <constructor name="InitialAssignment" type="org.sbml.jsbml.Variable, org.sbml.jsbml.ASTNode, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an InitialAssignment from a {@link Variable}, {@link ASTNode},
 level and version.
 
 @param variable
 @param math
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="checkAndSetVariable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the variableID of this {@link InitialAssignment} to 'variable'. If this
 variableID doesn't match any {@link Variable} id in {@link Model} (
 {@link Compartment}, {@link Species}, {@link SpeciesReference}, or
 {@link Parameter}), an {@link IllegalArgumentException} is thrown.
 
 @param variable
            : the symbol to set]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.InitialAssignment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getParent" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.InitialAssignment&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSymbol" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #getVariable()}">
      <doc>
      <![CDATA[This method is for compatibility with libSBML only.
 
 @return the variableID of this {@link InitialAssignment}. Return an empty
         {@link String} if it is not set.
 @deprecated use {@link #getVariable()}]]>
      </doc>
    </method>
    <method name="getVariable" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getVariableInstance" return="org.sbml.jsbml.Variable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetSymbol" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the variableID of this InitialAssignment is not null.]]>
      </doc>
    </method>
    <method name="isSetVariable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetVariableInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="setSymbol"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #setVariable(String)}.">
      <param name="symbol" type="java.lang.String"/>
      <doc>
      <![CDATA[This method is provided for compatibility with libSBML and also to
 reflect what is written in the SBML specifications until L3V1, but for
 consistency, JSBML uses the term {@link Variable} to refer to elements
 that satisfy the properties of this interface.
 
 @param symbol
 @deprecated use {@link #setVariable(String)}.]]>
      </doc>
    </method>
    <method name="setVariable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="java.lang.String"/>
    </method>
    <method name="setVariable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="org.sbml.jsbml.Variable"/>
    </method>
    <method name="unsetVariable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the initialAssignment XML element of a SBML file.
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.InitialAssignment -->
  <!-- start class org.sbml.jsbml.JSBML -->
  <class name="JSBML" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JSBML"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="addUnitDefinitionIfNotContained" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="model" type="org.sbml.jsbml.Model"/>
      <param name="units" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Adds the given {@link UnitDefinition} to the given model or returns the
 identifier of an equivalent {@link UnitDefinition} that is already part
 of the model. In case that the given model is null, the return value of
 this method will also be null.
 
 @param model
            The model where to add the given {@link UnitDefinition}
 @param units
            The {@link UnitDefinition} to be checked and possibly added to
            the given {@link Model}
 @return The identifier of the given {@link UnitDefinition} if this one
         has been added to the given model, the identifier of an
         equivalent {@link UnitDefinition} that is already part of the
         given model, or null.]]>
      </doc>
    </method>
    <method name="formulaToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Converts an {@link ASTNode} formula to a text string using a specific	 
 syntax for mathematical formulas.	 
 <p>	 
 The text-string form of mathematical formulas produced by <code><a	 
 href='libsbml.html#formulaToString(org.sbml.libsbml.{@link ASTNode})'>	 
 libsbml.formulaToString()</a></code> and read by <code><a href='libsbml.html#parseFormula(java.lang.String)'>	 
 libsbml.parseFormula()</a></code> are simple C-inspired infix notation taken from SBML	 
 Level&nbsp;1. A formula in this text-string form therefore can be handed	 
 to a program that understands SBML Level&nbsp;1 mathematical expressions,	 
 or used as part of a formula translation system. The syntax is described	 
 in detail in the libsbml documentation for <a href=	 
 "http://sbml.org/Software/libSBML/docs/java-api/org/sbml/libsbml/ASTNode.html"	 
 > ASTNode</a>.	 
 <p>	 
	 
 @param tree	 
            the root of the {@link ASTNode} formula expression tree	 
            <p>	 
 @return the formula from the given AST as an SBML Level 1 text-string	 
         mathematical formula. NULL is returned if the given argument is	 
         NULL.	 
         <p>	 
 @throws SBMLException	 
             In case the given {@link ASTNode} tree contains invalid	 
             nodes.]]>
      </doc>
    </method>
    <method name="getJSBMLDottedVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSBML version as a string of the form '1.2.3'.
 
 @return the JSBML version as a string of the form '1.2.3'.]]>
      </doc>
    </method>
    <method name="getJSBMLVersion" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSBML version as an integer: version 1.2.3 becomes 123.
 
 @return the JSBML version as an integer: version 1.2.3 becomes 123.]]>
      </doc>
    </method>
    <method name="getJSBMLVersionString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSBML version as a string: version 1.2.3 becomes '123'.
 
 @return the JSBML version as a string: version 1.2.3 becomes '123'.]]>
      </doc>
    </method>
    <method name="loadClasses"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.lang.String"/>
      <param name="whereToPutProperties" type="java.util.Map&lt;java.lang.String, java.lang.Class&lt;? extends T&gt;&gt;"/>
      <doc>
      <![CDATA[Loads {@link Properties} from a configuration file with the given path
 assuming that all values represent class names.
 @param <T>
 @param path
 @param whereToPutProperties]]>
      </doc>
    </method>
    <method name="parseFormula" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="formula" type="java.lang.String"/>
      <exception name="ParseException" type="org.sbml.jsbml.text.parser.ParseException"/>
      <doc>
      <![CDATA[Parses a text-string mathematical formula and returns a representation as	 
 an Abstract Syntax Tree.	 
	 
 @param formula	 
            a text-string mathematical formula.	 
 @return an <code>ASTNode</code> representing the formula.	 
 @throws ParseException	 
             If the given formula is not of valid format or cannot be	 
             parsed for other reasons.]]>
      </doc>
    </method>
    <method name="readMathMLFromString" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xml" type="java.lang.String"/>
      <doc>
      <![CDATA[Reads the MathML from the given XML string, constructs a corresponding	 
 abstract syntax tree, and returns a pointer to the root of the tree.	 
	 
 @param xml	 
            the MathML XML string.	 
 @return an <code>ASTNode</code>]]>
      </doc>
    </method>
    <method name="readSBML" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Reads an SBML document from the given file.	 
	 
 @param filename	 
            the file name.	 
 @return an <code>SBMLDocument</code> object.	 
 @throws XMLStreamException	 
             if any error occur while creating the XML document.	 
 @throws IOException if the file does not exist or cannot be read.]]>
      </doc>
    </method>
    <method name="readSBMLFromFile" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Reads an SBML document from the given file.	 
	 
 @param fileName	 
            the file name.	 
 @return an <code>SBMLDocument</code> object.	 
 @throws XMLStreamException	 
             if any error occur while creating the XML document.	 
 @throws IOException if the file does not exist or cannot be read.]]>
      </doc>
    </method>
    <method name="readSBMLFromString" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xml" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[Reads an SBML document from a string assumed to be in XML format.	 
	 
 @param xml	 
            the SBMLDocument as XML.	 
 @return an <code>SBMLDocument</code> object.	 
 @throws XMLStreamException	 
             if any error occur while creating the XML document.]]>
      </doc>
    </method>
    <method name="writeMathMLToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the given ASTNode (and its children) to a string as MathML, and	 
 returns the string.	 
	 
 @param node	 
            the <code>ASTNode</code>	 
 @return the MathML string representing the given <code>ASTNode</code>	 
 @throws XMLStreamException	 
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="writeSBML"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="filename" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="FileNotFoundException" type="java.io.FileNotFoundException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the XML representation of an SBML document to a file.	 
	 
 @param d	 
            the <code>SBMLdocument</code>	 
 @param filename	 
            the file name	 
 @throws XMLStreamException	 
             if any error occur while creating the XML document.	 
 @throws FileNotFoundException	 
             if the file name is invalid	 
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="writeSBMLToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="org.sbml.jsbml.SBMLDocument"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the given SBML document to an in-memory string.	 
	 
 @param d	 
            the <code>SBMLdocument</code>	 
 @return the XML representation of the <code>SBMLdocument</code> as a	 
         String.	 
 @throws XMLStreamException	 
             if any error occur while creating the XML document.	 
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="getNamespaceFrom" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[@param level
 @param version
 @return the name space matching the level and version.]]>
      </doc>
    </method>
    <field name="DUPLICATE_OBJECT_ID" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ILLEGAL_UNIT_EXCEPTION_MSG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Error message for the case that an invalid unit identifier is to be added
 to this object.]]>
      </doc>
    </field>
    <field name="INDEX_EXCEEDS_SIZE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="INVALID_ATTRIBUTE_VALUE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="INVALID_OBJECT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="INVALID_XML_OPERATION" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LEVEL_MISMATCH" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="OPERATION_FAILED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="OPERATION_SUCCESS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UNDEFINED_MODEL_MSG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This indicates that the {@link Model} has not been set properly or that
 an element tries to access its containing model but this is not possible.]]>
      </doc>
    </field>
    <field name="UNDEFINED_PARSE_ERROR_MSG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This message indicates that a problem occurred but the current class
 cannot give any more precise information about the reasons.]]>
      </doc>
    </field>
    <field name="UNDEFINED_PARSING_ERROR_MSG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This message indicates that a problem occurred but the current class
 cannot give any more precise information about the reasons.]]>
      </doc>
    </field>
    <field name="UNEXPECTED_ATTRIBUTE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="VERSION_MISMATCH" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="URI_PURL_TERMS" type="java.lang.String"
      transient="true" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[URI for purl terms.]]>
      </doc>
    </field>
    <field name="URI_PURL_ELEMENTS" type="java.lang.String"
      transient="true" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[URI for the definition of purl elements]]>
      </doc>
    </field>
    <field name="URI_XHTML_DEFINITION" type="java.lang.String"
      transient="true" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[URI for the definition of XHTML.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Wrapper class for global methods and constants defined by JSBML.
 
 @author Andreas Dr&auml;ger
 @author rodrigue
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.JSBML -->
  <!-- start class org.sbml.jsbml.KineticLaw -->
  <class name="KineticLaw" extends="org.sbml.jsbml.AbstractMathContainer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.SBaseWithUnit"/>
    <constructor name="KineticLaw"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a KineticLaw instance. By default, this listOfParameters, the
 timeUnitsID and substanceUnitsID are null.]]>
      </doc>
    </constructor>
    <constructor name="KineticLaw" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a KineticLaw instance from a level and version. By default, this
 listOfParameters, the timeUnitsID and substanceUnitsID are null.
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="KineticLaw" type="org.sbml.jsbml.KineticLaw"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a KineticLaw instance from a given KineticLaw.
 
 @param kineticLaw]]>
      </doc>
    </constructor>
    <constructor name="KineticLaw" type="org.sbml.jsbml.Reaction"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a KineticLaw instance from a given Reaction.
 
 @param parentReaction]]>
      </doc>
    </constructor>
    <method name="addLocalParameter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parameter" type="org.sbml.jsbml.LocalParameter"/>
      <doc>
      <![CDATA[Adds a copy of the given Parameter object to the list of local parameters
 in this KineticLaw.
 
 @param parameter
 @return {@code true} if the {@link #listOfLocalParameters} was
         changed as a result of this call.]]>
      </doc>
    </method>
    <method name="addParameter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #addLocalParameter(LocalParameter)}.">
      <param name="parameter" type="org.sbml.jsbml.LocalParameter"/>
      <doc>
      <![CDATA[Adds a copy of the given Parameter object to the list of local parameters
 in this KineticLaw.
 
 @param p
 @return {@code true} if the {@link #listOfLocalParameters} was
         changed as a result of this call.
 @deprecated use {@link #addLocalParameter(LocalParameter)}.]]>
      </doc>
    </method>
    <method name="addParameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="A {@link KineticLaw} can only contain instances of
             {@link LocalParameter}s. Please use
             {@link #addLocalParameter(LocalParameter)} and create an
             instance of {@link LocalParameter} for your purposes.">
      <param name="p" type="org.sbml.jsbml.Parameter"/>
      <doc>
      <![CDATA[This method creates a new {@link LocalParameter} with identical
 properties as the given {@link Parameter} and adds this new
 {@link LocalParameter} to this {@link KineticLaw}'s
 {@link #listOfLocalParameter}s.
 
 @param p
 @deprecated A {@link KineticLaw} can only contain instances of
             {@link LocalParameter}s. Please use
             {@link #addLocalParameter(LocalParameter)} and create an
             instance of {@link LocalParameter} for your purposes.]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.KineticLaw"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="createLocalParameter" return="org.sbml.jsbml.LocalParameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="createLocalParameter" return="org.sbml.jsbml.LocalParameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[@param string
 @return]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getListOfLocalParameters" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.LocalParameter&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the {@link #listOfLocalParameters} of this {@link KineticLaw}.
         Returns null if it is not set.]]>
      </doc>
    </method>
    <method name="getListOfParameters" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.LocalParameter&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #getListOfLocalParameters()}">
      <doc>
      <![CDATA[@return the {@link #listOfLocalParameters} of this {@link KineticLaw}.
         Returns null if it is not set.
 @deprecated use {@link #getListOfLocalParameters()}]]>
      </doc>
    </method>
    <method name="getLocalParameter" return="org.sbml.jsbml.LocalParameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[@param i
 @return the ith {@link LocalParameter} object in the
         {@link #listOfLocalParameters} in this {@link KineticLaw}
         instance.]]>
      </doc>
    </method>
    <method name="getLocalParameter" return="org.sbml.jsbml.LocalParameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[@param id
 @return a {@link LocalParameter} based on its identifier.]]>
      </doc>
    </method>
    <method name="getLocalParameterCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the number of {@link LocalParameter} instances in this
         {@link KineticLaw} instance.]]>
      </doc>
    </method>
    <method name="getNumLocalParameters" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #getLocalParameterCount()}">
      <doc>
      <![CDATA[@return the number of {@link LocalParameter} instances in this
         {@link KineticLaw} instance.
 @deprecated use {@link #getLocalParameterCount()}]]>
      </doc>
    </method>
    <method name="getNumParameters" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #getLocalParameterCount()}">
      <doc>
      <![CDATA[@return the number of {@link LocalParameter} instances in this
         {@link KineticLaw} instance.
 @deprecated use {@link #getLocalParameterCount()}]]>
      </doc>
    </method>
    <method name="getParameter" return="org.sbml.jsbml.LocalParameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #getLocalParameter(int)}">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[@param i
 @return the ith {@link LocalParameter} object in the
         {@link #listOfLocalParameters} in this {@link KineticLaw}
         instance.
 @deprecated use {@link #getLocalParameter(int)}]]>
      </doc>
    </method>
    <method name="getParameter" return="org.sbml.jsbml.LocalParameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #getLocalParameter(String)}">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[@param id
 @return a {@link LocalParameter} based on its identifier.
 @deprecated use {@link #getLocalParameter(String)}]]>
      </doc>
    </method>
    <method name="getParent" return="org.sbml.jsbml.Reaction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParentSBMLObject" return="org.sbml.jsbml.Reaction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method is convenient when holding an object nested inside other
 objects in an SBML model. It allows direct access to the &lt;model&gt;
 
 element containing it.
 
 @return Returns the parent SBML object.]]>
      </doc>
    </method>
    <method name="getSubstanceUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the substanceUnitsID of this {@link KineticLaw}. Return the empty {@link String}
         if it is not set.]]>
      </doc>
    </method>
    <method name="getSubstanceUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the UnitDefinition instance which has the substanceUnistID of
         this KineticLaw as id. Return null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getTimeUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the timeUnitsID of this {@link KineticLaw}. Return the empty {@link String} if it
         is not set.]]>
      </doc>
    </method>
    <method name="getTimeUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the UnitDefinition instance which has the timeUnistID of this
         KineticLaw as id. Return null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetListOfLocalParameters" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetListOfParameters" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #isSetListOfLocalParameters()}">
      <doc>
      <![CDATA[@return true if the listOfParameters of this KineticLaw is not null and
         not empty.
 @deprecated use {@link #isSetListOfLocalParameters()}]]>
      </doc>
    </method>
    <method name="isSetSubstanceUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the substanceUnitsID of this KineticLaw is not null.]]>
      </doc>
    </method>
    <method name="isSetSubstanceUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[@return true if the UnistDefinition instance which has the
         substanceUnitsID of this KineticLaw as id is not null.
 @deprecated]]>
      </doc>
    </method>
    <method name="isSetTimeUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[@return true if the timeUnitsID of this KineticLaw is not null.
 @deprecated]]>
      </doc>
    </method>
    <method name="isSetTimeUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[@return true if the UnistDefinition instance which has the timeUnitsID of
         this KineticLaw as id is not null.
 @deprecated]]>
      </doc>
    </method>
    <method name="isSetUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="removeLocalParameter" return="org.sbml.jsbml.LocalParameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[Removes the ith {@link LocalParameter} from this object.
 
 @param i
 @return the {@link LocalParameter} that has been removed or null.]]>
      </doc>
    </method>
    <method name="removeLocalParameter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="p" type="org.sbml.jsbml.LocalParameter"/>
      <doc>
      <![CDATA[Removes the {@link LocalParameter} 'p' from the
 {@link #listOfLocalParameters} of this {@link KineticLaw} according to
 its 'id'.
 
 @param p
 @return true if the operation was performed successfully.]]>
      </doc>
    </method>
    <method name="removeLocalParameter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes a {@link LocalParameter} from this object based on its 'id'.
 
 @param i
 @return true if the operation was performed successfully.]]>
      </doc>
    </method>
    <method name="removeParameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #removeLocalParameter(int)}">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[Removes the ith {@link LocalParameter} from this object.
 
 @param i
 @deprecated use {@link #removeLocalParameter(int)}]]>
      </doc>
    </method>
    <method name="removeParameter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #removeLocalParameter(LocalParameter)}">
      <param name="p" type="org.sbml.jsbml.Parameter"/>
      <doc>
      <![CDATA[Removes the {@link Parameter} 'p' from the {@link #listOfLocalParameters}
 of this {@link KineticLaw}.
 
 @param p
 @return true if the operation was performed successfully.
 @deprecated use {@link #removeLocalParameter(LocalParameter)}]]>
      </doc>
    </method>
    <method name="removeParameter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #removeLocalParameter(String)}">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes a {@link LocalParameter} from this object based on its 'id'.
 
 @param i
 @return true if the operation was performed successfully.
 @deprecated use {@link #removeLocalParameter(String)}]]>
      </doc>
    </method>
    <method name="setListOfLocalParameters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfLocalParameters" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.LocalParameter&gt;"/>
      <doc>
      <![CDATA[Sets the listOfParameters of this {@link KineticLaw} to 'list'. It automatically
 sets this as parentSBML object of the listOfParameters as well as the
 Parameter instances in the list.
 
 @param listOfLocalParameters]]>
      </doc>
    </method>
    <method name="setSubstanceUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Only defined for SBML Level 1 and Level 2 Version 1 and 2.">
      <param name="substanceUnits" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the substanceUnitsID of this {@link KineticLaw}.
 
 @param substanceUnits
 @deprecated Only defined for SBML Level 1 and Level 2 Version 1 and 2.
 @throws PropertyNotAvailableException
             for inappropriate Level/Version combinations.]]>
      </doc>
    </method>
    <method name="setSubstanceUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <param name="substanceUnit" type="org.sbml.jsbml.Unit"/>
      <doc>
      <![CDATA[@param substanceUnit
 @deprecated]]>
      </doc>
    </method>
    <method name="setTimeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Only defined for Level 1 and Level 2 Version 1.">
      <param name="timeUnits" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the timeUnitsID of this {@link KineticLaw}.
 
 @param timeUnits
 @deprecated Only defined for Level 1 and Level 2 Version 1.
 @throws PropertyNotAvailableException
             for inappropriate Level/Version combinations.]]>
      </doc>
    </method>
    <method name="setTimeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <param name="timeUnit" type="org.sbml.jsbml.Unit"/>
      <doc>
      <![CDATA[@param timeUnit
 @deprecated]]>
      </doc>
    </method>
    <method name="setTimeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Only defined for Level 1 and Level 2 Version 1.">
      <param name="timeUnits" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Sets the timeUnitsID of this KineticLaw.
 
 @param timeUnits
 @deprecated Only defined for Level 1 and Level 2 Version 1.]]>
      </doc>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unitKind" type="org.sbml.jsbml.Unit.Kind"/>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="org.sbml.jsbml.Unit"/>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="units" type="org.sbml.jsbml.UnitDefinition"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetListOfLocalParameters" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfLocalParameters} from this {@link KineticLaw} and notifies
 all registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <method name="unsetListOfParameters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #unsetListOfLocalParameters()}">
      <doc>
      <![CDATA[@deprecated use {@link #unsetListOfLocalParameters()}]]>
      </doc>
    </method>
    <method name="unsetSubstanceUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[Unsets the sunbstanceUnistID of this KineticLaw.
 
 @deprecated]]>
      </doc>
    </method>
    <method name="unsetTimeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[Unsets the timeUnitsID of this KineticLaw.
 
 @deprecated]]>
      </doc>
    </method>
    <method name="unsetUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the kineticLaw XML element of a SBML file.
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.KineticLaw -->
  <!-- start class org.sbml.jsbml.LevelVersionError -->
  <class name="LevelVersionError" extends="org.sbml.jsbml.SBMLError"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LevelVersionError" type="org.sbml.jsbml.SBase"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param sbase]]>
      </doc>
    </constructor>
    <constructor name="LevelVersionError" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="LevelVersionError" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param elementName
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="LevelVersionError" type="org.sbml.jsbml.SBase, org.sbml.jsbml.SBase"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param element1
 @param element2]]>
      </doc>
    </constructor>
    <method name="levelMismatchMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="element1" type="org.sbml.jsbml.SBase"/>
      <param name="element2" type="org.sbml.jsbml.SBase"/>
      <doc>
      <![CDATA[Creates an error message if the level fields of both elements are not
 identical, or an empty {@link String} otherwise.
 
 @param element1
 @param element2
 @return]]>
      </doc>
    </method>
    <method name="versionMismatchMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="element1" type="org.sbml.jsbml.SBase"/>
      <param name="element2" type="org.sbml.jsbml.SBase"/>
      <doc>
      <![CDATA[Creates an error message if the version fields of both elements are not
 identical, or an empty {@link String} otherwise.
 
 @param element1
 @param element2
 @return]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="LEVEL_MISMATCH_MSG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Message to display in cases that two objects do not have identical level
 attributes. Requires the following replacement arguments: Class name of
 first element, version in first element, class name of second element and
 level in second argument.]]>
      </doc>
    </field>
    <field name="UNDEFINED_LEVEL_VERSION_COMBINATION_MSG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Message to indicate that an invalid combination of the level and version
 attribute has been set.]]>
      </doc>
    </field>
    <field name="VERSION_MISMATCH_MSG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Message to display in cases that two objects do not have identical
 version attributes. Requires the following replacement arguments: Class
 name of first element, version in first element, class name of second
 element and version in second argument.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[An {@link SBMLError} that indicates that associated instances of
 {@link SBase} cannot be combined within the same model due to their
 differently set Level or Version attribute.
 
 @author Andreas Dr&auml;ger
 @date 2010-11-21
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.LevelVersionError -->
  <!-- start class org.sbml.jsbml.ListOf -->
  <class name="ListOf" extends="org.sbml.jsbml.AbstractSBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.List&lt;T&gt;"/>
    <constructor name="ListOf"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a ListOf instance. By default, the list containing the SBase
 elements is empty.]]>
      </doc>
    </constructor>
    <constructor name="ListOf" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a ListOf instance from a level and version. By default, the list
 containing the SBase elements is empty.]]>
      </doc>
    </constructor>
    <constructor name="ListOf" type="org.sbml.jsbml.ListOf&lt;? extends org.sbml.jsbml.SBase&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[creates a ListOf instance from a given ListOf.
 
 @param listOf]]>
      </doc>
    </constructor>
    <method name="initListOf" return="org.sbml.jsbml.ListOf&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.sbml.jsbml.SBase"/>
      <param name="list" type="org.sbml.jsbml.ListOf&lt;T&gt;"/>
      <param name="type" type="org.sbml.jsbml.ListOf.Type"/>
      <doc>
      <![CDATA[Helper method to initialize newly created lists.
 
 @param list
 @param type]]>
      </doc>
    </method>
    <method name="isDebugMode" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If this method returns true, the {@link #toString()} method of this
 {@link ListOf} displays the whole content of the list. Otherwise, only
 the {@link Type} is shown.
 
 @return the debugMode]]>
      </doc>
    </method>
    <method name="newInstance" return="org.sbml.jsbml.ListOf&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.sbml.jsbml.SBase"/>
      <param name="clazz" type="java.lang.Class&lt;T&gt;"/>
      <doc>
      <![CDATA[Helper method to initialize a new {@link ListOf} object for the given
 parent SBML object and with the given {@link Class} as the type of the
 list.
 
 @param <T>
 @param parent
 @param clazz
 @return]]>
      </doc>
    </method>
    <method name="setDebugMode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="debugMode" type="boolean"/>
      <doc>
      <![CDATA[Allows you to influence the behavior of the {@link #toString()} method.
 If set to {@code true}, the whole content of this {@link ListOf} is
 displayed by the {@link #toString()} method, just like it is done in
 other {@link List} implementations. The default for JSBML, however, is,
 to only display the {@link Type} of this list.
 
 @param debugMode
            the debugMode to set]]>
      </doc>
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <param name="element" type="T extends org.sbml.jsbml.SBase"/>
    </method>
    <method name="add" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="T extends org.sbml.jsbml.SBase"/>
      <exception name="LevelVersionError" type="org.sbml.jsbml.LevelVersionError"/>
    </method>
    <method name="addAll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="java.util.Collection&lt;? extends T&gt;"/>
    </method>
    <method name="addAll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <param name="c" type="java.util.Collection&lt;? extends T&gt;"/>
    </method>
    <method name="append" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="T extends org.sbml.jsbml.SBase"/>
      <doc>
      <![CDATA[Adds item to the end of this ListOf.
 
 This variant of the method makes a clone of the item handed to it. This
 means that when the {@link ListOf} is destroyed, the original items will not be
 destroyed.
 
 @param e
            the item to be added to the list.
 @return true if this could be successfully appended.
 @see #add(T)]]>
      </doc>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="org.sbml.jsbml.ListOf&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="containsAll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="java.util.Collection&lt;?&gt;"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="filterList" return="org.sbml.jsbml.ListOf&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="org.sbml.jsbml.util.filters.Filter"/>
      <doc>
      <![CDATA[Returns a new {@link ListOf} that contains only those elements that
 satisfy a certain filter criterion.
 
 @param f
            A filter that defines the criterion for elements to be put
            into the list to be returned.
 @return A new list that can be empty if no element fulfills the filter
         criterion.]]>
      </doc>
    </method>
    <method name="firstHit" return="T extends org.sbml.jsbml.SBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="org.sbml.jsbml.util.filters.Filter"/>
      <doc>
      <![CDATA[Returns the first element in this list that satisfies a certain filter
 criterion.
 
 @param f
            A filter defining the criterion for which to be filter.
 @return The first element of this list that satisfies the criterion or
         null if no such element exists in this list.]]>
      </doc>
    </method>
    <method name="get" return="T extends org.sbml.jsbml.SBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the element at the specified position in this list or null if the index is negative or too big.
 
 @param index index of the element to return.
 @return the element at the specified position in this list or null if the index is negative or too big.
 
 @see java.util.List#get(int)]]>
      </doc>
    </method>
    <method name="get" return="T extends org.sbml.jsbml.SBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets the list element which has the id 'id'. 
 
 <p>The elements of the list have to implement {@link NamedSBase}, if they are not
 or if the id is not found, null is returned.
 
 @param id the id to search for.
 @return the list element which has the id 'id'.]]>
      </doc>
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getElementName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFirst" return="T extends org.sbml.jsbml.SBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The first element in this list.
 
 @return]]>
      </doc>
    </method>
    <method name="getLast" return="T extends org.sbml.jsbml.SBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the last element in this list.
 
 @return]]>
      </doc>
    </method>
    <method name="getSBaseListType" return="org.sbml.jsbml.ListOf.Type"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the SBaseListType of this ListOf instance]]>
      </doc>
    </method>
    <method name="indexOf" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="isEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="iterator" return="java.util.Iterator&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="lastIndexOf" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="listIterator" return="java.util.ListIterator&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="listIterator" return="java.util.ListIterator&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="remove" return="T extends org.sbml.jsbml.SBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="remove" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nsb" type="org.sbml.jsbml.NamedSBase"/>
      <doc>
      <![CDATA[Removes a {@link NamedSBase} according to its unique id.
 
 @param nsb
            the object to be removed.
 @return success or failure.]]>
      </doc>
    </method>
    <method name="remove" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="remove" return="T extends org.sbml.jsbml.SBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="removeId" type="java.lang.String"/>
      <doc>
      <![CDATA[Specialized method to remove a named SBase according to its unique id.
 
 @param id
            the id of the object to be removed.
 @return success or failure.]]>
      </doc>
    </method>
    <method name="removeAll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="java.util.Collection&lt;?&gt;"/>
    </method>
    <method name="removeAll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="org.sbml.jsbml.util.filters.Filter"/>
      <doc>
      <![CDATA[Removes all elements from this list that fulfill the filter property of
 the given filter.
 
 @param f
 @return]]>
      </doc>
    </method>
    <method name="removeFirst" return="T extends org.sbml.jsbml.SBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="org.sbml.jsbml.util.filters.Filter"/>
      <doc>
      <![CDATA[Removes the first element from this list that fulfills the filter
 property of the given filter.
 
 @param f
 @return]]>
      </doc>
    </method>
    <method name="retainAll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="java.util.Collection&lt;?&gt;"/>
    </method>
    <method name="set" return="T extends org.sbml.jsbml.SBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <param name="element" type="T extends org.sbml.jsbml.SBase"/>
    </method>
    <method name="setListOf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOf" type="java.util.List&lt;T&gt;"/>
      <doc>
      <![CDATA[Clears this {@link ListOf} if not empty and then adds all elements in 
 the given {@link List} to this {@link ListOf}.
 
 @param listOf]]>
      </doc>
    </method>
    <method name="setSBaseListType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class&lt;T&gt;"/>
      <doc>
      <![CDATA[Sets the {@link Type} of this {@link ListOf} instance to the {@link Type}
 defined by the given {@link Class}.
 
 @param type]]>
      </doc>
    </method>
    <method name="setSBaseListType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="currentList" type="org.sbml.jsbml.ListOf.Type"/>
      <doc>
      <![CDATA[Sets the {@link Type} of this {@link ListOf} instance to 'listType'.
 
 @param listType]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="subList" return="java.util.List&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fromIndex" type="int"/>
      <param name="toIndex" type="int"/>
    </method>
    <method name="toArray" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toArray" return="T[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="a" type="T[]"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetSBaseListType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the SBaseListType of this ListOf to SBaseListType.none.]]>
      </doc>
    </method>
    <field name="listOf" type="java.util.ArrayList&lt;T&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[list containing all the SBase elements of this object.]]>
      </doc>
    </field>
    <field name="listType" type="org.sbml.jsbml.ListOf.Type"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[name of the list at it appears in the SBMLFile. By default, it is
 SBaseListType.none.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This list implementation is a Java {@link List} that extends
 {@link AbstractSBase}. It represents the listOfxxx XML elements in a SBML
 file. Unfortunately, there is no way for multiple inheritance in Java.
 
 @author Nicolas Rodriguez
 @author Marine Dumousseau
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.ListOf -->
  <!-- start class org.sbml.jsbml.ListOf.Type -->
  <class name="ListOf.Type" extends="java.lang.Enum&lt;org.sbml.jsbml.ListOf.Type&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.sbml.jsbml.ListOf.Type[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.sbml.jsbml.ListOf.Type"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="valueOf" return="org.sbml.jsbml.ListOf.Type"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class&lt;? extends org.sbml.jsbml.SBase&gt;"/>
      <doc>
      <![CDATA[Gives the corresponding {@link Type} for the given {@link Class}
 object. However, in the case of {@link #listOfReactants} and
 {@link #listOfProducts} it is not possible to make a distinction
 because both types refer to the same {@link Class} object. Therefore,
 in this case this method will return the type {@link #other}, which
 is to be clearly distinguished from {@link #none}.
 
 @param type
 @return]]>
      </doc>
    </method>
    <method name="toClass" return="java.lang.Class&lt;? extends org.sbml.jsbml.SBase&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gives the corresponding {@link Class} object for this {@link Type}.
 However, in case of {@link #listOfReactants} and
 {@link #listOfProducts} the same {@link Class} object is returned.
 
 @return]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This enum lists all the possible names of the listXXX components. If the
 listXXX is a SBML package extension, the SBaseListType value to set would
 be 'other'.
 
 @author marine]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.ListOf.Type -->
  <!-- start class org.sbml.jsbml.LocalParameter -->
  <class name="LocalParameter" extends="org.sbml.jsbml.QuantityWithUnit"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LocalParameter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new instance of {@link LocalParameter}.]]>
      </doc>
    </constructor>
    <constructor name="LocalParameter" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="LocalParameter" type="org.sbml.jsbml.LocalParameter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param lp]]>
      </doc>
    </constructor>
    <constructor name="LocalParameter" type="org.sbml.jsbml.Parameter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new local parameter that will have the same properties than the
 given global parameter. However, the value of the constant attribute will
 be ignored because a local parameter can only be a constant quantity.
 
 @param parameter]]>
      </doc>
    </constructor>
    <constructor name="LocalParameter" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new instance of {@link LocalParameter} with the given
 identifier.
 
 @param id]]>
      </doc>
    </constructor>
    <constructor name="LocalParameter" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="LocalParameter" type="java.lang.String, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id
 @param name
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.LocalParameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getElementName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParent" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.LocalParameter&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParentSBMLObject" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.LocalParameter&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPredefinedUnitID" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isExplicitlySetConstant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[In SBML prior to Level 3 it was possible to explicitly state that a local
 parameter represents a constant {@link Quantity}. However, per
 definition, each local parameter has always been constant no matter if
 its XML representation contains the <code>constant</code> attribute or
 not. Hence, this attribute could set to {@code true} only. This
 method checks if for this {@link LocalParameter} an explicit
 <code>constant</code> flag has been set.
 
 @return the isExplicitlySetConstant {@code true} if this
         {@link LocalParameter} contains an explicit <code>constant</code>
         flag, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="setExplicitlyConstant"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Since SBML Level 3 it is no longer possible to explicitly set
             a {@link LocalParameter} to lEsS_tHaNcode>constant = truelEsS_tHaN/code>
             because {@link LocalParameter} instances always represent
             constant a {@link Quantity}.">
      <param name="isExplicitlySetConstant" type="boolean"/>
      <doc>
      <![CDATA[This method allows users to explicitly manipulate the
 <code>constant</code> attribute of this {@link LocalParameter}. This
 attribute can set to {@code true} only. Therefore, this method does
 just decide whether or not the <code>constant</code> attribute should
 occur in generated SBML code when serializing this {@link LocalParameter}
 . Since this object always represents a constant {@link Quantity} this
 method does only decide whether or not the resulting SBML code should
 contain the attribute/value pair <code>constant = true</code>, it does
 not decide on whether or not this object should be constant.
 
 @param isExplicitlySetConstant
            the isExplicitlySetConstant to set
 @deprecated Since SBML Level 3 it is no longer possible to explicitly set
             a {@link LocalParameter} to <code>constant = true</code>
             because {@link LocalParameter} instances always represent
             constant a {@link Quantity}.]]>
      </doc>
    </method>
    <method name="setId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newId" type="java.lang.String"/>
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A local parameter can only be used to specify a constant within a
 {@link KineticLaw}.
 
 @author Andreas Dr&auml;ger
 @author Nicolas Rodriguez
 @date 2010-04-20
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.LocalParameter -->
  <!-- start interface org.sbml.jsbml.MathContainer -->
  <interface name="MathContainer"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.SBaseWithDerivedUnit"/>
    <method name="getFormula" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="As this is part of SBML Level 1, it is strongly recommended
             not to work with the {@link String} representation of a
             formula, but to deal with a more flexible {@link ASTNode}.">
      <doc>
      <![CDATA[Converts this {@link MathContainer}'s internal {@link ASTNode} to a
 C-like {@link String} according to the SBML Level 1 specifications and
 returns it.
 
 @return the math {@link ASTNode} of this object as a String. It returns
         the empty String if the math {@link ASTNode} is not set.
 @deprecated As this is part of SBML Level 1, it is strongly recommended
             not to work with the {@link String} representation of a
             formula, but to deal with a more flexible {@link ASTNode}.
 @see #getMath()]]>
      </doc>
    </method>
    <method name="getMath" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If {@link #isSetMath()} returns true, this method returns the
 {@link ASTNode} belonging to this {@link MathContainer}.
 
 @return the math {@link ASTNode} of this object. It return null if the
         math {@link ASTNode} is not set.]]>
      </doc>
    </method>
    <method name="getMathMLString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If {@link #isSetMath()} returns true, this method returns the
 corresponding MathML {@link String}, otherwise an empty {@link String}
 will be returned.
 
 @return the MathML representation of this {@link MathContainer}'s math
         element.]]>
      </doc>
    </method>
    <method name="isSetMath" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if an {@link ASTNode} has been set for this {@link MathContainer}.
 
 @return true if the math {@link ASTNode} of this object is not null.]]>
      </doc>
    </method>
    <method name="setFormula"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="As this is part of SBML Level 1, it is strongly recommended
             not to work with the {@link String} representation of a
             formula, but to deal with a more flexible {@link ASTNode}.
             Please use {@link ASTNode#parseFormula(String)} to create an
             {@link ASTNode} object from your formula {@link String}.">
      <param name="formula" type="java.lang.String"/>
      <exception name="ParseException" type="org.sbml.jsbml.text.parser.ParseException"/>
      <doc>
      <![CDATA[Sets the mathematical expression of this {@link MathContainer} instance
 to the given formula. This method parses the given {@link String} and
 stores the result in an {@link ASTNode} object.
 
 @param formula
            a C-like {@link String} according to the definition in the
            SBML Level 1 specifications.
 @deprecated As this is part of SBML Level 1, it is strongly recommended
             not to work with the {@link String} representation of a
             formula, but to deal with a more flexible {@link ASTNode}.
             Please use {@link ASTNode#parseFormula(String)} to create an
             {@link ASTNode} object from your formula {@link String}.
 @throws ParseException
             If the given formula is invalid or cannot be parsed properly.
 @throws PropertyNotAvailableException
             When trying to set this attribute and the Level is set to a
             value other than 1, this will throw an error.]]>
      </doc>
    </method>
    <method name="setMath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="math" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Sets the math {@link ASTNode} of this {@link MathContainer} to the given
 value.
 
 @param math
            an abstract syntax tree.]]>
      </doc>
    </method>
    <method name="unsetFormula"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #unsetMath()}">
      <doc>
      <![CDATA[@deprecated use {@link #unsetMath()}]]>
      </doc>
    </method>
    <method name="unsetMath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Base interface for all the SBML components which contain MathML nodes.
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.MathContainer -->
  <!-- start class org.sbml.jsbml.Model -->
  <class name="Model" extends="org.sbml.jsbml.AbstractNamedSBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.UniqueNamedSBase"/>
    <constructor name="Model"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Model instance. By default, all the listOfxxx and xxxUnitsID are
 null.]]>
      </doc>
    </constructor>
    <constructor name="Model" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Model instance.
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Model" type="org.sbml.jsbml.Model"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Model instance from a Model.
 
 @param model]]>
      </doc>
    </constructor>
    <constructor name="Model" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Model instance from an id.
 
 @param id]]>
      </doc>
    </constructor>
    <constructor name="Model" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Model instance from an id, level and version. By default, all the
 listOfxxx and xxxUnitsID are null.
 
 @param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="addCompartment" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="compartment" type="org.sbml.jsbml.Compartment"/>
      <doc>
      <![CDATA[Adds a Compartment instance to the listOfCompartments of this Model.
 
 @param compartment
 @return {@code true} if the {@link #listOfCompartments} was changed as
         a result of this call.]]>
      </doc>
    </method>
    <method name="addCompartmentType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Only valid in SBML Level 2 for Versions 2 through 4.">
      <param name="compartmentType" type="org.sbml.jsbml.CompartmentType"/>
      <doc>
      <![CDATA[Adds a CompartmentType instance to the listOfCompartmentTypes of this
 Model.
 
 @param compartmentType
 @return {@code true} if the {@link #listOfCompartmentTypes} was
         changed as a result of this call.
 @deprecated Only valid in SBML Level 2 for Versions 2 through 4.]]>
      </doc>
    </method>
    <method name="addConstraint" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="constraint" type="org.sbml.jsbml.Constraint"/>
      <doc>
      <![CDATA[Adds a {@link Constraint} instance to the listOfConstraints of this
 {@link Model}.
 
 @param constraint
 @return {@code true} if the {@link #listOfConstraints} was changed as
         a result of this call.]]>
      </doc>
    </method>
    <method name="addEvent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="event" type="org.sbml.jsbml.Event"/>
      <doc>
      <![CDATA[Adds an {@link Event} instance to the listOfEvents of this Model.
 
 @param event
 @return {@code true} if the {@link #listOfEvents} was changed as a
         result of this call.
 @throws PropertyNotAvailableException
             for inappropriate Level/Version combinations.]]>
      </doc>
    </method>
    <method name="addFunctionDefinition" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="functionDefinition" type="org.sbml.jsbml.FunctionDefinition"/>
      <doc>
      <![CDATA[Adds a {@link FunctionDefinition} instance to the listOfFunctionDefinitions
 of this {@link Model}.
 
 @param functionDefinition
 @return {@code true} if the {@link #listOfFunctionDefinitions} was
         changed as a result of this call.]]>
      </doc>
    </method>
    <method name="addInitialAssignment" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initialAssignment" type="org.sbml.jsbml.InitialAssignment"/>
      <doc>
      <![CDATA[Adds an InitialAssignment instance to the listOfInitialAssignments of this
 Model.
 
 @param initialAssignment
 @return {@code true} if the {@link #listOfInitialAssignments} was
         changed as a result of this call.]]>
      </doc>
    </method>
    <method name="addParameter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parameter" type="org.sbml.jsbml.Parameter"/>
      <doc>
      <![CDATA[Adds a Parameter instance to the listOfParameters of this Model.
 
 @param parameter
 @return {@code true} if the {@link #listOfParameters} was changed as a
         result of this call.]]>
      </doc>
    </method>
    <method name="addReaction" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reaction" type="org.sbml.jsbml.Reaction"/>
      <doc>
      <![CDATA[Adds a Reaction instance to the listOfReactions of this Model.
 
 @param reaction
 @return {@code true} if the {@link #listOfReactions} was changed as a
         result of this call.]]>
      </doc>
    </method>
    <method name="addRule" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rule" type="org.sbml.jsbml.Rule"/>
      <doc>
      <![CDATA[Adds a Rule instance to the listOfRules of this Model.
 
 @param rule
 @return {@code true} if the {@link #listOfRules} was changed as a
         result of this call.]]>
      </doc>
    </method>
    <method name="addSpecies" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="spec" type="org.sbml.jsbml.Species"/>
      <doc>
      <![CDATA[Adds a Species instance to the listOfSpecies of this Model.
 
 @param spec
 @return {@code true} if the {@link #listOfSpecies} was changed as a
         result of this call.]]>
      </doc>
    </method>
    <method name="addSpeciesType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Only valid in SBML Level 2 for Versions 2 through 4.">
      <param name="speciesType" type="org.sbml.jsbml.SpeciesType"/>
      <doc>
      <![CDATA[Adds a SpeciesType instance to the listOfSpeciesTypes of this Model.
 
 @param speciesType
 @return {@code true} if the {@link #listOfSpeciesTypes} was changed as
         a result of this call.
 @deprecated Only valid in SBML Level 2 for Versions 2 through 4.]]>
      </doc>
    </method>
    <method name="addUnitDefinition" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unitDefinition" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Adds an UnitDefinition instance to the listOfUnitDefinitions of this Model.
 
 @param unitDefinition
 @return {@code true} if the {@link #listOfUnitDefinitions} was changed
         as a result of this call.]]>
      </doc>
    </method>
    <method name="addUnitDefinitionOrReturnIdenticalUnit" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="units" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Checks whether an identical {@link UnitDefinition} like the given
 {@link UnitDefinition} is already in this {@link Model}'s
 {@link #listOfUnitDefinitions}. If yes, the identifier of the identical
 {@link UnitDefinition} will be returned. Otherwise, the given unit is added
 to the {@link #listOfUnitDefinitions} and its identifier will be returned.
 In any case, this method returns the identifier of a {@link UnitDefinition}
 that is part of this {@link Model} at least after calling this method.
 
 @param units
        The unit to be checked and added if no identical
        {@link UnitDefinition} can be found.
 @return]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.Model"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="containsCompartment" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns true if this model contains a reference to a {@link Compartment}
 with the given identifier.
 
 @param id
 @return true if this model contains a reference to a {@link Compartment}
         with the given identifier.]]>
      </doc>
    </method>
    <method name="containsFunctionDefinition" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns true if this model contains a reference to a
 {@link FunctionDefinition} with the given identifier.
 
 @param id
 @return true if this model contains a reference to a
         {@link FunctionDefinition} with the given identifier.]]>
      </doc>
    </method>
    <method name="containsParameter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns true if this model contains a reference to a {@link Parameter} with
 the given identifier.
 
 @param id
 @return true if this model contains a reference to a {@link Parameter} with
         the given identifier.]]>
      </doc>
    </method>
    <method name="containsQuantity" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="quantity" type="org.sbml.jsbml.Quantity"/>
      <doc>
      <![CDATA[Returns {@code true} if this {@link Model} contains a reference to the given
 {@link Quantity}.
 
 @param quantity
 @return {@code true} if this {@link Model} contains a reference to the given
         {@link Quantity}.]]>
      </doc>
    </method>
    <method name="containsSpecies" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code true} if this {@link Model} contains a reference to the given
 {@link Species}.
 
 @param id
 @return {@code true} if this {@link Model} contains a reference to the given
         {@link Species}.]]>
      </doc>
    </method>
    <method name="containsUniqueNamedSBase" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code true} if this {@link Model} contains a reference to the given
 {@link UniqueNamedSBase}.
 
 @param units
 @return {@code true} if this {@link Model} contains a reference to the given
         {@link UniqueNamedSBase}.]]>
      </doc>
    </method>
    <method name="containsUnitDefinition" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="units" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code true} if this {@link Model} contains a reference to the given
 {@link UnitDefinition}.
 
 @param units
 @return {@code true} if this {@link Model} contains a reference to the given
         {@link UnitDefinition}.]]>
      </doc>
    </method>
    <method name="createAlgebraicRule" return="org.sbml.jsbml.AlgebraicRule"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link AlgebraicRule} inside this {@link Model} and returns
 it.
 <p>
 
 @return the {@link AlgebraicRule} object created
         <p>
 @see #addRule(Rule r)]]>
      </doc>
    </method>
    <method name="createAssignmentRule" return="org.sbml.jsbml.AssignmentRule"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link AssignmentRule} inside this {@link Model} and returns
 it.
 <p>
 
 @return the {@link AssignmentRule} object created
         <p>
 @see #addRule(Rule r)]]>
      </doc>
    </method>
    <method name="createCompartment" return="org.sbml.jsbml.Compartment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link Compartment} inside this {@link Model} and returns it.
 <p>
 
 @return the {@link Compartment} object created
         <p>
 @see #addCompartment(Compartment c)]]>
      </doc>
    </method>
    <method name="createCompartment" return="org.sbml.jsbml.Compartment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a new {@link Compartment} inside this {@link Model} and returns it.
 
 @param id
        the id of the new element to create
 @return the {@link Compartment} object created]]>
      </doc>
    </method>
    <method name="createCompartmentType" return="org.sbml.jsbml.CompartmentType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="{@link CompartmentType}s should no longer be used.">
      <doc>
      <![CDATA[Creates a new {@link CompartmentType} inside this {@link Model} and returns
 it.
 <p>
 
 @return the {@link CompartmentType} object created
         <p>
 @see #addCompartmentType(CompartmentType ct)
 @deprecated {@link CompartmentType}s should no longer be used.]]>
      </doc>
    </method>
    <method name="createCompartmentType" return="org.sbml.jsbml.CompartmentType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="{@link CompartmentType}s should no longer be used.">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a new {@link CompartmentType} inside this {@link Model} and returns
 it.
 
 @param id
        the id of the new element to create
 @return the {@link CompartmentType} object created
 @deprecated {@link CompartmentType}s should no longer be used.]]>
      </doc>
    </method>
    <method name="createConstraint" return="org.sbml.jsbml.Constraint"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link Constraint} inside this {@link Model} and returns it.
 <p>
 
 @return the {@link Constraint} object created
         <p>
 @see #addConstraint(Constraint c)]]>
      </doc>
    </method>
    <method name="createDelay" return="org.sbml.jsbml.Delay"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link Delay} inside the last {@link Event} object created in
 this {@link Model}, and returns a pointer to it.
 <p>
 The mechanism by which the last {@link Event} object in this model was
 created is not significant. It could have been created in a variety of
 ways, for example by using createEvent(). If no {@link Event} object exists
 in this {@link Model} object, a new {@link Delay} is <em>not</em> created
 and NULL is returned instead.
 <p>
 
 @return the {@link Delay} object created]]>
      </doc>
    </method>
    <method name="createEvent" return="org.sbml.jsbml.Event"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link Event} inside this {@link Model} and returns it.
 <p>
 
 @return the {@link Event} object created]]>
      </doc>
    </method>
    <method name="createEvent" return="org.sbml.jsbml.Event"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a new {@link Event} inside this {@link Model} and returns it.
 
 @param id
        the id of the new element to create
 @return the {@link Event} object created]]>
      </doc>
    </method>
    <method name="createEventAssignment" return="org.sbml.jsbml.EventAssignment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link EventAssignment} inside the last {@link Event} object
 created in this {@link Model}, and returns a pointer to it.
 <p>
 The mechanism by which the last {@link Event} object in this model was
 created is not significant. It could have been created in a variety of
 ways, for example by using createEvent(). If no {@link Event} object exists
 in this {@link Model} object, a new {@link EventAssignment} is <em>not</em>
 created and NULL is returned instead.
 <p>
 
 @return the {@link EventAssignment} object created]]>
      </doc>
    </method>
    <method name="createFunctionDefinition" return="org.sbml.jsbml.FunctionDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link FunctionDefinition} inside this {@link Model} and
 returns it.
 <p>
 
 @return the {@link FunctionDefinition} object created
         <p>
 @see #addFunctionDefinition(FunctionDefinition fd)]]>
      </doc>
    </method>
    <method name="createFunctionDefinition" return="org.sbml.jsbml.FunctionDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a new {@link FunctionDefinition} inside this {@link Model} and
 returns it.
 
 @param id
        the id of the new element to create
 @return the {@link FunctionDefinition} object created]]>
      </doc>
    </method>
    <method name="createInitialAssignment" return="org.sbml.jsbml.InitialAssignment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link InitialAssignment} inside this {@link Model} and
 returns it.
 <p>
 
 @return the {@link InitialAssignment} object created
         <p>
 @see #addInitialAssignment(InitialAssignment ia)]]>
      </doc>
    </method>
    <method name="createKineticLaw" return="org.sbml.jsbml.KineticLaw"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link KineticLaw} inside the last {@link Reaction} object
 created in this {@link Model}, and returns a pointer to it.
 <p>
 The mechanism by which the last {@link Reaction} object was created and
 added to this {@link Model} is not significant. It could have been created
 in a variety of ways, for example using createReaction(). If a
 {@link Reaction} does not exist for this model, or a {@link Reaction}
 exists but already has a {@link KineticLaw}, a new {@link KineticLaw} is
 <em>not</em> created and NULL is returned instead.
 <p>
 
 @return the {@link KineticLaw} object created]]>
      </doc>
    </method>
    <method name="createKineticLawParameter" return="org.sbml.jsbml.LocalParameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new local {@link LocalParameter} inside the {@link KineticLaw}
 object of the last {@link Reaction} created inside this {@link Model}, and
 returns a pointer to it.
 <p>
 The last {@link KineticLaw} object in this {@link Model} could have been
 created in a variety of ways. For example, it could have been added using
 createKineticLaw(), or it could be the result of using
 Reaction.createKineticLaw() on the {@link Reaction} object created by a
 createReaction(). If a {@link Reaction} does not exist for this model, or
 the last {@link Reaction} does not contain a {@link KineticLaw} object, a
 new {@link LocalParameter} is <em>not</em> created and NULL is returned
 instead.
 <p>
 
 @return the {@link LocalParameter} object created]]>
      </doc>
    </method>
    <method name="createKineticParameter" return="org.sbml.jsbml.LocalParameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a new local {@link LocalParameter} inside the {@link KineticLaw}
 object of the last {@link Reaction} created inside this {@link Model}, and
 returns a pointer to it.
 
 @param id
        the id of the new element to create
 @return the {@link LocalParameter} object created]]>
      </doc>
    </method>
    <method name="createModifier" return="org.sbml.jsbml.ModifierSpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link ModifierSpeciesReference} object for a modifier
 species inside the last {@link Reaction} object in this {@link Model}, and
 returns a pointer to it.
 <p>
 The mechanism by which the last {@link Reaction} object was created and
 added to this {@link Model} is not significant. It could have been created
 in a variety of ways, for example using createReaction(). If a
 {@link Reaction} does not exist for this model, a new
 {@link ModifierSpeciesReference} is <em>not</em> created and NULL is
 returned instead.
 <p>
 
 @return the {@link SpeciesReference} object created]]>
      </doc>
    </method>
    <method name="createModifier" return="org.sbml.jsbml.ModifierSpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a new {@link ModifierSpeciesReference} with the specified 'id'.
 
 @param id
        the id of the new element to create
 @return the {@link SpeciesReference} object created]]>
      </doc>
    </method>
    <method name="createParameter" return="org.sbml.jsbml.Parameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link Parameter} inside this {@link Model} and returns it.
 <p>
 
 @return the {@link Parameter} object created
         <p>
 @see #addParameter(Parameter p)]]>
      </doc>
    </method>
    <method name="createParameter" return="org.sbml.jsbml.Parameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a new {@link Parameter}.
 
 @param id
        the id of the new element to create
 @return the {@link Parameter} object created]]>
      </doc>
    </method>
    <method name="createProduct" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link SpeciesReference} object for a product inside the last
 {@link Reaction} object in this {@link Model}, and returns a pointer to it.
 <p>
 The mechanism by which the last {@link Reaction} object was created and
 added to this {@link Model} is not significant. It could have been created
 in a variety of ways, for example using createReaction(). If a
 {@link Reaction} does not exist for this model, a new
 {@link SpeciesReference} is <em>not</em> created and NULL is returned
 instead.
 <p>
 
 @return the {@link SpeciesReference} object created]]>
      </doc>
    </method>
    <method name="createProduct" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[@param id
 @return]]>
      </doc>
    </method>
    <method name="createRateRule" return="org.sbml.jsbml.RateRule"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link RateRule} inside this {@link Model} and returns it.
 <p>
 
 @return the {@link RateRule} object created
         <p>
 @see #addRule(Rule r)]]>
      </doc>
    </method>
    <method name="createReactant" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link SpeciesReference} object for a reactant inside the
 last {@link Reaction} object in this {@link Model}, and returns a pointer
 to it.
 <p>
 The mechanism by which the last {@link Reaction} object was created and
 added to this {@link Model} is not significant. It could have been created
 in a variety of ways, for example using createReaction(). If a
 {@link Reaction} does not exist for this model, a new
 {@link SpeciesReference} is <em>not</em> created and NULL is returned
 instead.
 <p>
 
 @return the {@link SpeciesReference} object created]]>
      </doc>
    </method>
    <method name="createReactant" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a new {@link SpeciesReference} object, with the specified 'id', for
 a reactant inside the last {@link Reaction} object in this {@link Model},
 and returns a pointer to it.
 
 @param id
        the id of the new element to create
 @return the {@link SpeciesReference} object created.]]>
      </doc>
    </method>
    <method name="createReaction" return="org.sbml.jsbml.Reaction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link Reaction} inside this {@link Model} and returns it.
 <p>
 
 @return the {@link Reaction} object created
         <p>
 @see #addReaction(Reaction r)]]>
      </doc>
    </method>
    <method name="createReaction" return="org.sbml.jsbml.Reaction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a new {@link Reaction} inside this {@link Model} and returns it.
 
 @param id
        the id of the new element to create
 @return the {@link Reaction} object created]]>
      </doc>
    </method>
    <method name="createSpecies" return="org.sbml.jsbml.Species"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link Species} inside this {@link Model} and returns it.
 <p>
 
 @return the {@link Species} object created
         <p>
 @see #addSpecies(Species s)]]>
      </doc>
    </method>
    <method name="createSpecies" return="org.sbml.jsbml.Species"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a new {@link Species} inside this {@link Model} and returns it.
 
 @param id
        the id of the new element to create
 @return the {@link Species} object created]]>
      </doc>
    </method>
    <method name="createSpecies" return="org.sbml.jsbml.Species"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="c" type="org.sbml.jsbml.Compartment"/>
      <doc>
      <![CDATA[Creates a new {@link Species} inside this {@link Model} and returns it.
 
 @param id
        the id of the new element to create
 @param c
        the Compartment of the new {@link Species}
 @return the {@link Species} object created]]>
      </doc>
    </method>
    <method name="createSpeciesType" return="org.sbml.jsbml.SpeciesType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link SpeciesType} inside this {@link Model} and returns it.
 <p>
 
 @return the {@link SpeciesType} object created
         <p>
 @see #addSpeciesType(SpeciesType st)]]>
      </doc>
    </method>
    <method name="createSpeciesType" return="org.sbml.jsbml.SpeciesType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a new {@link SpeciesType} inside this {@link Model} and returns it.
 
 @param id
        the id of the new element to create
 @return the {@link SpeciesType} object created]]>
      </doc>
    </method>
    <method name="createTrigger" return="org.sbml.jsbml.Trigger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link Trigger} inside the last {@link Event} object created
 in this {@link Model}, and returns a pointer to it.
 <p>
 The mechanism by which the last {@link Event} object in this model was
 created is not significant. It could have been created in a variety of
 ways, for example by using createEvent(). If no {@link Event} object exists
 in this {@link Model} object, a new {@link Trigger} is <em>not</em> created
 and NULL is returned instead.
 <p>
 
 @return the {@link Trigger} object created]]>
      </doc>
    </method>
    <method name="createUnit" return="org.sbml.jsbml.Unit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link Unit} object within the last {@link UnitDefinition}
 object created in this model and returns a pointer to it.
 <p>
 The mechanism by which the {@link UnitDefinition} was created is not
 significant. If a {@link UnitDefinition} object does not exist in this
 model, a new {@link Unit} is <em>not</em> created and NULL is returned
 instead.
 <p>
 
 @return the {@link Unit} object created
         <p>
 @see #addUnitDefinition(UnitDefinition ud)]]>
      </doc>
    </method>
    <method name="createUnit" return="org.sbml.jsbml.Unit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="kind" type="org.sbml.jsbml.Unit.Kind"/>
      <doc>
      <![CDATA[Creates a new {@link Unit} object within the last {@link UnitDefinition}
 object created in this model and returns a pointer to it.
 
 @param kind
        the kind of the new unit.
 @return the {@link Unit} object created]]>
      </doc>
    </method>
    <method name="createUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link UnitDefinition} inside this {@link Model} and returns
 it.
 <p>
 
 @return the {@link UnitDefinition} object created
         <p>
 @see #addUnitDefinition(UnitDefinition ud)]]>
      </doc>
    </method>
    <method name="createUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a new {@link UnitDefinition} inside this {@link Model} and returns
 it.
 
 @param id
        the id of the new element to create
 @return the {@link UnitDefinition} object created]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="findCallableSBase" return="org.sbml.jsbml.CallableSBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a {@link CallableSBase} element of the {@link Model} that has the
 given 'id' as identifier or null if no element is found.
 
 @param id
        an identifier indicating an element of the {@link Model}.
 @return a {@link CallableSBase} element of the {@link Model} that has the
         given 'id' as id or null if no element is found.]]>
      </doc>
    </method>
    <method name="findLocalParameters" return="java.util.List&lt;org.sbml.jsbml.LocalParameter&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Finds all instances of {@link LocalParameter} in this {@link Model} and
 adds them to a {@link List}.
 
 @param id
 @return A {@link List} of all {@link LocalParameter} instances with the
         given name or identifier. This {@link List} can be empty, but never
         null.]]>
      </doc>
    </method>
    <method name="findModifierSpeciesReference" return="org.sbml.jsbml.ModifierSpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the {@link ModifierSpeciesReference} with all {@link Reaction}s
 of this {@link Model} that has 'id' as id.
 
 @param id
        the identifier of the {@link ModifierSpeciesReference} of interest.
        Note that this is not the identifier of the {@link Species} instance
        referred to by the {@link ModifierSpeciesReference}.
 @return the {@link ModifierSpeciesReference} out of all {@link Reaction}s
         which has 'id' as id (or name depending on level and version).
         {@code null} if it doesn't exist.]]>
      </doc>
    </method>
    <method name="findNamedSBase" return="org.sbml.jsbml.NamedSBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a {@link NamedSBase} element of the model that has the given 'id'
 as id or null if no element is found.
 
 @param id
        an id indicating an element of the model.
 @return a {@link NamedSBase} element of the model that has the given 'id'
         as id or {@code null} if no element is found.]]>
      </doc>
    </method>
    <method name="findNamedSBaseWithDerivedUnit" return="org.sbml.jsbml.NamedSBaseWithDerivedUnit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a {@link NamedSBaseWithDerivedUnit} element of the {@link Model}
 that has the given 'id' as id or null if no element is found. It first
 tries to find a {@link CallableSBase} with the given identifier and, if
 this is not successful, it searches for an instance of {@link Event} with
 the given id.
 
 @param id
        an id indicating an element of the {@link Model}.
 @return a {@link NamedSBaseWithDerivedUnit} element of the {@link Model}
         that has the given 'id' as id or null if no element is found.
 @see #findCallableSBase(String)]]>
      </doc>
    </method>
    <method name="findQuantity" return="org.sbml.jsbml.Quantity"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Searches for an instance of {@link Quantity} within all of this
 {@link Model}'s components that has the given identifier or name attribute
 and returns it. There might be multiple instances of {@link LocalParameter}
 with the same identifier or name, each located in different
 {@link Reaction}s. In this case, the first match will be returned. Note
 that also global {@link Parameter} instances have a higher priority and are
 returned first.
 
 @param id
 @return the {@link Compartment}, {@link Species}, {@link SpeciesReference}
         or {@link Parameter}, or the first {@link LocalParameter} which has
         'id' as id.
 @see #findLocalParameters(String)]]>
      </doc>
    </method>
    <method name="findQuantityWithUnit" return="org.sbml.jsbml.QuantityWithUnit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="idOrName" type="java.lang.String"/>
      <doc>
      <![CDATA[Searches for an instance of {@link QuantityWithUnit} within all of this
 {@link Model}'s components that has the given identifier or name attribute
 and returns it. There might be multiple instances of {@link LocalParameter}
 with the same identifier or name, each located in different
 {@link Reaction}s. In this case, the first match will be returned. Note
 that also global {@link Parameter} instances have a higher priority and are
 returned first.
 
 @param idOrName
 @return
 @see #findLocalParameters(String)]]>
      </doc>
    </method>
    <method name="findReactionsForLocalParameter" return="java.util.SortedSet&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a {@link SortedSet} of identifiers of all {@link Reaction} elements
 within
 this {@link Model} whose {@link KineticLaw}s contain a
 {@link LocalParameter} that has the given 'id' or {@code null} if no
 element cannot be found.
 
 @param id
        an id indicating an {@link LocalParameter} element of the
        {@link Model}.
 @return a {@link SortedSet} of the identifiers of all {@link Reaction}
         elements within this {@link Model} whose {@link KineticLaw}
         contains a {@link LocalParameter} that has the given 'id' as id 
         or {@code null} if no such element with this 'id' can be
         found.]]>
      </doc>
    </method>
    <method name="findSimpleSpeciesReference" return="org.sbml.jsbml.SimpleSpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the {@link SimpleSpeciesReference} within all {@link Reaction}s of
 this {@link Model} that has 'id' as id.
 
 @param id
        the identifier of the {@link SimpleSpeciesReference} of interest.
        Note that this is not the identifier of the {@link Species} instance
        referred to by the {@link SimpleSpeciesReference}.
 @return the {@link SimpleSpeciesReference} out of all {@link Reaction}s
         which has 'id' as id (or name depending on level and version).
         {@code null} if it doesn't exist.]]>
      </doc>
    </method>
    <method name="findSpeciesReference" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the {@link SpeciesReference} with all {@link Reaction}s
 of this {@link Model} that has 'id' as id.
 
 @param id
        the identifier of the {@link SpeciesReference} of interest.
        Note that this is not the identifier of the {@link Species} instance
        referred to by the {@link SpeciesReference}.
 @return the {@link SpeciesReference} out of all {@link Reaction}s
         which has 'id' as id (or name depending on level and version).
         {@code null} if it doesn't exist.]]>
      </doc>
    </method>
    <method name="findSymbol" return="org.sbml.jsbml.Symbol"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Searches in the list of {@link Compartment}s, {@link Species}, and
 {@link Parameter}s for the element with the given identifier.
 
 @param id
 @return a {@link Symbol} element with the given identifier or null if there
         is no such element.]]>
      </doc>
    </method>
    <method name="findUniqueNamedSBase" return="org.sbml.jsbml.UniqueNamedSBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a {@link UniqueNamedSBase} element that has the given 'id' within
 this {@link Model} or {@code null} if no such element can be found.
 
 @param id
        an id indicating an {@link UniqueNamedSBase} element of the
        {@link Model}.
 @return a {@link UniqueNamedSBase} element of the {@link Model} that has
         the given 'id' as id or {@code null} if no element with this
         'id' can be found.]]>
      </doc>
    </method>
    <method name="findUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a {@link UnitDefinition} element that has the given 'id' within
 this {@link Model} or {@code null} if no such element can be found.
 
 @param id
        an id indicating an {@link UnitDefinition} element of the
        {@link Model}.
 @return a {@link UniqueNamedSBase} element of the {@link Model} that has
         the given 'id' as id or {@code null} if no such element with
         this 'id' can be found.]]>
      </doc>
    </method>
    <method name="findVariable" return="org.sbml.jsbml.Variable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Searches the {@link Variable} with the given identifier in this model.
 
 @param id
        The identifier of the {@link Variable} of interest.
 @return the {@link Compartment}, {@link Species}, {@link SpeciesReference},
         or {@link Parameter}, which has 'variable' as id.]]>
      </doc>
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAreaUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the area units ID of this {@link Model}.
 
 @return the area units ID of this {@link Model}. Returns an empty
         {@link String} if it is not set.]]>
      </doc>
    </method>
    <method name="getAreaUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link UnitDefinition} instance which has the area units ID of
 this Model as id.
 
 @return the {@link UnitDefinition} instance which has the area Units ID of
         this Model as id. Null if it doesn't exist]]>
      </doc>
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCompartment" return="org.sbml.jsbml.Compartment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Gets the nth {@link Compartment} instance of the listOfCompartments.
 
 @param n
 @return the nth {@link Compartment} instance of the listOfCompartments.
         Null if if the listOfCompartments is not set.]]>
      </doc>
    </method>
    <method name="getCompartment" return="org.sbml.jsbml.Compartment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets the {@link Compartment} of the listOfCompartments which has 'id' as
 id.
 
 @param id
 @return the {@link Compartment} of the listOfCompartments which has 'id' as
         id (or name depending on the version and level). Null if if the
         listOfCompartments is not set.]]>
      </doc>
    </method>
    <method name="getCompartmentType" return="org.sbml.jsbml.CompartmentType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Gets the nth CompartmentType object in this Model.
 
 @param n
        index
 @return the nth CompartmentType of this Model. Returns null if there are no
         compartmentType defined or if the index n is too big or lower than
         zero.]]>
      </doc>
    </method>
    <method name="getCompartmentType" return="org.sbml.jsbml.CompartmentType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets the {@link CompartmentType} with the given <code>id</code>.
 
 @param id
 @return the CompartmentType of the {@link #listOfCompartmentTypes} which has 'id' as
         id (or name depending on the level and version). Null if the
         {@link #listOfCompartmentTypes} is not set or the id is not found.]]>
      </doc>
    </method>
    <method name="getConstraint" return="org.sbml.jsbml.Constraint"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Gets the nth Constraint object in this Model.
 
 @param n
 @return the nth Constraint of this Model. Returns null if there are no
         constraint defined or if the index n is too big or lower than zero.]]>
      </doc>
    </method>
    <method name="getConversionFactor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the conversionFactor ID of this {@link Model}.
 
 @return the conversionFactorID of this {@link Model}. Returns an empty
         {@link String} if it is not set.]]>
      </doc>
    </method>
    <method name="getConversionFactorInstance" return="org.sbml.jsbml.Parameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Parameter instance which has the conversionFactorID of this
 Model as id.
 
 @return the Parameter instance which has the conversionFactorID of this
         Model as id. Null if it doesn't exist]]>
      </doc>
    </method>
    <method name="getEvent" return="org.sbml.jsbml.Event"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Gets the nth Event object in this Model.
 
 @param n
 @return the nth Event of this Model. Returns null if there are no event
         defined or if the index n is too big or lower than zero.]]>
      </doc>
    </method>
    <method name="getEvent" return="org.sbml.jsbml.Event"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets the {@link Event} which as the given <code>id</code> as id.
 
 @param id
 @return the {@link Event} of the {@link #listOfEvents} which has 'id' as id
         (or name depending on the level and version). Null if if the
         {@link #listOfEvents} is not set.]]>
      </doc>
    </method>
    <method name="getExtentUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the extent units ID of this {@link Model}.
 
 @return the extent units ID of this {@link Model}. Returns an empty
         {@link String} if it is not set.]]>
      </doc>
    </method>
    <method name="getExtentUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link UnitDefinition} instance which has the extent units ID
 of this Model as id.
 
 @return the {@link UnitDefinition} instance which has the extent units ID
         of this Model as id. Null if it doesn't exist]]>
      </doc>
    </method>
    <method name="getFunctionDefinition" return="org.sbml.jsbml.FunctionDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Gets the nth {@link FunctionDefinition} instance of the
 listOfFunstionDefinitions.
 
 @param n
 @return the nth {@link FunctionDefinition} instance of the
         listOfFunstionDefinitions. Null if if the listOfFunctionDefinitions
         is not set.]]>
      </doc>
    </method>
    <method name="getFunctionDefinition" return="org.sbml.jsbml.FunctionDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the {@link FunctionDefinition} of the {@link #listOfFunctionDefinitions}
 which has 'id' as id.
 
 @param id
 @return the {@link FunctionDefinition} of the {@link #listOfFunctionDefinitions}
         which has 'id' as id (or name depending on the level and version).
         Null if if the {@link #listOfFunctionDefinitions} is not set.]]>
      </doc>
    </method>
    <method name="getInitialAssignment" return="org.sbml.jsbml.InitialAssignment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Gets the nth {@link InitialAssignment} object in this {@link Model}.
 
 @param n
 @return the nth {@link InitialAssignment} of this {@link Model}. Null if
         the listOfInitialAssignments is not set.]]>
      </doc>
    </method>
    <method name="getInitialAssignment" return="org.sbml.jsbml.InitialAssignment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the {@link InitialAssignment} of the
 {@link #listOfInitialAssignments} whose <code>symbol</code> attribute,
 i.e., whose {@link Variable} has the given <code>variable</code> as
 identifier.
 
 @param variable
        The identifier of a variable, for which a corresponding
        {@link InitialAssignment} is requested.
 @return the first {@link InitialAssignment} of the
         {@link #listOfInitialAssignments}, whose {@link Variable} has the
         <code>variable</code> as identifier (or name depending on the level
         and version). Null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getLengthUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the length units ID of this {@link Model}.
 
 @return the length units ID of this {@link Model}. Returns an empty
         {@link String} if it is not set.]]>
      </doc>
    </method>
    <method name="getLengthUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the length units of this {@link Model} as a {@link UnitDefinition}.
 
 @return the UnitDefinition instance which has the length units ID of this
         Model as id. Null if it doesn't exist]]>
      </doc>
    </method>
    <method name="getListOfCompartments" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Compartment&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the listOfCompartments of this {@link Model}.
 
 @return the listOfCompartments of this {@link Model}.]]>
      </doc>
    </method>
    <method name="getListOfCompartmentTypes" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.CompartmentType&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[Returns the listOfCompartmentTypes of this {@link Model}.
 
 @return the listOfCompartmentTypes of this {@link Model}.
 @deprecated]]>
      </doc>
    </method>
    <method name="getListOfConstraints" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Constraint&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the listOfConstraints of this {@link Model}.
 
 @return the listOfConstraints of this {@link Model}. set.]]>
      </doc>
    </method>
    <method name="getListOfEvents" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Event&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the listOfEvents of this {@link Model}.
 
 @return the listOfEvents of this {@link Model}.]]>
      </doc>
    </method>
    <method name="getListOfFunctionDefinitions" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.FunctionDefinition&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the listOfFunctionDefinitions of this {@link Model}.
 
 @return the listOfFunctionDefinitions of this {@link Model}.]]>
      </doc>
    </method>
    <method name="getListOfInitialAssignments" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.InitialAssignment&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the listOfInitialAssignments of this {@link Model}.
 
 @return the listOfInitialAssignments of this {@link Model}.]]>
      </doc>
    </method>
    <method name="getListOfParameters" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Parameter&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the listOfParameters of this {@link Model}.
 
 @return the listOfParameters of this {@link Model}.]]>
      </doc>
    </method>
    <method name="getListOfPredefinedUnitDefinitions" return="java.util.List&lt;org.sbml.jsbml.UnitDefinition&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getListOfReactions" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Reaction&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the listOfReactions of this {@link Model}.
 
 @return the listOfReactions of this {@link Model}.]]>
      </doc>
    </method>
    <method name="getListOfRules" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Rule&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the listOfRules of this {@link Model}.
 
 @return the listOfRules of this {@link Model}.]]>
      </doc>
    </method>
    <method name="getListOfSpecies" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Species&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the listOfSpecies of this {@link Model}.
 
 @return the listOfSpecies of this {@link Model}.]]>
      </doc>
    </method>
    <method name="getListOfSpeciesTypes" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.SpeciesType&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[Returns the listOfSpeciesTypes of this {@link Model}.
 
 @return the listOfSpeciesTypes of this {@link Model}.
 @deprecated]]>
      </doc>
    </method>
    <method name="getListOfUnitDefinitions" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.UnitDefinition&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the listOfUnitDefinitions of this {@link Model}.
 
 @return the listOfUnitDefinitions of this {@link Model}.]]>
      </doc>
    </method>
    <method name="getModelHistory" return="org.sbml.jsbml.History"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link SBase#getHistory()}">
      <doc>
      <![CDATA[Returns {@link History} of this model.
 
 @return the {@link History} of this model.
 
 @see SBase#getHistory
 @deprecated use {@link SBase#getHistory()}]]>
      </doc>
    </method>
    <method name="getNumCompartments" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link Compartment}s of this Model.
 
 @return the number of {@link Compartment}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumCompartmentTypes" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link CompartmentType}s of this Model.
 
 @return the number of {@link CompartmentType}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumConstraints" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link Constraint}s of this Model.
 
 @return the number of {@link Constraint}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumDelays" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link Delay}s of this Model.
 
 @return the number of {@link Delay}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumEventAssignments" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link EventAssignment}s of this Model.
 
 @return return the number of {@link EventAssignment}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumEvents" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link Event}s of this Model.
 
 @return the number of {@link Event}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumFunctionDefinitions" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link FunctionDefinition}s of this Model.
 
 @return the number of {@link FunctionDefinition}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumInitialAssignments" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link InitialAssignment}s of this Model.
 
 @return the number of {@link InitialAssignment}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumKineticLaws" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link KineticLaw}s of this Model.
 
 @return the number of {@link KineticLaw}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumListsOf" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link ListOf}s of this Model.
 
 @return the number of {@link ListOf}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumLocalParameters" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of parameters that are contained within kineticLaws in
 the reactions of this model.
 
 @return the number of parameters that are contained within kineticLaws in
         the reactions of this model.]]>
      </doc>
    </method>
    <method name="getNumMathContainers" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of elements that can contain math in the {@link Model} .
 
 @return the number of elements that can contain math in the {@link Model} .
 @see MathContainer]]>
      </doc>
    </method>
    <method name="getNumModifierSpeciesReferences" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link ModifierSpeciesReference}s in the
 {@link Model}.
 
 @return the number of {@link ModifierSpeciesReference}s in the
         {@link Model}.]]>
      </doc>
    </method>
    <method name="getNumNamedSBases" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link NamedSBase}s in the {@link Model}, so elements
 that can have a name.
 
 @return the number of {@link NamedSBase}s in the {@link Model}, so elements
         that can have a name.]]>
      </doc>
    </method>
    <method name="getNumNamedSBasesWithDerivedUnit" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link NamedSBaseWithDerivedUnit}s in the
 {@link Model}, so elements that can have a name and a unit that can be
 derived.
 
 @return the number of {@link NamedSBaseWithDerivedUnit}s in the
         {@link Model}, so elements that can have a name and a unit that can
         be derived.]]>
      </doc>
    </method>
    <method name="getNumParameters" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link Parameter}s of this Model.
 
 @return the number of {@link Parameter}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumQuantities" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link Quantity}s of this Model.
 
 @return the number of {@link Quantity}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumQuantitiesWithUnit" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link QuantityWithUnit}s of this Model.
 
 @return the number of {@link QuantityWithUnit}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumReactions" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link Reaction}s of this Model.
 
 @return the number of {@link Reaction}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumRules" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link Rule}s of this model.
 
 @return the number of {@link Rule}s of this model.]]>
      </doc>
    </method>
    <method name="getNumSBases" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link SBase}s of this model.
 
 @return the number of {@link SBase}s of this model.]]>
      </doc>
    </method>
    <method name="getNumSBasesWithDerivedUnit" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link SBaseWithDerivedUnit}s of this model.
 
 @return the number of {@link SBaseWithDerivedUnit}s of this model.]]>
      </doc>
    </method>
    <method name="getNumSpecies" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link Species} of this Model.
 
 @return the number of {@link Species} of this Model.]]>
      </doc>
    </method>
    <method name="getNumSpeciesReferences" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link SpeciesReferences}s of this Model.
 
 @return the number of {@link SpeciesReferences}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumSpeciesTypes" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link SpeciesType}s of this Model.
 
 @return the number of {@link SpeciesType}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumSpeciesWithBoundaryCondition" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link Species} whose boundary condition is set to
 true.
 
 @return the number of {@link Species} whose boundary condition is set to
         true.]]>
      </doc>
    </method>
    <method name="getNumStoichiometryMath" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link StoichiometryMath} in the {@link Model}.
 
 @return the number of {@link StoichiometryMath} in the {@link Model}.]]>
      </doc>
    </method>
    <method name="getNumSymbols" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of all instances of {@link Symbol} referenced within the
 model. There is no dedicated list for {@link Symbol}s. This is a convenient
 method to support working with the model data structure.
 
 @return The number of {@link Compartment}s, {@link Species}, and
         {@link Parameter}s in the model.]]>
      </doc>
    </method>
    <method name="getNumTriggers" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link Trigger} of this Model.
 
 @return the number of {@link Trigger} of this Model.]]>
      </doc>
    </method>
    <method name="getNumUnitDefinitions" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link UnitDefinition}s of this Model.
 
 @return the number of {@link UnitDefinition}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumUnits" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link Unit}s of this Model.
 
 @return the number of {@link Unit}s of this Model.]]>
      </doc>
    </method>
    <method name="getNumVariables" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of {@link Variable}s of this Model.
 
 @return the number of {@link Variable}s of this Model.]]>
      </doc>
    </method>
    <method name="getParameter" return="org.sbml.jsbml.Parameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Gets the nth {@link Parameter} object in this {@link Model}.
 
 @param n
        index
 @return the nth {@link Parameter} of this {@link Model}.]]>
      </doc>
    </method>
    <method name="getParameter" return="org.sbml.jsbml.Parameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the {@link Parameter} of the listOfParameters which has 'id' as id
 
 @param id
 @return the {@link Parameter} of the listOfParameters which has 'id' as id
         (or name depending on the level and version). Null if it doesn't
         exist.]]>
      </doc>
    </method>
    <method name="getParent" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPredefinedUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unitKind" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a UnitDefinition representing one of the predefined units of SBML,
 returns null if the given unit kind is not a valid one for the SBML level
 and version of this <code>Model</code>.
 
 @param unitKind
        a unit kind for one of the predefined units from the SBML
        Specifications
 @return a UnitDefinition representing one of the predefined units of SBML,
         null if the unitKind is invalid.]]>
      </doc>
    </method>
    <method name="getReaction" return="org.sbml.jsbml.Reaction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Gets the n-th {@link Reaction} object in this Model.
 
 @param reactionIndex
 @return the n-th {@link Reaction} of this Model.]]>
      </doc>
    </method>
    <method name="getReaction" return="org.sbml.jsbml.Reaction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the {@link Reaction} of the {@link #listOfReactions} which has 'id' as id.
 
 @param id
 @return the {@link Reaction} of the {@link #listOfReactions} which has 'id' as id
         (or name depending on the level and version). {@code null} if it doesn't
         exist.]]>
      </doc>
    </method>
    <method name="getRule" return="org.sbml.jsbml.Rule"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Gets the nth {@link Rule} of the listOfRules.
 
 @param n
        an index
 @return the nth {@link Rule} of the listOfRules. Null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getRule" return="org.sbml.jsbml.ExplicitRule"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="java.lang.String"/>
      <doc>
      <![CDATA[Searches for the first instance of {@link ExplicitRule} within this
 {@link Model}'s {@link #listOfRules}, whose variable attribute is set to
 the value passed to this method.
 
 @param variable
 @return Null if no element with the required property exists.]]>
      </doc>
    </method>
    <method name="getSpecies" return="org.sbml.jsbml.Species"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Gets the n-th {@link Species} object in this Model.
 
 @param n
        an index
 @return the {@link Species} with the given index if it exists, null
         otherwise.]]>
      </doc>
    </method>
    <method name="getSpecies" return="org.sbml.jsbml.Species"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets the {@link Species} of the listOfSpecies which has 'id' as id.
 
 @param id
 @return the {@link Species} of the listOfSpecies which has 'id' as id (or
         name depending on the level and version). Null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getSpeciesType" return="org.sbml.jsbml.SpeciesType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Gets the nth {@link SpeciesType} object in this Model.
 
 @param n
        index
 @return the nth {@link SpeciesType} of this Model. Returns null if there
         are no speciesType defined or if the index n is too big or lower
         than zero.]]>
      </doc>
    </method>
    <method name="getSpeciesType" return="org.sbml.jsbml.SpeciesType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the {@link SpeciesType} of the {@link #listOfSpeciesTypes} which has 'id' as
 id.
 
 @param id
 @return the {@link SpeciesType} of the {@link #listOfSpeciesTypes} which has 'id' as
         id (or name depending on the level and version). {@code null} if it doesn't
         exist.]]>
      </doc>
    </method>
    <method name="getSubstanceUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the substance units ID of this model.
 
 @return the substance units ID of this model. Returns the empty
         {@link String} if it is not set.]]>
      </doc>
    </method>
    <method name="getSubstanceUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link UnitDefinition} which has the substance units ID of this
 Model as id.
 
 @return the {@link UnitDefinition} which has the substanceUnitsID of this
         Model as id. Null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getTimeUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the time units ID of this {@link Model}.
 
 @return the time units ID of this {@link Model} or an empty {@link String}
         if it is not set.]]>
      </doc>
    </method>
    <method name="getTimeUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the {@link UnitDefinition} representing the time units of this
 {@link Model}.
 
 @return the {@link UnitDefinition} representing the time units of this
         {@link Model}, null if it is not defined in this {@link Model}]]>
      </doc>
    </method>
    <method name="getUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Gets the nth {@link UnitDefinition} object in this {@link Model}.
 
 @param n
 @return the nth {@link UnitDefinition} of this Model. Returns null if there
         are no UnitDefinition defined or if the index n is too big or lower
         than zero.]]>
      </doc>
    </method>
    <method name="getUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the UnitDefinition of the listOfUnitDefinitions which has 'id' as
 id. If no UnitDefinition are found, we check in the
 listOfPredefinedUnitDefinition. If we still did not find a UnitDefinition,
 null is returned.
 
 @param id
 @return the UnitDefinition of the listOfUnitDefinitions which has 'id' as
         id (or name depending on the level and version). Null if it doesn't
         exist.]]>
      </doc>
    </method>
    <method name="getVolumeUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the volume units ID of this {@link Model}.
 
 @return the volume nits ID of this {@link Model}. Returns an empty String
         if it is not set.]]>
      </doc>
    </method>
    <method name="getVolumeUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link UnitDefinition} instance which has the volume units ID
 of this {@link Model} as id.
 
 @return the {@link UnitDefinition} instance which has the volume units ID
         of this {@link Model} as id. Null if it doesn't exist]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasUnit" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns true if this model has a reference to the unit with the given
 identifier.
 
 @param id
 @return true if this model has a reference to the unit with the given
         identifier, false otherwise.]]>
      </doc>
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the default values using the current Level/Version
 configuration.]]>
      </doc>
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Initializes the default values of the attributes of the {@link Model}]]>
      </doc>
    </method>
    <method name="isIdMandatory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetAreaUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the area units ID of this Model is not null.
 
 @return true if the area units ID of this Model is not null.]]>
      </doc>
    </method>
    <method name="isSetAreaUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the UnitDefinition which has the area units ID of this
 Model as id is not null.
 
 @return true if the UnitDefinition which has the area units ID of this
         Model as id is not null.]]>
      </doc>
    </method>
    <method name="isSetConversionFactor" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the conversionFactorID of this Model is not null.
 
 @return true if the conversionFactorID of this Model is not null.]]>
      </doc>
    </method>
    <method name="isSetConversionFactorInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the Parameter which has the conversionFactorID of this
 Model as id is not null.
 
 @return true if the Parameter which has the conversionFactorID of this
         Model as id is not null.]]>
      </doc>
    </method>
    <method name="isSetExtentUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the extentUnitsID of this Model is not null.
 
 @return true if the extentUnitsID of this Model is not null.]]>
      </doc>
    </method>
    <method name="isSetExtentUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the UnitDefinition which has the extentUnitsID of this
 Model as id is not null.
 
 @return true if the UnitDefinition which has the extentUnitsID of this
         Model as id is not null.]]>
      </doc>
    </method>
    <method name="isSetLengthUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the lengthUnitsID of this Model is not null.
 
 @return true if the lengthUnitsID of this Model is not null.]]>
      </doc>
    </method>
    <method name="isSetLengthUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the UnitDefinition which has the lengthUnitsID of this
 Model as id is not null.
 
 @return true if the UnitDefinition which has the lengthUnitsID of this
         Model as id is not null.]]>
      </doc>
    </method>
    <method name="isSetListOfCompartments" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the listOfCompartments of this Model is not null and not
 empty.
 
 @return true if the listOfCompartments of this Model is not null and not
         empty.]]>
      </doc>
    </method>
    <method name="isSetListOfCompartmentTypes" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[Returns true if the listOfCompartmentTypes of this Model is not null and
 not empty.
 
 @return true if the listOfCompartmentTypes of this Model is not null and
         not empty.
 @deprecated]]>
      </doc>
    </method>
    <method name="isSetListOfConstraints" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the listOfConstraints of this Model is not null and not
 empty.
 
 @return true if the listOfConstraints of this Model is not null and not
         empty.]]>
      </doc>
    </method>
    <method name="isSetListOfEvents" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the listOfEvents of this Model is not null and not empty.
 
 @return true if the listOfEvents of this Model is not null and not empty.]]>
      </doc>
    </method>
    <method name="isSetListOfFunctionDefinitions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the listOfFunctionDefinitions of this Model is not null and
 not empty.
 
 @return true if the listOfFunctionDefinitions of this Model is not null and
         not empty.]]>
      </doc>
    </method>
    <method name="isSetListOfInitialAssignments" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the listOfInitialAssignments of this Model is not null and
 not empty.
 
 @return true if the listOfInitialAssignments of this Model is not null and
         not empty.]]>
      </doc>
    </method>
    <method name="isSetListOfParameters" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the listOfParameters of this Model is not null and not
 empty.
 
 @return true if the listOfParameters of this Model is not null and not
         empty.]]>
      </doc>
    </method>
    <method name="isSetListOfReactions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the listOfReactions of this Model is not null and not
 empty.
 
 @return true if the listOfReactions of this Model is not null and not
         empty.]]>
      </doc>
    </method>
    <method name="isSetListOfRules" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the listOfRules of this Model is not null and not empty.
 
 @return true if the listOfRules of this Model is not null and not empty.]]>
      </doc>
    </method>
    <method name="isSetListOfSpecies" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the listOfSpecies of this Model is not null and not empty.
 
 @return true if the listOfSpecies of this Model is not null and not empty.]]>
      </doc>
    </method>
    <method name="isSetListOfSpeciesTypes" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[Returns true if the listOfSpeciesTypes of this Model is not null and not
 empty.
 
 @return true if the listOfSpeciesTypes of this Model is not null and not
         empty.
 @deprecated]]>
      </doc>
    </method>
    <method name="isSetListOfUnitDefinitions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the listOfUnitDefinitions of this Model is not null and not
 empty.
 
 @return true if the listOfUnitDefinitions of this Model is not null and not
         empty.]]>
      </doc>
    </method>
    <method name="isSetModelHistory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link SBase#isSetHistory()}">
      <doc>
      <![CDATA[Returns the {@link History} of the Model. This is equivalent to the call
 {@link SBase#isSetHistory()}.
 
 @return the {@link History} of the Model.
 @deprecated use {@link SBase#isSetHistory()}]]>
      </doc>
    </method>
    <method name="isSetSubstanceUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the substanceUnitsID of this Model is not null.
 
 @return true if the substanceUnitsID of this Model is not null.]]>
      </doc>
    </method>
    <method name="isSetSubstanceUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the UnitDefinition which has the substanceUnitsID of this
 Model as id is not null.
 
 @return true if the UnitDefinition which has the substanceUnitsID of this
         Model as id is not null.]]>
      </doc>
    </method>
    <method name="isSetTimeUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the timeUnitsID of this Model is not null.
 
 @return true if the timeUnitsID of this Model is not null.]]>
      </doc>
    </method>
    <method name="isSetTimeUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the UnitsDefinition which has the timeUnistID of this Model
 as id is not null.
 
 @return true if the UnitsDefinition which has the timeUnistID of this Model
         as id is not null.]]>
      </doc>
    </method>
    <method name="isSetVolumeUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the volumeUnitsID of this Model is not null.
 
 @return true if the volumeUnitsID of this Model is not null.]]>
      </doc>
    </method>
    <method name="isSetVolumeUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the UnitDefinition which has the volumeUnitsID of this
 Model as id is not null.
 
 @return true if the UnitDefinition which has the volumeUnitsID of this
         Model as id is not null.]]>
      </doc>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="removeCompartment" return="org.sbml.jsbml.Compartment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[Removes the i-th {@link Compartment} of the {@link Model}.
 
 @param i
        the index of the {@link Compartment} to remove
 @return the removed {@link Compartment}.]]>
      </doc>
    </method>
    <method name="removeCompartment" return="org.sbml.jsbml.Compartment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes the {@link Compartment} of the {@link Model} with 'id' as id.
 
 @param id
 @return the removed {@link Compartment}.]]>
      </doc>
    </method>
    <method name="removeCompartmentType" return="org.sbml.jsbml.CompartmentType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Removes the n-th {@link CompartmentType} of the {@link Model}.
 
 @param n
        the index of the {@link Compartment} to remove
 @return the removed {@link CompartmentType}.]]>
      </doc>
    </method>
    <method name="removeCompartmentType" return="org.sbml.jsbml.CompartmentType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes the {@link CompartmentType} of the {@link Model} with 'id' as id.
 
 @param id
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeConstraint" return="org.sbml.jsbml.Constraint"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Removes the n-th {@link Constraint} of the {@link Model}.
 
 @param n
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeEvent" return="org.sbml.jsbml.Event"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Removes the n-th {@link Event} of the {@link Model}.
 
 @param n
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeEvent" return="org.sbml.jsbml.Event"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes the {@link Event} of the {@link Model} with 'id' as id.
 
 @param id
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeFunctionDefinition" return="org.sbml.jsbml.FunctionDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Removes the n-th {@link FunctionDefinition} of the {@link Model}.
 
 @param n
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeFunctionDefinition" return="org.sbml.jsbml.FunctionDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes the {@link FunctionDefinition} of the {@link Model} with 'id' as
 id.
 
 @param id
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeInitialAssignment" return="org.sbml.jsbml.InitialAssignment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Removes the n-th {@link InitialAssignment} of the {@link Model}.
 
 @param n
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeParameter" return="org.sbml.jsbml.Parameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Removes the n-th {@link Parameter} of the {@link Model}.
 
 @param n
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeParameter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parameter" type="org.sbml.jsbml.Parameter"/>
      <doc>
      <![CDATA[Removes the Parameter 'parameter' from this Model.
 
 @param parameter
 @return true if the {@link Parameter} was found and removed.]]>
      </doc>
    </method>
    <method name="removeParameter" return="org.sbml.jsbml.Parameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes the {@link Parameter} of the {@link Model} with 'id' as id.
 
 @param id
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeReaction" return="org.sbml.jsbml.Reaction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Removes the n-th {@link Reaction} of the {@link Model}.
 
 @param n
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeReaction" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reac" type="org.sbml.jsbml.Reaction"/>
      <doc>
      <![CDATA[Removes a reaction from the model.
 
 @param reac
 @return true if the {@link Reaction} was found and removed.]]>
      </doc>
    </method>
    <method name="removeReaction" return="org.sbml.jsbml.Reaction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes the {@link Reaction} of the {@link Model} with 'id' as id.
 
 @param id
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeRule" return="org.sbml.jsbml.Rule"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[Removes the i-th {@link Rule} of the {@link Model}.
 
 @param i
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeRule" return="org.sbml.jsbml.Rule"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variableId" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes the {@link Rule} of the {@link Model} with 'variableId' as
 variable.
 
 @param variableId
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeSpecies" return="org.sbml.jsbml.Species"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[Removes the i-th {@link Species} of the {@link Model}.
 
 @param i
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeSpecies" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="spec" type="org.sbml.jsbml.Species"/>
      <doc>
      <![CDATA[Removes a species from the model.
 
 @param spec
 @return true if the {@link Species} was found and removed.]]>
      </doc>
    </method>
    <method name="removeSpecies" return="org.sbml.jsbml.Species"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes the {@link Species} of the {@link Model} with 'id' as id.
 
 @param id
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeSpeciesType" return="org.sbml.jsbml.SpeciesType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Removes the n-th {@link SpeciesType} of the {@link Model}.
 
 @param n
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeSpeciesType" return="org.sbml.jsbml.SpeciesType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes the {@link SpeciesType} of the {@link Model} with 'id' as id.
 
 @param id
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Removes the n-th {@link UnitDefinition} of the {@link Model}.
 
 @param n
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes the {@link UnitDefinition} of the {@link Model} with 'id' as id.
 
 @param id
 @return the removed element.]]>
      </doc>
    </method>
    <method name="removeUnitDefinition" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unitDefininition" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Removes a {@link UnitDefinition} of the {@link Model}.
 
 @param unitDefininition
 @return true if the UnitDefinition 'unitDefinition' has been removed from
         the Model.]]>
      </doc>
    </method>
    <method name="setAreaUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="areaUnitsID" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the areaUnitsID of this {@link Model} to 'areaUnitsID'
 
 @param areaUnitsID
 @throws PropertyNotAvailableException
             if Level < 3.]]>
      </doc>
    </method>
    <method name="setAreaUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="areaUnits" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Sets the areaUnitsID of this {@link Model} to the id of the
 {@link UnitDefinition} 'areaUnits'.
 
 @param areaUnits]]>
      </doc>
    </method>
    <method name="setConversionFactor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conversionFactor" type="org.sbml.jsbml.Parameter"/>
      <doc>
      <![CDATA[Sets the conversionFactorID of this {@link Model} to the id of the
 {@link Parameter} 'conversionFactor'.
 
 @param conversionFactor]]>
      </doc>
    </method>
    <method name="setConversionFactor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conversionFactorID" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the conversionFactorID of this {@link Model} to
 'conversionFactorID'.
 
 @param conversionFactorID
 @throws PropertyNotAvailableException
             if Level < 3.]]>
      </doc>
    </method>
    <method name="setExtentUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="extentUnitsID" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the extendUnitsID of this {@link Model} to 'extentUnitsID'.
 
 @param extentUnitsID
 @throws PropertyNotAvailableException
             if Level < 3.]]>
      </doc>
    </method>
    <method name="setExtentUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="extentUnits" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Sets the extentUnitsID of this {@link Model} to the id of the
 {@link UnitDefinition} 'extentUnits'.
 
 @param extentUnits]]>
      </doc>
    </method>
    <method name="setLengthUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lengthUnitsID" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the lengthUnitsID of this {@link Model} to 'lengthUnitsID'.
 
 @param lengthUnitsID
 @throws PropertyNotAvailableException
             if Level < 3.]]>
      </doc>
    </method>
    <method name="setLengthUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lengthUnits" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Sets the lengthUnitsID of this {@link Model} to the id of the
 UnitDefinition 'lengthUnits'.
 
 @param lengthUnits]]>
      </doc>
    </method>
    <method name="setListOfCompartments"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfCompartments" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Compartment&gt;"/>
      <doc>
      <![CDATA[Sets the listOfCompartments of this {@link Model} to 'listOfCompartments'.
 Automatically sets the parentSBML objects of 'listOfCompartments' to this
 Model.
 
 @param listOfCompartments]]>
      </doc>
    </method>
    <method name="setListOfCompartmentTypes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <param name="listOfCompartmentTypes" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.CompartmentType&gt;"/>
      <doc>
      <![CDATA[Sets the listOfCompartmentTypes of this Model to 'listOfCompartmentTypes'.
 Automatically sets the parentSBML objects of 'listOfCompartmentTypes' to
 this {@link Model}.
 
 @param listOfCompartmentTypes
        the listOfCompartmentTypes to set
 @deprecated]]>
      </doc>
    </method>
    <method name="setListOfConstraints"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfConstraints" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Constraint&gt;"/>
      <doc>
      <![CDATA[Sets the listOfConstraints of this {@link Model} to 'listOfConstraints'.
 Automatically sets the parentSBML objects of 'listOfCanstraints' to this
 Model.
 
 @param listOfConstraints
        the listOfConstraints to set]]>
      </doc>
    </method>
    <method name="setListOfEvents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfEvents" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Event&gt;"/>
      <doc>
      <![CDATA[Sets the listOfEvents of this {@link Model} to 'listOfEvents'.
 Automatically sets the parentSBML objects of 'listOfEvents' to this
 {@link Model}.
 
 @param listOfEvents]]>
      </doc>
    </method>
    <method name="setListOfFunctionDefinitions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfFunctionDefinitions" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.FunctionDefinition&gt;"/>
      <doc>
      <![CDATA[Sets the listOfFunctionDefinitions of this {@link Model} to
 'listOfFunctionDefinitions'. Automatically sets the parentSBML objects of
 'listOfFunctionDefinitions' to this Model.
 
 @param listOfFunctionDefinitions
        the listOfFunctionDefinitions to set]]>
      </doc>
    </method>
    <method name="setListOfInitialAssignments"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfInitialAssignments" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.InitialAssignment&gt;"/>
      <doc>
      <![CDATA[Sets the {@link #listOfInitialAssignments} of this {@link Model} to
 'listOfInitialAssignments'. Automatically sets the parentSBML objects of
 'listOfInitialAssignments' to this Model.
 
 @param listOfInitialAssignments
        the listOfInitialAssignments to set]]>
      </doc>
    </method>
    <method name="setListOfParameters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfParameters" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Parameter&gt;"/>
      <doc>
      <![CDATA[Sets the {@link #listOfParameters} of this {@link Model} to
 'listOfParameters'. Automatically sets the parentSBML objects of
 'listOfParameters' to this Model.
 
 @param listOfParameters]]>
      </doc>
    </method>
    <method name="setListOfReactions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfReactions" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Reaction&gt;"/>
      <doc>
      <![CDATA[Sets the {@link #listOfReactions} of this {@link Model} to
 'listOfReactions'. Automatically sets the parentSBML objects of
 'listOfReactions' to this Model.
 
 @param listOfReactions]]>
      </doc>
    </method>
    <method name="setListOfRules"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfRules" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Rule&gt;"/>
      <doc>
      <![CDATA[Sets the {@link #listOfRules} of this {@link Model} to 'listOfRules'.
 Automatically sets the parentSBML objects of 'listOfRules' to this Model.
 
 @param listOfRules]]>
      </doc>
    </method>
    <method name="setListOfSpecies"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfSpecies" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Species&gt;"/>
      <doc>
      <![CDATA[Sets the listOfSpecies of this {@link Model} to 'listOfSpecies'.
 Automatically sets the parentSBML objects of 'listOfSpecies' to this Model.
 
 @param listOfSpecies]]>
      </doc>
    </method>
    <method name="setListOfSpeciesTypes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <param name="listOfSpeciesTypes" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.SpeciesType&gt;"/>
      <doc>
      <![CDATA[Sets the listOfSpeciesTypes of this Model to 'listOfSpeciesTypes'.
 Automatically sets the parentSBML objects of 'listOfSpeciesTypes' to this
 Model.
 
 @param listOfSpeciesTypes
        the listOfSpeciesTypes to set
 @deprecated]]>
      </doc>
    </method>
    <method name="setListOfUnitDefinitions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfUnitDefinitions" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.UnitDefinition&gt;"/>
      <doc>
      <![CDATA[Sets the listOfUnitDefinitions of this {@link Model} to
 'listOfUnitDefinitions'. Automatically sets the parentSBML objects of
 'listOfUnitDefinitions' to this Model.
 
 @param listOfUnitDefinitions]]>
      </doc>
    </method>
    <method name="setModelHistory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #setHistory(History)}">
      <param name="history" type="org.sbml.jsbml.History"/>
      <doc>
      <![CDATA[@see #setHistory(History history)
 @param history
 @deprecated use {@link #setHistory(History)}]]>
      </doc>
    </method>
    <method name="setSubstanceUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="substanceUnitsID" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the substanceUnitsID of this {@link Model} to 'substanceUnitsID'
 
 @param substanceUnitsID
 @throws PropertyNotAvailableException
             if Level < 3.]]>
      </doc>
    </method>
    <method name="setSubstanceUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="substanceUnits" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Sets the substanceUnitsID of this {@link Model} to the id of
 'substanceUnits'.
 
 @param substanceUnits]]>
      </doc>
    </method>
    <method name="setTimeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeUnitsID" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the timeUnits of this {@link Model} to 'timeUnistID'
 
 @param timeUnitsID
 @throws PropertyNotAvailableException
             if Level < 3.]]>
      </doc>
    </method>
    <method name="setTimeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeUnits" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Sets the timeUnitsID of this {@link Model} to the id of the
 {@link UnitDefinition} 'timeUnits'.
 
 @param timeUnits]]>
      </doc>
    </method>
    <method name="setVolumeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="volumeUnitsID" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the volumeUnitsID of this {@link Model} to 'volumeUnitsID'
 
 @param volumeUnitsID
 @throws PropertyNotAvailableException
             if Level < 3.]]>
      </doc>
    </method>
    <method name="setVolumeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="volumeUnits" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Sets the volumeUnitsID of this {@link Model} to the id of the
 {@link UnitDefinition} 'volumeUnits'.
 
 @param volumeUnits]]>
      </doc>
    </method>
    <method name="unsetAreaUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the areaUnitsID of this {@link Model} to null.]]>
      </doc>
    </method>
    <method name="unsetConversionFactor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the conversionFactorID of this {@link Model} to null.]]>
      </doc>
    </method>
    <method name="unsetExtentUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the extentUnitsID of this {@link Model} to null.]]>
      </doc>
    </method>
    <method name="unsetLengthUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the lengthUnitsID of this {@link Model} to null.]]>
      </doc>
    </method>
    <method name="unsetListOfCompartments" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfCompartments} from this {@link Model} and
 notifies all registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <method name="unsetListOfCompartmentTypes" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[Removes the {@link #listOfCompartmentTypes} from this {@link Model} and
 notifies all registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.
 @deprecated]]>
      </doc>
    </method>
    <method name="unsetListOfConstraints" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfConstraints} from this {@link Model} and notifies
 all registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <method name="unsetListOfEvents" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfEvents} from this {@link Model} and notifies all
 registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <method name="unsetListOfFunctionDefinitions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfFunctionDefinitions} from this {@link Model} and
 notifies all registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <method name="unsetListOfInitialAssignments" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfInitialAssignments} from this {@link Model} and
 notifies all registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <method name="unsetListOfParameters" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfParameters} from this {@link Model} and notifies
 all registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <method name="unsetListOfReactions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfReactions} from this {@link Model} and notifies
 all registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <method name="unsetListOfRules" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfRules} from this {@link Model} and notifies all
 registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <method name="unsetListOfSpecies" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfSpecies} from this {@link Model} and notifies all
 registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <method name="unsetListOfSpeciesTypes" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[Removes the {@link #listOfSpeciesTypes} from this {@link Model} and
 notifies all registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.
 @deprecated]]>
      </doc>
    </method>
    <method name="unsetListOfUnitDefinitions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfUnitDefinitions} from this {@link Model} and
 notifies all registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <method name="unsetModelHistory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #unsetHistory()}.">
      <doc>
      <![CDATA[@see #unsetHistory()
 @deprecated use {@link #unsetHistory()}.]]>
      </doc>
    </method>
    <method name="unsetSubstanceUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the {@link #substanceUnitsID} of this {@link Model} to {@code null}.]]>
      </doc>
    </method>
    <method name="unsetTimeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the timeUnitsID of this {@link Model} to null.]]>
      </doc>
    </method>
    <method name="unsetVolumeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the volumeUnitsID of this {@link Model} to null.]]>
      </doc>
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 JSBML implementation of SBML's {@link Model} construct.
 </p>
 <p>
 In an SBML model definition, a single object of class {@link Model} serves as
 the overall container for the lists of the various model components. All of
 the lists are optional, but if a given list container is present within the
 model, the list must not be empty; that is, it must have length one or more.
 </p>
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Model -->
  <!-- start class org.sbml.jsbml.ModifierSpeciesReference -->
  <class name="ModifierSpeciesReference" extends="org.sbml.jsbml.SimpleSpeciesReference"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ModifierSpeciesReference"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a ModifierSpeciesReference instance.]]>
      </doc>
    </constructor>
    <constructor name="ModifierSpeciesReference" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="ModifierSpeciesReference" type="org.sbml.jsbml.ModifierSpeciesReference"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a ModifierSpeciesReference instance from a given
 ModifierSpeciesReference.
 
 @param modifierSpeciesReference]]>
      </doc>
    </constructor>
    <constructor name="ModifierSpeciesReference" type="org.sbml.jsbml.Species"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a ModifierSpeciesReference instance from a given Species.
 
 @param modifierSpeciesReference]]>
      </doc>
    </constructor>
    <constructor name="ModifierSpeciesReference" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id]]>
      </doc>
    </constructor>
    <constructor name="ModifierSpeciesReference" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.ModifierSpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the modifierSpeciesReference XML element of a SBML file.
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.ModifierSpeciesReference -->
  <!-- start interface org.sbml.jsbml.NamedSBase -->
  <interface name="NamedSBase"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.SBase"/>
    <method name="getId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the id of the element if it is set, an empty string otherwise.]]>
      </doc>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the name of the element if it is set, an empty string otherwise.]]>
      </doc>
    </method>
    <method name="isIdMandatory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method can be used to query if the identifier of this
 {@link NamedSBase} is
 required to be defined (i.e., not null) in the definition of SBML.
 
 @return {@code true} if the identifier of this element must be set in
         order to create a valid SBML representation. {@code false}
         otherwise, i.e., if the identifier can be understood as an optional
         attribute.]]>
      </doc>
    </method>
    <method name="isSetId" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the id is not null.]]>
      </doc>
    </method>
    <method name="isSetName" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the name is not null.]]>
      </doc>
    </method>
    <method name="setId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[sets the id value with 'id'
 
 @param id]]>
      </doc>
    </method>
    <method name="setName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[sets the name value with 'name'. If level is 1, sets automatically the id
 to 'name'
 
 @param name]]>
      </doc>
    </method>
    <method name="unsetId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[sets the id value to null.]]>
      </doc>
    </method>
    <method name="unsetName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[sets the name value to null.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Base class for all the SBML components with an id and a name (optional or
 not).
 
 @author Andreas Dr&auml;ger
 @author marine
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.NamedSBase -->
  <!-- start interface org.sbml.jsbml.NamedSBaseWithDerivedUnit -->
  <interface name="NamedSBaseWithDerivedUnit"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.NamedSBase"/>
    <implements name="org.sbml.jsbml.SBaseWithDerivedUnit"/>
    <doc>
    <![CDATA[All objects that implement this interface can be referenced in abstract
 syntax trees as implemented in {@link ASTNode}. The necessary requirement for
 this is that these objects can be accessed with an identifier and are
 associated with some value that can be evaluated to a unit. The value may be
 defined within the class or have to be computed in a simulation.
 
 @author Andreas Dr&auml;ger
 @date 2010-04-22
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.NamedSBaseWithDerivedUnit -->
  <!-- start class org.sbml.jsbml.Parameter -->
  <class name="Parameter" extends="org.sbml.jsbml.Symbol"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Parameter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Parameter instance.]]>
      </doc>
    </constructor>
    <constructor name="Parameter" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Parameter instance from an id, level and version.
 
 @param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Parameter" type="org.sbml.jsbml.LocalParameter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This constructor allows the creation of a global {@link Parameter} based on a
 {@link LocalParameter}. It creates a new {@link Parameter} object that will have the
 same attributes than the {@link LocalParameter}. Its constant attribute will be
 set to true.
 
 @param localParameter]]>
      </doc>
    </constructor>
    <constructor name="Parameter" type="org.sbml.jsbml.Parameter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Parameter instance from a given Parameter.
 
 @param p]]>
      </doc>
    </constructor>
    <constructor name="Parameter" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id]]>
      </doc>
    </constructor>
    <constructor name="Parameter" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.Parameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPredefinedUnitID" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Initializes the default values of this {@link Parameter}, i.e., sets it to a
 constant variable with a NaN value.]]>
      </doc>
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the default values using the current Level/Version configuration.]]>
      </doc>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents a globally valid parameter in the model, i.e., a variable that
 may change during a simulation or that provides a constant value.
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Parameter -->
  <!-- start class org.sbml.jsbml.Priority -->
  <class name="Priority" extends="org.sbml.jsbml.AbstractMathContainer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Priority"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Priority" type="org.sbml.jsbml.ASTNode, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param math
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Priority" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Priority" type="org.sbml.jsbml.Priority"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param sb]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.Priority"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParent" return="org.sbml.jsbml.Event"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This class represents the priority element in SBML.
 
 @author Andreas Dr&auml;ger
 @date 2010-10-21
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Priority -->
  <!-- start class org.sbml.jsbml.PropertyException -->
  <class name="PropertyException" extends="org.sbml.jsbml.SBMLError"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PropertyException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PropertyException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param message]]>
      </doc>
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This is an error of an undefined property or value for a propterty in some
 instance of {@link SBase}.
 
 @author Andreas Dr&auml;ger
 @version $Rev: 1447 $
 @since 0.8
 @date 24.03.2011]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.PropertyException -->
  <!-- start class org.sbml.jsbml.PropertyNotAvailableException -->
  <class name="PropertyNotAvailableException" extends="org.sbml.jsbml.PropertyException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PropertyNotAvailableException" type="java.lang.String, org.sbml.jsbml.SBase"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param property
 @param sbase]]>
      </doc>
    </constructor>
    <field name="PROPERTY_UNDEFINED_EXCEPTION_MSG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Message to indicate that a certain property cannot be set for the current
 level/version combination.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[An error that indicates that a property of an {@link SBase} is
 not available for the current SBML Level/Version combination.
 
 @author Andreas Dr&auml;ger
 @date 2010-11-21
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.PropertyNotAvailableException -->
  <!-- start class org.sbml.jsbml.PropertyUndefinedError -->
  <class name="PropertyUndefinedError" extends="org.sbml.jsbml.PropertyException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PropertyUndefinedError" type="java.lang.String, org.sbml.jsbml.SBase"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param property 
 @param sbase]]>
      </doc>
    </constructor>
    <field name="PROPERTY_UNDEFINED_EXCEPTION_MSG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Message to indicate that a certain property has not been set for the
 current {@link SBase} in its level/version combination.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This {@link PropertyException} indicates that the value belonging to a mandatory
 property, for which there is no default value, has not been declared by the
 user.
 
 @author Andreas Dr&auml;ger
 @version $Rev: 1447 $
 @since 0.8
 @date 24.03.2011]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.PropertyUndefinedError -->
  <!-- start interface org.sbml.jsbml.Quantity -->
  <interface name="Quantity"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.CallableSBase"/>
    <method name="getValue" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of this {@link Quantity}.
 
 In {@link Compartment}s the value is its size, in {@link Species} the
 value defines its initial amount or concentration, and in
 {@link Parameter}s and {@link LocalParameter}s this returns the value
 attribute from SBML.
 
 @return the value]]>
      </doc>
    </method>
    <method name="isSetValue" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the value of this {@link Quantity} is set.
 
 @return true if the value of this {@link Quantity} is set.]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Sets the value of this {@link Quantity}.
 
 Note that the meaning of the value can be different in all derived
 classes. In {@link Compartment}s the value defines its size. In
 {@link Species} the value describes either the initial amount or the
 initial concentration. Only the class {@link Parameter} and
 {@link LocalParameter} really define a value attribute with this name.
 
 @param value
            the value to set]]>
      </doc>
    </method>
    <method name="unsetValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the value of this {@link Quantity}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A quantity is an element that represents a value with an associated unit that
 can be addressed through the identifier or name attribute of this element.
 Both the value and the unit may be directly declared by the quantity or may
 have to be derived.
 
 @author Andreas Dr&auml;ger
 @author Nicolas Rodriguez
 @date 2010-04-20
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.Quantity -->
  <!-- start class org.sbml.jsbml.QuantityWithUnit -->
  <class name="QuantityWithUnit" extends="org.sbml.jsbml.AbstractNamedSBaseWithUnit"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.Quantity"/>
    <constructor name="QuantityWithUnit"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="QuantityWithUnit" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="QuantityWithUnit" type="org.sbml.jsbml.QuantityWithUnit"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param qwdu]]>
      </doc>
    </constructor>
    <constructor name="QuantityWithUnit" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id]]>
      </doc>
    </constructor>
    <constructor name="QuantityWithUnit" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="QuantityWithUnit" type="java.lang.String, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id
 @param name
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.QuantityWithUnit"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getValue" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isIdMandatory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetValue" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
    </method>
    <method name="unsetValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="value" type="java.lang.Double"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The size, initial amount or concentration, or the actual value of this
 variable.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This object represents an element with identifier and name, a value, and a
 defined unit. In particular, this class defines methods to access and
 manipulate the value and the unit properties of an element within a model.
 
 @author Andreas Dr&auml;ger
 @author Nicolas Rodriguez
 @date 2010-04-20
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.QuantityWithUnit -->
  <!-- start class org.sbml.jsbml.RateRule -->
  <class name="RateRule" extends="org.sbml.jsbml.ExplicitRule"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RateRule"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a RateRule instance. By default, the variableID is null.]]>
      </doc>
    </constructor>
    <constructor name="RateRule" type="org.sbml.jsbml.ASTNode, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param math
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="RateRule" type="org.sbml.jsbml.ASTNode, org.sbml.jsbml.Parameter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param math
 @param parameter]]>
      </doc>
    </constructor>
    <constructor name="RateRule" type="org.sbml.jsbml.ASTNode, org.sbml.jsbml.Variable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param variable
 @param math]]>
      </doc>
    </constructor>
    <constructor name="RateRule" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a RateRule instance from a given RateRule.
 
 @param sb]]>
      </doc>
    </constructor>
    <constructor name="RateRule" type="org.sbml.jsbml.Parameter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param parameter]]>
      </doc>
    </constructor>
    <constructor name="RateRule" type="org.sbml.jsbml.Parameter, org.sbml.jsbml.ASTNode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param parameter
 @param math]]>
      </doc>
    </constructor>
    <constructor name="RateRule" type="org.sbml.jsbml.RateRule"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param sb]]>
      </doc>
    </constructor>
    <constructor name="RateRule" type="org.sbml.jsbml.Variable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a RateRule instance from a given Symbol. Takes level and version
 from the variable.
 
 @param variable]]>
      </doc>
    </constructor>
    <constructor name="RateRule" type="org.sbml.jsbml.ExplicitRule"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a RateRule instance cloned from the given {@link ExplicitRule}
 
 @param rule]]>
      </doc>
    </constructor>
    <constructor name="RateRule" type="org.sbml.jsbml.Variable, org.sbml.jsbml.ASTNode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a RateRule instance from a given Symbol and ASTNode. Takes level
 and version from the variable.
 
 @param variable
 @param math]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.RateRule"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isScalar" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the rateRule XML element of a SBML file.
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.RateRule -->
  <!-- start class org.sbml.jsbml.Reaction -->
  <class name="Reaction" extends="org.sbml.jsbml.AbstractNamedSBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.CallableSBase"/>
    <implements name="org.sbml.jsbml.UniqueNamedSBase"/>
    <constructor name="Reaction"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Reaction instance. By default, the compartmentID, kineticLaw,
 {@link #listOfReactants}, {@link #listOfProducts} and
 {@link #listOfModifiers} are empty.]]>
      </doc>
    </constructor>
    <constructor name="Reaction" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id]]>
      </doc>
    </constructor>
    <constructor name="Reaction" type="org.sbml.jsbml.Reaction"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Reaction instance from a given reaction.
 
 @param reaction]]>
      </doc>
    </constructor>
    <constructor name="Reaction" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id]]>
      </doc>
    </constructor>
    <constructor name="Reaction" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link Reaction} instance from an id, level and version. By default,
 the compartmentID, {@link #kineticLaw}, {@link #listOfReactants}, {@link #listOfProducts} and
 {@link #listOfModifiers} are empty.
 
 @param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="addModifier" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="modspecref" type="org.sbml.jsbml.ModifierSpeciesReference"/>
      <doc>
      <![CDATA[Adds a {@link ModifierSpeciesReference} instance to this {@link Reaction}.
 
 @param modspecref
 @return {@code true} if the {@link #listOfModifiers} was
         changed as a result of this call.]]>
      </doc>
    </method>
    <method name="addProduct" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="specref" type="org.sbml.jsbml.SpeciesReference"/>
      <doc>
      <![CDATA[Adds a {@link SpeciesReference} instance to the listOfProducts of this {@link Reaction}.
 
 @param specref
 @return {@code true} if the {@link #listOfProducts} was
         changed as a result of this call.]]>
      </doc>
    </method>
    <method name="addReactant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="specref" type="org.sbml.jsbml.SpeciesReference"/>
      <doc>
      <![CDATA[Adds a {@link SpeciesReference} instance to the listOfReactants of this {@link Reaction}.
 
 @param specref
 @return {@code true} if the {@link #listOfReactants} was
         changed as a result of this call.]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.Reaction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="containsUndeclaredUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="createKineticLaw" return="org.sbml.jsbml.KineticLaw"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link KineticLaw} object, installs it as this
 {@link Reaction}'s 'kineticLaw' sub-element, and returns it.
 
 If this {@link Reaction} had a previous KineticLaw, it will be destroyed.
 
 @return the new {@link KineticLaw} object]]>
      </doc>
    </method>
    <method name="createModifier" return="org.sbml.jsbml.ModifierSpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link ModifierSpeciesReference}, adds it to this
 {@link Reaction}'s list of modifiers and returns it.
 
 @return a new {@link ModifierSpeciesReference} object.]]>
      </doc>
    </method>
    <method name="createModifier" return="org.sbml.jsbml.ModifierSpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="species" type="org.sbml.jsbml.Species"/>
      <doc>
      <![CDATA[Creates a new {@link ModifierSpeciesReference}, which points to the given
 {@link Species}, adds it to this {@link Reaction}'s
 {@link #listOfModifiers}, and returns a pointer to it.
 
 @param species
            the {@link Species} to which this modifier should point.
 @see #createModifier(String, Species)]]>
      </doc>
    </method>
    <method name="createModifier" return="org.sbml.jsbml.ModifierSpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[@param id
 @return]]>
      </doc>
    </method>
    <method name="createModifier" return="org.sbml.jsbml.ModifierSpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="species" type="org.sbml.jsbml.Species"/>
      <doc>
      <![CDATA[Creates a new {@link ModifierSpeciesReference} with the given
 <code>id</code> as its identifier, which points to the given
 {@link Species}, adds it to this {@link Reaction}'s
 {@link #listOfModifiers}, and returns a pointer to it.
 
 @param id
            the identifier of the {@link ModifierSpeciesReference} to be
            created.
 @param species
            the {@link Species} to which this modifier should point.
 @return a pointer to the newly created {@link ModifierSpeciesReference}.]]>
      </doc>
    </method>
    <method name="createModifier" return="org.sbml.jsbml.ModifierSpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="species" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a new {@link ModifierSpeciesReference} with the given
 <code>id</code> as its identifier, which points to the {@link Species}
 with the given <code>id</code>, adds it to this {@link Reaction}'s
 {@link #listOfModifiers}, and returns a pointer to it.
 
 @param id
            the identifier of the {@link ModifierSpeciesReference} to be
            created.
 @param species
            the identifier of the {@link Species} to be referenced.
 @return a pointer to the newly created {@link ModifierSpeciesReference}.]]>
      </doc>
    </method>
    <method name="createProduct" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link SpeciesReference}, adds it to this {@link Reaction}'s
 {@link #listOfProducts} and returns it.
 
 @return a new {@link SpeciesReference} object.
 
 @return]]>
      </doc>
    </method>
    <method name="createProduct" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="species" type="org.sbml.jsbml.Species"/>
      <doc>
      <![CDATA[Creates a new {@link SpeciesReference}, which points to the given
 {@link Species}, adds it to this {@link Reaction}'s
 {@link #listOfProducts} and returns a pointer to it.
 
 @param species
            the {@link Species} to which the {@link SpeciesReference}
            should point.
 @return a pointer to a newly created {@link SpeciesReference} that has
         been added to this {@link Reaction}'s {@link #listOfProducts}.
 @see #createProduct(String, Species)]]>
      </doc>
    </method>
    <method name="createProduct" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[@param id
 @return]]>
      </doc>
    </method>
    <method name="createProduct" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="species" type="org.sbml.jsbml.Species"/>
      <doc>
      <![CDATA[Creates a new {@link SpeciesReference} with the given <code>id</code> as
 its identifier, which points to the given {@link Species}, adds it to
 this {@link Reaction}'s {@link #listOfProducts} and returns a pointer to
 it.
 
 @param id
            the identifier of the {@link SpeciesReference} to be created.
 @param species
            the {@link Species} to which the {@link SpeciesReference}
            should point.
 @return a pointer to a newly created {@link SpeciesReference} that has
         been added to this {@link Reaction}'s {@link #listOfProducts}.]]>
      </doc>
    </method>
    <method name="createProduct" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="species" type="java.lang.String"/>
      <doc>
      <![CDATA[@param id
 @param species
 @return]]>
      </doc>
    </method>
    <method name="createReactant" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link SpeciesReference}, adds it to this {@link Reaction}'s
 {@link #listOfReactants} and returns it.
 
 @return a new SpeciesReference object.
 
 @return]]>
      </doc>
    </method>
    <method name="createReactant" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="species" type="org.sbml.jsbml.Species"/>
      <doc>
      <![CDATA[Creates a new {@link SpeciesReference} to the given {@link Species} and
 adds it to the {@link #listOfReactants}.
 
 @param species
 @return the newly created instance of {@link SpeciesReference} that
         points to the given {@link Species}.
 @see #createReactant(String, Species)]]>
      </doc>
    </method>
    <method name="createReactant" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[@param id
 @return]]>
      </doc>
    </method>
    <method name="createReactant" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="species" type="org.sbml.jsbml.Species"/>
      <doc>
      <![CDATA[Creates a new {@link SpeciesReference} with the given <code>id</code> as
 identifier, which points to the given {@link Species} and adds it to the
 {@link #listOfReactants}.
 
 @param id
            the identifier of the {@link SpeciesReference} to be created.
 @param species
            the {@link Species} to which this reactant should point.
 @return a pointer to the newly created {@link SpeciesReference}.]]>
      </doc>
    </method>
    <method name="createReactant" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="species" type="java.lang.String"/>
      <doc>
      <![CDATA[@param id
 @param species
 @return]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCompartment" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Only available if Level >= 3.
 
 @return the compartmentID of this {@link Reaction}. The empty
         {@link String} if it is not set.]]>
      </doc>
    </method>
    <method name="getCompartmentInstance" return="org.sbml.jsbml.Compartment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the Compartment instance which has the compartmentID of this
         Reaction as id. Can be null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getDerivedUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDerivedUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFast" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the fast Boolean of this Reaction.]]>
      </doc>
    </method>
    <method name="getKineticLaw" return="org.sbml.jsbml.KineticLaw"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the kineticLaw of this Reaction. Can be null if not set.]]>
      </doc>
    </method>
    <method name="getListOfModifiers" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.ModifierSpeciesReference&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the listOfModifiers of this Reaction. Is initialized here if not
         yet set.]]>
      </doc>
    </method>
    <method name="getListOfProducts" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.SpeciesReference&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the listOfProducts of this Reaction. Is initialized here if not
         yet set.]]>
      </doc>
    </method>
    <method name="getListOfReactants" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.SpeciesReference&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the listOfReactants of this Reaction. Is initialized here if not
         yet set.]]>
      </doc>
    </method>
    <method name="getModifier" return="org.sbml.jsbml.ModifierSpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[@param i
 @return the ith ModifierSpeciesReference of the listOfModifiers. Can be
         null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getModifier" return="org.sbml.jsbml.ModifierSpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Searches the first {@link ModifierSpeciesReference} in the
 {@link #listOfModifiers} of this {@link Reaction} with the given
 identifier.
 
 @param id
            identifier of the desired {@link ModifierSpeciesReference}.
            Note that this is not the identifier of the {@link Species}.
 @return the {@link ModifierSpeciesReference} of the
         {@link #listOfModifiers} which has 'id' as id (or name depending
         on the level and version). Can be null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getModifierForSpecies" return="org.sbml.jsbml.ModifierSpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the first {@link ModifierSpeciesReference} in the
 {@link #listOfModifiers} of this {@link Reaction} whose 'species'
 attribute points to a {@link Species} with the given identifier.
 
 @param id
            The identifier of a referenced {@link Species}
 @return the {@link ModifierSpeciesReference} of the
         {@link #listOfModifiers} which has 'id' as species attribute (or
         name depending on the level and version). Can be null if it
         doesn't exist.]]>
      </doc>
    </method>
    <method name="getNumModifiers" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the number of ModifierSpeciesReferences of this Reaction.]]>
      </doc>
    </method>
    <method name="getNumProducts" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the number of products SpeciesReference.]]>
      </doc>
    </method>
    <method name="getNumReactants" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the number of reactants SpeciesReference.]]>
      </doc>
    </method>
    <method name="getParent" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Reaction&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProduct" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[@param i
 @return the ith product SpeciesReference of the listOfProducts. Can be
         null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getProduct" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Searches the first {@link SpeciesReference} in the listOfProducts of this
 {@link Reaction} with the given identifier.
 
 @param id
            identifier of the desired {@link SpeciesReference}. Note that
            this is not the identifier of the {@link Species}.
 @return the {@link SpeciesReference} of the {@link #listOfProducts} which has 'id' as id
         (or name depending on the level and version). Can be null if it
         doesn't exist.]]>
      </doc>
    </method>
    <method name="getProductForSpecies" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the first {@link SpeciesReference} in the {@link #listOfProducts}
 of this {@link Reaction} whose 'species' attribute points to a
 {@link Species} with the given identifier.
 
 @param id
            The identifier of a referenced {@link Species}
 @return the {@link SpeciesReference} of the {@link #listOfProducts} which
         has 'id' as species attribute (or name depending on the level and
         version). Can be null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getReactant" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[@param i
 @return the ith reactant {@link SpeciesReference} of the listOfReactants.
         Can be null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getReactant" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Searches the first {@link SpeciesReference} in the listOfReactants of
 this {@link Reaction} with the given identifier.
 
 @param id
            identifier of the desired {@link SpeciesReference}. Note that
            this is not the identifier of the {@link Species}.
 @return the {@link SpeciesReference} of the listOfReactants which has
         'id' as id (or name depending on the level and version). Can be
         null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getReactantForSpecies" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the first {@link SpeciesReference} in the
 {@link #listOfReactants} of this {@link Reaction} whose 'species'
 attribute points to a {@link Species} with the given identifier.
 
 @param id
            The identifier of a referenced {@link Species}
 @return the {@link SpeciesReference} of the {@link #listOfReactants}
         which has 'id' as species attribute (or name depending on the
         level and version). Can be null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getReversible" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the reversible Boolean of this reaction.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasModifier" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="org.sbml.jsbml.Species"/>
      <doc>
      <![CDATA[@param s
 @return]]>
      </doc>
    </method>
    <method name="hasProduct" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="org.sbml.jsbml.Species"/>
      <doc>
      <![CDATA[@param s
 @return]]>
      </doc>
    </method>
    <method name="hasReactant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="org.sbml.jsbml.Species"/>
      <doc>
      <![CDATA[@param s
 @return]]>
      </doc>
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the default values using the current Level/Version configuration.]]>
      </doc>
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Initializes the default variables of this Reaction.]]>
      </doc>
    </method>
    <method name="involves" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="org.sbml.jsbml.Species"/>
      <doc>
      <![CDATA[Convenient test if the given species takes part in this reaction as a
 reactant, product, or modifier.
 
 @param s
 @return]]>
      </doc>
    </method>
    <method name="isFast" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the boolean value of fast if it is set, false otherwise.]]>
      </doc>
    </method>
    <method name="isIdMandatory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isReversible" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the value of reversible if it is set, false otherwise.]]>
      </doc>
    </method>
    <method name="isSetCompartment" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the compartmentID of this Reaction is not null;]]>
      </doc>
    </method>
    <method name="isSetCompartmentInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the Compartment which has the compartmentID of this
         Reaction as id is not null;]]>
      </doc>
    </method>
    <method name="isSetFast" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if fast is not null.]]>
      </doc>
    </method>
    <method name="isSetKineticLaw" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the kineticLaw of this Reaction is not null.]]>
      </doc>
    </method>
    <method name="isSetListOfModifiers" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the listOfModifiers of this Reaction is not null and not
         empty.]]>
      </doc>
    </method>
    <method name="isSetListOfProducts" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the listOfProducts of this reaction is not null and not
         empty.]]>
      </doc>
    </method>
    <method name="isSetListOfReactants" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the listOfReactants of this Reaction is not null and not
         empty.]]>
      </doc>
    </method>
    <method name="isSetReversible" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if reversible is not null.]]>
      </doc>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="removeModifier" return="org.sbml.jsbml.ModifierSpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[Removes the nth modifier species (ModifierSpeciesReference object) in the
 list of modifiers in this Reaction and returns it.
 
 @param i
            the index of the ModifierSpeciesReference object to remove.
 @return the removed ModifierSpeciesReference object, or null if the given
         index is out of range.]]>
      </doc>
    </method>
    <method name="removeModifier" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="modspecref" type="org.sbml.jsbml.ModifierSpeciesReference"/>
      <doc>
      <![CDATA[Removes the ModifierSpeciesReference 'modspecref' from this Reaction.
 
 @param modspecref]]>
      </doc>
    </method>
    <method name="removeModifier" return="org.sbml.jsbml.ModifierSpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes the modifier species (ModifierSpeciesReference object) having the
 given 'species' attribute in the list of modifiers in this Reaction and
 returns it.
 
 @param id
            the 'species' attribute of the ModifierSpeciesReference object
            (which correspond to a species id).
 @return]]>
      </doc>
    </method>
    <method name="removeProduct" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[Removes the nth product species (SpeciesReference object) in the list of
 products in this Reaction and returns it.
 
 @param i
            the index of the SpeciesReference object to remove.
 @return the removed SpeciesReference object, or null if the given index
         is out of range.]]>
      </doc>
    </method>
    <method name="removeProduct"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="specref" type="org.sbml.jsbml.SpeciesReference"/>
      <doc>
      <![CDATA[Removes the SpeciesReference 'modspecref' from the listOfProducts of this
 Reaction.
 
 @param specref]]>
      </doc>
    </method>
    <method name="removeProduct" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes the product species (SpeciesReference object) having the given
 'species' attribute in the list of products in this Reaction and returns
 it.
 
 @param id
            the 'species' attribute of the SpeciesReference object (which
            correspond to a species id).
 @return]]>
      </doc>
    </method>
    <method name="removeReactant" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[Removes the nth reactant species (SpeciesReference object) in the list of
 reactants in this Reaction and returns it.
 
 @param i
            the index of the SpeciesReference object to remove.
 @return the removed SpeciesReference object, or null if the given index
         is out of range.]]>
      </doc>
    </method>
    <method name="removeReactant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="specref" type="org.sbml.jsbml.SpeciesReference"/>
      <doc>
      <![CDATA[Removes the SpeciesReference 'modspecref' from the listOfReactants of
 this Reaction.
 
 @param specref]]>
      </doc>
    </method>
    <method name="removeReactant" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes the reactant species (SpeciesReference object) having the given
 'species' attribute in the list of reactants in this Reaction and returns
 it.
 
 @param id
            the 'species' attribute of the SpeciesReference object (which
            correspond to a species id).
 @return]]>
      </doc>
    </method>
    <method name="setCompartment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="compartment" type="org.sbml.jsbml.Compartment"/>
      <doc>
      <![CDATA[Sets the compartmentID of this {@link Reaction} to the id of the {@link Compartment}
 'compartment'.
 
 @param compartment]]>
      </doc>
    </method>
    <method name="setCompartment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="compartmentID" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the compartmentID of this Reaction to 'compartmentID'. This method
 is only available for Level >= 3.
 
 @param compartmentID
 @throws PropertyNotAvailableException
             if Level < 3.]]>
      </doc>
    </method>
    <method name="setFast"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fast" type="boolean"/>
      <doc>
      <![CDATA[Sets the fast Boolean of this {@link Reaction}.
 
 @param fast]]>
      </doc>
    </method>
    <method name="setKineticLaw"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="kineticLaw" type="org.sbml.jsbml.KineticLaw"/>
      <doc>
      <![CDATA[Sets the kineticLaw of this {@link Reaction}.
 
 @param kineticLaw]]>
      </doc>
    </method>
    <method name="setListOfModifiers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfModifiers" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.ModifierSpeciesReference&gt;"/>
      <doc>
      <![CDATA[Sets the listOfModifiers of this {@link Reaction}. Automatically sets the
 parentSBML object of the list to this {@link Reaction} instance.
 
 @param listOfModifiers]]>
      </doc>
    </method>
    <method name="setListOfProducts"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfProducts" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.SpeciesReference&gt;"/>
      <doc>
      <![CDATA[Sets the {@link #listOfProducts} of this {@link Reaction}. Automatically sets the
 parentSBML object of the list to this {@link Reaction} instance.
 
 @param listOfProducts]]>
      </doc>
    </method>
    <method name="setListOfReactants"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfReactants" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.SpeciesReference&gt;"/>
      <doc>
      <![CDATA[Sets the listOfReactants of this {@link Reaction}. Automatically sets the
 parentSBML object of the list to this {@link Reaction} instance.
 
 @param listOfReactants]]>
      </doc>
    </method>
    <method name="setReversible"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reversible" type="boolean"/>
      <doc>
      <![CDATA[Sets the reversible Boolean of this {@link Reaction}.
 
 @param reversible]]>
      </doc>
    </method>
    <method name="unsetFast"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the fast Boolean of this Reaction to null.]]>
      </doc>
    </method>
    <method name="unsetKineticLaw" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the {@link KineticLaw} of this {@link Reaction} to null and notifies
 all {@link TreeNodeChangeListener} about changes.
 
 @return {@code true} if calling this method changed the properties
         of this element.]]>
      </doc>
    </method>
    <method name="unsetListOfModifiers" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfModifiers} from this {@link Reaction} and notifies
 all registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <method name="unsetListOfProducts" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfProducts} from this {@link Reaction} and notifies
 all registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <method name="unsetListOfReactants" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfReactants} from this {@link Reaction} and notifies
 all registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <method name="unsetReversible"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the reversible Boolean of this {@link Reaction} to null.]]>
      </doc>
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the reaction XML element of a SBML file.
 
 @author Andreas Dr&auml;ger
 @author Nicolas Rodriguez
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Reaction -->
  <!-- start class org.sbml.jsbml.Rule -->
  <class name="Rule" extends="org.sbml.jsbml.AbstractMathContainer"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Rule"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Rule instance.]]>
      </doc>
    </constructor>
    <constructor name="Rule" type="org.sbml.jsbml.ASTNode, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Rule instance from an id, level and version.
 
 @param math
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Rule" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Rule instance from a level and version.
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Rule" type="org.sbml.jsbml.Rule"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link Rule} instance from a given {@link Rule}.
 
 @param sb]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.Rule"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParent" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Rule&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isAlgebraic" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if this Rule is an AlgebraicRule instance.]]>
      </doc>
    </method>
    <method name="isAssignment" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if this Rule is an AssignmentRule instance.]]>
      </doc>
    </method>
    <method name="isCompartmentVolume" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(SBML Level 1 only) Predicate returning true or false depending on
 whether this Rule is an CompartmentVolumeRule.
 
 @return true if this Rule is a CompartmentVolumeRule, false otherwise.]]>
      </doc>
    </method>
    <method name="isParameter" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(SBML Level 1 only) Predicate returning true or false depending on
 whether this Rule is an ParameterRule.
 
 @return true if this Rule is a ParameterRule, false otherwise.]]>
      </doc>
    </method>
    <method name="isRate" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if this Rule is a RateRule instance.]]>
      </doc>
    </method>
    <method name="isSpeciesConcentration" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[(SBML Level 1 only) Predicate returning true or false depending on
 whether this Rule is an SpeciesConcentrationRule.
 
 @return true if this Rule is a SpeciesConcentrationRule, false otherwise.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The base class for the {@link AlgebraicRule}, {@link RateRule},
 {@link AssignmentRule}.
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Rule -->
  <!-- start interface org.sbml.jsbml.SBase -->
  <interface name="SBase"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.util.TreeNodeWithChangeSupport"/>
    <method name="addCVTerm" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="term" type="org.sbml.jsbml.CVTerm"/>
      <doc>
      <![CDATA[@param term
 @return {@code true} if a {@link CVTerm} instance has been added to
         the list of {@link CVTerm} of this object.]]>
      </doc>
    </method>
    <method name="addNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespace" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds an additional name space to the set of name spaces of this
 {@link SBase} if the given name space is not yet present within this
 {@link SortedSet}.
 
 @param namespace the namespace to add]]>
      </doc>
    </method>
    <method name="addDeclaredNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <param name="namespace" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds an additional name space to the set of declared namespaces of this
 {@link SBase}.
 
 @param prefix the prefix of the namespace to add
 @param namespace the namespace to add]]>
      </doc>
    </method>
    <method name="appendNotes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notes" type="java.lang.String"/>
      <doc>
      <![CDATA[Appends 'notes' to the notes String of this object.
  
 @param notes]]>
      </doc>
    </method>
    <method name="appendNotes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notes" type="org.sbml.jsbml.xml.XMLNode"/>
      <doc>
      <![CDATA[Appends 'notes' to the notes of this object.
 
 @param notes]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.SBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a copy of this object, i.e., e new {@link SBase} with the same properties
 like this one and returns a pointer to it.
 
 @return]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbase" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns true if and only if the given {@link SBase} has exactly the same
 properties like this {@link SBase} instance.
 
 @param sbase
 @return true if and only if the given {@link Object} is an instance of
         {@link SBase} that has exactly the same properties like this
         SBase instance.]]>
      </doc>
    </method>
    <method name="filterCVTerms" return="java.util.List&lt;org.sbml.jsbml.CVTerm&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="qualifier" type="org.sbml.jsbml.CVTerm.Qualifier"/>
      <doc>
      <![CDATA[This method returns a list of all qualifiers of the given type.
 
 @param qualifier
 @return]]>
      </doc>
    </method>
    <method name="filterCVTerms" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="qualifier" type="org.sbml.jsbml.CVTerm.Qualifier"/>
      <param name="pattern" type="java.lang.String"/>
      <doc>
      <![CDATA[Queries the list of controlled vocabulary terms for those terms whose
 qualifier is of the given type and selects only those resources from
 these terms that contain the given pattern.
 
 @param qualifier
 @param pattern
            for instance, 'kegg' or 'chebi'.
 @return]]>
      </doc>
    </method>
    <method name="getAnnotation" return="org.sbml.jsbml.Annotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content of the 'annotation' sub-element of this object as an
         {@link Annotation} instance.
         
 @return the content of the 'annotation' sub-element of this object as an
         {@link Annotation} instance.]]>
      </doc>
    </method>
    <method name="getAnnotationString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content of the 'annotation' sub-element of this object as a
 String.
 
 @return the content of the 'annotation' sub-element of this object as a
 String.]]>
      </doc>
    </method>
    <method name="getCVTerm" return="org.sbml.jsbml.CVTerm"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[@param index
 @return the {@link CVTerm} instance at the position 'index' in the list of
         {@link CVTerm}s of this object.]]>
      </doc>
    </method>
    <method name="getCVTerms" return="java.util.List&lt;org.sbml.jsbml.CVTerm&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the list of {@link CVTerm}s of this object. If not yet set, this method
         initializes the annotation and returns an empty list.]]>
      </doc>
    </method>
    <method name="getElementName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the XML element name of this object.]]>
      </doc>
    </method>
    <method name="getHistory" return="org.sbml.jsbml.History"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the {@link History} instance of this object.]]>
      </doc>
    </method>
    <method name="getLevel" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SBML Level of the overall SBML document. Returns -1 if it is
 not set.
 
 @return the SBML level of this SBML object.
 @see getVersion()]]>
      </doc>
    </method>
    <method name="getLevelAndVersion" return="org.sbml.jsbml.util.ValuePair&lt;java.lang.Integer, java.lang.Integer&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Level and Version combination of this {@link SBase}.
 
 @return A {@link ValuePair} with the Level and Version of this
         {@link SBase}. Note that the returned {@link ValuePair} is never
         null, but if undeclared it may contain elements set to -1.]]>
      </doc>
    </method>
    <method name="getMetaId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the metaid of this element.]]>
      </doc>
    </method>
    <method name="getModel" return="org.sbml.jsbml.Model"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link Model} object in which the current {@link SBase} is located.
 
 @return]]>
      </doc>
    </method>
    <method name="getNamespaces" return="java.util.SortedSet&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all the namespaces of all the packages which are currently
         extending this object.
         
 @return all the name spaces of all the packages which are currently
         extending this object.]]>
      </doc>
    </method>
    <method name="getDeclaredNamespaces" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all the namespaces declared on this object. These will be written on the
 resulting XML element.
 
 @return all the namespaces declared on this object. These will be written on the
 resulting XML element.]]>
      </doc>
    </method>
    <method name="getNotes" return="org.sbml.jsbml.xml.XMLNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the <code>XMLNode</code> containing the notes sub-element of
 this object.
 
 @return the <code>XMLNode</code> containing the notes sub-element of
         this object.]]>
      </doc>
    </method>
    <method name="getNotesString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the notes sub-element of this object as a {@link String}. If no
         notes are set, an empty {@link String} will be returned.]]>
      </doc>
    </method>
    <method name="getNumCVTerms" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the number of {@link CVTerm}s of this {@link SBase}.]]>
      </doc>
    </method>
    <method name="getParentSBMLObject" return="org.sbml.jsbml.SBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method is convenient when holding an object nested inside other
 objects in an SBML model. It allows direct access to the &lt;model&gt;
 
 element containing it.
 
 @return Returns the parent SBML object.
 @see #getParent()]]>
      </doc>
    </method>
    <method name="getSBMLDocument" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the parent {@link SBMLDocument} object.
 
 LibSBML uses the class {@link SBMLDocument} as a top-level container for storing
 SBML content and data associated with it (such as warnings and error
 messages). An SBML model in libSBML is contained inside an {@link SBMLDocument}
 object. {@link SBMLDocument} corresponds roughly to the class 'sbml' defined in the
 SBML Level 2 specification, but it does not have a direct correspondence
 in SBML Level 1. (But, it is created by libSBML no matter whether the
 model is Level 1 or Level 2.)
 
 This method allows the {@link SBMLDocument} for the current object to be
 retrieved.
 
 @return the parent {@link SBMLDocument} object of this SBML object.]]>
      </doc>
    </method>
    <method name="getSBOTerm" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Grants access to the Systems Biology Ontology (SBO) term associated with
 this {@link SBase}.
 
 @return the SBOTerm attribute of this element.
 @see SBO]]>
      </doc>
    </method>
    <method name="getSBOTermID" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Grants access to the Systems Biology Ontology (SBO) term associated with
 this {@link SBase}.
 
 @return the SBO term ID of this element.
 @see SBO]]>
      </doc>
    </method>
    <method name="getVersion" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Version within the SBML Level of the overall SBML document.
 Return -1 if it is not set.
 
 @return the SBML version of this SBML object.
 @see getLevel()]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return
 @see Object#hashCode()]]>
      </doc>
    </method>
    <method name="hasValidAnnotation" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the {@link Annotation} 'about' {@link String} of this
         object matches the metaid of this object.]]>
      </doc>
    </method>
    <method name="hasValidLevelVersionNamespaceCombination" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate returning {@code true} or false depending on whether this object's
 level/version and name space values correspond to a valid SBML
 specification.
 
 @return]]>
      </doc>
    </method>
    <method name="isSetAnnotation" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate returning true or false depending on whether this object's
 'annotation' sub-element exists and has content.
 
 @return true if the {@link Annotation} instance of this object is not
         null and contains at least one {@link CVTerm} or one
         {@link String} containing other annotations than RDF or a
         {@link History} instance.]]>
      </doc>
    </method>
    <method name="isSetHistory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the {@link Annotation} instance of this object]]>
      </doc>
    </method>
    <method name="isSetLevel" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the level is not null.]]>
      </doc>
    </method>
    <method name="isSetLevelAndVersion" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} if both, Level and Version are set for this
 {@link SBase}.
 
 @return {@code true} if {@link #isSetLevel()} and
         {@link #isSetVersion()}.]]>
      </doc>
    </method>
    <method name="isSetMetaId" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate returning true or false depending on whether this object's
 'metaid' attribute has been set.
 
 @return true if the metaid is not null.]]>
      </doc>
    </method>
    <method name="isSetNotes" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate returning true or false depending on whether this object's
 'notes' sub-element exists and has content.
 
 @return true if the notes {@link String} is not null.]]>
      </doc>
    </method>
    <method name="isSetParentSBMLObject" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Check whether this {@link SBase} has been linked to a parent within the
 hierarchical SBML data structure.
 
 @return {@code true} if this {@link SBase} has a parent SBML object,
         {@code false} otherwise.
 @see #getParentSBMLObject()]]>
      </doc>
    </method>
    <method name="isSetSBOTerm" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the SBOTerm is not -1.
 @see SBO]]>
      </doc>
    </method>
    <method name="isSetVersion" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the version is not null.]]>
      </doc>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[If the attribute is an id or name attribute, it will set the id or name
 of this object with the value of the XML attribute ('value').
 
 @param attributeName
            : localName of the XML attribute
 @param prefix
            : prefix of the XML attribute
 @param value
            : value of the XML attribute
 @return true if the attribute has been successfully read.]]>
      </doc>
    </method>
    <method name="registerChild"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbase" type="org.sbml.jsbml.SBase"/>
      <exception name="LevelVersionError" type="org.sbml.jsbml.LevelVersionError"/>
      <doc>
      <![CDATA[Sets this object as SBML parent of 'sbase'. Check if the level and version
 of sbase are set, otherwise sets the level and version of 'sbase' with
 those of this object. This method should actually not be called by any tool 
 as it is used internally within JSBML to maintain the hierarchical document
 structure.
 
 If the level and version of sbase are set but not valid, an {@link Exception} is
 thrown.]]>
      </doc>
    </method>
    <method name="unregister"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbase" type="org.sbml.jsbml.SBase"/>
      <doc>
      <![CDATA[Unregisters recursively the given SBase from the {@link Model}
 and {@link SBMLDocument}.]]>
      </doc>
    </method>
    <method name="removeTreeNodeChangeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
      <doc>
      <![CDATA[Removes the given {@link TreeNodeChangeListener} from this element.
 
 @param l]]>
      </doc>
    </method>
    <method name="setAnnotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="annotation" type="org.sbml.jsbml.Annotation"/>
      <doc>
      <![CDATA[Sets the value of the 'annotation' sub-element of this SBML object to a
 copy of annotation given as an {@link Annotation} instance.
 
 @param annotation]]>
      </doc>
    </method>
    <method name="setHistory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="history" type="org.sbml.jsbml.History"/>
      <doc>
      <![CDATA[@return the {@link History} instance of this object.]]>
      </doc>
    </method>
    <method name="setLevel"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <doc>
      <![CDATA[Sets the level of this object with 'level'. If the SBML parent of this
 object is set and 'level' is different with the SBML parent level, an
 {@link Exception} is thrown.
 
 @param level]]>
      </doc>
    </method>
    <method name="setMetaId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="metaid" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the metaid value with 'metaid'.
 
 @param metaid
 @throws PropertyNotAvailableException
             in Level 1.]]>
      </doc>
    </method>
    <method name="setNotes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notes" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the notes with 'notes'.
 
 @param notes]]>
      </doc>
    </method>
    <method name="setNotes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notesXMLNode" type="org.sbml.jsbml.xml.XMLNode"/>
      <doc>
      <![CDATA[Sets the <code>XMLNode</code> containing the notes sub-element of
 this object.]]>
      </doc>
    </method>
    <method name="setSBOTerm"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="term" type="int"/>
      <doc>
      <![CDATA[Sets the value of the 'sboTerm' attribute.
 
 @param term
 @see SBO
 @throws PropertyNotAvailableException in Level 1.]]>
      </doc>
    </method>
    <method name="setSBOTerm"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboid" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the value of the 'sboTerm' attribute.
 
 @param sboid
 @see SBO]]>
      </doc>
    </method>
    <method name="setThisAsParentSBMLObject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbase" type="org.sbml.jsbml.SBase"/>
      <exception name="LevelVersionError" type="org.sbml.jsbml.LevelVersionError"/>
      <doc>
      <![CDATA[Sets this object as SBML parent of 'sbase'. Check if the level and version
 of sbase are set, otherwise sets the level and version of 'sbase' with
 those of this object. This method should actually not be called by any tool 
 as it is used internally within JSBML to maintain the hierarchical document
 structure.
 
 If the level and version of sbase are set but not valid, an {@link Exception} is
 thrown.]]>
      </doc>
    </method>
    <method name="setVersion"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Sets the version of this object with 'version'. If the SBML parent of this
 object is set and 'version' is different with the SBMLparent version, an
 {@link Exception} is thrown.
 
 @param level]]>
      </doc>
    </method>
    <method name="unsetAnnotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the value of the 'annotation' sub-element of this SBML object.]]>
      </doc>
    </method>
    <method name="unsetCVTerms"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the list of {@link CVTerm} of this object.]]>
      </doc>
    </method>
    <method name="unsetHistory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the {@link History} of this object.]]>
      </doc>
    </method>
    <method name="unsetMetaId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the value of the 'metaid' attribute of this SBML object.]]>
      </doc>
    </method>
    <method name="unsetNotes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the value of the 'notes' sub-element of this SBML object.]]>
      </doc>
    </method>
    <method name="unsetSBOTerm"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the value of the 'sboTerm' attribute of this SBML object.]]>
      </doc>
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return a {@link Map} containing the XML attributes of this object.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The interface to implement for each SBML component.
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau 
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.SBase -->
  <!-- start interface org.sbml.jsbml.SBaseWithDerivedUnit -->
  <interface name="SBaseWithDerivedUnit"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.SBase"/>
    <method name="containsUndeclaredUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether this
 {@link SBaseWithDerivedUnit} refers to elements such as parameters or
 numbers with undeclared units.
 
 A return value of true indicates that the <code>UnitDefinition</code>
 returned by {@see getDerivedUnitDefinition()} may not accurately
 represent the units of the expression.
 
 @return {@code true} if the math expression of this {@link SBaseWithDerivedUnit}
         includes parameters/numbers with undeclared units,
         {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="getDerivedUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method derives the unit of this quantity and tries to identify an
 equivalent {@link UnitDefinition} within the corresponding {@link Model}.
 If no equivalent unit definition can be found, a new unit definition will
 be created that is not part of the model but represents the unit of this
 quantity. If it is not possible to derive a unit for this quantity, null
 will be returned.
 
 @return]]>
      </doc>
    </method>
    <method name="getDerivedUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method derives the unit of this quantity. If the model that contains
 this quantity already contains a unit that is equivalent to the derived
 unit, the corresponding identifier will be returned. In case that the
 unit cannot be derived or that no equivalent unit exists within the
 model, or if the model has not been defined yet, null will be returned.
 In case that this quantity represents a basic {@link Unit.Kind} this
 method will return the {@link String} representation of this
 {@link Unit.Kind}.
 
 @return]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This type represents an SBase object that is associated to a unit. This may
 be a directly defined unit or a unit that has to be derived by evaluating
 other elements within this object.
 
 @author Andreas Dr&auml;ger
 @author Nicolas Rodriguez
 @date 2010-04-20
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.SBaseWithDerivedUnit -->
  <!-- start interface org.sbml.jsbml.SBaseWithUnit -->
  <interface name="SBaseWithUnit"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.SBaseWithDerivedUnit"/>
    <method name="getUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the unitsID of this {@link SBaseWithUnit}. The empty
         {@link String} if it is not set.]]>
      </doc>
    </method>
    <method name="getUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return The UnitDefinition instance which has the {@link #unitsID} of
         this {@link SBaseWithUnit} as id. Null if it doesn't
         exist. In case that the unit of this {@link SBaseWithUnit}
         represents a base {@link Unit}, a new {@link UnitDefinition} will
         be created and returned by this method. This new
         {@link UnitDefinition} will only contain the one unit represented
         by the unit identifier in this {@link SBaseWithUnit}. Note
         that the corresponding model will not contain this
         {@link UnitDefinition}. The identifier of this new
         {@link UnitDefinition} will be set to the same value as the name
         of the base {@link Unit}.]]>
      </doc>
    </method>
    <method name="isSetUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the unitsID of this element is not null.]]>
      </doc>
    </method>
    <method name="isSetUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks whether the element referenced by the <code>unitsID</code>
 attribute of this {@link SBaseWithUnit} is either an existing base
 {@link Unit}, i.e., a simple {@link Unit} that can directly be addressed
 via its {@link Kind} element, or the identifier of an existing
 {@link UnitDefinition} in the {@link Model} to which this
 {@link SBaseWithUnit} belongs.
 
 @return true if either a {@link UnitDefinition}, which has the
         <code>unitsID</code> of this {@link SBaseWithUnit}, can be
         found in the {@link Model} to which this
         {@link SBaseWithUnit} belongs, or if this element's
         <code>unitsID</code> as a corresponding base {@link Unit} for the
         given Level/Version combination.]]>
      </doc>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="units" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the unitsID of this {@link SBaseWithUnit}. Only valid unit
 kind names or identifiers of already existing {@link UnitDefinition}s are
 allowed arguments of this function.
 
 @param units
            the identifier of an already existing {@link UnitDefinition}
            or an {@link Unit.Kind} identifier for the current
            level/version combination of this unit. Passing a null value
            to this method is equivalent to calling {@link #unsetUnits()}.]]>
      </doc>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="org.sbml.jsbml.Unit"/>
      <doc>
      <![CDATA[Sets the {@link Unit} of this {@link SBaseWithUnit}.
 
 @param unit]]>
      </doc>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unitKind" type="org.sbml.jsbml.Unit.Kind"/>
      <doc>
      <![CDATA[Sets the unit of this {@link SBaseWithUnit}.
 
 A new unit will be created base on this kind.
 
 @param unitKind]]>
      </doc>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="units" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Set the unit attribute of this {@link SBaseWithUnit} to the given
 unit definition.
 
 @param units]]>
      </doc>
    </method>
    <method name="unsetUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the unitsID of this {@link SBaseWithUnit} to null.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Defines a kind of {@link SBase} that is equipped with a defined unit. This
 means, instances of this interface have a derived unit and a defined unit and
 provide methods to manipulate the kind of {@link Unit} or
 {@link UnitDefinition} associated with this data type.
 
 @author Andreas Dr&auml;ger
 @date 2010-12-15
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.SBaseWithUnit -->
  <!-- start class org.sbml.jsbml.SBMLDocument -->
  <class name="SBMLDocument" extends="org.sbml.jsbml.AbstractSBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SBMLDocument"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link SBMLDocument} instance. By default, the parent SBML object of
 this object is itself. The model is null. The SBMLDocumentAttributes and
 the SBMLDocumentNamespaces are empty.
 
 @param sb]]>
      </doc>
    </constructor>
    <constructor name="SBMLDocument" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a SBMLDocument instance from a level and version. By default, the
 parent SBML object of this object is itself. The model is null. The
 SBMLDocumentAttributes and the SBMLDocumentNamespaces are empty.
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="SBMLDocument" type="org.sbml.jsbml.SBMLDocument"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link SBMLDocument} instance from a given {@link SBMLDocument}.
 
 @param sb]]>
      </doc>
    </constructor>
    <method name="addNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespaceName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds a name space to the SBMLNamespaces of this SBMLDocument.
 
 @param namespaceName
 @param prefix
 @param URI]]>
      </doc>
    </method>
    <method name="checkConsistency" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Validates the {@link SBMLDocument} using the
 SBML.org online validator (http://sbml.org/validator/).
 <p>
 you can control the consistency checks that are performed when
 {@link #checkConsistency()} is called with the 
 {@link #setConsistencyChecks(CHECK_CATEGORY, boolean)} method.
 It will fill this {@link SBMLDocument}'s {@link #listOfErrors}
 with {@link SBMLError}s for each problem within this whole data
 structure. You will then be able to obtain this list by calling
 {@link #getError(int)} or {@link #getListOfErrors()}.
 <p>
 If this method returns a nonzero value (meaning, one or more
 consistency checks have failed for SBML document), the failures may be
 due to warnings @em or errors.  Callers should inspect the severity
 flag in the individual SBMLError objects returned by
 {@link SBMLDocument#getError(int)} to determine the nature of the failures.
 
 @return the number of errors found
 
 @see #setConsistencyChecks(CHECK_CATEGORY, boolean)]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="containsMetaId" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="metaId" type="java.lang.String"/>
      <doc>
      <![CDATA[A check to see whether elements have been registered to this
 {@link SBMLDocument} with the given meta identifier.
 
 @param metaId
 @return]]>
      </doc>
    </method>
    <method name="createModel" return="org.sbml.jsbml.Model"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="If not working with SBML Level 2 use
             {@link #createModel(String)} instead.">
      <doc>
      <![CDATA[Creates a new Model inside this {@link SBMLDocument}, and returns a
 pointer to it.
 
 In SBML Level 2, the use of an identifier on a {@link Model} object is
 optional. This method takes an optional argument, sid, for setting the
 identifier. If not supplied, the identifier attribute on the Model
 instance is not set.
 
 @return the new {@link Model} instance.
 @deprecated If not working with SBML Level 2 use
             {@link #createModel(String)} instead.]]>
      </doc>
    </method>
    <method name="createModel" return="org.sbml.jsbml.Model"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a new instance of Model from id and the level and version of this
 SBMLDocument.
 
 @param id
 @return the new {@link Model} instance.]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="findSBase" return="org.sbml.jsbml.SBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="metaId" type="java.lang.String"/>
      <doc>
      <![CDATA[Looks up the {@link SBase} registered in this {@link SBMLDocument} for the
 given metaId.
 
 @param metaId
 @return]]>
      </doc>
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDefaultLevel" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The default SBML Level of new SBMLDocument objects.
 
 @return 2]]>
      </doc>
    </method>
    <method name="getDefaultVersion" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The default Version of new SBMLDocument objects.
 
 @return 4]]>
      </doc>
    </method>
    <method name="getElementName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getError" return="org.sbml.jsbml.SBMLError"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[@param i
 @return]]>
      </doc>
    </method>
    <method name="getErrorLog" return="org.sbml.jsbml.SBMLErrorLog"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method returns a collection of all {@link SBMLError}s reflecting
 problems in the overall data structure of this {@link SBMLDocument}.
 
 @return]]>
      </doc>
    </method>
    <method name="getListOfErrors" return="org.sbml.jsbml.SBMLErrorLog"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method returns a collection of all {@link SBMLError}s reflecting
 problems in the overall data structure of this {@link SBMLDocument}.
 
 @return]]>
      </doc>
    </method>
    <method name="getModel" return="org.sbml.jsbml.Model"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the model of this {@link SBMLDocument}.
 
 @return the model of this {@link SBMLDocument}. Can be null if it is not set.]]>
      </doc>
    </method>
    <method name="getNumErrors" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getSBMLDocumentAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the map SBMLDocumentAttributes of this SBMLDocument.]]>
      </doc>
    </method>
    <method name="getSBMLDocumentNamespaces" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the map SBMLDocumentNamespaces of this SBMLDocument.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetModel" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the model of this SBMLDocument is not null.]]>
      </doc>
    </method>
    <method name="nextMetaId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="printErrors"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="printErrors"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.PrintStream"/>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="setConsistencyChecks"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="org.sbml.jsbml.validator.SBMLValidator.CHECK_CATEGORY"/>
      <param name="apply" type="boolean"/>
      <doc>
      <![CDATA[Controls the consistency checks that are performed when
 {@link SBMLDocument#checkConsistency()} is called.
 <p>
 This method works by adding or subtracting consistency checks from the
 set of all possible checks that {@link SBMLDocument#checkConsistency()} knows
 how to perform.  This method may need to be called multiple times in
 order to achieve the desired combination of checks.  The first
 argument (<code>category</code>) in a call to this method indicates the category
 of consistency/error checks that are to be turned on or off, and the
 second argument (<code>apply</code>, a boolean) indicates whether to turn it on
 (value of {@code true}) or off (value of {@code false}).
 <p>
 * The possible categories (values to the argument <code>category</code>) are the
 set of values from the {@link CHECK_CATEGORYH} enumeration.
 The following are the possible choices:
 <p>
 <p>
 <li> {@link GENERAL_CONSISTENCY}:
 Correctness and consistency of specific SBML language constructs.
 Performing this set of checks is highly recommended.  With respect to
 the SBML specification, these concern failures in applying the
 validation rules numbered 2xxxx in the Level&nbsp;2 Versions&nbsp;2, 3
 and&nbsp;4 specifications.
 <p>
 <li> {@link IDENTIFIER_CONSISTENCY}:
 Correctness and consistency of identifiers used for model entities.
 An example of inconsistency would be using a species identifier in a
 reaction rate formula without first having declared the species.  With
 respect to the SBML specification, these concern failures in applying
 the validation rules numbered 103xx in the Level&nbsp;2
 Versions&nbsp;2, 3 and&nbsp;4 specifications.
 <p>
 <li> {@link UNITS_CONSISTENCY}:
 Consistency of measurement units associated with quantities in a
 model.  With respect to the SBML specification, these concern failures
 in applying the validation rules numbered 105xx in the Level&nbsp;2
 Versions&nbsp;2, 3 and&nbsp;4 specifications.
 <p>
 <li> {@link MATHML_CONSISTENCY}:
 Syntax of MathML constructs.  With respect to the SBML specification,
 these concern failures in applying the validation rules numbered 102xx
 in the Level&nbsp;2 Versions&nbsp;2, 3 and&nbsp;4 specifications.
 <p>
 <li> {@link SBO_CONSISTENCY}:
 Consistency and validity of SBO identifiers (if any) used in the
 model.  With respect to the SBML specification, these concern failures
 in applying the validation rules numbered 107xx in the Level&nbsp;2
 Versions&nbsp;2, 3 and&nbsp;4 specifications.
 <p>
 <li> {@link OVERDETERMINED_MODEL}:
 Static analysis of whether the system of equations implied by a model
 is mathematically overdetermined.  With respect to the SBML
 specification, this is validation rule #10601 in the SBML Level&nbsp;2
 Versions&nbsp;2, 3 and&nbsp;4 specifications.
 <p>
 <li> {@link MODELING_PRACTICE}:
 Additional checks for recommended good modeling practice. (These are
 tests performed by libSBML and do not have equivalent SBML validation
 rules.)
 <p>
 <em>By default, all validation checks are applied</em> to the model in
 an {@link SBMLDocument} object <em>unless</em> {@link SBMLDocument#setConsistencyChecks(int, boolean)}  is called to
 indicate that only a subset should be applied.  Further, this default
 (i.e., performing all checks) applies separately to <em>each new
 {@link SBMLDocument} object</em> created.  In other words, each time a model
 is read using {@link SBMLReader#readSBML(String)} , {@link SBMLReader#readSBMLFromString(String)}, a new
 {@link SBMLDocument} is created and for that document, a call to
 {@link SBMLDocument#checkConsistency()} will default to applying all possible checks.
 Calling programs must invoke {@link SBMLDocument#setConsistencyChecks(int, boolean)}  for each such new
 model if they wish to change the consistency checks applied.
 <p>
 @param category a value drawn from JSBML#JSBML.SBML_VALIDATOR_* indicating the
 consistency checking/validation to be turned on or off
 <p>
 @param apply a boolean indicating whether the checks indicated by
 <code>category</code> should be applied or not.
 <p>
 @see SBMLDocument#checkConsistency()]]>
      </doc>
    </method>
    <method name="setLevelAndVersion" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[<p>
 Sets the SBML Level and Version of this {@link SBMLDocument} instance,
 attempting to convert the model as needed.
 </p>
 <p>
 This method is equivalent to calling
 
 <pre>
 setLevelAndVersion(level, version, true);
 </pre>
 
 </p>
 
 @param level
            the desired SBML Level
 @param version
            the desired Version within the SBML Level
 @return true if 'level' and 'version' are valid.
 @see #setLevelAndVersion(int, int, boolean)]]>
      </doc>
    </method>
    <method name="setLevelAndVersion" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <param name="strict" type="boolean"/>
      <doc>
      <![CDATA[<p>
 Sets the SBML Level and Version of this {@link SBMLDocument} instance,
 attempting to convert the model as needed.
 </p><p>
 This method is the principal way in JSBML to convert models between
 Levels and Versions of SBML. Generally, models can be converted upward
 without difficulty (e.g., from SBML Level 1 to Level 2, or from an
 earlier Version of Level 2 to the latest Version of Level 2). Sometimes
 models can be translated downward as well, if they do not use constructs
 specific to more advanced Levels of SBML.
 </p><p>
 Calling this method will not necessarily lead to a successful conversion.
 If the conversion fails, it will be logged in the error list associated
 with this {@link SBMLDocument}. Callers should consult
 {@link #getNumErrors()} to find out if the conversion succeeded
 without problems. For conversions from Level 2 to Level 1, callers can
 also check the Level of the model after calling this method to find out
 whether it is Level 1. (If the conversion to Level 1 failed, the Level of
 this model will be left unchanged.)
 </p>
 
 @param level
            the desired SBML Level
 @param version
            the desired Version within the SBML Level
 @param strict
            boolean indicating whether to check consistency of both the
            source and target model when performing conversion (defaults
            to true)
 @return]]>
      </doc>
    </method>
    <method name="setModel"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="model" type="org.sbml.jsbml.Model"/>
      <doc>
      <![CDATA[Sets the {@link Model} for this {@link SBMLDocument} to the given {@link Model}.
 
 @param model]]>
      </doc>
    </method>
    <method name="setSBMLDocumentAttributes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sBMLDocumentAttributes" type="java.util.Map&lt;java.lang.String, java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the SBMLDocumentAttributes.
 
 @param sBMLDocumentAttributes]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetModel" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the {@link Model} of this {@link SBMLDocument} to null and notifies
 all {@link TreeNodeChangeListener} about changes.
 
 @return {@code true} if calling this method changed the properties
         of this element.]]>
      </doc>
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="URI_NAMESPACE_L1" type="java.lang.String"
      transient="true" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The namespace URI of SBML Level 1 Version 1 and 2.]]>
      </doc>
    </field>
    <field name="URI_NAMESPACE_L2V1" type="java.lang.String"
      transient="true" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The namespace URI of SBML Level 2 Version 1.]]>
      </doc>
    </field>
    <field name="URI_NAMESPACE_L2V2" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The namespace URI of SBML Level 2 Version 2.]]>
      </doc>
    </field>
    <field name="URI_NAMESPACE_L2V3" type="java.lang.String"
      transient="true" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The namespace URI of SBML Level 2 Version 3.]]>
      </doc>
    </field>
    <field name="URI_NAMESPACE_L2V4" type="java.lang.String"
      transient="true" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The namespace URI of SBML Level 2 Version 4.]]>
      </doc>
    </field>
    <field name="URI_NAMESPACE_L3V1Core" type="java.lang.String"
      transient="true" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The namespace URI of SBML Level 3 Version 1.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Represents the 'sbml' root node of a SBML file.
 
 @author Andreas Dr&auml;ger
 @author marine
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SBMLDocument -->
  <!-- start class org.sbml.jsbml.SBMLError -->
  <class name="SBMLError" extends="org.sbml.jsbml.xml.XMLException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SBMLError"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new {@link SBMLError}.]]>
      </doc>
    </constructor>
    <constructor name="SBMLError" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new {@link SBMLError} with the given message.
 
 @param message the error message]]>
      </doc>
    </constructor>
    <method name="getCategory" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the category of the {@link SBMLError}
 
 @return the category of the {@link SBMLError}]]>
      </doc>
    </method>
    <method name="getCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the code of this {@link SBMLError}.
 
 @return the code of this {@link SBMLError}.
 
 @see the appendix on the SBML specifications about validations rules.]]>
      </doc>
    </method>
    <method name="getColumn" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the column where this {@link SBMLError} happened.
 
 @return the column where this {@link SBMLError} happened.]]>
      </doc>
    </method>
    <method name="getExcerpt" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a fragment of the original XML file that induced the error.
 
 @return a fragment of the original XML file that induced the error.]]>
      </doc>
    </method>
    <method name="getLine" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the line where this {@link SBMLError} happened.
 
 @return the line where this {@link SBMLError} happened.]]>
      </doc>
    </method>
    <method name="getLocation" return="org.sbml.jsbml.util.Location"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the location where this {@link SBMLError} happened.
 
 @return the location where this {@link SBMLError} happened.]]>
      </doc>
    </method>
    <method name="getMessageInstance" return="org.sbml.jsbml.util.Message"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the message of the {@link SBMLError}

 @return the message of the {@link SBMLError}]]>
      </doc>
    </method>
    <method name="getSeverity" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the severity of the {@link SBMLError}
 
 @return the severity of the {@link SBMLError}]]>
      </doc>
    </method>
    <method name="isFatal" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true is the {@link SBMLError} severity is of type {@link SEVERITY#FATAL}
 
 @return true is the {@link SBMLError} severity is of type {@link SEVERITY#FATAL}]]>
      </doc>
    </method>
    <method name="isError" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true is the {@link SBMLError} severity is of type {@link SEVERITY#ERROR}
 
 @return true is the {@link SBMLError} severity is of type {@link SEVERITY#ERROR}]]>
      </doc>
    </method>
    <method name="isInfo" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true is the {@link SBMLError} severity is of type {@link SEVERITY#INFO}
 
 @return true is the {@link SBMLError} severity is of type {@link SEVERITY#INFO}]]>
      </doc>
    </method>
    <method name="isWarning" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true is the {@link SBMLError} severity is of type {@link SEVERITY#WARNING}
 
 @return true is the {@link SBMLError} severity is of type {@link SEVERITY#WARNING}]]>
      </doc>
    </method>
    <method name="isInternal" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true is the {@link SBMLError} category is of type <code>internal</code>
 
 @return true is the {@link SBMLError} category is of type <code>internal</code>]]>
      </doc>
    </method>
    <method name="isSystem" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true is the {@link SBMLError} category is of type <code>system</code>
 
 @return true is the {@link SBMLError} category is of type <code>system</code>]]>
      </doc>
    </method>
    <method name="isXML" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true is the {@link SBMLError} category is of type <code>xml</code>
 
 @return true is the {@link SBMLError} category is of type <code>xml</code>]]>
      </doc>
    </method>
    <method name="setCategory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the category of this {@link SBMLError}.
 
 @param category]]>
      </doc>
    </method>
    <method name="setCode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="code" type="int"/>
      <doc>
      <![CDATA[Sets the error code of this {@link SBMLError}.
 
 @param code
 
 @see the appendix on the SBML specifications about validations rules.]]>
      </doc>
    </method>
    <method name="setExcerpt"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="excerpt" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the excerpt of this {@link SBMLError}.
 
 @param excerpt]]>
      </doc>
    </method>
    <method name="setLocation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="location" type="org.sbml.jsbml.util.Location"/>
      <doc>
      <![CDATA[Sets the location of this {@link SBMLError}.
 
 @param location]]>
      </doc>
    </method>
    <method name="setMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="org.sbml.jsbml.util.Message"/>
      <doc>
      <![CDATA[Sets the message of this {@link SBMLError}.
 
 @param messageObj]]>
      </doc>
    </method>
    <method name="setSeverity"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="severity" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the severity of this {@link SBMLError}.
 
 @param severity]]>
      </doc>
    </method>
    <method name="getShortMessage" return="org.sbml.jsbml.util.Message"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setShortMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="shortmessage" type="org.sbml.jsbml.util.Message"/>
    </method>
    <method name="getDetail" return="org.sbml.jsbml.util.Detail"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setDetail"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="detail" type="org.sbml.jsbml.util.Detail"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Representation of errors, warnings and other diagnostics. <br/>
 <br/>
 For more details, see the <a href=
 "http://sbml.org/Software/libSBML/docs/java-api/org/sbml/libsbml/SBMLError.html"
 >libSBML SBMLError javadoc</a>
 
 @author Nicolas Rodriguez
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SBMLError -->
  <!-- start class org.sbml.jsbml.SBMLError.SEVERITY -->
  <class name="SBMLError.SEVERITY" extends="java.lang.Enum&lt;org.sbml.jsbml.SBMLError.SEVERITY&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.sbml.jsbml.SBMLError.SEVERITY[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.sbml.jsbml.SBMLError.SEVERITY"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[@author Nicolas Rodriguez
 @version $Rev: 1447 $
 @since 0.8]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SBMLError.SEVERITY -->
  <!-- start class org.sbml.jsbml.SBMLErrorLog -->
  <class name="SBMLErrorLog" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SBMLErrorLog"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="clearLog"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clears the log.]]>
      </doc>
    </method>
    <method name="getError" return="org.sbml.jsbml.SBMLError"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="long"/>
      <doc>
      <![CDATA[Returns the <i>n</i>th {@link SBMLError} object in this log.
 <p>
 Index <code>n</code> is counted from 0.  Callers should first inquire about the
 number of items in the log by using the
 {@link #getNumErrors()} method.
 Attempts to use an error index number that exceeds the actual number
 of errors in the log will result in a {@code null} being returned.
 <p>
 @param n the index number of the error to retrieve (with 0 being the
 first error).
 <p>
 @return the <i>n</i>th {@link SBMLError} in this log, or {@code null} if <code>n</code> is
 greater than or equal to {@link #getNumErrors()}.
 <p>
 @see #getNumErrors()]]>
      </doc>
    </method>
    <method name="getNumErrors" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of errors that have been logged.
 <p>
 To retrieve individual errors from the log, callers may use
 {@link #getError(long n)}.
 <p>
 @return the number of errors that have been logged.]]>
      </doc>
    </method>
    <method name="getNumFailsWithSeverity" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="severity" type="org.sbml.jsbml.SBMLError.SEVERITY"/>
      <doc>
      <![CDATA[Returns the number of errors that have been logged with the given
 severity code.
 <p>
 LibSBML associates severity levels with every {@link SBMLError} object to
 provide an indication of how serious the problem is.  Severities range
 from informational diagnostics to fatal (irrecoverable) errors.  Given
 an {@link SBMLError} object instance, a caller can interrogate it for its
 severity level using methods such as {@link SBMLError#getSeverity()},
 {@link SBMLError#isFatal()}, and so on.  The present method encapsulates
 iteration and interrogation of all objects in an {@link SBMLErrorLog}, making
 it easy to check for the presence of error objects with specific
 severity levels.
 <p>
 @param severity a value from the enumeration {@link SBMLError#SEVERITY} 
 <p>
 @return a count of the number of errors with the given severity code.
 <p>
 @see #getNumErrors()]]>
      </doc>
    </method>
    <method name="getValidationErrors" return="java.util.List&lt;org.sbml.jsbml.SBMLError&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of {@link SBMLError}
 
 @return the list of {@link SBMLError}]]>
      </doc>
    </method>
    <method name="setFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <doc>
      <![CDATA[Sets the file.
 
 @param file]]>
      </doc>
    </method>
    <method name="setOptions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="options" type="java.util.List&lt;org.sbml.jsbml.util.Option&gt;"/>
      <doc>
      <![CDATA[Sets the list of options.
 
 @param options]]>
      </doc>
    </method>
    <method name="setStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the status.
 
 @param status]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Log of errors and other events encountered during SBML processing.
 
 <p/>
 This class is used both to have the same API as the libSBML equivalent, and also
 to store the information sent by the SBML online validator.
 
 see :<br/>
   - <a href="http://sbml.org/Software/libSBML/docs/java-api/org/sbml/libsbml/SBMLErrorLog.html">libSBML SBMLErrorLog</a>
 <br>
   - <a href="http://sbml.org/Facilities/Documentation/Validator_Web_API">SBML Online Validator web API</a>
 
 @author rodrigue
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SBMLErrorLog -->
  <!-- start class org.sbml.jsbml.SBMLException -->
  <class name="SBMLException" extends="org.sbml.jsbml.xml.XMLException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SBMLException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="SBMLException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param message]]>
      </doc>
    </constructor>
    <constructor name="SBMLException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param message
 @param cause]]>
      </doc>
    </constructor>
    <constructor name="SBMLException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param cause]]>
      </doc>
    </constructor>
    <method name="getCategory" return="org.sbml.jsbml.SBMLException.Category"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getCode" return="org.sbml.jsbml.SBMLException.Code"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getShortMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getType" return="org.sbml.jsbml.SBMLException.Type"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isError" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isFatal" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isInfo" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isInternal" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSystem" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isWarning" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isXML" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="setCategory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="org.sbml.jsbml.SBMLException.Category"/>
      <doc>
      <![CDATA[@param category]]>
      </doc>
    </method>
    <method name="setCode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="code" type="org.sbml.jsbml.SBMLException.Code"/>
      <doc>
      <![CDATA[@param code]]>
      </doc>
    </method>
    <method name="setError"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="error" type="boolean"/>
      <doc>
      <![CDATA[@param error]]>
      </doc>
    </method>
    <method name="setFatal"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fatal" type="boolean"/>
      <doc>
      <![CDATA[@param fatal]]>
      </doc>
    </method>
    <method name="setInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="info" type="boolean"/>
      <doc>
      <![CDATA[@param info]]>
      </doc>
    </method>
    <method name="setInternal"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="internal" type="boolean"/>
      <doc>
      <![CDATA[@param internal]]>
      </doc>
    </method>
    <method name="setShortMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="shortMessage" type="java.lang.String"/>
      <doc>
      <![CDATA[@param shortMessage]]>
      </doc>
    </method>
    <method name="setSystem"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="system" type="boolean"/>
      <doc>
      <![CDATA[@param system]]>
      </doc>
    </method>
    <method name="setWarning"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="warning" type="boolean"/>
      <doc>
      <![CDATA[@param warning]]>
      </doc>
    </method>
    <method name="setXML"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xml" type="boolean"/>
      <doc>
      <![CDATA[@param xml]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class roughly corresponds to libSBML's SBMLError class.
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SBMLException -->
  <!-- start class org.sbml.jsbml.SBMLException.Category -->
  <class name="SBMLException.Category" extends="java.lang.Enum&lt;org.sbml.jsbml.SBMLException.Category&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.sbml.jsbml.SBMLException.Category[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.sbml.jsbml.SBMLException.Category"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Category of this exception.
 
 @author Andreas Dr&auml;ger]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SBMLException.Category -->
  <!-- start class org.sbml.jsbml.SBMLException.Code -->
  <class name="SBMLException.Code" extends="java.lang.Enum&lt;org.sbml.jsbml.SBMLException.Code&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.sbml.jsbml.SBMLException.Code[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.sbml.jsbml.SBMLException.Code"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Error codes.
 
 @author Andreas Dr&auml;ger <a
         href="mailto:andreas.draeger@uni-tuebingen.de"
         >andreas.draeger@uni-tuebingen.de</a>
 @date 2009-10-16]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SBMLException.Code -->
  <!-- start class org.sbml.jsbml.SBMLException.Type -->
  <class name="SBMLException.Type" extends="java.lang.Enum&lt;org.sbml.jsbml.SBMLException.Type&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.sbml.jsbml.SBMLException.Type[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.sbml.jsbml.SBMLException.Type"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[@author Andreas Dr&auml;ger]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SBMLException.Type -->
  <!-- start interface org.sbml.jsbml.SBMLInputConverter -->
  <interface name="SBMLInputConverter"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="addIOProgressListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="org.sbml.jsbml.util.IOProgressListener"/>
      <doc>
      <![CDATA[@param listener]]>
      </doc>
    </method>
    <method name="convertModel" return="org.sbml.jsbml.Model"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="model" type="java.lang.Object"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[@param model
 @return
 @throws Exception]]>
      </doc>
    </method>
    <method name="getNumErrors" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getOriginalModel" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getWarnings" return="java.util.List&lt;org.sbml.jsbml.SBMLException&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param sbmlDocument
 @return]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface allows the implementing class to create a JSBML model based on
 some other data structure. Possible examples are CellDesigner plug-in data
 structures or Objects from libSBML. Other data structures can also be
 considered, such as a conversion of BioPax or CellML into JSBML data
 structures.
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.SBMLInputConverter -->
  <!-- start interface org.sbml.jsbml.SBMLOutputConverter -->
  <interface name="SBMLOutputConverter"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="addIOProgressListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="org.sbml.jsbml.util.IOProgressListener"/>
      <doc>
      <![CDATA[Allows this class to fire events through this event Listener.
 
 @param listener]]>
      </doc>
    </method>
    <method name="getNumErrors" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbase" type="java.lang.Object"/>
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getWriteWarnings" return="java.util.List&lt;org.sbml.jsbml.SBMLException&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbase" type="java.lang.Object"/>
      <doc>
      <![CDATA[@param sbase
 @return]]>
      </doc>
    </method>
    <method name="removeUnneccessaryElements"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="model" type="org.sbml.jsbml.Model"/>
      <param name="orig" type="java.lang.Object"/>
      <doc>
      <![CDATA[Deletes those elements that are not referenced or not needed within the
 model.
 
 @param model
 @param orig]]>
      </doc>
    </method>
    <method name="saveChanges" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="model" type="org.sbml.jsbml.Model"/>
      <param name="object" type="java.lang.Object"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Save the changes in the model.
 
 @param model
 @param object
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="saveChanges" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reaction" type="org.sbml.jsbml.Reaction"/>
      <param name="model" type="java.lang.Object"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param reaction
 @param model
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="writeModel" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="model" type="org.sbml.jsbml.Model"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param model
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="writeSBML" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="java.lang.Object"/>
      <param name="filename" type="java.lang.String"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[@param sbmlDocument
 @param filename
 @return
 @throws SBMLException
 @throws IOException]]>
      </doc>
    </method>
    <method name="writeSBML" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
      <param name="filename" type="java.lang.String"/>
      <param name="programName" type="java.lang.String"/>
      <param name="versionNumber" type="java.lang.String"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[@param object
 @param filename
 @param programName
 @param versionNumber
 @return
 @throws SBMLException
 @throws IOException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface allows the implementing class to convert a JSBML model into
 another data structure. Possible examples are a conversion into libSBML or
 CellDesigner plug-in data structures. Other formats can also be implemented,
 for instance, a BioPax or CellML converter could be implemented.
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.SBMLOutputConverter -->
  <!-- start class org.sbml.jsbml.SBMLReader -->
  <class name="SBMLReader" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <implements name="java.io.Serializable"/>
    <constructor name="SBMLReader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link SBMLReader}.]]>
      </doc>
    </constructor>
    <constructor name="SBMLReader" type="org.sbml.jsbml.SBMLReader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clone constructor.
 
 @param sbmlReader]]>
      </doc>
    </constructor>
    <method name="read" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Factory method for reading SBML from a given {@link File}.
 
 @param file
 @return
 @throws XMLStreamException
 @throws IOException if the file does not exist or cannot be read.]]>
      </doc>
    </method>
    <method name="read" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Factory method for reading SBML from a given {@link File}.
 
 @param file
 @param listener
 @return
 @throws XMLStreamException
 @throws IOException if the file does not exist or cannot be read.]]>
      </doc>
    </method>
    <method name="readSBML" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[@param file
 @param listener
 @return
 @throws IOException 
 @throws XMLStreamException]]>
      </doc>
    </method>
    <method name="read" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.InputStream"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[Factory method for reading SBML from a given {@link InputStream}.
 
 @param stream
 @return
 @throws XMLStreamException]]>
      </doc>
    </method>
    <method name="read" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xml" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[Factory method for reading SBML from given XML code in its {@link String}
 representation.
 
 @param xml
 @return
 @throws FileNotFoundException
 @throws XMLStreamException]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.SBMLReader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="readSBML" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Reads an SBML document from a {@link File}.
 <p>
 This method is identical to {@link SBMLReader#readSBMLFromFile(String filename)} 
 or {@link SBMLReader#readSBML(String filename)}.
 <p>
 If the {@link File} named <code>file</code> does not exist or its content is not
 valid SBML, one {@link Exception} will be thrown.
 <p>
 This methods is not part of the libSBML SBMLReader API.
 <p>
 @param file the file to be read.
 <p>
 @return an {@link SBMLDocument} created from the SBML content.
 @throws XMLStreamException if any other problems prevent to create a {@link SBMLDocument} 
 @throws IOException if the file does not exist or cannot be read.]]>
      </doc>
    </method>
    <method name="readSBML" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Reads an SBML document from a file.
 <p>
 This method is identical to {@link SBMLReader#readSBMLFromFile(String filename)} 
 or {@link SBMLReader#readSBML(File file)}.
 <p>
 If the file named <code>filename</code> does not exist or its content is not
 valid SBML, one {@link Exception} will be thrown.
 <p>
 @param fileName  the name or full pathname of the file to be read.
 <p>
 @return an {@link SBMLDocument} created from the SBML content.
 @throws XMLStreamException if any other problems prevent to create a {@link SBMLDocument} 
 @throws IOException if the file does not exist or cannot be read.]]>
      </doc>
    </method>
    <method name="readSBMLFromFile" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filename" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Reads an SBML document from a file.
 <p>
 This method is identical to {@link SBMLReader#readSBML(String filename)} 
 or {@link SBMLReader#readSBML(File file)}.
 <p>
 If the file named <code>filename</code> does not exist or its content is not
 valid SBML, one {@link Exception} will be thrown.
 <p>
 @param filename  the name or full pathname of the file to be read.
 <p>
 @return an {@link SBMLDocument} created from the SBML content.
 @throws XMLStreamException if any other problems prevent to create a {@link SBMLDocument} 
 @throws IOException if the file does not exist or cannot be read.]]>
      </doc>
    </method>
    <method name="readSBMLFromStream" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.InputStream"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[Reads an SBML document from a data stream.
 <p>
 This methods is not part of the libSBML SBMLReader API.
 <p>
 @param stream the stream of data to be read.
 <p>
 @return an {@link SBMLDocument} created from the SBML content.
 @throws XMLStreamException if any problems prevent to create a {@link SBMLDocument}]]>
      </doc>
    </method>
    <method name="readSBMLFromString" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xml" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[Reads an SBML document from the given XML string.
 
 @param xml a string containing a full SBML model
 @return an {@link SBMLDocument} created from the SBML content.
 @throws XMLStreamException if any problems prevent to create a {@link SBMLDocument}]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Provides methods for reading SBML from files, text strings or streams.
 <p>
 This {@link SBMLReader} is just a wrapper for the actual implementation
 in {@link org.sbml.jsbml.xml.stax.SBMLReader}. 
 
 <p>
 This class is
 provided for compatibility with libSBML and to avoid problems if the 
 internal of jsbml change, so it is preferable to use it instead of directly 
 using {@link org.sbml.jsbml.xml.stax.SBMLReader}.
 
 <p>
 The {@link SBMLReader} class provides the main interface for reading SBML
 content from files and strings.  The methods for reading SBML all return
 an {@link SBMLDocument} object representing the results.
 <p>
 In the case of failures (such as if the SBML contains errors), the errors 
 will be recorded with the {@link SBMLErrorLog}
 object kept in the {@link SBMLDocument} returned by {@link SBMLReader}.  Consequently,
 immediately after calling a method on {@link SBMLReader}, callers should always
 check for errors and warnings using the methods for this purpose
 provided by {@link SBMLDocument}.
 <p>
 
 @author Andreas Dr&auml;ger
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SBMLReader -->
  <!-- start class org.sbml.jsbml.SBMLWriter -->
  <class name="SBMLWriter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <implements name="java.io.Serializable"/>
    <constructor name="SBMLWriter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link SBMLwriter}.]]>
      </doc>
    </constructor>
    <constructor name="SBMLWriter" type="char, short"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link SBMLwriter} that uses the given character for
 indentation of the XML representation of SBML data structures (with the
 given number of such symbols).
 
 @param indentChar
            The symbol to be used to indent new blocks within an XML
            representation of SBML data structures.
 @param indentCount
            The number of indentation characters.]]>
      </doc>
    </constructor>
    <constructor name="SBMLWriter" type="org.sbml.jsbml.SBMLWriter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clone constructor.
 
 @param sbmlWriter]]>
      </doc>
    </constructor>
    <constructor name="SBMLWriter" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link SBMLwriter} for the program with the given name and
 version.
 
 @param programName
            The name of the program that has been used to create an SBML
            {@link String} representation (possibly in a {@link File})
            with the help of JSBML.
 @param programVersion
            The version of the program using JSBML to serialize a model in
            an SBML {@link String} or {@link File}.]]>
      </doc>
    </constructor>
    <constructor name="SBMLWriter" type="java.lang.String, java.lang.String, char, short"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link SBMLwriter} for the program with the given name and
 version that uses the given character for indentation of the XML
 representation of SBML data structures (with the given number of such
 symbols).
 
 @param programName
            The name of the program that has been used to create an SBML
            {@link String} representation (possibly in a {@link File})
            with the help of JSBML.
 @param programVersion
            The version of the program using JSBML to serialize a model in
            an SBML {@link String} or {@link File}.
 @param indentChar
            The symbol to be used to indent new blocks within an XML
            representation of SBML data structures.
 @param indentCount
            The number of indentation characters.]]>
      </doc>
    </constructor>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="file" type="java.io.File"/>
      <param name="indentChar" type="char"/>
      <param name="indentCount" type="short"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes the given SBML document to a {@link File}.
 
 @param sbmlDocument
            the {@link SBMLDocument} to be written
 @param file
            the file where the SBML document is to be written.
 @param indentChar
            The symbol to be used to indent new blocks within an XML
            representation of SBML data structures.
 @param indentCount
            The number of indentation characters.
 @throws XMLStreamException
             if any problems prevent to write the {@link SBMLDocument} as
             XML.
 @throws SBMLException
             if any SBML problems prevent to write the
             {@link SBMLDocument}.
 @throws IOException
             if it is not possible to write to the given file, e.g., due
             to an invalid file name or missing permissions.]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="file" type="java.io.File"/>
      <param name="programName" type="java.lang.String"/>
      <param name="programVersion" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes the given SBML document to a {@link File}.
 <p>
 
 @param sbmlDocument
            the {@link SBMLDocument} to be written
 @param file
            the file where the SBML document is to be written.
 @param programName
            the name of this program (where 'this program' refers to the
            program in which JSBML is embedded, not JSBML itself!)
 @param programVersion
            the version of this program (where 'this program' refers to
            the program in which JSBML is embedded, not JSBML itself!)
 
 @throws XMLStreamException
             if any problems prevent to write the {@link SBMLDocument} as
             XML.
 @throws SBMLException
             if any SBML problems prevent to write the
             {@link SBMLDocument}.
 @throws IOException
             if it is not possible to write to the given file, e.g., due
             to an invalid file name or missing permissions.]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="file" type="java.io.File"/>
      <param name="programName" type="java.lang.String"/>
      <param name="programVersion" type="java.lang.String"/>
      <param name="indentChar" type="char"/>
      <param name="indentCount" type="short"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes the given SBML document to a {@link File}.
 <p>
 
 @param sbmlDocument
            the {@link SBMLDocument} to be written
 @param file
            the file where the SBML document is to be written.
 @param programName
            the name of this program (where 'this program' refers to the
            program in which JSBML is embedded, not JSBML itself!)
 @param programVersion
            the version of this program (where 'this program' refers to
            the program in which JSBML is embedded, not JSBML itself!)
 @param indentChar
            The symbol to be used to indent new blocks within an XML
            representation of SBML data structures.
 @param indentCount
            The number of indentation characters.
 
 @throws XMLStreamException
             if any problems prevent to write the {@link SBMLDocument} as
             XML.
 @throws SBMLException
             if any SBML problems prevent to write the
             {@link SBMLDocument}.
 @throws IOException
             if it is not possible to write to the given file, e.g., due
             to an invalid file name or missing permissions.
 @see {@link #write(SBMLDocument, File, String, String)}]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="stream" type="java.io.OutputStream"/>
      <param name="indentChar" type="char"/>
      <param name="indentCount" type="short"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the given {@link SBMLDocument} to the {@link OutputStream}.
 
 @param sbmlDocument the SBML document to be written
 @param stream the stream object where the SBML is to be written.
 @param indentChar The symbol to be used to indent new blocks within an XML
            representation of SBML data structures.
 @param indentCount The number of indentation characters.
 @throws XMLStreamException  if any problems prevent to write the {@link SBMLDocument} as
             XML.
 @throws SBMLException  if any SBML problems prevent to write the
             {@link SBMLDocument}.]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="stream" type="java.io.OutputStream"/>
      <param name="programName" type="java.lang.String"/>
      <param name="programVersion" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the given {@link SBMLDocument} to the {@link OutputStream}.
 
 @param sbmlDocument
            the SBML document to be written
 @param stream
            the stream object where the SBML is to be written.
 @param programName
            the name of this program (where 'this program' refers to the
            program in which JSBML is embedded, not JSBML itself!)
 @param programVersion
            the version of this program (where 'this program' refers to
            the program in which JSBML is embedded, not JSBML itself!)
 
 @throws XMLStreamException
             if any problems prevent to write the {@link SBMLDocument} as
             XML.
 @throws SBMLException
             if any SBML problems prevent to write the
             {@link SBMLDocument}.]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="stream" type="java.io.OutputStream"/>
      <param name="programName" type="java.lang.String"/>
      <param name="programVersion" type="java.lang.String"/>
      <param name="indentChar" type="char"/>
      <param name="indentCount" type="short"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the given {@link SBMLDocument} to the {@link OutputStream}.
 
 @param sbmlDocument
            the SBML document to be written
 @param stream
            the stream object where the SBML is to be written.
 @param programName
            the name of this program (where 'this program' refers to the
            program in which JSBML is embedded, not JSBML itself!)
 @param programVersion
            the version of this program (where 'this program' refers to
            the program in which JSBML is embedded, not JSBML itself!)
 @param indentChar
            The symbol to be used to indent new blocks within an XML
            representation of SBML data structures.
 @param indentCount
            The number of indentation characters.
            
 @throws XMLStreamException
             if any problems prevent to write the {@link SBMLDocument} as
             XML.
 @throws SBMLException
             if any SBML problems prevent to write the
             {@link SBMLDocument}.
 @see #write(SBMLDocument, OutputStream, String, String)]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="fileName" type="java.lang.String"/>
      <param name="indentChar" type="char"/>
      <param name="indentCount" type="short"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="FileNotFoundException" type="java.io.FileNotFoundException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the given {@link SBMLDocument} to file name.
 
 @param sbmlDocument
            the {@link SBMLDocument} to be written
 @param fileName
            the name or full pathname of the file where the SBML document
            is to be written.
 @param indentChar
            The symbol to be used to indent new blocks within an XML
            representation of SBML data structures.
 @param indentCount
            The number of indentation characters.
 @throws XMLStreamException
             if any problems prevent to write the {@link SBMLDocument} as
             XML.
 @throws FileNotFoundException
             if the file does not exist or cannot be created.
 @throws SBMLException
             if any SBML problems prevent to write the
             {@link SBMLDocument}.]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="fileName" type="java.lang.String"/>
      <param name="programName" type="java.lang.String"/>
      <param name="programVersion" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="FileNotFoundException" type="java.io.FileNotFoundException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the given {@link SBMLDocument} to file name.
 <p>
 
 @param sbmlDocument
            the {@link SBMLDocument} to be written
 @param fileName
            the name or full pathname of the file where the SBML document
            is to be written.
 @param programName
            the name of this program (where 'this program' refers to the
            program in which JSBML is embedded, not JSBML itself!)
 @param programVersion
            the version of this program (where 'this program' refers to
            the program in which JSBML is embedded, not JSBML itself!)
 
 @throws FileNotFoundException
             if the file does not exist or cannot be created.
 @throws XMLStreamException
             if any problems prevent to write the {@link SBMLDocument} as
             XML.
 @throws SBMLException
             if any SBML problems prevent to write the
             {@link SBMLDocument}.]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="fileName" type="java.lang.String"/>
      <param name="programName" type="java.lang.String"/>
      <param name="programVersion" type="java.lang.String"/>
      <param name="indentChar" type="char"/>
      <param name="indentCount" type="short"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="FileNotFoundException" type="java.io.FileNotFoundException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the given {@link SBMLDocument} to file name.
 <p>
 
 @param sbmlDocument
            the {@link SBMLDocument} to be written
 @param fileName
            the name or full pathname of the file where the SBML document
            is to be written.
 @param programName
            the name of this program (where 'this program' refers to the
            program in which JSBML is embedded, not JSBML itself!)
 @param programVersion
            the version of this program (where 'this program' refers to
            the program in which JSBML is embedded, not JSBML itself!)
 @param indentChar
            The symbol to be used to indent new blocks within an XML
            representation of SBML data structures.
 @param indentCount
            The number of indentation characters.
            
 @throws FileNotFoundException
             if the file does not exist or cannot be created.
 @throws XMLStreamException
             if any problems prevent to write the {@link SBMLDocument} as
             XML.
 @throws SBMLException
             if any SBML problems prevent to write the
             {@link SBMLDocument}.
 @see #write(SBMLDocument, String, String, String)]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.SBMLWriter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="getIndentationChar" return="char"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gives the symbol that is used to indent the SBML output for a better
 structure and to improve human-readability.
 
 @return the character to be used for indentation.]]>
      </doc>
    </method>
    <method name="getIndentationCount" return="short"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gives the number of indent symbols that are inserted in a line to better
 structure the SBML output.
 
 @return the number of characters used for indentation in SBML
         serializations.]]>
      </doc>
    </method>
    <method name="getProgramName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the name of the program that uses JSBML for writing SBML data
         objects.
 @see #setProgramName(String)]]>
      </doc>
    </method>
    <method name="getProgramVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the version of the program that uses JSBML for writing SBML data
         objects.
 @see #setProgramVersion(String)]]>
      </doc>
    </method>
    <method name="isSetProgramName" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Check if a program name has been defined for this {@link SBMLWriter}.
 
 @return]]>
      </doc>
    </method>
    <method name="isSetProgramVersion" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Check if a program version has been defined for this {@link SBMLWriter}.
 
 @return]]>
      </doc>
    </method>
    <method name="setIndentationChar"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="indentChar" type="char"/>
      <doc>
      <![CDATA[Influences the way how SBML data structures are represented in XML.
 
 @param indentChar
            The symbol to be used to indent new blocks within an XML
            representation of SBML data structures.]]>
      </doc>
    </method>
    <method name="setIndentationCount"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="indentCount" type="short"/>
      <doc>
      <![CDATA[Influences the way how SBML data structures are represented in XML.
 
 @param indentCount
            The number of indentation characters in the XML representation
            of SBML data structures.]]>
      </doc>
    </method>
    <method name="setProgramName" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the name of this program, i.e., the program that is about to
 write out the {@link SBMLDocument}.
 <p>
 If the program name and version are set (see
 {@link #setProgramVersion(String version)}), the
 following XML comment, intended for human consumption, will be written
 at the beginning of the document:
 <div class='fragment'><pre>
           &lt;!-- Created by &lt;program name&gt; version &lt;program version&gt;
           on yyyy-MM-dd HH:mm with {@link JSBML} version &lt;{@link JSBML} version&gt;. --&gt;
        </pre></div>
 <p>
 @param name the name of this program (where 'this program' refers to
 the program in which JSBML is embedded, not JSBML itself!)
 <p>
 @return integer value indicating success/failure of the
 function.  The possible values
 returned by this function are:
 <li> {@link  JSBML.OPERATION_SUCCESS}
 <p>
 @see #setProgramVersion(String version)]]>
      </doc>
    </method>
    <method name="setProgramVersion" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="version" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the version of this program, i.e., the program that is about to
 write out the {@link SBMLDocument}.
 <p>
 If the program version and name are set (see
 {@link setProgramName(String name)}), the
 following XML comment, intended for human consumption, will be written
 at the beginning of the document: <div class='fragment'><pre>&lt;!-- Created by &lt;program
 name&gt; version &lt;program version&gt; on yyyy-MM-dd HH:mm with {@link JSBML}
 version &lt;{@link JSBML} version&gt;. --&gt; </pre></div>
 <p>
 @param version the version of this program (where 'this program'
 refers to the program in which JSBML is embedded, not JSBML itself!)
 <p>
 @return integer value indicating success/failure of the
 function.  The possible values
 returned by this function are:
 <li> {@link  JSBML.OPERATION_SUCCESS}
 <p>
 @see #setProgramName(String name)]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetProgramName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetProgramVersion"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="file" type="java.io.File"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes the given SBML document to a {@link File}. If specified in the
 constructor of this {@link SBMLWriter}, the {@link #programName} and
 {@link #programVersion} of the calling program will be made persistent in
 the resulting SBML {@link File}.
 
 @param sbmlDocument
            the {@link SBMLDocument} to be written
 @param file
            the file where the SBML document is to be written.
 @throws XMLStreamException
             if any problems prevent to write the {@link SBMLDocument} as
             XML.
 @throws SBMLException
             if any SBML problems prevent to write the
             {@link SBMLDocument}.
 @throws IOException
             if it is not possible to write to the given file, e.g., due
             to an invalid file name or missing permissions.]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="stream" type="java.io.OutputStream"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the given SBML document to the {@link OutputStream}. If specified
 in the constructor of this {@link SBMLWriter}, the {@link #programName}
 and {@link #programVersion} of the calling program will be made
 persistent in the resulting SBML representation.
 
 @param sbmlDocument
            the SBML document to be written
 @param stream
            the stream object where the SBML is to be written.
 
 @throws XMLStreamException
             if any problems prevent to write the {@link SBMLDocument} as
             XML.
 @throws SBMLException
             if any SBML problems prevent to write the
             {@link SBMLDocument}.]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="fileName" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="FileNotFoundException" type="java.io.FileNotFoundException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the given {@link SBMLDocument} to file name. If specified in the
 constructor of this {@link SBMLWriter}, the {@link #programName} and
 {@link #programVersion} of the calling program will be made persistent in
 the resulting SBML {@link File}.
 <p>
 
 @param sbmlDocument
            the {@link SBMLDocument} to be written
 @param fileName
            the name or full pathname of the file where the SBML document
            is to be written.
            <p>
 @throws FileNotFoundException
             if the file does not exist or cannot be created.
 @throws XMLStreamException
             if any problems prevent to write the {@link SBMLDocument} as
             XML.
 @throws SBMLException
             if any SBML problems prevent to write the
             {@link SBMLDocument}.]]>
      </doc>
    </method>
    <method name="writeSBML"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="file" type="java.io.File"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes the given SBML document to a {@link File}. If specified in the
 constructor of this {@link SBMLWriter}, the {@link #programName} and
 {@link #programVersion} of the calling program will be made persistent in
 the resulting SBML {@link File}.
 
 @param sbmlDocument
            the SBML document to be written
 @param file
            the file where the SBML document is to be written.
 
 @throws XMLStreamException
             if any problems prevent to write the {@link SBMLDocument} as
             XML.
 @throws SBMLException
             if any SBML problems prevent to write the
             {@link SBMLDocument}.
 @throws IOException
             if it is not possible to write to the given file, e.g., due
             to an invalid file name or missing permissions.]]>
      </doc>
    </method>
    <method name="writeSBMLToFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="fileName" type="java.lang.String"/>
      <exception name="FileNotFoundException" type="java.io.FileNotFoundException"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the given SBML document to file name. If specified in the
 constructor of this {@link SBMLWriter}, the {@link #programName} and
 {@link #programVersion} of the calling program will be made persistent in
 the resulting SBML {@link File}.
 <p>
 
 @param sbmlDocument
            the SBML document to be written
 @param fileName
            the name or full pathname of the file where the SBML document
            is to be written.
 
 @throws FileNotFoundException
             if the file does not exist or cannot be created.
 @throws XMLStreamException
             if any problems prevent to write the {@link SBMLDocument} as
             XML.
 @throws SBMLException
             if any SBML problems prevent to write the
             {@link SBMLDocument}.]]>
      </doc>
    </method>
    <method name="writeSBMLToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the given SBML document to an in-memory {@link String} and returns
 it. If specified in the constructor of this {@link SBMLWriter}, the
 {@link #programName} and {@link #programVersion} of the calling program
 will be made persistent in the resulting SBML {@link String}.
 <p>
 
 @param sbmlDocument
            the SBML document to be written
            <p>
 @return the string representing the SBML document as XML.
 @throws XMLStreamException
             if any problems prevent to write the {@link SBMLDocument} as
             XML.
 @throws SBMLException
             if any SBML problems prevent to write the
             {@link SBMLDocument}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Provides methods for writing SBML to files, text strings or streams.
 <p>
 This {@link SBMLWriter} is just a wrapper for the actual implementation
 in {@link org.sbml.jsbml.xml.stax.SBMLWriter}. 
 <p>
 This class is
 provided for compatibility with libSBML and to avoid problems if the 
 internal of jsbml change, so it is preferable to use it instead of directly 
 using {@link org.sbml.jsbml.xml.stax.SBMLWriter}.
 
 The {@link SBMLWriter} class is the converse of {@link SBMLReader}, and provides the
 main interface for serializing SBML models into XML and writing the
 result to files and text strings.  The methods for writing SBML all take
 an {@link SBMLDocument} object and a destination.
 
 @author Andreas Dr&auml;ger
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SBMLWriter -->
  <!-- start class org.sbml.jsbml.SBO -->
  <class name="SBO" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SBO"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="checkTerm" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Checks the format of the given SBO integer portion.
 
 @param sboTerm
 @return true if sboTerm is in the range {0,.., 9999999}, false otherwise.]]>
      </doc>
    </method>
    <method name="checkTerm" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="java.lang.String"/>
      <doc>
      <![CDATA[Checks the format of the given SBO string.
 
 @param sboTerm
 @return true if sboTerm is in the correct format (a zero-padded, seven
         digit string), false otherwise.]]>
      </doc>
    </method>
    <method name="convertAlias2SBO" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns an SBO id corresponding to the given alias.
 
 @param alias
 @return an SBO id corresponding to the given alias.]]>
      </doc>
    </method>
    <method name="convertSBO2Alias" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboterm" type="int"/>
      <doc>
      <![CDATA[Returns an alias corresponding to the given SBO id.
 
 @param sboterm
 @return an alias corresponding to the given SBO id.]]>
      </doc>
    </method>
    <method name="getAntisenseRNA" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SBO id for antisense RNA.
 
 @return the SBO id for antisense RNA.]]>
      </doc>
    </method>
    <method name="getBindingActivator" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getCatalysis" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getCatalyst" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getCatalyticActivator" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getCompetetiveInhibitor" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getCompleteInhibitor" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getComplex" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getConservationLaw" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getContinuousFramework" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getDefaultPossibleEnzymes" return="java.util.Set&lt;java.lang.Integer&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a list of molecule types accepted as an enzyme by
 default. These are:
 <ul type="disk">
 <li>ANTISENSE_RNA</li>
 <li>SIMPLE_MOLECULE</li>
 <li>UNKNOWN</li>
 <li>COMPLEX</li>
 <li>TRUNCATED</li>
 <li>GENERIC</li>
 <li>RNA</li>
 <li>RECEPTOR</li>
 </ul>
 
 @return]]>
      </doc>
    </method>
    <method name="getDiscreteFramework" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getDrug" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getEmptySet" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getEntity" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getEnzymaticCatalysis" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getEssentialActivator" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getEvent" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getFunctionalCompartment" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getFunctionalEntity" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getGene" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getGeneCodingRegion" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getGeneric" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getHillEquation" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getInhibitor" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getInteraction" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getIon" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getIonChannel" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getKineticConstant" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getLogicalFramework" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getMaterialEntity" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getMathematicalExpression" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getMessengerRNA" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getModellingFramework" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getModifier" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getNonCompetetiveInhibitor" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getNonEssentialActivator" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getOntology" return="Ontology"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Grants access to the underlying {@link Ontology} form BioJava.
 @return]]>
      </doc>
    </method>
    <method name="getPartialInhibitor" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return The SBO term identifier corresponding to the {@link Term} with
         the name "partial inhibitor".]]>
      </doc>
    </method>
    <method name="getParticipant" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getParticipantRole" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getPhenotype" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getPhysicalCompartment" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getPhysicalParticipant" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getPossibleEnzymes" return="java.util.Set&lt;java.lang.Integer&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="types" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Creates and returns a list of molecule types that are accepted as an
 enzyme for the given type names.
 
 @param types
 @return]]>
      </doc>
    </method>
    <method name="getProduct" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getProtein" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getQuantitativeParameter" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getRateLaw" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getReactant" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getReceptor" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getRNA" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getSimpleMolecule" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getSpecificActivator" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getStateTransition" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getSteadyStateExpression" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getStimulator" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getTerm" return="org.sbml.jsbml.SBO.Term"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Gets the SBO term with the id 'sboTerm'.
 
 @jsbml.warning The methods will throw NoSuchElementException if the id is not found.
 
 @param sboTerm the id of the SBO term to search for.
 @return the SBO term with the id 'sboTerm'.
 @throws NoSuchElementException if the id is not found.]]>
      </doc>
    </method>
    <method name="getTerm" return="org.sbml.jsbml.SBO.Term"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets the SBO term with the id 'sboTerm'.
 
 <p> The id need to be of the form 'SBO:XXXXXXX' where X is a digit number.
 
 @jsbml.warning The methods will throw NoSuchElementException if the id is not found or null.
 
 @param sboTerm the id of the SBO term to search for.
 @return the SBO term with the id 'sboTerm'.
 @throws NoSuchElementException if the id is not found or null.]]>
      </doc>
    </method>
    <method name="getSBORoot" return="org.sbml.jsbml.SBO.Term"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the root element of the SBO Ontology (SBO:0000000).
 
 @return the root element of the SBO Ontology (SBO:0000000).]]>
      </doc>
    </method>
    <method name="getTerms" return="java.util.Set&lt;org.sbml.jsbml.SBO.Term&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the set of terms of the SBO Ontology.
 
 <p> This methods return only Term object and no Triple object that represent the
 relationship between terms. If you want to access the full set of {@link org.biojava.ontology.Term}
 containing also the {@link org.biojava.ontology.Triple}, use {@link SBO#getOntology()} 
 to get the underlying biojava object.
 
 @return the set of terms of the SBO Ontology.]]>
      </doc>
    </method>
    <method name="getTranscription" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SBO id corresponding to the alias 'TRANSCRIPTION'
 
 @return the SBO id corresponding to the alias 'TRANSCRIPTION']]>
      </doc>
    </method>
    <method name="getTranscriptionalActivation" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SBO id corresponding to the alias 'TRANSCRIPTIONAL_ACTIVATION'
 
 @return the SBO id corresponding to the alias 'TRANSCRIPTIONAL_ACTIVATION']]>
      </doc>
    </method>
    <method name="getTranscriptionalInhibitor" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SBO id corresponding to the alias 'TRANSCRIPTIONAL_INHIBITION'
 
 @return the SBO id corresponding to the alias 'TRANSCRIPTIONAL_INHIBITION']]>
      </doc>
    </method>
    <method name="getTransitionOmitted" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SBO id corresponding to the alias 'KNOWN_TRANSITION_OMITTED'
 
 @return the SBO id corresponding to the alias 'KNOWN_TRANSITION_OMITTED']]>
      </doc>
    </method>
    <method name="getTranslation" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SBO id corresponding to the alias 'TRANSLATION'
 
 @return the SBO id corresponding to the alias 'TRANSLATION']]>
      </doc>
    </method>
    <method name="getTranslationalActivation" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SBO id corresponding to the alias 'TRANSLATIONAL_ACTIVATION'
 
 @return the SBO id corresponding to the alias 'TRANSLATIONAL_ACTIVATION']]>
      </doc>
    </method>
    <method name="getTranslationalInhibitor" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SBO id corresponding to the alias 'TRANSLATIONAL_INHIBITION'
 
 @return the SBO id corresponding to the alias 'TRANSLATIONAL_INHIBITION']]>
      </doc>
    </method>
    <method name="getTransport" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SBO id corresponding to the alias 'TRANSPORT'
 
 @return the SBO id corresponding to the alias 'TRANSPORT']]>
      </doc>
    </method>
    <method name="getTrigger" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SBO id corresponding to the alias 'TRIGGER'
 
 @return the SBO id corresponding to the alias 'TRIGGER']]>
      </doc>
    </method>
    <method name="getTriples" return="java.util.Set&lt;org.sbml.jsbml.SBO.Triple&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="subject" type="org.sbml.jsbml.SBO.Term"/>
      <param name="predicate" type="org.sbml.jsbml.SBO.Term"/>
      <param name="object" type="org.sbml.jsbml.SBO.Term"/>
      <doc>
      <![CDATA[Returns a set of Triple which match the supplied subject, predicate and object.
  
 <p>If any of the parameters of this method are null, they are treated as wildcards.
 
 <pre> for example : 
    getTriples(SBO.getTerm("SBO:0000002"), SBO.getTerm("is_a"), null);
    will returned all the parent Terms of SBO:0000002
 
    getTriples(null, SBO.getTerm("is_a"), SBO.getTerm(188));
    will returned all the children Terms of SBO:0000188
  
  <p>
 @param subject the subject to search for, or null.
 @param predicate the relationship to search for, or null. 
 @param object the object to search for, or null.
 @return a set of Triple which match the supplied subject, predicate and object.
 
 @see org.biojava.ontology.Ontology#getTriples(org.biojava.ontology.Term,
      org.biojava.ontology.Term, org.biojava.ontology.Term)]]>
      </doc>
    </method>
    <method name="getTruncated" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SBO id corresponding to the alias 'TRUNCATED'
 
 @return the SBO id corresponding to the alias 'TRUNCATED']]>
      </doc>
    </method>
    <method name="getUnknownMolecule" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SBO id corresponding to the alias 'UNKNOWN'
 
 @return the SBO id corresponding to the alias 'UNKNOWN']]>
      </doc>
    </method>
    <method name="getUnknownTransition" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SBO id corresponding to the alias 'UNKNOWN_TRANSITION'
 
 @return the SBO id corresponding to the alias 'UNKNOWN_TRANSITION']]>
      </doc>
    </method>
    <method name="intToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns the integer as a correctly formatted SBO string. If the sboTerm
 is not in the correct range ({0,.., 9999999}), an empty string is
 returned.
 
 @param sboTerm
 @return the given integer sboTerm as a zero-padded seven digit string.]]>
      </doc>
    </method>
    <method name="isAntisenseRNA" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isBindingActivator" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isCatalyst" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isCatalyticActivator" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isChildOf" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <param name="parent" type="int"/>
      <doc>
      <![CDATA[Checks whether the given sboTerm is a member of the SBO subgraph rooted
 at parent.
 
 @param sboTerm
            An SBO term.
 @param parent
            An SBO term that is the root of a certain subgraph within the
            SBO.
 @return true if the subgraph of the SBO rooted at the term parent
         contains a term with the id corresponding to sboTerm.]]>
      </doc>
    </method>
    <method name="isCompetetiveInhibitor" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isCompleteInhibitor" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isComplex" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isConservationLaw" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns true if the term is-a conservation law, false otherwise
 
 @param sboTerm
 @return true if the term is-a conservation law, false otherwise]]>
      </doc>
    </method>
    <method name="isContinuousFramework" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns true if the term is-a continuous framework, false otherwise
 
 @param sboTerm
 @return true if the term is-a continuous framework, false otherwise]]>
      </doc>
    </method>
    <method name="isDiscreteFramework" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns true if the term is-a discrete framework, false otherwise
 
 @param sboTerm
 @return true if the term is-a discrete framework, false otherwise]]>
      </doc>
    </method>
    <method name="isDrug" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isEmptySet" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isEntity" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns true if the term is-a Entity, false otherwise
 
 @param sboTerm
 @return true if the term is-a Entity, false otherwise]]>
      </doc>
    </method>
    <method name="isEnzymaticCatalysis" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isEssentialActivator" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isEvent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-an Event, false otherwise]]>
      </doc>
    </method>
    <method name="isFunctionalCompartment" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-a functional compartment, false otherwise]]>
      </doc>
    </method>
    <method name="isFunctionalEntity" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-a functional entity, false otherwise]]>
      </doc>
    </method>
    <method name="isGene" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isGeneCodingRegion" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns true if the sboTerm stands for a gene coding region, false
         otherwise
         
 @param sboTerm
 @return true if the sboTerm stands for a gene coding region, false
         otherwise]]>
      </doc>
    </method>
    <method name="isGeneOrGeneCodingRegion" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns true if the sboTerm stands for a gene coding region or a gene,
         false otherwise
 
 @param sboTerm
 @return true if the sboTerm stands for a gene coding region or a gene,
         false otherwise]]>
      </doc>
    </method>
    <method name="isGeneric" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isHillEquation" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isInhibitor" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isInteraction" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-an interaction, false otherwise]]>
      </doc>
    </method>
    <method name="isIon" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isIonChannel" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isKineticConstant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-a kinetic constant, false otherwise]]>
      </doc>
    </method>
    <method name="isLogicalFramework" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-a logical framework, false otherwise]]>
      </doc>
    </method>
    <method name="isMaterialEntity" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-a material entity, false otherwise]]>
      </doc>
    </method>
    <method name="isMathematicalExpression" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-a mathematical expression, false otherwise]]>
      </doc>
    </method>
    <method name="isMessengerRNA" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isModellingFramework" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-a modelling framework, false otherwise]]>
      </doc>
    </method>
    <method name="isModifier" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-a modifier, false otherwise]]>
      </doc>
    </method>
    <method name="isNonCompetetiveInhibitor" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isNonEssentialActivator" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isObsolete" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking whether the SBO term is obsolete.
 
 @param sboTerm
 @return true if the term is-an obsolete term, false otherwise]]>
      </doc>
    </method>
    <method name="isPartialInhibitor" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isParticipant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO. This term
 is actually obsolete.
 
 @param sboTerm
 @return true if the term is-a participant, false otherwise]]>
      </doc>
    </method>
    <method name="isParticipantRole" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-a participant role, false otherwise]]>
      </doc>
    </method>
    <method name="isPhenotype" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isPhysicalCompartment" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isPhysicalParticipant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO. Obsolete
 term.
 
 @param sboTerm
 @return true if the term is-a physical participant, false otherwise]]>
      </doc>
    </method>
    <method name="isProduct" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-a product, false otherwise]]>
      </doc>
    </method>
    <method name="isProtein" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isQuantitativeParameter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-a quantitative parameter, false otherwise]]>
      </doc>
    </method>
    <method name="isRateLaw" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-a rate law, false otherwise]]>
      </doc>
    </method>
    <method name="isReactant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-a reactant, false otherwise]]>
      </doc>
    </method>
    <method name="isReceptor" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isRNA" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isRNAOrMessengerRNA" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isSimpleMolecule" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isSpecificActivator" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isStateTransition" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isSteadyStateExpression" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Function for checking the SBO term is from correct part of SBO.
 
 @param sboTerm
 @return true if the term is-a steady state expression, false otherwise]]>
      </doc>
    </method>
    <method name="isStimulator" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isTranscription" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isTranscriptionalActivation" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isTranscriptionalInhibitor" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isTransitionOmitted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isTranslation" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isTranslationalActivation" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isTranslationalInhibitor" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isTransport" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isTrigger" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isTruncated" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isUnknownMolecule" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isUnknownTransition" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} if the given term identifier comes from the stated branch of SBO.
 <p>
 @param sboTerm
 @return {@code true} if <code>term</code> is-a SBO <em>'product'</em>, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Tests method.
 
 @param args no argument are processed.]]>
      </doc>
    </method>
    <method name="sboNumberString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="int"/>
      <doc>
      <![CDATA[Creates and returns a 7 digit SBO number for the given {@link Term} identifier (if
 this is a valid identifier). The returned {@link String} will not contain the
 SBO prefix.
 
 @param sboTerm
 @return a 7 digit SBO number for the given {@link Term} identifier (if
 this is a valid identifier). The returned {@link String} will not contain the
 SBO prefix.
 @throws IllegalArgumentException if the given value is no valid SBO term number.]]>
      </doc>
    </method>
    <method name="stringToInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sboTerm" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the string as a correctly formatted SBO integer portion.
 
 @param sboTerm
 @return the given string sboTerm as an integer. If the sboTerm is not in
         the correct format (a zero-padded, seven digit string), -1 is
         returned.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Methods for interacting with Systems Biology Ontology (SBO) terms. 
 
 <p>This class
 uses the BioJava classes for working with ontologies and contains static
 classes to represent single {@link Term}s and {@link Triple}s of subject,
 predicate, and object, where each of these three entities is again an
 instance of {@link Term}. The classes {@link Term} and {@link Triple}
 basically wrap the underlying functions from BioJava, but the original
 {@link Object}s can be accessed via dedicated get methods. Furthermore, the
 {@link Ontology} from BioJava, which is used in this class, can also be
 obtained using the method {@link #getOntology()}.
 
 <p>
 The values of 'id' attributes on SBML components allow the components to
 be cross-referenced within a model. The values of 'name' attributes on
 SBML components provide the opportunity to assign them meaningful labels
 suitable for display to humans.  The specific identifiers and labels
 used in a model necessarily must be unrestricted by SBML, so that
 software and users are free to pick whatever they need.  However, this
 freedom makes it more difficult for software tools to determine, without
 additional human intervention, the semantics of models more precisely
 than the semantics provided by the SBML object classes defined in other
 sections of this document.  For example, there is nothing inherent in a
 parameter with identifier <code>k</code> that would indicate to a
 software tool it is a first-order rate constant (if that's what
 <code>k</code> happened to be in some given model).  However, one may
 need to convert a model between different representations (e.g.,
 Henri-Michaelis-Menten versus elementary steps), or to use it with
 different modeling approaches (discrete or continuous).  One may also
 need to relate the model components with other description formats such
 as SBGN (<a target='_blank'
 href='http://www.sbgn.org/'>http://www.sbgn.org/</a>) using deeper
 semantics.  Although an advanced software tool <em>might</em> be able to
 deduce the semantics of some model components through detailed analysis
 of the kinetic rate expressions and other parts of the model, this
 quickly becomes infeasible for any but the simplest of models.
 <p>
 An approach to solving this problem is to associate model components
 with terms from carefully curated controlled vocabularies (CVs).  This
 is the purpose of the optional 'sboTerm' attribute provided on the SBML
 class {@link SBase}.  The 'sboTerm' attribute always refers to terms belonging
 to the Systems Biology Ontology (SBO).
 <p>
 <h2>Use of {@link SBO}</h2>
 <p>
 Labeling model components with terms from shared controlled vocabularies
 allows a software tool to identify each component using identifiers that
 are not tool-specific.  An example of where this is useful is the desire
 by many software developers to provide users with meaningful names for
 reaction rate equations.  Software tools with editing interfaces
 frequently provide these names in menus or lists of choices for users.
 However, without a standardized set of names or identifiers shared
 between developers, a given software package cannot reliably interpret
 the names or identifiers of reactions used in models written by other
 tools.
 <p>
 The first solution that might come to mind is to stipulate that certain
 common reactions always have the same name (e.g., 'Michaelis-Menten'), but
 this is simply impossible to do: not only do humans often disagree on
 the names themselves, but it would not allow for correction of errors or
 updates to the list of predefined names except by issuing new releases
 of the SBML specification&mdash;to say nothing of many other limitations
 with this approach.  Moreover, the parameters and variables that appear
 in rate expressions also need to be identified in a way that software
 tools can interpret mechanically, implying that the names of these
 entities would also need to be regulated.
 <p>
 The Systems Biology Ontology (SBO) provides terms for identifying most
 elements of SBML. The relationship implied by an 'sboTerm' on an SBML
 model component is <em>is-a</em> between the characteristic of the
 component meant to be described by SBO on this element and the SBO
 term identified by the value of the 'sboTerm'. By adding SBO term
 references on the components of a model, a software tool can provide
 additional details using independent, shared vocabularies that can
 enable <em>other</em> software tools to recognize precisely what the
 component is meant to be.  Those tools can then act on that information.
 For example, if the SBO identifier <code>'SBO:0000049'</code> is assigned
 to the concept of 'first-order irreversible mass-action kinetics,
 continuous framework', and a given {@link KineticLaw} object in a model has an
 'sboTerm' attribute with this value, then regardless of the identifier
 and name given to the reaction itself, a software tool could use this to
 inform users that the reaction is a first-order irreversible mass-action
 reaction.  This kind of reverse engineering of the meaning of reactions
 in a model would be difficult to do otherwise, especially for more
 complex reaction types.
 <p>
 The presence of SBO labels on {@link Compartment}, {@link Species}, and {@link Reaction}
 objects in SBML can help map those entities to equivalent concepts in
 other standards, such as (but not limited to) BioPAX (<a target='_blank'
 href='http://www.biopax.org/'>http://www.biopax.org/</a>), PSI-MI (<a
 target='_blank'
 href='http://www.psidev.info/index.php?q=node/60'>http://www.psidev.info</a>),
 or the Systems Biology Graphical Notation (SBGN, <a target='_blank'
 href='http://www.sbgn.org/'>http://www.sbgn.org/</a>).  Such mappings
 can be used in conversion procedures, or to build interfaces, with SBO
 becoming a kind of 'glue' between standards of representation.
 <p>
 The presence of the label on a kinetic expression can also allow
 software tools to make more intelligent decisions about reaction rate
 expressions.  For example, an application could recognize certain types
 of reaction formulas as being ones it knows how to solve with optimized
 procedures.  The application could then use internal, optimized code
 implementing the rate formula indexed by identifiers such as
 <code>'SBO:0000049'</code> appearing in SBML models.
 <p>
 Finally, SBO labels may be very valuable when it comes to model
 integration, by helping identify interfaces, convert mathematical
 expressions and parameters etc.
 <p>
 Although the use of SBO can be beneficial, it is critical to keep in
 mind that the presence of an 'sboTerm' value on an object <em>must not
 change the fundamental mathematical meaning</em> of the model.  An SBML
 model must be defined such that it stands on its own and does not depend
 on additional information added by SBO terms for a correct mathematical
 interpretation.  SBO term definitions will not imply any alternative
 mathematical semantics for any SBML object labeled with that term.  Two
 important reasons motivate this principle.  First, it would be too
 limiting to require all software tools to be able to understand the SBO
 vocabularies in addition to understanding SBML.  Supporting SBO is not
 only additional work for the software developer; for some kinds of
 applications, it may not make sense.  If SBO terms on a model are
 optional, it follows that the SBML model <em>must</em> remain
 unambiguous and fully interpretable without them, because an application
 reading the model may ignore the terms.  Second, we believe allowing the
 use of 'sboTerm' to alter the mathematical meaning of a model would
 allow too much leeway to shoehorn inconsistent concepts into SBML
 objects, ultimately reducing the interoperability of the models.
 <p>
 <h2>Relationships between {@link SBO} and SBML</h2>
 <p>
 The goal of SBO labeling for SBML is to clarify to the fullest extent
 possible the nature of each element in a model.  The approach taken in
 SBO begins with a hierarchically-structured set of controlled
 vocabularies with six main divisions: (1) entity, (2) participant role,
 (3) quantitative parameter, (4) modeling framework, (5) mathematical
 expression, and (6) interaction.  The web site for SBO (<a
 target='_blank'
 href='http://biomodels.net/sbo'>http://biomodels.net</a>) should be
 consulted for the current version of the ontology.
 <p>
 The Systems Biology Ontology (SBO) is not part of SBML; it is being
 developed separately, to allow the modeling community to evolve the
 ontology independently of SBML.  However, the terms in the ontology are
 being designed keeping SBML components in mind, and are classified into
 subsets that can be directly related with SBML components such as
 reaction rate expressions, parameters, and others.  The use of 'sboTerm'
 attributes is optional, and the presence of 'sboTerm' on an element does
 not change the way the model is <em>interpreted</em>.  Annotating SBML
 elements with SBO terms adds additional semantic information that may
 be used to <em>convert</em> the model into another model, or another
 format.  Although SBO support provides an important source of
 information to understand the meaning of a model, software does not need
 to support 'sboTerm' to be considered SBML-compliant.
 <p>
 
 @author Andreas Dr&auml;ger
 @author rodrigue
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SBO -->
  <!-- start class org.sbml.jsbml.SBO.Term -->
  <class name="SBO.Term" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <implements name="java.lang.Comparable&lt;org.sbml.jsbml.SBO.Term&gt;"/>
    <implements name="java.io.Serializable"/>
    <method name="printTerm" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="term" type="org.sbml.jsbml.SBO.Term"/>
      <doc>
      <![CDATA[Returns a String representing a term the same way as in the OBO file.
 
 @param term the term to print
 @return a String representing a term the same way as in the OBO file.]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.SBO.Term"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="term" type="org.sbml.jsbml.SBO.Term"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="getDefinition" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the definition of this {@link Term}, which is stored in the
 corresponding OBO file under the key <code>def</code>.
 
 @return the definition of this {@link Term}.]]>
      </doc>
    </method>
    <method name="getId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SBO identifier of this {@link Term}, for instance:
 <code>SBO:0000031</code>.
 
 @return the SBO identifier of this {@link Term}]]>
      </doc>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of this {@link Term}, i.e., a very short characterization.
 
 @return the name of this {@link Term}]]>
      </doc>
    </method>
    <method name="getParentTerms" return="java.util.Set&lt;org.sbml.jsbml.SBO.Term&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the parent Terms.
 
 @return the parent Terms.]]>
      </doc>
    </method>
    <method name="getChildren" return="java.util.Set&lt;org.sbml.jsbml.SBO.Term&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a set of all the children Term.
 
 @return  a set of all the children Term.]]>
      </doc>
    </method>
    <method name="getSynonyms" return="Synonym[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all {@link Synonym}s of this {@link Term}.
 
 @return all {@link Synonym}s of this {@link Term}. Returns 
 an empty array if no {@link Synonym}s exist for this term,
 but never null.]]>
      </doc>
    </method>
    <method name="getTerm" return="org.biojava.ontology.Term"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Grants access to the underlying BioJava
 {@link org.biojava.ontology.Term}.
 
 @return the underlying BioJava
 {@link org.biojava.ontology.Term}.]]>
      </doc>
    </method>
    <method name="isObsolete" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks whether or not this {@link Term} is obsolete.
 
 @return whether or not this {@link Term} is obsolete.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This is a convenient wrapper class for the corresponding implementation
 of {@link org.biojava.ontology.Term} in BioJava as it provides
 specialized methods to obtain the information from the SBO OBO file
 directly and under the same name as the keys are given in that file.
 
 @see org.biojava.ontology.Term]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SBO.Term -->
  <!-- start class org.sbml.jsbml.SBO.Triple -->
  <class name="SBO.Triple" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <implements name="java.lang.Comparable&lt;org.sbml.jsbml.SBO.Triple&gt;"/>
    <implements name="java.io.Serializable"/>
    <method name="clone" return="org.sbml.jsbml.SBO.Triple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="triple" type="org.sbml.jsbml.SBO.Triple"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="getObject" return="org.sbml.jsbml.SBO.Term"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the object of this {@link Triple}.
 
 @return the object of this {@link Triple}.]]>
      </doc>
    </method>
    <method name="getPredicate" return="org.sbml.jsbml.SBO.Term"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the predicate of this {@link Triple}.
  
 @return the predicate of this {@link Triple}.]]>
      </doc>
    </method>
    <method name="getSubject" return="org.sbml.jsbml.SBO.Term"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the subject of this {@link Triple}.
 
 @return the subject of this {@link Triple}.]]>
      </doc>
    </method>
    <method name="getTriple" return="org.biojava.ontology.Triple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Grants access to the original BioJava
 {@link org.biojava.ontology.Triple}.
 
 @return the original BioJava
 {@link org.biojava.ontology.Triple}.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This is a wrapper class for the corresponding BioJava class
 {@link org.biojava.ontology.Triple}, to allow for simplified access to
 the properties of a subject-predicate-object triple in this ontology.
 
 @see org.biojava.ontology.Triple]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SBO.Triple -->
  <!-- start class org.sbml.jsbml.SimpleSpeciesReference -->
  <class name="SimpleSpeciesReference" extends="org.sbml.jsbml.AbstractNamedSBase"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.UniqueNamedSBase"/>
    <constructor name="SimpleSpeciesReference"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a SimpleSpeciesReference instance. By default, the speciesId is
 null.]]>
      </doc>
    </constructor>
    <constructor name="SimpleSpeciesReference" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="SimpleSpeciesReference" type="org.sbml.jsbml.SimpleSpeciesReference"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a SimpleSpeciesReference instance from a given
 SimpleSpeciesReference.
 
 @param ssr]]>
      </doc>
    </constructor>
    <constructor name="SimpleSpeciesReference" type="org.sbml.jsbml.Species"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a SimpleSpeciesReference instance from a given Species.
 
 @param ssr]]>
      </doc>
    </constructor>
    <constructor name="SimpleSpeciesReference" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id]]>
      </doc>
    </constructor>
    <constructor name="SimpleSpeciesReference" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="SimpleSpeciesReference" type="java.lang.String, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id
 @param name
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getSpecies" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the speciesID of this {@link Species}. The empty String if it is not set.]]>
      </doc>
    </method>
    <method name="getSpeciesInstance" return="org.sbml.jsbml.Species"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return The Species instance which has the speciesID of this
         SimpleSpeciesReference as id. Can be null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isIdMandatory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetSpecies" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if ths speciesID of this SimpleSpeciesReference is not null.]]>
      </doc>
    </method>
    <method name="isSetSpeciesInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the Species instance which has the speciesID of this
         SimpleSpeciesReference as id is not null.]]>
      </doc>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="setSpecies"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="species" type="org.sbml.jsbml.Species"/>
      <doc>
      <![CDATA[Sets the speciesID to the id of the {@link Species} 'species'.
 
 @param species]]>
      </doc>
    </method>
    <method name="setSpecies"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="species" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the speciesID to 'spec'.
 
 @param species]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[The base class of {@link SpeciesReference} and
 {@link ModifierSpeciesReference}.
 
 @author Simon Sch&auml;fer
 @author Marine Dumousseau
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SimpleSpeciesReference -->
  <!-- start class org.sbml.jsbml.Species -->
  <class name="Species" extends="org.sbml.jsbml.Symbol"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Species"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Species instance. By default, the charge, compartmentID,
 speciesTypeID, conversionFactorID, hasOnlySubstanceUnits,
 boundaryCondition are null.]]>
      </doc>
    </constructor>
    <constructor name="Species" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Species instance from a level and version. By default, the
 charge, compartmentID, speciesTypeID, conversionFactorID,
 hasOnlySubstanceUnits, boundaryCondition are null.
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Species" type="org.sbml.jsbml.Species"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Species instance from a Species.
 
 @param species]]>
      </doc>
    </constructor>
    <constructor name="Species" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id]]>
      </doc>
    </constructor>
    <constructor name="Species" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Species instance from a level and verison. By default, the
 charge, compartmentID, speciesTypeID, conversionFactorID,
 hasOnlySubstanceUnits, boundaryCondition are null.
 
 @param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Species" type="java.lang.String, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id
 @param name
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.Species"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getBoundaryCondition" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the boundaryCondition Boolean of this Species.]]>
      </doc>
    </method>
    <method name="getCharge" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the charge value of this Species if it is set, 0 otherwise.]]>
      </doc>
    </method>
    <method name="getCompartment" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the compartmentID of this Species. The empty String if it is not
         set.]]>
      </doc>
    </method>
    <method name="getCompartmentInstance" return="org.sbml.jsbml.Compartment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return The Compartment instance which as the compartmentID of this
         Species as id. Null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getConversionFactor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the conversionFactorID of this Species.]]>
      </doc>
    </method>
    <method name="getConversionFactorInstance" return="org.sbml.jsbml.Parameter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the Parameter instance which has the conversionFactorID of this
         Species as id, null if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getDerivedUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getElementName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getHasOnlySubstanceUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the hasOnlySubstanceUnits Boolean of this Species.]]>
      </doc>
    </method>
    <method name="getInitialAmount" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the initialAmount of this Species if it has been set, o
         otherwise.]]>
      </doc>
    </method>
    <method name="getInitialConcentration" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the initialConcentration of this {@link Species} if it has been
         set, o otherwise.]]>
      </doc>
    </method>
    <method name="getPredefinedUnitID" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSpatialSizeUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If determined, this method first checks the explicitly set spatial size
 units of this {@link Species}. If no such value is defined, it will
 return the units of the surrounding {@link Compartment}. Only if this is
 also not possible, an empty {@link String} will be returned.
 
 @return the spatialSizeUnits of this {@link Species}.]]>
      </doc>
    </method>
    <method name="getSpatialSizeUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Determines the spatial units of this {@link Species}. If the spatial
 units have been set explicitly using {@link #spatialSizeUnitsID} the
 corresponding {@link UnitDefinition} from the {@link Model} to which this
 {@link Species} belongs will be returned. Otherwise, the size unit from
 the surrounding {@link Compartment} of this {@link Species} will be
 returned. If this also fails, {@code null} will be returned.
 
 @return The {@link UnitDefinition} instance which as the
         {@link #spatialSizeUnitsID} of this {@link Species} as id or the
         size unit of the surrounding {@link Compartment}.
         {@code null} if it doesn't exist.]]>
      </doc>
    </method>
    <method name="getSpeciesType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Only valid for SBML Level 2 Versions 2, 3, and 4.">
      <doc>
      <![CDATA[@return the speciesTypeID of this {@link Species}. The empty String if it
         is not set.
 @deprecated Only valid for SBML Level 2 Versions 2, 3, and 4.]]>
      </doc>
    </method>
    <method name="getSpeciesTypeInstance" return="org.sbml.jsbml.SpeciesType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Only valid for SBML Level 2 Versions 2, 3, and 4.">
      <doc>
      <![CDATA[@return the SpeciesType instance which has the speciesTypeID of this
         Species as id. Null if it doesn't exist.
 @deprecated Only valid for SBML Level 2 Versions 2, 3, and 4.]]>
      </doc>
    </method>
    <method name="getSubstanceUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the substanceUnitsID of this Species.]]>
      </doc>
    </method>
    <method name="getSubstanceUnitsInstance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return The UnitsDefinition instance which has the substanceUnistID of
         this Species as id.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasOnlySubstanceUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the default values using the current Level/Version configuration.]]>
      </doc>
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Initializes the default values of this Species.]]>
      </doc>
    </method>
    <method name="isBoundaryCondition" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the value of the boundaryCondition Boolean if it is set, false
         otherwise.]]>
      </doc>
    </method>
    <method name="isHasOnlySubstanceUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the value of the hasOnlySubstanceUnits Boolean if it is set,
         false otherwise.]]>
      </doc>
    </method>
    <method name="isSetBoundaryCondition" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the boundaryCondition of this Species is not null.]]>
      </doc>
    </method>
    <method name="isSetCharge" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the charge of this Species if not null.]]>
      </doc>
    </method>
    <method name="isSetCompartment" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the compartmentID of this Species is not null.]]>
      </doc>
    </method>
    <method name="isSetCompartmentInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the Compartment instance which has the compartmentID of
         this Species as id is not null.]]>
      </doc>
    </method>
    <method name="isSetConversionFactor" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the conversionFactorID of this Species is not null.]]>
      </doc>
    </method>
    <method name="isSetConversionFactorInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the Parameter which has the conversionFactorID of this
         Species as id is not null.]]>
      </doc>
    </method>
    <method name="isSetHasOnlySubstanceUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the hasOnlySubstanceUnits of this Species is not null.]]>
      </doc>
    </method>
    <method name="isSetInitialAmount" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Returns true if an initial amount has been set for this species.]]>
      </doc>
    </method>
    <method name="isSetInitialConcentration" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Returns true if an initial concentration has been set for this
         species.]]>
      </doc>
    </method>
    <method name="isSetSpatialSizeUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Only valid for SBML Level 2 Versions 1 and 2.">
      <doc>
      <![CDATA[@return true if the spatialSizeUnits of this Species is not null.
 @deprecated Only valid for SBML Level 2 Versions 1 and 2.]]>
      </doc>
    </method>
    <method name="isSetSpatialSizeUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the UnitDefinition which has the spatialSizeUnitsID of
         this Species as id is not null.]]>
      </doc>
    </method>
    <method name="isSetSpeciesType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the speciesTypeID of this Species is not null.]]>
      </doc>
    </method>
    <method name="isSetSpeciesTypeInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the SpeciesType instance which has the speciesTypeID of
         this Species as id is not null.]]>
      </doc>
    </method>
    <method name="isSetSubstanceUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the substanceUnitsID of this species is not null.]]>
      </doc>
    </method>
    <method name="isSetSubstanceUnitsInstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the UnitDefinition which has the substanceUnitsID of this
         Species as id is not null.]]>
      </doc>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="setBoundaryCondition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="boundaryCondition" type="boolean"/>
      <doc>
      <![CDATA[Sets the boundaryCondition Boolean.
 
 @param boundaryCondition]]>
      </doc>
    </method>
    <method name="setCharge"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Only defined in SBML Level 1, Version 1 and 2, and Level 2
             Version 1. Since Level 2 Version 2 it has been marked as a
             deprecated property, but has been completely removed in SBML
             Level 3.">
      <param name="charge" type="int"/>
      <doc>
      <![CDATA[Sets the charge of this {@link Species}.
 
 @param charge
 @deprecated Only defined in SBML Level 1, Version 1 and 2, and Level 2
             Version 1. Since Level 2 Version 2 it has been marked as a
             deprecated property, but has been completely removed in SBML
             Level 3.
 @throws PropertyNotAvailableException if Level >= 3.]]>
      </doc>
    </method>
    <method name="setCompartment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="compartment" type="org.sbml.jsbml.Compartment"/>
      <doc>
      <![CDATA[Sets the compartmentID of this {@link Species} to the id of
 'compartment'.
 
 @param compartment]]>
      </doc>
    </method>
    <method name="setCompartment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="compartment" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the compartmentID of this {@link Species} to 'compartment'.
 
 @param compartment]]>
      </doc>
    </method>
    <method name="setConversionFactor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conversionFactor" type="org.sbml.jsbml.Parameter"/>
      <doc>
      <![CDATA[Sets the conversionFactorID of this {@link Species} to the id of
 'conversionFactor'. This is only possible if Level >= 3.
 
 @param conversionFactor]]>
      </doc>
    </method>
    <method name="setConversionFactor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conversionFactorID" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the conversionFactorID of this {@link Species} to
 'conversionFactorID'. This is only possible if Level >= 3.
 
 @param conversionFactorID
 @throws PropertyNotAvailableException if Level < 3.]]>
      </doc>
    </method>
    <method name="setHasOnlySubstanceUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="hasOnlySubstanceUnits" type="boolean"/>
      <doc>
      <![CDATA[Sets hasOnlySubstanceUnits Boolean
 
 @param hasOnlySubstanceUnits
 @throws PropertyNotAvailableException if Level < 2.]]>
      </doc>
    </method>
    <method name="setInitialAmount"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initialAmount" type="double"/>
      <doc>
      <![CDATA[Sets the initialAmount of this {@link Species}.
 
 @param initialAmount]]>
      </doc>
    </method>
    <method name="setInitialConcentration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initialConcentration" type="double"/>
      <doc>
      <![CDATA[Sets the initialConcentration of this {@link Species}.
 
 @param initialConcentration]]>
      </doc>
    </method>
    <method name="setSpatialSizeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="This property is only valid for SBML Level 2 Versions 1 and
             2.">
      <param name="spatialSizeUnits" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the spatialSizeUnitsID of this {@link Species} to
 'spatialSizeUnits'.
 
 @param spatialSizeUnits
 @deprecated This property is only valid for SBML Level 2 Versions 1 and
             2.
 @throws PropertyNotAvailableException
             for inapropriate Level/Version combinations.]]>
      </doc>
    </method>
    <method name="setSpatialSizeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <param name="spatialSizeUnits" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Sets the spatialSizeUnitsID of this {@link Species} to the id of
 'spatialSizeUnits'.
 
 @param spatialSizeUnits
 @deprecated]]>
      </doc>
    </method>
    <method name="setSpeciesType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <param name="speciesType" type="org.sbml.jsbml.SpeciesType"/>
      <doc>
      <![CDATA[Sets the speciesTypeID of this {@link Species} to the id of
 'speciesType'.
 
 @param speciesType
 @deprecated]]>
      </doc>
    </method>
    <method name="setSpeciesType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Only valid in SBML Level 2 for Versions 2 through 4.">
      <param name="speciesType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the speciesTypeID of this {@link Species} to 'speciesType'.
 
 @param speciesType
 @deprecated Only valid in SBML Level 2 for Versions 2 through 4.
 @throws PropertyNotAvailableException
             for inapropriate Level/Version combinations.]]>
      </doc>
    </method>
    <method name="setSubstanceUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the substanceUnitsID to 'unit'.
 
 @param unit]]>
      </doc>
    </method>
    <method name="setSubstanceUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="org.sbml.jsbml.Unit"/>
      <doc>
      <![CDATA[Sets the substanceUnits.
 
 @param unit]]>
      </doc>
    </method>
    <method name="setSubstanceUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unitKind" type="org.sbml.jsbml.Unit.Kind"/>
      <doc>
      <![CDATA[Sets the substanceUnits.
 
 @param unitKind]]>
      </doc>
    </method>
    <method name="setSubstanceUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="units" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Sets the substanceUnitsID to the id of 'units'.
 
 @param units]]>
      </doc>
    </method>
    <method name="unsetCharge"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[Unsets the charge of this Species
 
 @deprecated]]>
      </doc>
    </method>
    <method name="unsetCompartment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Remove the reference to a comparmtent.]]>
      </doc>
    </method>
    <method name="unsetConversionFactor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the conversionFactorID of this Species.]]>
      </doc>
    </method>
    <method name="unsetInitialAmount"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the initialAmount of this Species.]]>
      </doc>
    </method>
    <method name="unsetInitialConcentration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the initialConcentration of this Species.]]>
      </doc>
    </method>
    <method name="unsetSpatialSizeUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[Unsets the spatialSizeUnits of this Species
 
 @deprecated]]>
      </doc>
    </method>
    <method name="unsetSubstanceUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the substanceUnits of this Species.]]>
      </doc>
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the species XML element of a SBML file.
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Species -->
  <!-- start class org.sbml.jsbml.SpeciesReference -->
  <class name="SpeciesReference" extends="org.sbml.jsbml.SimpleSpeciesReference"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.Variable"/>
    <constructor name="SpeciesReference"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a SpeciesReference instance. By default, if the level is superior
 or equal to 3, the constant, stoichiometryMath and stoichiometry are
 null.
 
 @param spec]]>
      </doc>
    </constructor>
    <constructor name="SpeciesReference" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="SpeciesReference" type="org.sbml.jsbml.Species"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a SpeciesReference instance from a Species. By default, if the
 level is superior or equal to 3, the constant, stoichiometryMath and
 stoichiometry are null.
 
 @param speciesReference]]>
      </doc>
    </constructor>
    <constructor name="SpeciesReference" type="org.sbml.jsbml.SpeciesReference"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a SpeciesReference instance from a given SpeciesReference.
 
 @param speciesReference]]>
      </doc>
    </constructor>
    <constructor name="SpeciesReference" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id]]>
      </doc>
    </constructor>
    <constructor name="SpeciesReference" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="SpeciesReference" type="java.lang.String, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id
 @param name
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="containsUndeclaredUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCalculatedStoichiometry" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method computes the fraction of the stoichiometry and the
 denominator. Actually, the denominator is only defined in SBML Level 1.
 For convenience, this method might be usefull.
 
 @return The fraction between {@link #stoichiometry} and
         {@link #denominator}.]]>
      </doc>
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDenominator" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use for Level 1 only.">
      <doc>
      <![CDATA[@return the denominator value if it is set, 1 otherwise
 @deprecated Use for Level 1 only.]]>
      </doc>
    </method>
    <method name="getDerivedUnitDefinition" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDerivedUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getElementName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getStoichiometry" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the stoichiometry value of this {@link SpeciesReference} if it is
         set, otherwise, depending on the Level attribute, 1 for Level < 3
         or {@link Double#NaN}.]]>
      </doc>
    </method>
    <method name="getStoichiometryMath" return="org.sbml.jsbml.StoichiometryMath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="since SBML Level 3 this should not be used anymore.">
      <doc>
      <![CDATA[@return the stoichiometryMath of this SpeciesReference. Can be null if
         the stoichiometryMath is not set.
 @deprecated since SBML Level 3 this should not be used anymore.]]>
      </doc>
    </method>
    <method name="getValue" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the default values using the current Level/Version configuration.]]>
      </doc>
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Initializes the default values of this SpeciesReference.]]>
      </doc>
    </method>
    <method name="isConstant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetConstant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetDenominator" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the denominator is not null.]]>
      </doc>
    </method>
    <method name="isSetStoichiometry" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the stoichiometry of this SpeciesReference is not null.]]>
      </doc>
    </method>
    <method name="isSetStoichiometryMath" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the stoichiometryMath of this SpeciesReference is not
         null.]]>
      </doc>
    </method>
    <method name="isSetValue" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="setConstant"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="constant" type="boolean"/>
    </method>
    <method name="setDenominator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <param name="denominator" type="int"/>
      <doc>
      <![CDATA[Sets the denominator of this {@link SpeciesReference}.
 
 @param denominator
 @deprecated]]>
      </doc>
    </method>
    <method name="setStoichiometry"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stoichiometry" type="double"/>
      <doc>
      <![CDATA[Sets the stoichiometry of this {@link SpeciesReference}.
 
 @param stoichiometry]]>
      </doc>
    </method>
    <method name="setStoichiometryMath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <param name="math" type="org.sbml.jsbml.StoichiometryMath"/>
      <doc>
      <![CDATA[Sets the {@link StoichiometryMath} of this {@link SpeciesReference).
 
 @param math
 @deprecated]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
    </method>
    <method name="unsetConstant"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetStoichiometry"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unsets the stoichiometry property of this element.]]>
      </doc>
    </method>
    <method name="unsetStoichiometryMath" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[@return
 @deprecated]]>
      </doc>
    </method>
    <method name="unsetValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the speciesReference XML element of a SBML file.
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SpeciesReference -->
  <!-- start class org.sbml.jsbml.SpeciesType -->
  <class name="SpeciesType" extends="org.sbml.jsbml.AbstractNamedSBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="Only valid in SBML Level 2 for Versions 2 through 4.">
    <implements name="org.sbml.jsbml.UniqueNamedSBase"/>
    <constructor name="SpeciesType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a SpeciesType instance.]]>
      </doc>
    </constructor>
    <constructor name="SpeciesType" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a SpeciesType instance from a level and version.
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="SpeciesType" type="org.sbml.jsbml.SpeciesType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a SpeciesType instance from a given SpeciesType.
 
 @param nsb]]>
      </doc>
    </constructor>
    <constructor name="SpeciesType" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[@param id
 @deprecated]]>
      </doc>
    </constructor>
    <constructor name="SpeciesType" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a SpeciesType instance from an id, level and version.
 
 @param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="SpeciesType" type="java.lang.String, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a SpeciesType instance from an id, name, level and version.
 
 @param id
 @param name
 @param level
 @param version]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.SpeciesType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParent" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.SpeciesType&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isIdMandatory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the speciesType XML element of a SBML file. It is deprecated
 since level 3 and not defined in SBML before Level 2 Version 2.
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $
 @deprecated Only valid in SBML Level 2 for Versions 2 through 4.]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.SpeciesType -->
  <!-- start class org.sbml.jsbml.StoichiometryMath -->
  <class name="StoichiometryMath" extends="org.sbml.jsbml.AbstractMathContainer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="Use {@link AssignmentRule} with instances of
             {@link SpeciesReference} as {@link Variable} instead.">
    <constructor name="StoichiometryMath"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a StoichiometryMath instance.]]>
      </doc>
    </constructor>
    <constructor name="StoichiometryMath" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a StoichiometryMath instance from a level and version.
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="StoichiometryMath" type="org.sbml.jsbml.StoichiometryMath"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a StoichiometryMath instance from a given StoichiometryMath.
 
 @param stoichiometryMath]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.StoichiometryMath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParent" return="org.sbml.jsbml.SpeciesReference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Contains the MathMl expression of the Stoichiometry.
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $
 @deprecated Use {@link AssignmentRule} with instances of
             {@link SpeciesReference} as {@link Variable} instead.]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.StoichiometryMath -->
  <!-- start class org.sbml.jsbml.Symbol -->
  <class name="Symbol" extends="org.sbml.jsbml.QuantityWithUnit"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.Variable"/>
    <constructor name="Symbol"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Symbol instance. By default, value, unitsID, constant are null.]]>
      </doc>
    </constructor>
    <constructor name="Symbol" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Symbol instance from a level and version. By default, value,
 unitsID, constant are null.
 
 @param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Symbol" type="org.sbml.jsbml.QuantityWithUnit"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param quantity]]>
      </doc>
    </constructor>
    <constructor name="Symbol" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id]]>
      </doc>
    </constructor>
    <constructor name="Symbol" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Symbol instance from an id, level and version. By default,
 value, unitsID, constant are null.
 
 @param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Symbol" type="java.lang.String, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Symbol instance from an id, name, level and version. By
 default, value, unitsID, constant are null.
 
 @param id
 @param name
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Symbol" type="org.sbml.jsbml.Symbol"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Symbol instance from a given Symbol.
 
 @param nsb]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.Symbol"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="getConstant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isConstant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetConstant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setConstant"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="constant" type="boolean"/>
    </method>
    <method name="unsetConstant"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="constant" type="java.lang.Boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The constant attribute of this variable.]]>
      </doc>
    </field>
    <field name="isSetConstant" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[The base class for {@link Compartment}, {@link Species}, {@link Parameter}. A
 symbol is a {@link Variable} of the system that declares a unit and a value,
 i.e., neither its {@link Unit} or {@link UnitDefinition}, nor its value are
 derived. A Symbol defines both fields. Furthermore, a Symbol may vary through
 a simulation and can be accessed within the model through its identifier and
 name attributes.
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Symbol -->
  <!-- start class org.sbml.jsbml.Trigger -->
  <class name="Trigger" extends="org.sbml.jsbml.AbstractMathContainer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Trigger"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link Trigger} instance.]]>
      </doc>
    </constructor>
    <constructor name="Trigger" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link Trigger} instance from a level and version.
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Trigger" type="org.sbml.jsbml.Trigger"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link Trigger} instance from a given {@link Trigger}.
 
 @param trigger]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.Trigger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getInitialValue" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the initialValue]]>
      </doc>
    </method>
    <method name="getParent" return="org.sbml.jsbml.Event"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPersistent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the persistent]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the properties {@link #initialValue} and {@link #persistent} to null, i.e., undefined.]]>
      </doc>
    </method>
    <method name="isInitialValue" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return whether or not this {@link Trigger} is initially set to true.]]>
      </doc>
    </method>
    <method name="isPersistent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return whether or not this is a persistent {@link Trigger}]]>
      </doc>
    </method>
    <method name="isSetInitialValue" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetPersistent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="setInitialValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initialValue" type="boolean"/>
      <doc>
      <![CDATA[Can only be set if Level >= 3.
 
 @param initialValue
            the initialValue to set
 @throws PropertyNotAvailableException
             if Level < 3.]]>
      </doc>
    </method>
    <method name="setPersistent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="persistent" type="boolean"/>
      <doc>
      <![CDATA[Can only be set if Level >= 3.
 
 @param persistent
            the persistent to set
 @throws PropertyNotAvailableException
             if Level < 3.]]>
      </doc>
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the trigger XML element of a SBML file.
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Trigger -->
  <!-- start interface org.sbml.jsbml.UniqueNamedSBase -->
  <interface name="UniqueNamedSBase"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.NamedSBase"/>
    <doc>
    <![CDATA[This interface is used to tag all those elements
 whose identifier must be unique within an SBML {@link Model}. Since Level 2 Version 1
 {@link UnitDefinition}s are allowed to have their own id-name space. Therefore,
 {@link UnitDefinition}s should not implement this interface
 introducing an additional check for Level 1 models.
 
 @author Andreas Dr&auml;ger
 @version $Rev: 1447 $
 @since 0.8
 @date 19.09.2011]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.UniqueNamedSBase -->
  <!-- start class org.sbml.jsbml.Unit -->
  <class name="Unit" extends="org.sbml.jsbml.AbstractSBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Unit"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Unit instance. If the level is set and is superior or equal to
 3 the multiplier, scale, kind and exponent are null.]]>
      </doc>
    </constructor>
    <constructor name="Unit" type="double, int, org.sbml.jsbml.Unit.Kind, double, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link Unit} instance from a multiplier, scale, kind and exponent. The
 offset is null.
 
 @param multiplier
 @param scale
 @param kind
 @param exponent
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Unit" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link Unit} instance from a level and version. If the level is set and
 is superior or equal to 3 the multiplier, scale, kind, offset and
 exponent are null.
 
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Unit" type="int, org.sbml.jsbml.Unit.Kind, double, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Unit instance from a scale, kind, exponent, level and version.
 
 @param scale
 @param kind
 @param exponent
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Unit" type="int, org.sbml.jsbml.Unit.Kind, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Unit instance from a scale, kind, level and version.
 
 @param scale
 @param kind
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Unit" type="org.sbml.jsbml.Unit.Kind, double, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Unit instance from a kind, exponent, level and version.
 
 @param kind
 @param exponent
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Unit" type="org.sbml.jsbml.Unit.Kind, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Unit instance from a kind, level and version. If the level is
 set and is superior or equal to 3 the multiplier, scale, offset and
 exponent are null.
 
 @param kind]]>
      </doc>
    </constructor>
    <constructor name="Unit" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param units
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="Unit" type="org.sbml.jsbml.Unit"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a Unit instance from a given Unit.
 
 @param unit]]>
      </doc>
    </constructor>
    <method name="areEquivalent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="org.sbml.jsbml.Unit"/>
      <param name="units" type="java.lang.String"/>
      <doc>
      <![CDATA[Checks whether the given {@link Unit} and the {@link Unit} represented by
 the given {@link String} are equivalent.
 
 @param unit
 @param units
 @return
 @see #areEquivalent(Unit, Unit)]]>
      </doc>
    </method>
    <method name="areEquivalent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit1" type="org.sbml.jsbml.Unit"/>
      <param name="unit2" type="org.sbml.jsbml.Unit"/>
      <doc>
      <![CDATA[<p>
 Predicate returning true or false depending on whether Unit objects are
 equivalent.
 </p>
 <p>
 Two Unit objects are considered to be equivalent if their 'kind' and
 'exponent' attributes are equal. (Contrast this to the method
 areIdentical(Unit unit1, Unit unit2), which compares Unit objects with
 respect to all attributes, not just the kind and exponent.)
 </p>
 
 @param unit1
            the first Unit object to compare
 @param unit2
            the second Unit object to compare
 @return if the 'kind' and 'exponent' attributes of unit1 are identical to
         the kind and exponent attributes of unit2, false otherwise.]]>
      </doc>
    </method>
    <method name="areIdentical" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit1" type="org.sbml.jsbml.Unit"/>
      <param name="unit2" type="org.sbml.jsbml.Unit"/>
      <doc>
      <![CDATA[<p>
 Predicate returning true or false depending on whether two Unit objects
 are identical.
 </p>
 <p>
 Two Unit objects are considered to be identical if they match in all
 attributes. (Contrast this to the method areEquivalent(Unit unit1, Unit
 unit2), which compares Unit objects only with respect to certain
 attributes.)
 </p>
 
 @param unit1
            the first Unit object to compare
 @param unit2
            the second Unit object to compare
 @return true if all the attributes of unit1 are identical to the
         attributes of unit2, false otherwise.
 @see areEquivalent]]>
      </doc>
    </method>
    <method name="convertToSI" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="org.sbml.jsbml.Unit"/>
      <doc>
      <![CDATA[Returns a UnitDefinition object which contains the argument Unit
 converted to the appropriate SI unit.
 
 @param unit
            the Unit object to convert to SI
 @return a UnitDefinition object containing the SI unit.]]>
      </doc>
    </method>
    <method name="isBuiltIn" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use {@link #isPredefined(String, int)}">
      <param name="name" type="java.lang.String"/>
      <param name="level" type="int"/>
      <doc>
      <![CDATA[Predicate to test whether a given string is the name of a predefined SBML
 unit.
 
 @param name
            a {@link String} to be tested against the predefined unit
            names
 @param level
            the Level of SBML for which the determination should be made.
            This is necessary because there are a few small differences in
            allowed units between SBML Level 1 and Level 2.
 @return {@code true}, if name is one of the five SBML predefined
         unit identifiers ('substance', 'volume', 'area', 'length' or
         'time'), {@code false} otherwise. The predefined unit
         identifiers 'length' and 'area' were added in Level 2 Version 1
 @deprecated use {@link #isPredefined(String, int)}]]>
      </doc>
    </method>
    <method name="isPredefined" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="level" type="int"/>
      <doc>
      <![CDATA[Predicate to test whether a given string is the name of a predefined SBML
 unit.
 
 @param name
            a {@link String} to be tested against the predefined unit
            names
 @param level
            the Level of SBML for which the determination should be made.
            This is necessary because there are a few small differences in
            allowed units between SBML Level 1 and Level 2.
 @return {@code true}, if name is one of the five SBML predefined
         unit identifiers ('substance', 'volume', 'area', 'length' or
         'time'), {@code false} otherwise. The predefined unit
         identifiers 'length' and 'area' were added in Level 2 Version 1]]>
      </doc>
    </method>
    <method name="isUnitKind" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="kind" type="org.sbml.jsbml.Unit.Kind"/>
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[@param kind
 @param level
 @param version
 @return]]>
      </doc>
    </method>
    <method name="isUnitKind" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[<p>
 Predicate to test whether a given string is the name of a valid base unit
 in SBML (such as 'gram' or 'mole').
 </p>
 <p>
 This method exists because prior to SBML Level 2 Version 3, an
 enumeration called UnitKind was defined by SBML. This enumeration was
 removed in SBML Level 2 Version 3 and its values were folded into the
 space of values of a type called UnitSId. This method therefore has less
 significance in SBML Level 2 Version 3 and Level 2 Version 4, but remains
 for backward compatibility and support for reading models in older
 Versions of Level 2.
 </p>
 
 @param name
            a string to be tested
 @param level
            an integer representing the SBML specification Level
 @param version
            an integer representing the SBML specification Version
 @return true if name is a valid UnitKind, false otherwise
 @jsbml.note The allowed unit names differ between SBML Levels 1 and 2 and again
       slightly between Level 2 Versions 1 and 2.]]>
      </doc>
    </method>
    <method name="isValidUnit" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="model" type="org.sbml.jsbml.Model"/>
      <param name="unit" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns true if the <code>unit</code> is a valid unit kind name or an
 identifier of an existing {@link UnitDefinition}.
 
 If either the unit or model are null, it will return false.
 
 @param unit
            the identifier of a {@link UnitDefinition} or a valid
            {@link Unit.Kind} identifier for the current level/version
            combination of the model.
 @param model
            the model where to look for the <code>unit</code>.
 
 @return true if the unit is a valid unit kind name or an identifier of an
         existing {@link UnitDefinition}.]]>
      </doc>
    </method>
    <method name="merge"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit1" type="org.sbml.jsbml.Unit"/>
      <param name="unit2" type="org.sbml.jsbml.Unit"/>
      <doc>
      <![CDATA[Merges two {@link Unit} objects with the same 'kind' attribute value into a
 single {@link Unit}.
 
 @param unit1
            the first {@link Unit} object; the result of the operation is left as
            a new version of this {@link Unit}, modified in-place.
 @param unit2
            the second {@link Unit} object to merge with the first]]>
      </doc>
    </method>
    <method name="removeScale"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="org.sbml.jsbml.Unit"/>
      <doc>
      <![CDATA[Manipulates the attributes of the Unit to express the unit with the value
 of the scale attribute reduced to zero.
 
 For example, 1 millimetre can be expressed as a Unit with kind= 'metre'
 multiplier='1' scale='-3' exponent='1'. It can also be expressed as a
 Unit with kind='metre' multiplier='0.001' scale='0' exponent='1'.
 
 @param unit
            the Unit object to manipulate.]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.Unit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getExponent" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the exponent of this {@link Unit} if it is set, 1 otherwise.]]>
      </doc>
    </method>
    <method name="getExponentAsDouble" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #getExponent()}">
      <doc>
      <![CDATA[Returns the exponent of this {@link Unit}. This method is provided for
 compatibility to libSBML only.
 
 @return
 @deprecated use {@link #getExponent()}]]>
      </doc>
    </method>
    <method name="getKind" return="org.sbml.jsbml.Unit.Kind"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the kind of this Unit if it is set, null otherwise.]]>
      </doc>
    </method>
    <method name="getMultiplier" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the multiplier of this Unit if it is set, 1 otherwise.]]>
      </doc>
    </method>
    <method name="getOffset" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[@return the offset of this {@link Unit} if it is set, 0 otherwise.
 @deprecated]]>
      </doc>
    </method>
    <method name="getParent" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Unit&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return This method returns the abbreviated prefix of this {@link Unit},
         for instance, "m" for milli, i.e., if the scale is -3. In case
         that the {@link #scale} equals zero, an empty {@link String} is
         returned. If no defined prefix exists for the current {@link #scale},
         the {@link String} <code>10^(%d)</code> is returned, where 
         <code>%d</code>  denotes the {@link #scale}.
 @see #getPrefixAsWord()]]>
      </doc>
    </method>
    <method name="getPrefixAsWord" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the prefix of this {@link Unit}, for instance, "milli" if the {@link #scale} is -3.
         In case that the {@link #scale} equals zero, an empty {@link String} is
         returned. If no defined prefix exists for the current {@link #scale},
         the {@link String} <code>10^(%d)</code> is returned, where 
         <code>%d</code>  denotes the {@link #scale}.
 @see #getPrefix()]]>
      </doc>
    </method>
    <method name="getScale" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the scale of this Unit if it is set, 0 otherwise.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasRequiredAttributes" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate returning true or false depending on whether all the required
 attributes for this Unit object have been set.
 
 @return a boolean value indicating whether all the required elements for
         this object have been defined.]]>
      </doc>
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the default values using the current Level/Version configuration.]]>
      </doc>
    </method>
    <method name="initDefaults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Initializes the attributes of this Unit (except for 'kind') to their
 defaults values.
 
 The default values are as follows:
 <ul>
 <li>exponent = 1</li>
 <li>scale = 0</li>
 <li>multiplier = 1.0</li>
 </ul>
 The 'kind' attribute is left unchanged.]]>
      </doc>
    </method>
    <method name="isAmpere" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind ampere.
 
 @return]]>
      </doc>
    </method>
    <method name="isAvogadro" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind avogadro.
 
 @return true if the kind of this Unit is avogadro, false otherwise.]]>
      </doc>
    </method>
    <method name="isBecquerel" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind becquerel.
 
 @return]]>
      </doc>
    </method>
    <method name="isCandela" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind candela
 
 @return]]>
      </doc>
    </method>
    <method name="isCelsius" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="{@link Kind#CELSIUS} should no longer be used.">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind Celsius
 
 @return
 @deprecated {@link Kind#CELSIUS} should no longer be used.]]>
      </doc>
    </method>
    <method name="isCoulomb" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind coulomb.
 
 @return]]>
      </doc>
    </method>
    <method name="isDimensionless" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the {@link Kind}
 {@link DIMENSIONLESS}. A unit is also dimensionless if it does not
 declare an offset and at the same time its exponent is zero. In this case
 the unit represents a dimensionless quantity.
 
 @return True if this unit represents a dimensionless quantity, i.e., its
         {@link Kind} is {@link DIMENSIONLESS} or offset = exponent = 0]]>
      </doc>
    </method>
    <method name="isFarad" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind farad
 
 @return]]>
      </doc>
    </method>
    <method name="isGram" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind gram
 
 @return]]>
      </doc>
    </method>
    <method name="isGray" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind gray
 
 @return]]>
      </doc>
    </method>
    <method name="isHenry" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind henry
 
 @return]]>
      </doc>
    </method>
    <method name="isHertz" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind hertz
 
 @return]]>
      </doc>
    </method>
    <method name="isInvalid" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind invalid.
 
 @return]]>
      </doc>
    </method>
    <method name="isItem" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind item
 
 @return]]>
      </doc>
    </method>
    <method name="isJoule" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind Joule
 
 @return]]>
      </doc>
    </method>
    <method name="isKatal" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind katal
 
 @return]]>
      </doc>
    </method>
    <method name="isKelvin" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind kelvin
 
 @return]]>
      </doc>
    </method>
    <method name="isKilogram" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind kilogram
 
 @return]]>
      </doc>
    </method>
    <method name="isLitre" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind litre.
 
 @return true if the kind of this Unit is litre or 'liter', false
         otherwise.]]>
      </doc>
    </method>
    <method name="isLumen" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind lumen
 
 @return]]>
      </doc>
    </method>
    <method name="isLux" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind lux
 
 @return]]>
      </doc>
    </method>
    <method name="isMetre" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind metre
 
 @return]]>
      </doc>
    </method>
    <method name="isMole" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind mole.
 
 @return true if the kind of this Unit is mole, false otherwise.]]>
      </doc>
    </method>
    <method name="isNewton" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind newton
 
 @return]]>
      </doc>
    </method>
    <method name="isOhm" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind ohm
 
 @return]]>
      </doc>
    </method>
    <method name="isPascal" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind pascal
 
 @return]]>
      </doc>
    </method>
    <method name="isRadian" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind radian
 
 @return]]>
      </doc>
    </method>
    <method name="isSecond" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind second
 
 @return]]>
      </doc>
    </method>
    <method name="isSetExponent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the exponent of this Unit is not null.]]>
      </doc>
    </method>
    <method name="isSetKind" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate to test whether the 'kind' attribute of this {@link Unit} has been set.
 
 @return]]>
      </doc>
    </method>
    <method name="isSetMultiplier" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the multiplier of this Unit is not null.]]>
      </doc>
    </method>
    <method name="isSetOffset" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="the offset attribute should no longer be used.">
      <doc>
      <![CDATA[@return
 @deprecated the offset attribute should no longer be used.]]>
      </doc>
    </method>
    <method name="isSetScale" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the scale of this Unit is not null.]]>
      </doc>
    </method>
    <method name="isSiemens" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind siemens
 
 @return]]>
      </doc>
    </method>
    <method name="isSievert" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind sievert
 
 @return]]>
      </doc>
    </method>
    <method name="isSteradian" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind steradian
 
 @return]]>
      </doc>
    </method>
    <method name="isTesla" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind tesla
 
 @return]]>
      </doc>
    </method>
    <method name="isVariantOfArea" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if this Unit is a variant of area.]]>
      </doc>
    </method>
    <method name="isVariantOfLength" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if this Unit is a variant of length.]]>
      </doc>
    </method>
    <method name="isVariantOfSubstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if this Unit is a variant of substance.]]>
      </doc>
    </method>
    <method name="isVariantOfTime" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isVariantOfVolume" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if this Unit is a variant of volume.]]>
      </doc>
    </method>
    <method name="isVolt" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind volt
 
 @return]]>
      </doc>
    </method>
    <method name="isWatt" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind watt
 
 @return]]>
      </doc>
    </method>
    <method name="isWeber" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for testing whether this Unit is of the kind weber
 
 @return]]>
      </doc>
    </method>
    <method name="readAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="removeScale" return="org.sbml.jsbml.Unit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Manipulates the attributes of the Unit to express the unit with the value
 of the scale attribute reduced to zero.
 
 For example, 1 millimetre can be expressed as a Unit with kind= 'metre'
 multiplier='1' scale='-3' exponent='1'. It can also be expressed as a
 Unit with kind='metre' multiplier='0.001' scale='0' exponent='1'.]]>
      </doc>
    </method>
    <method name="setExponent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exponent" type="double"/>
      <doc>
      <![CDATA[Sets the exponent of this {@link Unit}
 
 @param exponent]]>
      </doc>
    </method>
    <method name="setExponent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #setExponent(double)}">
      <param name="exponent" type="int"/>
      <doc>
      <![CDATA[Sets the exponent of this {@link Unit}
 
 @param exponent
 @deprecated use {@link #setExponent(double)}]]>
      </doc>
    </method>
    <method name="setKind"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="kind" type="org.sbml.jsbml.Unit.Kind"/>
      <doc>
      <![CDATA[Sets the {@link Kind} of this {@link Unit}
 
 @param kind]]>
      </doc>
    </method>
    <method name="setMultiplier"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="multiplier" type="double"/>
      <doc>
      <![CDATA[Sets the multiplier of this {@link Unit}
 
 @param multiplier
 @throws PropertyNotAvailableException
             if Level < 2 and the given <code>multiplier != 1</code>.]]>
      </doc>
    </method>
    <method name="setOffset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Only defined for SBML Level 2 Version 1.">
      <param name="offset" type="double"/>
      <doc>
      <![CDATA[Sets the offset of this {@link Unit}
 
 @param offset
 @deprecated Only defined for SBML Level 2 Version 1.
 @throws PropertyNotAvailableException
             if Level/Version combination is not 2.1.]]>
      </doc>
    </method>
    <method name="setScale"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scale" type="int"/>
      <doc>
      <![CDATA[Sets the scale of this Unit
 
 @param scale]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Produces a text formula representation of this unit.]]>
      </doc>
    </method>
    <method name="unsetExponent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetKind"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetMultiplier"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetOffset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="the offset attribute should no longer be used.">
      <doc>
      <![CDATA[@deprecated the offset attribute should no longer be used.]]>
      </doc>
    </method>
    <method name="unsetScale"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeXMLAttributes" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Represents the unit XML element of a SBML file.
 
 @author Andreas Dr&auml;ger
 @date 2009-08-31
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Unit -->
  <!-- start class org.sbml.jsbml.Unit.Kind -->
  <class name="Unit.Kind" extends="java.lang.Enum&lt;org.sbml.jsbml.Unit.Kind&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.sbml.jsbml.Unit.Kind[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.sbml.jsbml.Unit.Kind"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="areEquivalent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="kind1" type="org.sbml.jsbml.Unit.Kind"/>
      <param name="kind2" type="org.sbml.jsbml.Unit.Kind"/>
      <doc>
      <![CDATA[Tests whether the both given unit kinds are equivalent, i.e., it also
 considers METRE and METER and LITRE and LITER.
 
 @param kind1
 @param kind2
 @return]]>
      </doc>
    </method>
    <method name="getUnitKindsDefinedIn" return="java.util.Set&lt;org.sbml.jsbml.Unit.Kind&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Returns a set of {@link Kind} objects for the given level/version
 combination of SBML.
 
 @param level
 @param version
 @return A {@link Set} that only contains {@link Kind}s for the given
         level/version combination.]]>
      </doc>
    </method>
    <method name="isValidUnitKindString" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unitKind" type="java.lang.String"/>
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[This method is equivalent to converting the {@link String} to a
 {@link Kind} and then calling its {@link #isDefinedIn} method. Only
 entirely upper or entirely lower case {@link String}s are valid
 attributes here.
 
 This method tests whether a given string corresponds to a predefined
 {@link Unit.Kind} enumeration value.
 
 To check whether a given {@link String} represents some predefined
 {@link UnitDefinition}, please use the method
 {@link Unit#isPredefined(String, int)}.
 
 @param unitKind
            the unit string.
 @param level
            the SBML level.
 @param version
            the SBML version.
 @return {@code true} if the given string is valid for the
         particular SBML level and version, false otherwise.
 @see Unit#isPredefined(String, int)]]>
      </doc>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of this unit kind.
 
 @return]]>
      </doc>
    </method>
    <method name="getSymbol" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the formula symbol of this unit kind in uni-code notation.]]>
      </doc>
    </method>
    <method name="getUnitOntologyIdentifier" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a unit ontology identifier for this {@link Kind} if possible
 and returns it. See {@link http
 ://obo.cvs.sourceforge.net/viewvc/obo/obo
 /ontology/phenotype/unit.obo} for more information.
 
 @return the unit ontology identifier for this {@link Kind} or null if
         this {@link Kind} has no corresponding type in the unit
         ontology.
 
 @see #getUnitOntologyNumber()]]>
      </doc>
    </method>
    <method name="getUnitOntologyNumber" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Looks for the corresponding unit ontology resource for this
 {@link Kind}. Please visit {@link http://bioportal.bioontology.org/visualize/44519/?conceptid=UO%3A0000003}
 and {@link http://www.ebi.ac.uk/miriam/main/datatypes/MIR:00000136}
 for more details.
 
 @return the unit ontology number of this {@link Kind} or -1 if no
         entry exists for this {@link Kind} in the unit ontology.]]>
      </doc>
    </method>
    <method name="getUnitOntologyResource" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a MIRIAM resource pointing to the entry in the unit ontology
 corresponding to this {@link Kind}. If such an entry exists, this
 method will return the {@link String}
 <code>urn:miriam:obo.unit:UO%3A</code> plus the number of the
 resource filled to a seven-digit number by inserting leading zeros.
 
 @return null if no corresponding entry exists in the unit ontology,
         otherwise a MIRIAM resource pointing to it.]]>
      </doc>
    </method>
    <method name="isDefinedIn" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Tests whether this kind of unit is defined in the given level and
 version of SBML.
 
 @param level
 @param version
 @return]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This enumeration contains an exhaustive list of all available unit kinds
 within all Levels and Versions of SBML. Note that some of these kinds are
 not available in some Level/Version combinations, such as
 {@link #AVOGADRO}, which has been defined in Level 3 for the first time,
 or {@link #CELSIUS}, which has been removed from the specification of
 SBML in Level 2 Version 4. This enum also provides helpful methods, for
 instance, to check if two instances of {@link Kind} with different names
 are still equivalent ({@link #areEquivalent(Kind, Kind)}), or to get the
 formula symbol of the {@link Kind} ({@link #getSymbol()}).
 
 @author Andreas Dr&auml;ger
 @date 2009-08-31]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.Unit.Kind -->
  <!-- start class org.sbml.jsbml.UnitDefinition -->
  <class name="UnitDefinition" extends="org.sbml.jsbml.AbstractNamedSBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UnitDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an UnitDefinition instance. By default, the listOfUnit is null.]]>
      </doc>
    </constructor>
    <constructor name="UnitDefinition" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="UnitDefinition" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id]]>
      </doc>
    </constructor>
    <constructor name="UnitDefinition" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an UnitDefinition instance from an id, level and version. By
 default, the listOfUnit is null.
 
 @param id
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="UnitDefinition" type="java.lang.String, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an UnitDefinition instance from an id, level and version. By
 default, the listOfUnit is null.
 
 @param id
 @param name
 @param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="UnitDefinition" type="org.sbml.jsbml.UnitDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an UnitDefinition instance from a given UnitDefinition.
 
 @param unitDefinition]]>
      </doc>
    </constructor>
    <method name="area" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Predefined unit for area.]]>
      </doc>
    </method>
    <method name="areCompatible" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ud1" type="org.sbml.jsbml.UnitDefinition"/>
      <param name="ud2" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[<p>
 Predicate returning {@code true} or {@code false} depending on
 whether two UnitDefinition objects are compatible.
 </p>
 <p>
 For the purposes of performing this comparison, two
 {@link UnitDefinition} objects are considered compatible when they
 contain compatible list of {@link Unit} objects. This means two
 {@link UnitDefinition} objects are compatible if both satisfy the method
 {@link #areEquivalent(UnitDefinition, UnitDefinition)} or one of both has
 {@link Kind#INVALID} as {@link Unit.Kind}
 
 @param ud1
            the first {@link UnitDefinition} object to compare
 @param ud2
            the second {@link UnitDefinition} object to compare
 @return {@code true} if all the {@link Unit} objects in ud1 are
         compatible to the {@link Unit} objects in ud2, {@code false}
         otherwise.
 @see #areIdentical(UnitDefinition, UnitDefinition)
 @see Unit#areEquivalent(Unit, Unit)]]>
      </doc>
    </method>
    <method name="areEquivalent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ud" type="org.sbml.jsbml.UnitDefinition"/>
      <param name="units" type="java.lang.String"/>
      <doc>
      <![CDATA[Checks whether the given {@link UnitDefinition} and the
 {@link UnitDefinition} or {@link Unit} represented by the given
 {@link String} are equivalent.
 
 @param ud
 @param units
 @return
 @see #areEquivalent(UnitDefinition, UnitDefinition)
 @see Unit#areEquivalent(Unit, Unit)]]>
      </doc>
    </method>
    <method name="areEquivalent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ud1" type="org.sbml.jsbml.UnitDefinition"/>
      <param name="ud2" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[<p>
 Predicate returning true or false depending on whether two UnitDefinition
 objects are equivalent.
 </p>
 <p>
 For the purposes of performing this comparison, two UnitDefinition
 objects are considered equivalent when they contain equivalent list of
 Unit objects. Unit objects are in turn considered equivalent if they
 satisfy the predicate Unit.areEquivalent(). The predicate tests a subset
 of the objects's attributes.
 </p>
 
 @param ud1
            the first UnitDefinition object to compare
 @param ud2
            the second UnitDefinition object to compare
 @return true if all the Unit objects in ud1 are equivalent to the Unit
         objects in ud2, false otherwise.
 @see areIdentical
 @see Unit.areEquivalent]]>
      </doc>
    </method>
    <method name="areIdentical" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ud1" type="org.sbml.jsbml.UnitDefinition"/>
      <param name="ud2" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[<p>
 Predicate returning true or false depending on whether two UnitDefinition
 objects are identical.
 </p>
 <p>
 For the purposes of performing this comparison, two UnitDefinition
 objects are considered identical when they contain identical lists of
 Unit objects. Pairs of Unit objects in the lists are in turn considered
 identical if they satisfy the predicate Unit.areIdentical(). The
 predicate compares every attribute of the Unit objects.
 </p>
 
 @param ud1
            the first UnitDefinition object to compare
 @param ud2
            the second UnitDefinition object to compare
 @return true if all the Unit objects in ud1 are identical to the Unit
         objects of ud2, false otherwise.]]>
      </doc>
    </method>
    <method name="getPredefinedUnit" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[This method returns the predefined unit with the given identifier for the
 specified level and version combination or null if either for the given
 combination of level and version there is no such predefined unit or the
 identifier is not one of those belonging to the group of predefined unit
 definitions.
 
 @param id
            one of the values
            <ul>
            <li>substance</li>
            <li>volume</li>
            <li>area</li>
            <li>length</li>
            <li>time</li>
            <li>any of the basic kind</li>
            </ul>
 @param level
            a number greater than zero.
 @param version
            a number greater than zero.
 @return The predefined unit definition with the given identifier for the
         specified level version combination or null if no such predefined
         unit exists.]]>
      </doc>
    </method>
    <method name="isBuiltIn" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use {@link #isPredefined()}">
      <param name="ud" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Test if the given unit is a predefined unit.
 
 @param ud
 @deprecated use {@link #isPredefined()}]]>
      </doc>
    </method>
    <method name="isPredefined" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="level" type="int"/>
      <doc>
      <![CDATA[@param name
 @param level
 @return]]>
      </doc>
    </method>
    <method name="isPredefined" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ud" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Test if the given unit is a predefined unit.
 
 @param ud
 @return]]>
      </doc>
    </method>
    <method name="length" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Predefined unit for length.]]>
      </doc>
    </method>
    <method name="printUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ud" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Returns a string that expresses the unit definition represented by this
 UnitDefinition object.
 
 @param ud
            the UnitDefinition object
 @return a string expressing the unit definition]]>
      </doc>
    </method>
    <method name="printUnits" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ud" type="org.sbml.jsbml.UnitDefinition"/>
      <param name="compact" type="boolean"/>
      <doc>
      <![CDATA[Returns a string that expresses the unit definition represented by this
 UnitDefinition object.
 
 @param ud
            the UnitDefinition object
 @param compact
            boolean indicating whether the compact form should be used
            (defaults to false)
 @return a string expressing the unit definition]]>
      </doc>
    </method>
    <method name="reorder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ud" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Orders alphabetically the Unit objects within the ListOfUnits of a
 UnitDefinition.
 
 @param ud
            the UnitDefinition object whose units are to be reordered.]]>
      </doc>
    </method>
    <method name="simplify" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ud" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[@param ud
 @return a simplified version of the given {@link UnitDefinition}. In order
         to make sure that the original {@link UnitDefinition} is not
         changed, it is cloned before the simplification.]]>
      </doc>
    </method>
    <method name="substance" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Predefined unit for substance.]]>
      </doc>
    </method>
    <method name="time" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Predefined unit for time.]]>
      </doc>
    </method>
    <method name="volume" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <param name="version" type="int"/>
      <doc>
      <![CDATA[Predefined unit for volume.]]>
      </doc>
    </method>
    <method name="addUnit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="java.lang.String"/>
      <doc>
      <![CDATA[@param unit]]>
      </doc>
    </method>
    <method name="addUnit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="u" type="org.sbml.jsbml.Unit"/>
      <doc>
      <![CDATA[Adds an {@link Unit} to this {@link UnitDefinition}.
 
 @param u]]>
      </doc>
    </method>
    <method name="addUnit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="kind" type="org.sbml.jsbml.Unit.Kind"/>
      <doc>
      <![CDATA[Convenient method to add a new unit object with the given kind that will
 have the same level/version combination than this {@link UnitDefinition}
 object.
 
 @param kind]]>
      </doc>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes all {@link Unit} elements from the list of Units in this object.]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="convertToSIUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method converts this unit definition to a]]>
      </doc>
    </method>
    <method name="createUnit" return="org.sbml.jsbml.Unit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="createUnit" return="org.sbml.jsbml.Unit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="kind" type="org.sbml.jsbml.Unit.Kind"/>
      <doc>
      <![CDATA[@param kind
 @return]]>
      </doc>
    </method>
    <method name="divideBy" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="definition" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Divides this unit definition by the second unit definition.
 
 @param definition]]>
      </doc>
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getListOfUnits" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Unit&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the listOfUnits of this UnitDefinition. Can be empty.]]>
      </doc>
    </method>
    <method name="getNumUnits" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the number of Unit.]]>
      </doc>
    </method>
    <method name="getParent" return="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.UnitDefinition&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUnit" return="org.sbml.jsbml.Unit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[Returns a specific Unit instance belonging to this UnitDefinition.
 
 @param i
            an integer, the index of the Unit to be returned.
 @return the ith Unit of this UnitDefinition]]>
      </doc>
    </method>
    <method name="isBuiltIn" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #isPredefined()}">
      <doc>
      <![CDATA[This method tests if this unit definition is a predefined unit.
 
 @return
 @deprecated use {@link #isPredefined()}]]>
      </doc>
    </method>
    <method name="isIdMandatory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isInvalid" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method checks, if this UnitDefinition only contains Invalid as
 {@link Unit.Kind}.
 
 @return]]>
      </doc>
    </method>
    <method name="isPredefined" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method tests if this unit definition is a predefined unit.
 
 @return]]>
      </doc>
    </method>
    <method name="isSetListOfUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the listOfUnits is not null and not empty.]]>
      </doc>
    </method>
    <method name="isUnitKind" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Convenient method to test whether this {@link UnitDefinition} contains
 exactly one {@link Unit} that itself represents a {@link Kind}, i.e.,
 multiplier = 1, exponent = 1, scale = 1. Note that this method requires
 the level and version attributes of this {@link UnitDefinition} to be
 set.
 
 @return]]>
      </doc>
    </method>
    <method name="isVariantOfArea" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if this UnitDefinition is a variant of Area]]>
      </doc>
    </method>
    <method name="isVariantOfLength" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Convenience function for testing if a given unit definition is a variant
 of the predefined unit identifier 'length'.
 
 @param two
 @return true if this UnitDefinition is a variant of the predefined unit
         length, meaning metres with only arbitrary variations in scale or
         multiplier values; false otherwise.]]>
      </doc>
    </method>
    <method name="isVariantOfSubstance" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Convenience function for testing if a given unit definition is a variant
 of the predefined unit identifier 'substance'.
 
 @return true if this UnitDefinition is a variant of the predefined unit
         substance, meaning moles or items (and grams or kilograms from
         SBML Level 2 Version 2 onwards) with only arbitrary variations in
         scale or multiplier values; false otherwise.]]>
      </doc>
    </method>
    <method name="isVariantOfSubstancePerArea" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isVariantOfSubstancePerLength" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if this UnitDefinition is a variant of substance per length.]]>
      </doc>
    </method>
    <method name="isVariantOfSubstancePerTime" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isVariantOfSubstancePerVolume" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if this UnitDefinition is a variant of substance per volume.]]>
      </doc>
    </method>
    <method name="isVariantOfTime" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Convenience function for testing if a given unit definition is a variant
 of the predefined unit identifier 'time'.
 
 @return {@code true} if this {@link UnitDefinition} is a variant of
         the predefined unit time, meaning second with only arbitrary
         variations in scale or multiplier values; {@code false}
         otherwise.]]>
      </doc>
    </method>
    <method name="isVariantOfVolume" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Convenience function for testing if a given unit definition is a variant
 of the predefined unit identifier 'volume'.
 
 @return {@code true} if this {@link UnitDefinition} is a variant of
         the predefined unit volume, meaning litre or cubic metre with
         only arbitrary variations in scale or multiplier values;
         {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="multiplyWith" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="definition" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Multiplies this unit with the given unit definition, i.e., adds a clone
 of each unit object in the list of units of the given definition to the
 list of this unit.
 
 @param definition
 @return]]>
      </doc>
    </method>
    <method name="raiseByThePowerOf" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exponent" type="double"/>
      <doc>
      <![CDATA[Raises this unit definition by the power of the given exponent, i.e., the
 exponents of every unit contained by this unit definition are multiplied
 with the given exponent.
 
 @param exponent
 @return a pointer to this UnitDefinition.]]>
      </doc>
    </method>
    <method name="removeUnit" return="org.sbml.jsbml.Unit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[Removes the nth Unit object from this UnitDefinition object and returns a
 pointer to it.
 
 The caller owns the returned object and is responsible for deleting it.
 
 @param i
            the index of the Unit object to remove
 @return the Unit object removed. As mentioned above, the caller owns the
         returned item. NULL is returned if the given index is out of
         range.]]>
      </doc>
    </method>
    <method name="setId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
    </method>
    <method name="setListOfUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfUnits" type="org.sbml.jsbml.ListOf&lt;org.sbml.jsbml.Unit&gt;"/>
      <doc>
      <![CDATA[Sets the {@link #listOfUnits} of this {@link UnitDefinition}.
 Automatically sets the parent SBML object of the list to this
 {@link UnitDefinition} instance.
 
 @param listOfUnits]]>
      </doc>
    </method>
    <method name="simplify" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Simplifies the {@link UnitDefinition} so that any {@link Unit} objects
 occurring within the {@link #listOfUnits} occurs only once. {@link Unit}s
 of {@link Kind} {@link Kind.INVALID} are treated like
 {@link Kind.DIMENSIONLESS} units and will therefore tend to disappear by
 merging with other units.
 
 @return a pointer to the simplified {@link UnitDefinition}.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetListOfUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the {@link #listOfUnits} from this {@link UnitDefinition} and
 notifies all registered instances of {@link TreeNodeChangeListener}.
 
 @return {@code true} if calling this method lead to a change in this
         data structure.]]>
      </doc>
    </method>
    <field name="AREA" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Identifier of the (for SBML Level 2) predefined {@link UnitDefinition}
 <code>area</code>.]]>
      </doc>
    </field>
    <field name="LENGTH" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Identifier of the (for SBML Level 2) predefined {@link UnitDefinition}
 <code>length</code>.]]>
      </doc>
    </field>
    <field name="serialVersionUID" type="long"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Generated serial version identifier.]]>
      </doc>
    </field>
    <field name="SUBSTANCE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Identifier of the (for the SBML Levels 1 and 2) predefined
 {@link UnitDefinition} <code>substance</code>.]]>
      </doc>
    </field>
    <field name="TIME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Identifier of the (for the SBML Levels 1 and 2) predefined
 {@link UnitDefinition} <code>time</code>.]]>
      </doc>
    </field>
    <field name="VOLUME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Identifier of the (for some SBML Levels 1 and 2) predefined
 {@link UnitDefinition} <code>volume</code>.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Represents the unitDefinition XML element of a SBML file.
 
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.UnitDefinition -->
  <!-- start interface org.sbml.jsbml.Variable -->
  <interface name="Variable"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.Quantity"/>
    <implements name="org.sbml.jsbml.UniqueNamedSBase"/>
    <method name="getConstant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the constant boolean of this variable.]]>
      </doc>
    </method>
    <method name="isConstant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the constant value if it is set, false otherwise.]]>
      </doc>
    </method>
    <method name="isSetConstant" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the constant boolean of this Variable is not null.]]>
      </doc>
    </method>
    <method name="setConstant"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="constant" type="boolean"/>
      <doc>
      <![CDATA[Sets the constant boolean of this Variable.
 
 @param constant
 @throws PropertyNotAvailableException
             for inappropriate Level/Version combinations depending on the
             implementing class.]]>
      </doc>
    </method>
    <method name="unsetConstant"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[With this method the constant property of this variable will be set to an
 undefined state.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A variable of the system is a {@link Quantity} whose value may change during
 a simulation. To decide whether it has to stay constant, this interface
 provides the necessary methods.
 
 @author Andreas Dr&auml;ger
 @author Nicolas Rodriguez
 @date 2010-04-20
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.Variable -->
  <doc>
  <![CDATA[<p>Pure Java implementation of the data structures to represent all SBML constructs.</p>]]>
  </doc>
</package>
<package name="org.sbml.jsbml.resources">
  <!-- start class org.sbml.jsbml.resources.Resource -->
  <class name="Resource" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getInstance" return="org.sbml.jsbml.resources.Resource"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="readProperties" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resourceName" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[@param resourceName
 @return
 @throws IOException]]>
      </doc>
    </method>
    <method name="getBytesFromResourceLocation" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rawResrcLoc" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets the byte data from a file at the given resource location.
 
 @param rawResrcLoc
            Description of the Parameter
 @return the byte array of file.]]>
      </doc>
    </method>
    <method name="getStreamFromResourceLocation" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rawResrcLoc" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets the byte data from a file at the given resource location.
 
 @param rawResrcLoc
            Description of the Parameter
 @return the byte array of file.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Dummy class that just loads resource files if required.
 
 @author Hannes Borch
 @author Andreas Dr&auml;ger
 @date 2009-02-05
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.resources.Resource -->
  <doc>
  <![CDATA[Contains classes to deal with and to manage non-Java resources, such as configuration
  files.]]>
  </doc>
</package>
<package name="org.sbml.jsbml.text.parser">
  <!-- start class org.sbml.jsbml.text.parser.FormulaParser -->
  <class name="FormulaParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.text.parser.FormulaParserConstants"/>
    <constructor name="FormulaParser" type="java.io.InputStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with InputStream.]]>
      </doc>
    </constructor>
    <constructor name="FormulaParser" type="java.io.InputStream, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with InputStream and supplied encoding]]>
      </doc>
    </constructor>
    <constructor name="FormulaParser" type="java.io.Reader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="FormulaParser" type="org.sbml.jsbml.text.parser.FormulaParserTokenManager"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with generated Token Manager.]]>
      </doc>
    </constructor>
    <method name="string" return="org.sbml.jsbml.text.parser.Token"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <exception name="ParseException" type="org.sbml.jsbml.text.parser.ParseException"/>
    </method>
    <method name="parse" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <exception name="ParseException" type="org.sbml.jsbml.text.parser.ParseException"/>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.InputStream"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.InputStream"/>
      <param name="encoding" type="java.lang.String"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.Reader"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tm" type="org.sbml.jsbml.text.parser.FormulaParserTokenManager"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="getNextToken" return="org.sbml.jsbml.text.parser.Token"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the next Token.]]>
      </doc>
    </method>
    <method name="getToken" return="org.sbml.jsbml.text.parser.Token"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Get the specific Token.]]>
      </doc>
    </method>
    <method name="generateParseException" return="org.sbml.jsbml.text.parser.ParseException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Generate ParseException.]]>
      </doc>
    </method>
    <method name="enable_tracing"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Enable tracing.]]>
      </doc>
    </method>
    <method name="disable_tracing"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Disable tracing.]]>
      </doc>
    </method>
    <field name="token_source" type="org.sbml.jsbml.text.parser.FormulaParserTokenManager"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Generated Token Manager.]]>
      </doc>
    </field>
    <field name="token" type="org.sbml.jsbml.text.parser.Token"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Current token.]]>
      </doc>
    </field>
    <field name="jj_nt" type="org.sbml.jsbml.text.parser.Token"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Next token.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[@since 0.8
 @version $Rev: 949 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.text.parser.FormulaParser -->
  <!-- start interface org.sbml.jsbml.text.parser.FormulaParserConstants -->
  <interface name="FormulaParserConstants"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="EOF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[End of File.]]>
      </doc>
    </field>
    <field name="INTEGER" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="DIGIT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="NUMBER" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="EXPNUMBER" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="SLPITTER" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="PLUS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="POWER" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="MINUS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="TIMES" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="DIVIDE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="FACTORIAL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="OPEN_PAR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="CLOSE_PAR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="COMPARISON" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="BOOLEAN_LOGIC" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="AND" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="OR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="XOR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="NOT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="LOG" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="STRING" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="IDCHAR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="LETTER" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="EOL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="DEFAULT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Lexical state.]]>
      </doc>
    </field>
    <field name="tokenImage" type="java.lang.String[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Literal token values.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Token literal values and constants.
 Generated by org.javacc.parser.OtherFilesGen#start()
 @since 0.8
 @version $Rev: 635 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.text.parser.FormulaParserConstants -->
  <!-- start class org.sbml.jsbml.text.parser.FormulaParserTokenManager -->
  <class name="FormulaParserTokenManager" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.text.parser.FormulaParserConstants"/>
    <constructor name="FormulaParserTokenManager" type="org.sbml.jsbml.text.parser.SimpleCharStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="FormulaParserTokenManager" type="org.sbml.jsbml.text.parser.SimpleCharStream, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <method name="setDebugStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ds" type="java.io.PrintStream"/>
      <doc>
      <![CDATA[Set debug output.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="org.sbml.jsbml.text.parser.SimpleCharStream"/>
      <doc>
      <![CDATA[Reinitialise parser.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="org.sbml.jsbml.text.parser.SimpleCharStream"/>
      <param name="lexState" type="int"/>
      <doc>
      <![CDATA[Reinitialise parser.]]>
      </doc>
    </method>
    <method name="SwitchTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lexState" type="int"/>
      <doc>
      <![CDATA[Switch to specified lex state.]]>
      </doc>
    </method>
    <method name="jjFillToken" return="org.sbml.jsbml.text.parser.Token"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="getNextToken" return="org.sbml.jsbml.text.parser.Token"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the next Token.]]>
      </doc>
    </method>
    <field name="debugStream" type="java.io.PrintStream"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Debug output.]]>
      </doc>
    </field>
    <field name="jjstrLiteralImages" type="java.lang.String[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Token literal values.]]>
      </doc>
    </field>
    <field name="lexStateNames" type="java.lang.String[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Lexer state names.]]>
      </doc>
    </field>
    <field name="input_stream" type="org.sbml.jsbml.text.parser.SimpleCharStream"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="curChar" type="char"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Token Manager. 
 @since 0.8
 @version $Rev: 949 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.text.parser.FormulaParserTokenManager -->
  <!-- start class org.sbml.jsbml.text.parser.ParseException -->
  <class name="ParseException" extends="java.lang.Exception"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ParseException" type="org.sbml.jsbml.text.parser.Token, int[][], java.lang.String[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This constructor is used by the method "generateParseException"
 in the generated parser.  Calling this constructor generates
 a new object of this type with the fields "currentToken",
 "expectedTokenSequences", and "tokenImage" set.]]>
      </doc>
    </constructor>
    <constructor name="ParseException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The following constructors are for use by you for whatever
 purpose you can think of.  Constructing the exception in this
 manner makes the exception behave in the normal way - i.e., as
 documented in the class "Throwable".  The fields "errorToken",
 "expectedTokenSequences", and "tokenImage" do not contain
 relevant information.  The JavaCC generated code does not use
 these constructors.]]>
      </doc>
    </constructor>
    <constructor name="ParseException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with message.]]>
      </doc>
    </constructor>
    <field name="currentToken" type="org.sbml.jsbml.text.parser.Token"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This is the last token that has been consumed successfully.  If
 this object has been created due to a parse error, the token
 followng this token will (therefore) be the first error token.]]>
      </doc>
    </field>
    <field name="expectedTokenSequences" type="int[][]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Each entry in this array is an array of integers.  Each array
 of integers represents a sequence of tokens (by their ordinal
 values) that is expected at this point of the parse.]]>
      </doc>
    </field>
    <field name="tokenImage" type="java.lang.String[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This is a reference to the "tokenImage" array of the generated
 parser within which the parse error occurred.  This array is
 defined in the generated ...Constants interface.]]>
      </doc>
    </field>
    <field name="eol" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The end of line string for this machine.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This exception is thrown when parse errors are encountered. You can
 explicitly create objects of this exception type by calling the method
 generateParseException in the generated parser.
 
 You can modify this class to customize your error reporting mechanisms so
 long as you retain the public fields.
 
 @since 0.8
 @version $Rev: 635 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.text.parser.ParseException -->
  <!-- start class org.sbml.jsbml.text.parser.SimpleCharStream -->
  <class name="SimpleCharStream" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SimpleCharStream" type="java.io.Reader, int, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="SimpleCharStream" type="java.io.Reader, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="SimpleCharStream" type="java.io.Reader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="SimpleCharStream" type="java.io.InputStream, java.lang.String, int, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="UnsupportedEncodingException" type="java.io.UnsupportedEncodingException"/>
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="SimpleCharStream" type="java.io.InputStream, int, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="SimpleCharStream" type="java.io.InputStream, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="UnsupportedEncodingException" type="java.io.UnsupportedEncodingException"/>
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="SimpleCharStream" type="java.io.InputStream, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="SimpleCharStream" type="java.io.InputStream, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="UnsupportedEncodingException" type="java.io.UnsupportedEncodingException"/>
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="SimpleCharStream" type="java.io.InputStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <method name="setTabSize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="i" type="int"/>
    </method>
    <method name="getTabSize" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="i" type="int"/>
    </method>
    <method name="ExpandBuff"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="wrapAround" type="boolean"/>
    </method>
    <method name="FillBuff"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="BeginToken" return="char"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Start.]]>
      </doc>
    </method>
    <method name="UpdateLineColumn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="c" type="char"/>
    </method>
    <method name="readChar" return="char"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Read a character.]]>
      </doc>
    </method>
    <method name="getColumn" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLine" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getEndColumn" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get token end column number.]]>
      </doc>
    </method>
    <method name="getEndLine" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get token end line number.]]>
      </doc>
    </method>
    <method name="getBeginColumn" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get token beginning column number.]]>
      </doc>
    </method>
    <method name="getBeginLine" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get token beginning line number.]]>
      </doc>
    </method>
    <method name="backup"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="amount" type="int"/>
      <doc>
      <![CDATA[Backup a number of characters.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.Reader"/>
      <param name="startline" type="int"/>
      <param name="startcolumn" type="int"/>
      <param name="buffersize" type="int"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.Reader"/>
      <param name="startline" type="int"/>
      <param name="startcolumn" type="int"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.Reader"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.InputStream"/>
      <param name="encoding" type="java.lang.String"/>
      <param name="startline" type="int"/>
      <param name="startcolumn" type="int"/>
      <param name="buffersize" type="int"/>
      <exception name="UnsupportedEncodingException" type="java.io.UnsupportedEncodingException"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.InputStream"/>
      <param name="startline" type="int"/>
      <param name="startcolumn" type="int"/>
      <param name="buffersize" type="int"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.InputStream"/>
      <param name="encoding" type="java.lang.String"/>
      <exception name="UnsupportedEncodingException" type="java.io.UnsupportedEncodingException"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.InputStream"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.InputStream"/>
      <param name="encoding" type="java.lang.String"/>
      <param name="startline" type="int"/>
      <param name="startcolumn" type="int"/>
      <exception name="UnsupportedEncodingException" type="java.io.UnsupportedEncodingException"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.InputStream"/>
      <param name="startline" type="int"/>
      <param name="startcolumn" type="int"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="GetImage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get token literal value.]]>
      </doc>
    </method>
    <method name="GetSuffix" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="len" type="int"/>
      <doc>
      <![CDATA[Get the suffix.]]>
      </doc>
    </method>
    <method name="Done"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Reset buffer when finished.]]>
      </doc>
    </method>
    <method name="adjustBeginLineColumn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newLine" type="int"/>
      <param name="newCol" type="int"/>
      <doc>
      <![CDATA[Method to adjust line and column numbers for the start of a token.]]>
      </doc>
    </method>
    <field name="staticFlag" type="boolean"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Whether parser is static.]]>
      </doc>
    </field>
    <field name="bufpos" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Position in buffer.]]>
      </doc>
    </field>
    <field name="bufline" type="int[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="bufcolumn" type="int[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="column" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="line" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="prevCharIsCR" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="prevCharIsLF" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="inputStream" type="java.io.Reader"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="buffer" type="char[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="maxNextCharInd" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="inBuf" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="tabSize" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[An implementation of interface CharStream, where the stream is assumed to
 contain only ASCII characters (without unicode processing).
 @since 0.8
 @version $Rev: 635 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.text.parser.SimpleCharStream -->
  <!-- start class org.sbml.jsbml.text.parser.Token -->
  <class name="Token" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="Token"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[No-argument constructor]]>
      </doc>
    </constructor>
    <constructor name="Token" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new token for the specified Image.]]>
      </doc>
    </constructor>
    <constructor name="Token" type="int, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new token for the specified Image and Kind.]]>
      </doc>
    </constructor>
    <method name="getValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[An optional attribute value of the Token.
 Tokens which are not used as syntactic sugar will often contain
 meaningful values that will be used later on by the compiler or
 interpreter. This attribute value is often different from the image.
 Any subclass of Token that actually wants to return a non-null value can
 override this method as appropriate.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the image.]]>
      </doc>
    </method>
    <method name="newToken" return="org.sbml.jsbml.text.parser.Token"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ofKind" type="int"/>
      <param name="image" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a new Token object, by default. However, if you want, you
 can create and return subclass objects based on the value of ofKind.
 Simply add the cases to the switch for all those special cases.
 For example, if you have a subclass of Token called IDToken that
 you want to create if ofKind is ID, simply add something like :

    case MyParserConstants.ID : return new IDToken(ofKind, image);

 to the following switch statement. Then you can cast matchedToken
 variable to the appropriate type and use sit in your lexical actions.]]>
      </doc>
    </method>
    <method name="newToken" return="org.sbml.jsbml.text.parser.Token"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ofKind" type="int"/>
    </method>
    <field name="kind" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[An integer that describes the kind of this token.  This numbering
 system is determined by JavaCCParser, and a table of these numbers is
 stored in the file ...Constants.java.]]>
      </doc>
    </field>
    <field name="beginLine" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The line number of the first character of this Token.]]>
      </doc>
    </field>
    <field name="beginColumn" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The column number of the first character of this Token.]]>
      </doc>
    </field>
    <field name="endLine" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The line number of the last character of this Token.]]>
      </doc>
    </field>
    <field name="endColumn" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The column number of the last character of this Token.]]>
      </doc>
    </field>
    <field name="image" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The string image of the token.]]>
      </doc>
    </field>
    <field name="next" type="org.sbml.jsbml.text.parser.Token"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A reference to the next regular (non-special) token from the input
 stream.  If this is the last token from the input stream, or if the
 token manager has not read tokens beyond this one, this field is
 set to null.  This is true only if this token is also a regular
 token.  Otherwise, see below for a description of the contents of
 this field.]]>
      </doc>
    </field>
    <field name="specialToken" type="org.sbml.jsbml.text.parser.Token"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This field is used to access special tokens that occur prior to this
 token, but after the immediately preceding regular (non-special) token.
 If there are no such special tokens, this field is set to null.
 When there are more than one such special token, this field refers
 to the last of these special tokens, which in turn refers to the next
 previous special token through its specialToken field, and so on
 until the first special token (whose specialToken field is null).
 The next fields of special tokens refer to other special tokens that
 immediately follow it (without an intervening regular token).  If there
 is no such token, this field is null.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Describes the input token stream.
 @since 0.8
 @version $Rev: 635 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.text.parser.Token -->
  <!-- start class org.sbml.jsbml.text.parser.TokenMgrError -->
  <class name="TokenMgrError" extends="java.lang.Error"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TokenMgrError"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[No arg constructor.]]>
      </doc>
    </constructor>
    <constructor name="TokenMgrError" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with message and reason.]]>
      </doc>
    </constructor>
    <constructor name="TokenMgrError" type="boolean, int, int, int, java.lang.String, char, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Full Constructor.]]>
      </doc>
    </constructor>
    <method name="addEscapes" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <doc>
      <![CDATA[Replaces unprintable characters by their escaped (or unicode escaped)
 equivalents in the given string]]>
      </doc>
    </method>
    <method name="LexicalError" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="EOFSeen" type="boolean"/>
      <param name="lexState" type="int"/>
      <param name="errorLine" type="int"/>
      <param name="errorColumn" type="int"/>
      <param name="errorAfter" type="java.lang.String"/>
      <param name="curChar" type="char"/>
      <doc>
      <![CDATA[Returns a detailed message for the Error when it is thrown by the
 token manager to indicate a lexical error.
 Parameters :
    EOFSeen     : indicates if EOF caused the lexical error
    curLexState : lexical state in which this error occurred
    errorLine   : line number when the error occurred
    errorColumn : column number when the error occurred
    errorAfter  : prefix that was seen before this error occurred
    curchar     : the offending character
 Note: You can customize the lexical error message by modifying this method.]]>
      </doc>
    </method>
    <method name="getMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[You can also modify the body of this method to customize your error messages.
 For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not
 of end-users concern, so you can return something like :

     "Internal Error : Please file a bug report .... "

 from this method for such cases in the release version of your parser.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Token Manager Error.
 
 @since 0.8
 @version $Rev: 635 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.text.parser.TokenMgrError -->
  <doc>
  <![CDATA[Provides classes to parse formula
  Strings and to convert these into abstract syntax tree data structures.
  All these classes are generated automatically using JavaCC. The JSBML
  source code distribution contains the grammar specification necessary
  for this in the files folder (FormulaParser.jj).]]>
  </doc>
</package>
<package name="org.sbml.jsbml.util">
  <!-- start class org.sbml.jsbml.util.Detail -->
  <class name="Detail" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Detail"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getCategory" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setCategory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="int"/>
    </method>
    <method name="getSeverity" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setSeverity"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="severity" type="int"/>
    </method>
  </class>
  <!-- end class org.sbml.jsbml.util.Detail -->
  <!-- start interface org.sbml.jsbml.util.DocumentFactory -->
  <interface name="DocumentFactory"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="create" return="org.w3c.dom.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="byteStream" type="java.io.InputStream"/>
      <param name="namespaceAware" type="boolean"/>
      <exception name="SAXException" type="org.xml.sax.SAXException"/>
      <doc>
      <![CDATA[Creates an XML DOM document by parsing the content of the specified byte
 stream as XML, using a <i>nonvalidating</i> parser.
 
 @param byteStream
            The byte stream whose content is parsed as XML to create the
            XML DOM document.
 @param namespaceAware
            A flag to indicate whether the parser should know about
            namespaces or not.
 @return The <code>org.w3c.dom.Document</code> instance representing the
         XML DOM document created from the <code>byteStream</code> XML
         content.
 @throws SAXException]]>
      </doc>
    </method>
    <method name="create" return="org.w3c.dom.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="byteStream" type="java.io.InputStream"/>
      <param name="schemas" type="java.lang.Object[]"/>
      <param name="handler" type="org.xml.sax.ErrorHandler"/>
      <exception name="SAXException" type="org.xml.sax.SAXException"/>
      <doc>
      <![CDATA[Creates an XML DOM document by parsing the content of the specified byte
 stream as XML, using a <i>validating</i> parser.
 
 @param byteStream
            The byte stream whose content is parsed as XML to create the
            XML DOM document.
 @param schemas
            An optional array of either <code>java.io.File</code>
            instances containing the abstract pathnames, or of
            <code>java.io.String</code> instances containing the URIs,
            pointing to the schemas to use in the validation process. If
            set to {@code null}, the schemas defined in the data set
            will be used. If set to {@code null} and no schemas are
            found in the data set, an exception is most likely to be
            thrown by the underlying implementation.
 @param handler
            The error handler to be used to report errors occurred while
            parsing the <code>byteStream</code> XML content. Setting this
            to {@code null} will result in the underlying
            implementation using it's own default implementation and
            behavior.
 @return The <code>org.w3c.dom.Document</code> instance representing the
         XML DOM document created from the <code>byteStream</code> XML
         content.
 @throws SAXException]]>
      </doc>
    </method>
    <method name="create" return="org.w3c.dom.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="characterStream" type="java.io.Reader"/>
      <param name="namespaceAware" type="boolean"/>
      <exception name="SAXException" type="org.xml.sax.SAXException"/>
      <doc>
      <![CDATA[Creates an XML DOM document by parsing the content of the specified
 character stream as XML, using a <i>nonvalidating</i> parser.
 
 @param characterStream
            The character stream whose content is parsed as XML to create
            the XML DOM document.
 @param namespaceAware
            A flag to indicate whether the parser should know about
            namespaces or not.
 @return The <code>org.w3c.dom.Document</code> instance representing the
         XML DOM document created from the <code>characterStream</code>
         XML content.
 @throws SAXException]]>
      </doc>
    </method>
    <method name="create" return="org.w3c.dom.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="characterStream" type="java.io.Reader"/>
      <param name="schemas" type="java.lang.Object[]"/>
      <param name="handler" type="org.xml.sax.ErrorHandler"/>
      <doc>
      <![CDATA[Creates an XML DOM document by parsing the content of the specified
 character stream as XML, using a <i>validating</i> parser.
 
 @param characterStream
            The character stream whose content is parsed as XML to create
            the XML DOM document.
 @param schemas
            An optional array of either <code>java.io.File</code>
            instances containing the abstract pathnames, or of
            <code>java.io.String</code> instances containing the URIs,
            pointing to the schemas to use in the validation process. If
            set to {@code null}, the schemas defined in the data set
            will be used. If set to {@code null} and no schemas are
            found in the data set, an exception is most likely to be
            thrown by the underlying implementation.
 @param handler
            The error handler to be used to report errors occurred while
            parsing the <code>characterStream</code> XML content. Setting
            this to {@code null} will result in the underlying
            implementation using it's own default implementation and
            behavior.
 @return The <code>org.w3c.dom.Document</code> instance representing the
         XML DOM document created from the <code>characterStream</code>
         XML content.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An interface for XML DOM document factories.
 
 @author Marco Donizelli
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.util.DocumentFactory -->
  <!-- start interface org.sbml.jsbml.util.IOProgressListener -->
  <interface name="IOProgressListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.EventListener"/>
    <method name="ioProgressOn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="currObject" type="java.lang.Object"/>
      <doc>
      <![CDATA[Method to report progress when reading or writing the current object has
 been finished.
 
 @param currObject
            the object that has just been written or read.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.util.IOProgressListener -->
  <!-- start class org.sbml.jsbml.util.JAXPFacade -->
  <class name="JAXPFacade" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.util.DocumentFactory"/>
    <implements name="org.sbml.jsbml.util.SAX2Parser"/>
    <implements name="org.sbml.jsbml.util.NodeWriter"/>
    <method name="getInstance" return="org.sbml.jsbml.util.JAXPFacade"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a new <code>JAXPFacade</code>.
 
 @return A new <code>JAXPFacade</code>.]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.w3c.dom.Node"/>
      <param name="characterStream" type="java.io.Writer"/>
      <param name="streamSource" type="javax.xml.transform.stream.StreamSource"/>
      <param name="indent" type="boolean"/>
      <doc>
      <![CDATA[Writes an XML DOM node to the specified character stream, using a
 <code>javax.xml.transform.Transformer</code> instance created from
 <code>streamSource</code>.
 
 @param node
            The <code>org.w3c.dom.Node</code> instance representing the
            XML DOM node to be written to <code>characterStream</code>.
 @param characterStream
            The character stream where <code>node</code> is to be written.
 @param streamSource
            An object that holds an URI, input stream, etc.
 @param indent
            Flag to indicate whether the output should be indented or not.
 @throws NullPointerException
             If <code>node</code> or <code>characterStream</code> are
             {@code null}.
 @throws RuntimeException
             If any error occurs (transformer configuration errors,
             transformer errors).]]>
      </doc>
    </method>
    <method name="create" return="org.w3c.dom.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="byteStream" type="java.io.InputStream"/>
      <param name="namespaceAware" type="boolean"/>
      <exception name="SAXException" type="org.xml.sax.SAXException"/>
      <doc>
      <![CDATA[Creates an XML DOM document by parsing the content of the specified byte
 stream as XML, using a <i>nonvalidating</i> parser.
 
 @param byteStream
            The byte stream which content is parsed as XML to create the
            XML DOM document.
 @param namespaceAware
            A flag to indicate whether the parser should know about
            namespaces or not.
 @return The <code>org.w3c.dom.Document</code> instance representing the
         XML DOM document created from the <code>byteStream</code> XML
         content.
 @throws SAXException
 @throws NullPointerException
             If <code>byteStream</code> is {@code null}.
 @throws RuntimeException
             If any error occurs (parser configuration errors, I/O errors,
             SAX parsing errors).]]>
      </doc>
    </method>
    <method name="create" return="org.w3c.dom.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="byteStream" type="java.io.InputStream"/>
      <param name="schemas" type="java.lang.Object[]"/>
      <param name="handler" type="org.xml.sax.ErrorHandler"/>
      <exception name="SAXException" type="org.xml.sax.SAXException"/>
      <doc>
      <![CDATA[Creates an XML DOM document by parsing the content of the specified byte
 stream as XML, using a <i>validating</i> parser.
 
 @param byteStream
            The byte stream whose content is parsed as XML to create the
            XML DOM document.
 @param schemas
            An optional array of either <code>java.io.File</code>
            instances containing the abstract pathnames, or of
            <code>java.io.String</code> instances containing the URIs,
            pointing to the schemas to use in the validation process. If
            set to {@code null}, the schemas defined in the data set
            will be used. If set to {@code null} and no schemas are
            found in the data set, an
            <code>org.xml.sax.SAXParseException</code> is thrown.
 @param handler
            The error handler to be used to report errors occurred while
            parsing the <code>byteStream</code> XML content. Setting this
            to {@code null} will result in the underlying
            implementation using it's own default implementation and
            behavior.
 @return The <code>org.w3c.dom.Document</code> instance representing the
         XML DOM document created from the <code>byteStream</code> XML
         content.
 @throws SAXException
 @throws NullPointerException
             If <code>byteStream</code> is {@code null}.
 @throws RuntimeException
             If any error occurs (parser configuration errors, I/O errors,
             SAX parsing errors).]]>
      </doc>
    </method>
    <method name="create" return="org.w3c.dom.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="characterStream" type="java.io.Reader"/>
      <param name="namespaceAware" type="boolean"/>
      <exception name="SAXException" type="org.xml.sax.SAXException"/>
      <doc>
      <![CDATA[Creates an XML DOM document by parsing the content of the specified
 character stream as XML, using a <i>nonvalidating</i> parser.
 
 @param characterStream
            The character stream whose content is parsed as XML to create
            the XML DOM document.
 @param namespaceAware
            A flag to indicate whether the parser should know about
            namespaces or not.
 @return The <code>org.w3c.dom.Document</code> instance representing the
         XML DOM document created from the <code>characterStream</code>
         XML content.
 @throws SAXException
 @throws NullPointerException
             If <code>characterStream</code> is {@code null}.
 @throws RuntimeException
             If any error occurs (parser configuration errors, I/O errors,
             SAX parsing errors).]]>
      </doc>
    </method>
    <method name="create" return="org.w3c.dom.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="characterStream" type="java.io.Reader"/>
      <param name="schemas" type="java.lang.Object[]"/>
      <param name="handler" type="org.xml.sax.ErrorHandler"/>
      <doc>
      <![CDATA[Creates an XML DOM document by parsing the content of the specified
 character stream as XML, using a <i>validating</i> parser.
 
 @param characterStream
            The character stream whose content is parsed as XML to create
            the XML DOM document.
 @param schemas
            An optional array of either <code>java.io.File</code>
            instances containing the abstract pathnames, or of
            <code>java.io.String</code> instances containing the URIs,
            pointing to the schemas to use in the validation process. If
            set to {@code null}, the schemas defined in the data set
            will be used. If set to {@code null} and no schemas are
            found in the data set, an
            <code>org.xml.sax.SAXParseException</code> is thrown.
 @param handler
            The error handler to be used to report errors occurred while
            parsing the <code>characterStream</code> XML content. Setting
            this to {@code null} will result in the underlying
            implementation using it's own default implementation and
            behavior.
 @return The <code>org.w3c.dom.Document</code> instance representing the
         XML DOM document created from the <code>characterStream</code>
         XML content.
 @throws NullPointerException
             If <code>characterStream</code> is {@code null}.
 @throws RuntimeException
             If any error occurs (parser configuration errors, I/O errors,
             SAX parsing errors).]]>
      </doc>
    </method>
    <method name="parse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="byteStream" type="java.io.InputStream"/>
      <param name="handler" type="org.xml.sax.helpers.DefaultHandler"/>
      <param name="namespaceAware" type="boolean"/>
      <doc>
      <![CDATA[Parses the content of a byte stream as XML, using a <i>nonvalidating</i>
 parser and the specified SAX2 default event handler.
 
 @param byteStream
            The byte stream which content has to be parsed as XML.
 @param handler
            The SAX2 default event handler to use for parsing
            <code>byteStream</code>.
 @param namespaceAware
            A flag to indicate whether the parser should know about
            namespaces or not.
 @throws NullPointerException
             If <code>byteStream</code> or <code>handler</code> are
             {@code null}.
 @throws RuntimeException
             If any error occurs (parser configuration errors, I/O errors,
             SAX parsing errors).]]>
      </doc>
    </method>
    <method name="parse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="byteStream" type="java.io.InputStream"/>
      <param name="handler" type="org.xml.sax.helpers.DefaultHandler"/>
      <param name="schemas" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Parses the content of a byte stream as XML, using a <i>validating</i>
 parser and the specified SAX2 default event handler.
 
 @param byteStream
            The byte stream which content has to be parsed as XML.
 @param handler
            The SAX2 default event handler to use for parsing
            <code>byteStream</code>.
 @param schemas
            An optional array of either <code>java.io.File</code>
            instances containing the abstract pathnames, or of
            <code>java.io.String</code> instances containing the URIs,
            pointing to the schemas to use in the validation process. If
            set to {@code null}, the schemas defined in the data set
            will be used. If set to {@code null} and no schemas are
            found in the data set, an
            <code>org.xml.sax.SAXParseException</code> is thrown.
 @throws NullPointerException
             If <code>byteStream</code> or <code>handler</code> are
             {@code null}.
 @throws RuntimeException
             If any error occurs (parser configuration errors, I/O errors,
             SAX parsing errors).]]>
      </doc>
    </method>
    <method name="parse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="characterStream" type="java.io.Reader"/>
      <param name="handler" type="org.xml.sax.helpers.DefaultHandler"/>
      <param name="namespaceAware" type="boolean"/>
      <doc>
      <![CDATA[Parses the content of a character stream as XML, using a
 <i>nonvalidating</i> parser and the specified SAX2 default event handler.
 
 @param characterStream
            The character stream which content has to be parsed as XML.
 @param handler
            The SAX2 default event handler to use for parsing
            <code>characterStream</code>.
 @param namespaceAware
            A flag to indicate whether the parser should know about
            namespaces or not.
 @throws NullPointerException
             If <code>characterStream</code> or <code>handler</code> are
             {@code null}.
 @throws RuntimeException
             If any error occurs (parser configuration errors, I/O errors,
             SAX parsing errors).]]>
      </doc>
    </method>
    <method name="parse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="characterStream" type="java.io.Reader"/>
      <param name="handler" type="org.xml.sax.helpers.DefaultHandler"/>
      <param name="schemas" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Parses the content of a character stream as XML, using a
 <i>validating</i> parser and the specified SAX2 default event handler.
 
 @param characterStream
            The character stream which content has to be parsed as XML.
 @param handler
            The SAX2 default event handler to use for parsing
            <code>characterStream</code>.
 @param schemas
            An optional array of either <code>java.io.File</code>
            instances containing the abstract pathnames, or of
            <code>java.io.String</code> instances containing the URIs,
            pointing to the schemas to use in the validation process. If
            set to {@code null}, the schemas defined in the data set
            will be used. If set to {@code null} and no schemas are
            found in the data set, an
            <code>org.xml.sax.SAXParseException</code> is thrown.
 @throws NullPointerException
             If <code>characterStream</code> or <code>handler</code> are
             {@code null}.
 @throws RuntimeException
             If any error occurs (parser configuration errors, I/O errors,
             SAX parsing errors).]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.w3c.dom.Node"/>
      <param name="byteStream" type="java.io.OutputStream"/>
      <param name="indent" type="boolean"/>
      <doc>
      <![CDATA[Writes an XML DOM node to the specified byte stream.
 
 @param node
            The <code>org.w3c.dom.Node</code> instance representing the
            XML DOM node to be written to <code>byteStream</code>.
 @param byteStream
            The byte stream where <code>node</code> is to be written.
 @param indent
            Flag to indicate whether the output should be indented or not.
 @throws NullPointerException
             If <code>node</code> or <code>byteStream</code> are
             {@code null}.
 @throws RuntimeException
             If any error occurs (transformer configuration errors,
             transformer errors).]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.w3c.dom.Node"/>
      <param name="byteStream" type="java.io.OutputStream"/>
      <param name="streamSource" type="javax.xml.transform.stream.StreamSource"/>
      <param name="indent" type="boolean"/>
      <doc>
      <![CDATA[Writes an XML DOM node to the specified byte stream, using a
 <code>javax.xml.transform.Transformer</code> instance created from
 <code>streamSource</code>.
 
 @param node
            The <code>org.w3c.dom.Node</code> instance representing the
            XML DOM node to be written to <code>byteStream</code>.
 @param byteStream
            The byte stream where <code>node</code> is to be written.
 @param streamSource
            An object that holds an URI, input stream, etc.
 @param indent
            Flag to indicate whether the output should be indented or not.
 @throws NullPointerException
             If <code>node</code> or <code>byteStream</code> are
             {@code null}.
 @throws RuntimeException
             If any error occurs (transformer configuration errors,
             transformer errors).]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.w3c.dom.Node"/>
      <param name="characterStream" type="java.io.Writer"/>
      <param name="indent" type="boolean"/>
      <doc>
      <![CDATA[Writes an XML DOM node to the specified character stream.
 
 @param node
            The <code>org.w3c.dom.Node</code> instance representing the
            XML DOM node to be written to <code>characterStream</code>.
 @param characterStream
            The character stream where <code>node</code> is to be written.
 @param indent
            Flag to indicate whether the output should be indented or not.
 @throws NullPointerException
             If <code>node</code> or <code>characterStream</code> are
             {@code null}.
 @throws RuntimeException
             If any error occurs (transformer configuration errors,
             transformer errors).]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A convenient <i>Facade</i> to parse and write byte and character streams with
 XML content using the interfaces and classes defined by the JAXP
 specification.
 
 @author Marco Donizelli
 @see DocumentFactory
 @see SAX2Parser
 @see NodeWriter
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.JAXPFacade -->
  <!-- start class org.sbml.jsbml.util.Location -->
  <class name="Location" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Location"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Location" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param line
 @param column]]>
      </doc>
    </constructor>
    <method name="getColumn" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getLine" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="setColumn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="column" type="int"/>
      <doc>
      <![CDATA[@param column]]>
      </doc>
    </method>
    <method name="setLine"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="line" type="int"/>
      <doc>
      <![CDATA[@param line]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.Location -->
  <!-- start class org.sbml.jsbml.util.Maths -->
  <class name="Maths" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="arccosh" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="double"/>
      <doc>
      <![CDATA[This method computes the arccosh of n
 
 @param n
 @return]]>
      </doc>
    </method>
    <method name="arccot" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="double"/>
      <doc>
      <![CDATA[This method computes the arcus-cotangens of a double value.
 
 @param x
 @return]]>
      </doc>
    </method>
    <method name="arccoth" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="double"/>
      <doc>
      <![CDATA[This method computes the arccoth of n
 
 @param n
 @return]]>
      </doc>
    </method>
    <method name="arccsc" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="double"/>
      <doc>
      <![CDATA[This method computes the arccosecant of a double value
 
 @param x
 @return]]>
      </doc>
    </method>
    <method name="arccsch" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="double"/>
      <doc>
      <![CDATA[This method computes the arccsch of n
 
 @param n
 @return]]>
      </doc>
    </method>
    <method name="arcsec" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="double"/>
      <doc>
      <![CDATA[This method computes the arcsecant of a double value
 
 @param x
 @return]]>
      </doc>
    </method>
    <method name="arcsech" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="double"/>
      <doc>
      <![CDATA[This method computes the arcsech of n
 
 @param n
 @return]]>
      </doc>
    </method>
    <method name="arcsinh" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="double"/>
      <doc>
      <![CDATA[This method computes the arcsinh of n
 
 @param n
 @return]]>
      </doc>
    </method>
    <method name="arctanh" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="double"/>
      <doc>
      <![CDATA[This method computes the arctanh of n
 
 @param n
 @return]]>
      </doc>
    </method>
    <method name="cot" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="double"/>
      <doc>
      <![CDATA[This method computes the cot of n
 
 @param n
 @return]]>
      </doc>
    </method>
    <method name="coth" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="double"/>
      <doc>
      <![CDATA[This method computes the coth of n
 
 @param n
 @return]]>
      </doc>
    </method>
    <method name="csc" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="double"/>
      <doc>
      <![CDATA[This method computes the csc of n
 
 @param n
 @return]]>
      </doc>
    </method>
    <method name="csch" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="double"/>
      <doc>
      <![CDATA[This method computes the csch of n
 
 @param n
 @return]]>
      </doc>
    </method>
    <method name="factorial" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[This method computes the factorial! function.
 
 @param n
 @return]]>
      </doc>
    </method>
    <method name="ln" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="double"/>
      <doc>
      <![CDATA[This method computes the ln of n
 
 @param n
 @return]]>
      </doc>
    </method>
    <method name="isInt" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="double"/>
      <doc>
      <![CDATA[Checks if the given argument represents an integer number, i.e., if it can
 be casted to int without loosing information.
 
 @param x
 @return]]>
      </doc>
    </method>
    <method name="log" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="double"/>
      <doc>
      <![CDATA[This method computes the log of n to the base 10
 
 @param n
 @return]]>
      </doc>
    </method>
    <method name="log" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="number" type="double"/>
      <param name="base" type="double"/>
      <doc>
      <![CDATA[This method computes the logarithm of a number x to a giving base b.
 
 @param number
 @param base
 @return]]>
      </doc>
    </method>
    <method name="root" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="radiant" type="double"/>
      <param name="rootExponent" type="double"/>
      <doc>
      <![CDATA[This method computes the rootExponent-th root of the radiant
 
 @param radiant
 @param rootExponent
 @return]]>
      </doc>
    </method>
    <method name="sec" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="double"/>
      <doc>
      <![CDATA[This method computes the secant of a double value.
 
 @param x
 @return]]>
      </doc>
    </method>
    <method name="sech" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="double"/>
      <doc>
      <![CDATA[This method computes the sech of n
 
 @param n
 @return]]>
      </doc>
    </method>
    <field name="AVOGADRO_L3V1" type="double"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Avogadro's constant of 6.02214179 &#8901; 10<sup>23</sup>
 mol<sup>-1</sup>. The standard deviation of this constant is approximately
 36 &#8901;
 10<sup>16</sup> mol<sup>-1</sup>. See Mohr, P. J., Taylor, B. N., and
 Newell, D. B. (2008). CODATA Recommended Values of the Fundamental
 22 Physical Constants: 2006. Reviews of Modern Physics, 80:633-731. Note
 that in SBML this number is treated as a dimensionless quantity.
 The suffix of the variable's name (L3V1) suggests that in later SBML values
 new experimentally determined values for this constant could be determined.]]>
      </doc>
    </field>
    <field name="R" type="double"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Universal gas constant of 8.314472 J &#8901; mol<sup>-1</sup> &#8901;
 K<sup>-1</sup> according to D. R. Linde, CRC Handbook of Chemistry and
 PHysics, 81st ed., CRC Press, Boca Raton, Florida, 2000.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This class provides several static methods for mathematical operations such
 as faculty, logarithms and several trigonometric functions, which are not
 part of standard Java, but necessary to evaluate the content of SBML files.
 
 @author Andreas Dr&auml;ger
 @author Diedonn&eacute; Mosu Wouamba
 @author Alexander D&ouml;rr
 @date 2007-10-29
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.Maths -->
  <!-- start class org.sbml.jsbml.util.Message -->
  <class name="Message" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Message"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getLang" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="setLang"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lang" type="java.lang.String"/>
      <doc>
      <![CDATA[@param lang]]>
      </doc>
    </method>
    <method name="setMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messageContent" type="java.lang.String"/>
      <doc>
      <![CDATA[@param messageContent]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.Message -->
  <!-- start interface org.sbml.jsbml.util.NodeWriter -->
  <interface name="NodeWriter"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.w3c.dom.Node"/>
      <param name="byteStream" type="java.io.OutputStream"/>
      <param name="indent" type="boolean"/>
      <doc>
      <![CDATA[Writes an XML DOM node to a byte stream.
 
 @param node
            The <code>org.w3c.dom.Node</code> instance representing the
            XML DOM node to be written to <code>byteStream</code>.
 @param byteStream
            The byte stream where <code>node</code> is to be written.
 @param indent
            Flag to indicate whether the output should be indented or not.]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.w3c.dom.Node"/>
      <param name="characterStream" type="java.io.Writer"/>
      <param name="indent" type="boolean"/>
      <doc>
      <![CDATA[Writes an XML DOM node to a character stream.
 
 @param node
            The <code>org.w3c.dom.Node</code> instance representing the
            XML DOM node to be written to <code>characterStream</code>.
 @param characterStream
            The character stream where <code>node</code> is to be written.
 @param indent
            Flag to indicate whether the output should be indented or not.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A writer for XML DOM nodes.
 
 @author Marco Donizelli
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.util.NodeWriter -->
  <!-- start class org.sbml.jsbml.util.NotImplementedException -->
  <class name="NotImplementedException" extends="java.lang.Error"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NotImplementedException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="NotImplementedException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param message]]>
      </doc>
    </constructor>
    <constructor name="NotImplementedException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param cause]]>
      </doc>
    </constructor>
    <constructor name="NotImplementedException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param message
 @param cause]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[This kind of {@link Exception} indicates currently missing functionality in
 JSBML. This class will be removed as soon JSBML has implemented all features.
 
 @author Andreas Dr&auml;ger
 @date 2010-10-21
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.NotImplementedException -->
  <!-- start class org.sbml.jsbml.util.Option -->
  <class name="Option" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Option"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Option" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param name
 @param status]]>
      </doc>
    </constructor>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getStatus" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="setName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[@param name]]>
      </doc>
    </method>
    <method name="setStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <doc>
      <![CDATA[@param status]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Stores the options sent by the SBML online validator.
 
 <p/>
 see the <a href="http://sbml.org/Facilities/Documentation/Validator_Web_API">SBML Online Validator web API</a> page.
 
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.Option -->
  <!-- start interface org.sbml.jsbml.util.SAX2Parser -->
  <interface name="SAX2Parser"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="parse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="byteStream" type="java.io.InputStream"/>
      <param name="handler" type="org.xml.sax.helpers.DefaultHandler"/>
      <param name="namespaceAware" type="boolean"/>
      <doc>
      <![CDATA[Parses the content of a byte stream as XML, using a <i>nonvalidating</i>
 parser and the specified SAX2 default event handler.
 
 @param byteStream
            The byte stream which content has to be parsed as XML.
 @param handler
            The SAX2 default event handler to use for parsing
            <code>byteStream</code>.
 @param namespaceAware
            A flag to indicate whether the parser should know about
            namespaces or not.]]>
      </doc>
    </method>
    <method name="parse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="byteStream" type="java.io.InputStream"/>
      <param name="handler" type="org.xml.sax.helpers.DefaultHandler"/>
      <param name="schemas" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Parses the content of a byte stream as XML, using a <i>validating</i>
 parser and the specified SAX2 default event handler.
 
 @param byteStream
            The byte stream which content has to be parsed as XML.
 @param handler
            The SAX2 default event handler to use for parsing
            <code>byteStream</code>.
 @param schemas
            An optional array of either <code>java.io.File</code>
            instances containing the abstract pathnames, or of
            <code>java.io.String</code> instances containing the URIs,
            pointing to the schemas to use in the validation process. If
            set to {@code null}, the schemas defined in the data set
            will be used. If set to {@code null} and no schemas are
            found in the data set, an exception is most likely to be
            thrown by the underlying implementation.]]>
      </doc>
    </method>
    <method name="parse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="characterStream" type="java.io.Reader"/>
      <param name="handler" type="org.xml.sax.helpers.DefaultHandler"/>
      <param name="namespaceAware" type="boolean"/>
      <doc>
      <![CDATA[Parses the content of a character stream as XML, using a
 <i>nonvalidating</i> parser and the specified SAX2 default event handler.
 
 @param characterStream
            The character stream which content has to be parsed as XML.
 @param handler
            The SAX2 default event handler to use for parsing
            <code>characterStream</code>.
 @param namespaceAware
            A flag to indicate whether the parser should know about
            namespaces or not.]]>
      </doc>
    </method>
    <method name="parse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="characterStream" type="java.io.Reader"/>
      <param name="handler" type="org.xml.sax.helpers.DefaultHandler"/>
      <param name="schemas" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Parses the content of a character stream as XML, using a
 <i>validating</i> parser and the specified SAX2 default event handler.
 
 @param characterStream
            The character stream which content has to be parsed as XML.
 @param handler
            The SAX2 default event handler to use for parsing
            <code>characterStream</code>.
 @param schemas
            An optional array of either <code>java.io.File</code>
            instances containing the abstract pathnames, or of
            <code>java.io.String</code> instances containing the URIs,
            pointing to the schemas to use in the validation process. If
            set to {@code null}, the schemas defined in the data set
            will be used. If set to {@code null} and no schemas are
            found in the data set, an exception is most likely to be
            thrown by the underlying implementation.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An interface for XML SAX2 parsers.
 
 @author Marco Donizelli
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.util.SAX2Parser -->
  <!-- start class org.sbml.jsbml.util.SimpleTreeNodeChangeListener -->
  <class name="SimpleTreeNodeChangeListener" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.util.TreeNodeChangeListener"/>
    <constructor name="SimpleTreeNodeChangeListener"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an {@link TreeNodeChangeListener} that writes all events to the
 standard output.]]>
      </doc>
    </constructor>
    <method name="getLogger" return="org.apache.log4j.Logger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the logger]]>
      </doc>
    </method>
    <method name="nodeAdded"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="treeNode" type="javax.swing.tree.TreeNode"/>
    </method>
    <method name="nodeRemoved"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="org.sbml.jsbml.util.TreeNodeRemovedEvent"/>
    </method>
    <method name="propertyChange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="java.beans.PropertyChangeEvent"/>
    </method>
    <doc>
    <![CDATA[This very simple implementation of an {@link TreeNodeChangeListener} writes all
 the events to the standard out stream.
 
 @author Andreas Dr&auml;ger
 @date 2010-11-16
 @since 0.8
 @version $Rev: 1468 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.SimpleTreeNodeChangeListener -->
  <!-- start class org.sbml.jsbml.util.StringTools -->
  <class name="StringTools" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StringTools"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="append" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="k" type="java.lang.StringBuffer"/>
      <param name="things" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Takes the given StringBuffer as input and appends every further Object to
 it.
 
 @param k
 @param things
 @return]]>
      </doc>
    </method>
    <method name="append"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.StringBuilder"/>
      <param name="elems" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[@param sb
 @param elems]]>
      </doc>
    </method>
    <method name="concat" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="buffers" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[This method concatenates two or more object strings into a new
 StringBuffer.
 
 @param buffers
 @return]]>
      </doc>
    </method>
    <method name="encodeForHTML" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <doc>
      <![CDATA[@param string
 @return]]>
      </doc>
    </method>
    <method name="firstLetterLowerCase" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a String whose first letter is now in lower case.
 
 @param name
 @return]]>
      </doc>
    </method>
    <method name="firstLetterUpperCase" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a String who's first letter is now in upper case.
 
 @param name
 @return]]>
      </doc>
    </method>
    <method name="getWordForNumber" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="number" type="long"/>
      <doc>
      <![CDATA[Returns the number as an English word. Zero is converted to "no". Only
 positive numbers from 1 to twelve can be converted. All other numbers are
 just converted to a String containing the number.
 
 @param number
 @return]]>
      </doc>
    </method>
    <method name="leadingZeros" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="length" type="int"/>
      <param name="number" type="int"/>
      <doc>
      <![CDATA[This method creates a {@link String} representation of the given number and
 inserts as many zero characters as the prefix of this {@link String} as
 needed
 to result in a {@link String} of the given length.
 
 @param length
        the total desired length of the given number {@link String}.
 @param number
 @return a {@link String} of the given length consisting of a suffix defined
         by the given number and as many leading zeros as necessary to reach
         the desired length.]]>
      </doc>
    </method>
    <method name="newLine" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="parseSBMLBoolean" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="valueAsStr" type="java.lang.String"/>
      <doc>
      <![CDATA[Parses a String into a boolean following the rules of the SBML
 specifications, section 3.1.2.
 
 @param valueAsStr
            a boolean as a String
 @return the String as a boolean. If the String is not a valid boolean,
         false is returned.]]>
      </doc>
    </method>
    <method name="parseSBMLDouble" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="valueAsStr" type="java.lang.String"/>
      <doc>
      <![CDATA[Parses a String into a double number following the rules of the SBML
 specifications, section 3.1.5.
 
 @param valueAsStr
            a double as a String
 @return the String as a double. If the String is not a valid double
         number, {@link Double.NaN} is returned.]]>
      </doc>
    </method>
    <method name="parseSBMLInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="valueAsStr" type="java.lang.String"/>
      <doc>
      <![CDATA[Parses a {@link String} into an int number following the rules of the SBML
 specifications, section 3.1.3.
 
 @param valueAsStr
            an int as a {@link String}
 @return the {@link String} as an int. If the {@link String} is not a valid int number, 0
         is returned.]]>
      </doc>
    </method>
    <method name="parseSBMLShort" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Parses a {@link String} into an short number following the rules of the
 SBML specifications, section 3.1.3.
 
 @param value
            an int as a String
 @return the {@link String} as an short. If the {@link String} is not a
         valid short number, 0 is returned.]]>
      </doc>
    </method>
    <method name="toHTML" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a HTML formated String, in which each line is at most lineBreak
 symbols long.
 
 @param string
 @return]]>
      </doc>
    </method>
    <method name="toHTML" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <param name="lineBreak" type="int"/>
      <doc>
      <![CDATA[Returns a HTML formated String, in which each line is at most lineBreak
 symbols long.
 
 @param string
 @param lineBreak
 @return]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Returns a {@link String} from the given value that does not contain a
 point zero at the end if the given value represents an integer number.
 The returned {@link String} displays the number in a {@link Locale}
 -dependent way, i.e., the decimal separator and the symbols to represent
 the digits are chosen from the system's configuration. Furthermore, a
 scientific style including 'E' will be used if the value is smaller than
 1E-5 or greater than 1E5.
 
 @param value
 @return]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="locale" type="java.util.Locale"/>
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Allows for {@link Locale}-dependent number formatting.
 @param locale
 @param value
 @return]]>
      </doc>
    </method>
    <method name="toXMLNotesString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notes" type="java.lang.String"/>
      <doc>
      <![CDATA[Checks whether a given {@link String} fits into the definition of the XML
 notes {@link String} in SBML. If not, this method will surround the given
 {@link String} with the minimal definition of a valid notes
 {@link String}.
 
 @param notes
            the {@link String} to be checked and possibly modified.
 @return A {@link String} that will be surrounded by the XML definition of
         a notes {@link String} in SBML, i.e.,
 
         <pre>
 &lt;notes&gt;
   &lt;body xmlns="http://www.w3.org/1999/xhtml"&gt;
     &lt;p&gt;the original notes&lt;/p&gt;
   &lt;/body&gt;
 &lt;/notes&gt;  
 </pre>
 
         If the given argument already suffices the definition of XML
         {@link String}s in SBML, nothing will be changed.]]>
      </doc>
    </method>
    <method name="toXMLMessageString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
      <doc>
      <![CDATA[Checks whether a given {@link String} fits into the definition of the XML
 message {@link String} in SBML. If not, this method will surround the given
 {@link String} with the minimal definition of a valid message
 {@link String}.
 
 @param message
            the {@link String} to be checked and possibly modified.
 @return A {@link String} that will be surrounded by the XML definition of
         a notes {@link String} in SBML, i.e.,
 
         <pre>
 &lt;message&gt;
   &lt;body xmlns="http://www.w3.org/1999/xhtml"&gt;
     &lt;p&gt;the original message&lt;/p&gt;
   &lt;/body&gt;
 &lt;/message&gt;  
 </pre>
 
         If the given argument already suffices the definition of XML
         {@link String}s in SBML, nothing will be changed.]]>
      </doc>
    </method>
    <field name="DECIMAL_FORMAT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="REAL_FORMAT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SCIENTIFIC_FORMAT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="underscore" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The {@link Character} <code>'_'</code> as a {@link String}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This class provides a collection of convenient methods for manipulating
 Strings.
 
 @author Andreas Dr&auml;ger
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.StringTools -->
  <!-- start class org.sbml.jsbml.util.SubModel -->
  <class name="SubModel" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SubModel"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="generateSubModel" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="model" type="org.sbml.jsbml.Model"/>
      <param name="compartmentsIds" type="java.lang.String[]"/>
      <param name="speciesIds" type="java.lang.String[]"/>
      <param name="reactsIds" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Generates a sub-model containing the elements passed as argument and all
 the necessary dependencies.
 
 @param model
 @param compartmentsIds
 @param speciesIds
 @param reactsIds
 @return]]>
      </doc>
    </method>
    <method name="generateSubModel" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="model" type="org.sbml.jsbml.Model"/>
      <param name="compartmentsIds" type="java.lang.String[]"/>
      <param name="speciesIds" type="java.lang.String[]"/>
      <param name="reactsIds" type="java.lang.String[]"/>
      <param name="rulesIds" type="java.lang.String[]"/>
      <param name="eventsIds" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Generates a sub-model containing the elements passed as argument and all
 the necessary dependencies.
 
 <p> You do not need to fill all of the parameter arrays. Here is how the sub-{@link Model} generation works:
 <li>If you give some {@link Compartment} ids, all the species inside these {@link Compartment} are included.
 <li>If you give some {@link Species} ids (and all added {@link Species} from the {@link Compartment}s), all the {@link Reaction}s where one of these {@link Species} is present are included
 <li>All the {@link Species} involved in the {@link Reaction}s given as parameter or added automatically from the given {@link Species} are included.
 <li>All {@link Compartment}s where one of the included species is present is included.
 <li>All needed {@link UnitDefinition}s, {@link SpeciesType}s and {@link CompartmentType}s are included.
 <li>All the {@link Rule}s and events passed as parameter along the one needed are included.
 <li>All the global {@link Parameter}s are added automatically at the moment, without checking if there are used or not.
 <li>All the {@link FunctionDefinition}s used in the included MathML are added automatically.

 <p>
 @param model the SBML model where we want to extract a sub-model.
 @param compartmentsIds the list of compartment to keep
 @param speciesIds the list of species to keep
 @param reactsIds the list of reactions to keep
 @param rulesIds the list of rules to keep
 @param eventsIds the list of events to keep
 @return a sub-model containing the elements passed as argument and all
 the necessary dependencies.]]>
      </doc>
    </method>
    <method name="getRelatedCompartments" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="model" type="org.sbml.jsbml.Model"/>
      <param name="compartmentsIds" type="java.lang.String[]"/>
      <param name="speciesIds" type="java.lang.String[]"/>
      <doc>
      <![CDATA[@param model the original model from which a sub-model is to be created.
 @param compartmentsIds
 @param speciesIds
 @return]]>
      </doc>
    </method>
    <method name="getRelatedSpecies" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="model" type="org.sbml.jsbml.Model"/>
      <param name="reactsIds" type="java.lang.String[]"/>
      <param name="compartmentsIds" type="java.lang.String[]"/>
      <param name="speciesIds" type="java.lang.String[]"/>
      <doc>
      <![CDATA[@param model the original model from which a sub-model is to be created.
 @param reactsIds
 @param compartmentsIds
 @param speciesIds
 @return an array of related species id or null if no related species are found.]]>
      </doc>
    </method>
    <method name="getRelatedReactions" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="model" type="org.sbml.jsbml.Model"/>
      <param name="reactsIds" type="java.lang.String[]"/>
      <param name="speciesIds" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Returns an array of reaction id related to the <code>reactsIds</code> or <code>speciesIds</code>.
 
 All the reactions in <code>reactsIds</code> should be part of the result if 
 the function is called properly with valid reacionId.
 <br>
 The {@link Reaction}s, where the {@link Species} in the <code>speciesIds</code> array are involved as reactant, 
 product or modifier, are added in the returned reaction id array.
 
 @param model the original model from which a sub-model is to be created.
 @param reactsIds the list of {@link Reaction}s selected by the user to create a sub-model
 @param speciesIds the list of {@link Species} selected by the user to create a sub-model
 @return an array of related {@link Reaction}s id or {@code null} if no related reactions are found.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Generates a sub-{@link Model} containing the elements passed as argument and all
 the necessary dependencies.
 
 <p> You do not need to fill all of the parameter arrays. Here is how the sub-{@link Model} generation works:
 <li>If you give some {@link Compartment} ids, all the species inside these {@link Compartment} are included.
 <li>If you give some {@link Species} ids (and all added {@link Species} from the {@link Compartment}s), all the {@link Reaction}s where one of these {@link Species} is present are included
 <li>All the {@link Species} involved in the {@link Reaction}s given as parameter or added automatically from the given {@link Species} are included.
 <li>All {@link Compartment}s where one of the included species is present is included.
 <li>All needed {@link UnitDefinition}s, {@link SpeciesType}s and {@link CompartmentType}s are included.
 <li>All the {@link Rule}s and events passed as parameter along the one needed are included.
 <li>All the global {@link Parameter}s are added automatically at the moment, without checking if there are used or not.
 <li>All the {@link FunctionDefinition}s used in the included MathML are added automatically.
 
 @author Nicolas Rodriguez
 @author chenli
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.SubModel -->
  <!-- start class org.sbml.jsbml.util.TreeNodeAdapter -->
  <class name="TreeNodeAdapter" extends="org.sbml.jsbml.AbstractTreeNode"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TreeNodeAdapter" type="java.lang.Object, javax.swing.tree.TreeNode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link TreeNode} wrapper for the given {@link #userObject}
 that will be linked to the given {@link #parent} within an exisiting
 tree.
 
 @param userObject
            the element to be wrapped in a {@link TreeNode}; may be null.
 @param parent
            the parent {@link TreeNode} of this new node, i.e., the
            position within an existing tree where to link this new node.
            May be null.]]>
      </doc>
    </constructor>
    <constructor name="TreeNodeAdapter" type="org.sbml.jsbml.util.TreeNodeAdapter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Copy constructor for the given node. Note that the pointer to the parent
 will not be cloned.
 
 @param node]]>
      </doc>
    </constructor>
    <method name="clone" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getChildAt" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="childIndex" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUserObject" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetUserObject" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isUserObjectRecursiveDataType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks whether or not the user's object has been set (see
 {@link #isSetUserObject()}) and if so if it belongs to those elements
 returned by the method {@link #getChildAt(int)}.
 
 @return {@code true} if the user's object has been defined and
         belongs to those classes that are returned by the method
         {@link #getChildAt(int)}.
 @see #getChildAt(int)
 @see #isSetUserObject()]]>
      </doc>
    </method>
    <method name="setUserObject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
      <doc>
      <![CDATA[@param object]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 This class is a wrapper element for any {@link Object} that should be linked
 into a tree data structure as represented by {@link AbstractTreeNode}, but
 that might by itself not be an instance of {@link TreeNode}, i.e., not
 compatible with the remaining tree data structure. In analogy to
 {@link MutableTreeNode} we call this {@link Object} <code>userObject</code>
 (see {@link #getUserObject()} and {@link #setUserObject(Object)}).
 </p>
 <p>
 This wrapper distinguishes the following special cases depending on the type
 of <code>userObject</code> when accessing the i-th child of this
 {@link TreeNode}. The <code>userObject</code> is an instance of
 <ul>
 <li>{@link TreeNode}: recursive operations are continued at this element</li>
 <li>{@link Collection}: recursion leads to the i-th element in the
 {@link Iterator}</li>
 <li>{@link Map}: the key set is sorted (only possible if the keys implement
 the {@link Comparable} interface) and recursion continues at the i-th key.</li>
 </ul>
 </p>
 
 @author Andreas Dr&auml;ger
 @version $Rev: 1447 $
 @since 0.8
 @date 19.07.2011]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.TreeNodeAdapter -->
  <!-- start class org.sbml.jsbml.util.TreeNodeChangeEvent -->
  <class name="TreeNodeChangeEvent" extends="java.beans.PropertyChangeEvent"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TreeNodeChangeEvent" type="javax.swing.tree.TreeNode, java.lang.String, java.lang.Object, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param source
 @param newValue
 @param oldValue
 @param propertyName]]>
      </doc>
    </constructor>
    <constructor name="TreeNodeChangeEvent" type="org.sbml.jsbml.util.TreeNodeChangeEvent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param treeNodeChangeEvent]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.util.TreeNodeChangeEvent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getSource" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetNewValue" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetOldValue" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetSource" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <field name="addExtension" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="addNamespace" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="addDeclaredNamespace" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="namespace" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="notes" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="setAnnotation" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="level" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="version" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="metaId" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="notesBuffer" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="parentSBMLObject" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="sboTerm" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="annotation" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="unsetCVTerms" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="currentList" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="symbol" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="math" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="name" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="id" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="compartmentType" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="outside" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="message" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="messageBuffer" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="timeUnits" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="useValuesFromTriggerTime" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="variable" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="units" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="baseListType" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="areaUnits" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="conversionFactor" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="extentUnits" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="lengthUnits" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="substanceUnits" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="volumeUnits" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="value" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="compartment" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="fast" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="reversible" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="species" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="boundaryCondition" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="charge" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="hasOnlySubstanceUnits" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="initialAmount" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="spatialSizeUnits" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="speciesType" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="denominator" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="stoichiometry" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="constant" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="exponent" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="kind" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="multiplier" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="offset" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="scale" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="listOfUnits" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="priority" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="initialValue" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="persistent" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SBMLDocumentAttributes" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="model" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="kineticLaw" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="spatialDimensions" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="formula" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="size" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="volume" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="className" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="definitionURL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="childNode" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="numerator" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="mantissa" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="type" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="style" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="isSetNumberType" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="encoding" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="xmlTriple" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="isEOF" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="resource" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="qualifier" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="modified" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="created" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="creator" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="isExplicitlySetConstant" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="about" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="nonRDFAnnotation" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="annotationNameSpaces" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="history" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="rdfAnnotationNamespaces" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="addCVTerm" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="userObject" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="removeNamespace" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="email" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="familyName" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="givenName" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="organisation" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="text" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This event tells an {@link TreeNodeChangeListener} which values have been
 changed in an {@link SBase} and also provides the old and the new value.
 
 @author Andreas Dr&auml;ger
 @date 2010-11-14
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.TreeNodeChangeEvent -->
  <!-- start interface org.sbml.jsbml.util.TreeNodeChangeListener -->
  <interface name="TreeNodeChangeListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.beans.PropertyChangeListener"/>
    <method name="nodeAdded"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="javax.swing.tree.TreeNode"/>
      <doc>
      <![CDATA[The {@link TreeNode} passed to this method has just been added to the
 a containing element.
 
 @param node
            This element is now part of the {@link SBMLDocument}.]]>
      </doc>
    </method>
    <method name="nodeRemoved"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="org.sbml.jsbml.util.TreeNodeRemovedEvent"/>
      <doc>
      <![CDATA[The {@link TreeNodeRemovedEvent} passed to this method provides information
 about the node that has been removed from a
 containing parent and does hence no longer belong to the
 {@link SBMLDocument} anymore. In addition, a pointer to its previous parent
 is also provided. In this way, an implementing class
 can identify the location within the tree where it was before.
 
 @param node
        This element is not longer part of the {@link SBMLDocument}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A listener interface that allows applications to get notified if the state of
 any {@link TreeNode} object changes.
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.util.TreeNodeChangeListener -->
  <!-- start class org.sbml.jsbml.util.TreeNodeRemovedEvent -->
  <class name="TreeNodeRemovedEvent" extends="java.util.EventObject"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TreeNodeRemovedEvent" type="javax.swing.tree.TreeNode, javax.swing.tree.TreeNode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link TreeNodeRemovedEvent} that contains information about
 an element that has just been removed from a tree together with its
 previous parent node.
 
 @param source
        the node that has just been removed from the tree.
 @param previousParent
        the node that was the parent node of the removed element, may be
        {@code null} if the node didn't have a parent.]]>
      </doc>
    </constructor>
    <constructor name="TreeNodeRemovedEvent" type="org.sbml.jsbml.util.TreeNodeRemovedEvent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clone constructor.
 
 @param treeNodeRemovedEvent]]>
      </doc>
    </constructor>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
    <method name="getPreviousParent" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Access the pointer to the previous parent node of the removed node, may be
 {@code null}.
 
 @return the previosParent
 @see #getSource()]]>
      </doc>
    </method>
    <method name="getSource" return="javax.swing.tree.TreeNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A special {@link EventObject} to notify a {@link TreeNodeChangeListener}
 about a removed node and its previous position within the tree. To this end,
 this {@link TreeNodeRemovedEvent} contains a pointer to both the actual
 removed node and its previous parent node. Note that when removing an element
 from the SBML tree, its pointer to its parent is set to {@code null}.
 To give an example why information about the previous parent is necessary:
 Imagine, an instance of {@code speciesReference} has been removed from
 the SBML tree. After removing it, the model does no longer point to an
 element with its id. Many {@code reaction}s
 might have been the origin of this removed node. If a
 {@link TreeNodeChangeListener} wants to, e.g., undo this change,
 it is necessary to identify the previous position of the node within the
 tree. That's why this class has two important
 methods, namely {@link #getSource()} and {@link #getPreviousParent()}.
 
 @author Andreas Dr&auml;ger
 @version $Rev: 1449 $
 @since 0.8
 @date 02.06.2012]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.TreeNodeRemovedEvent -->
  <!-- start interface org.sbml.jsbml.util.TreeNodeWithChangeSupport -->
  <interface name="TreeNodeWithChangeSupport"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <implements name="javax.swing.tree.TreeNode"/>
    <implements name="java.io.Serializable"/>
    <method name="removeAllTreeNodeChangeListeners"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes all SBase change listeners from this element.]]>
      </doc>
    </method>
    <method name="removeTreeNodeChangeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
      <doc>
      <![CDATA[Removes recursively the given change listener from this element. A call to
 this method
 is equivalent to calling
 {@link #removeTreeNodeChangeListener(TreeNodeChangeListener, boolean)}
 where the second argument is {@code true}.
 
 @param listener
        the listener to remove.
 @see #removeTreeNodeChangeListener(TreeNodeChangeListener, boolean)]]>
      </doc>
    </method>
    <method name="removeTreeNodeChangeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
      <param name="recursive" type="boolean"/>
      <doc>
      <![CDATA[Removes the given change listener from this element.
 
 @param listener
        the listener to remove.
 @param recursive
        switch to decide whether or not the given listener should be removed
        in a recursive manner.
 @see #removeTreeNodeChangeListener(TreeNodeChangeListener)]]>
      </doc>
    </method>
    <method name="getListOfTreeNodeChangeListeners" return="java.util.List&lt;org.sbml.jsbml.util.TreeNodeChangeListener&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all {@link TreeNodeChangeListener}s that are assigned to this
 element.
 
 @return all {@link TreeNodeChangeListener}s that are assigned to this
 element.]]>
      </doc>
    </method>
    <method name="firePropertyChange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="propertyName" type="java.lang.String"/>
      <param name="oldValue" type="java.lang.Object"/>
      <param name="newValue" type="java.lang.Object"/>
      <doc>
      <![CDATA[All {@link TreeNodeChangeListener}s are informed about the change in this
 {@link AbstractTreeNode}.
 
 @param propertyName
            Tells the {@link TreeNodeChangeListener} the name of the
            property whose value has been changed.
 @param oldValue
            This is the value before the change.
 @param newValue
            This gives the new value that is now the new value for the
            given property..]]>
      </doc>
    </method>
    <method name="fireNodeRemovedEvent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[All {@link TreeNodeChangeListener} instances linked to this
 {@link TreeNode} are informed about the deletion of this {@link TreeNode}
 from a parent {@link Object}.]]>
      </doc>
    </method>
    <method name="fireNodeAddedEvent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[All {@link TreeNodeChangeListener} instances linked to this
 {@link TreeNode} are informed about the adding of this {@link Object} to
 an owning parent {@link Object}.]]>
      </doc>
    </method>
    <method name="addTreeNodeChangeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
      <doc>
      <![CDATA[Adds recursively a listener to the {@link TreeNodeWithChangeSupport} object and
 all of its sub-elements. Calling this method is effectively identical to
 the call
 {@link #addTreeNodeChangeListener(TreeNodeChangeListener, boolean)} where
 {@code recursively = true}.
 
 @param listener
        the listener to add
 @see #addTreeNodeChangeListener(TreeNodeChangeListener, boolean)]]>
      </doc>
    </method>
    <method name="addTreeNodeChangeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
      <param name="recursive" type="boolean"/>
      <doc>
      <![CDATA[Adds a listener to this {@link TreeNodeWithChangeSupport} object and
 optionally also to all of its child nodes.
 
 @param listener
        the listener to add
 @param recursive
        if {@code true} the given listener will be added to this node and
        also recursively to all of its child nodes. If {@code false}, the
        listener will only be added to the current node.
 @see #addTreeNodeChangeListener(TreeNodeChangeListener)]]>
      </doc>
    </method>
    <method name="getTreeNodeChangeListenerCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the number of {@link TreeNodeChangeListener}s currently assigned to
         this {@link TreeNodeWithChangeSupport}]]>
      </doc>
    </method>
    <method name="isSetParent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isRoot" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Opposite of {@link #isSetParent()}.
 
 Returns {@code true} if this {@link AbstractTreeNode} is the root
 node of a tree, {@code false} otherwise.
 
 @return {@code true} if this {@link AbstractTreeNode} is the root
         node of a tree, {@code false} otherwise.
 
 @see #isSetParent()]]>
      </doc>
    </method>
    <method name="addAllChangeListeners" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listeners" type="java.util.Collection&lt;org.sbml.jsbml.util.TreeNodeChangeListener&gt;"/>
      <doc>
      <![CDATA[Adds recursively all given {@link TreeNodeChangeListener} instances to
 this element.
 
 @param listeners
            the set of listeners to add
 @return {@code true} if the set of listeners is added with success.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface extends the regular recursively defined {@link TreeNode} by
 adding methods to keep track of changes within the tree, such as
 adding/removing, or exchanging of child nodes or the change of any other 
 attributes.
 
 @author Andreas Dr&auml;ger
 @version $Rev: 1447 $
 @since 0.8
 @date 2011-09-15]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.util.TreeNodeWithChangeSupport -->
  <!-- start class org.sbml.jsbml.util.ValuePair -->
  <class name="ValuePair" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <implements name="java.lang.Comparable&lt;org.sbml.jsbml.util.ValuePair&lt;L, V&gt;&gt;"/>
    <implements name="java.io.Serializable"/>
    <constructor name="ValuePair"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link ValuePair} with both attributes set to null.]]>
      </doc>
    </constructor>
    <constructor name="ValuePair" type="L extends java.lang.Comparable&lt;? super L&gt;, V extends java.lang.Comparable&lt;? super V&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param l
 @param v]]>
      </doc>
    </constructor>
    <constructor name="ValuePair" type="org.sbml.jsbml.util.ValuePair&lt;L, V&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param valuePair]]>
      </doc>
    </constructor>
    <method name="clone" return="org.sbml.jsbml.util.ValuePair&lt;L, V&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="L extends java.lang.Comparable&lt;? super L&gt;"/>
      <param name="v" type="V extends java.lang.Comparable&lt;? super V&gt;"/>
      <doc>
      <![CDATA[Convenient method to compare two values to this {@link ValuePair}.
 
 @param l
 @param v
 @return a negative integer, zero, or a positive integer as this
         {@link ValuePair} is less than, equal to, or greater than the
         combination of the two given values.
 @see #compareTo(ValuePair)]]>
      </doc>
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.sbml.jsbml.util.ValuePair&lt;L, V&gt;"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="getL" return="L extends java.lang.Comparable&lt;? super L&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the a]]>
      </doc>
    </method>
    <method name="getV" return="V extends java.lang.Comparable&lt;? super V&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the b]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSetL" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetV" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="setL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="L extends java.lang.Comparable&lt;? super L&gt;"/>
      <doc>
      <![CDATA[@param l
            the l to set]]>
      </doc>
    </method>
    <method name="setV"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="V extends java.lang.Comparable&lt;? super V&gt;"/>
      <doc>
      <![CDATA[@param v
            the v to set]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A pair of two values with type parameters. This data object is useful
 whenever exactly two values are required for a specific task.
 
 @author Andreas Dr&auml;ger
 @date 2010-09-01
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.ValuePair -->
  <doc>
  <![CDATA[A collection of handy utilities when working with JSBML classes, 
  such as classes for String manipulation or mathematical operations.]]>
  </doc>
</package>
<package name="org.sbml.jsbml.util.compilers">
  <!-- start interface org.sbml.jsbml.util.compilers.ASTNodeCompiler -->
  <interface name="ASTNodeCompiler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="abs" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[The absolute value represented by the given {@link ASTNode}.
 
 @param value
            Must be interpretable as a {@link Number}.
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="and" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param values
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="arccos" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="arccosh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="arccot" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="arccoth" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="arccsc" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="arccsch" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="arcsec" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="arcsech" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="arcsin" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="arcsinh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="arctan" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="arctanh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="ceiling" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="org.sbml.jsbml.Compartment"/>
      <doc>
      <![CDATA[@param c
 @return]]>
      </doc>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mantissa" type="double"/>
      <param name="exponent" type="int"/>
      <param name="units" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates an {@link ASTNodeValue} that represents a real number in
 scientific notation, i.e., mantissa * 10^exponent, and the given units.
 
 @param mantissa
            The number to be multiplied with ten to the power of the given
            exponent.
 @param exponent
            The exponent for the multiplier ten.
 @param units
            The identifier of the units object associated with the number
            represented by this element. Can be null if no units have been
            defined.
 @return]]>
      </doc>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="real" type="double"/>
      <param name="units" type="java.lang.String"/>
      <doc>
      <![CDATA[@param real
 @param units
            A String representing the {@link Unit} of the given number.
            This can be the identifier of a {@link UnitDefinition} in the
            model or a literal in {@link Kind}. Can be null if no units
            have been defined.
 @return]]>
      </doc>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="integer" type="int"/>
      <param name="units" type="java.lang.String"/>
      <doc>
      <![CDATA[@param integer
 @param units
            A String representing the {@link Unit} of the given number.
            This can be the identifier of a {@link UnitDefinition} in the
            model or a literal in {@link Kind}. Can be null if no units
            have been defined.
 @return]]>
      </doc>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="org.sbml.jsbml.CallableSBase"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param variable
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[A compiler will also have to deal with a name. The meaning of this can be
 various. For instance, the name may refer to a {@link Species} in the
 system. In case of numerical computation, the {@link ASTNodeCompiler}
 must create an {@link ASTNodeValue} representing the current value of
 this {@link Species}.
 
 @param name
 @return]]>
      </doc>
    </method>
    <method name="cos" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="cosh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="cot" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="coth" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="csc" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="csch" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="delay" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="delayName" type="java.lang.String"/>
      <param name="x" type="org.sbml.jsbml.ASTNode"/>
      <param name="delay" type="org.sbml.jsbml.ASTNode"/>
      <param name="timeUnits" type="java.lang.String"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Evaluates delay functions.
 
 @param delayName
            the name of this delay function.
 @param x
 @param delay
            an expression of a positive duration time (the amoutn of
            delay)
 @param timeUnits
            the units for the delay.
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="eq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Equal.
 
 @param left
 @param right
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="exp" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="factorial" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="floor" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="frac" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="org.sbml.jsbml.ASTNode"/>
      <param name="denominator" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Fraction of two {@link ASTNode}s
 
 @param numerator
 @param denominator
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="frac" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="int"/>
      <param name="denominator" type="int"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[A fraction of two int values.
 
 @param numerator
 @param denominator
 @return]]>
      </doc>
    </method>
    <method name="function" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="functionDefinition" type="org.sbml.jsbml.FunctionDefinition"/>
      <param name="args" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param functionDefinition
 @param args
            Values to be inserted into the parameter list of the
            function.
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="function" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="functionDefinitionName" type="java.lang.String"/>
      <param name="args" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param functionDefinition name
 @param args
            Values to be inserted into the parameter list of the
            function.
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="geq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Greater equal.
 
 @param left
 @param right
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="getConstantAvogadro" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates an {@link ASTNodeValue} that represent's Avogadro's number.
 Optionally, the compiler may associate the given name with this number.
 
 @param name
            An optional name for Avogadro's number.
 @return]]>
      </doc>
    </method>
    <method name="getConstantE" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getConstantFalse" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getConstantPi" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getConstantTrue" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getNegativeInfinity" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="getPositiveInfinity" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="gt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Greater than.
 
 @param left
 @param right
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="lambda" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[The body of a {@link FunctionDefinition}.
 
 @param values
            Place holders for arguments.
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="leq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Less equal.
 
 @param left
 @param right
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="ln" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Natural logarithm.
 
 @param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="log" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Logarithm of the given value to base 10.
 
 @param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="log" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="base" type="org.sbml.jsbml.ASTNode"/>
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Logarithm of the given value to the given base.
 
 @param base
 @param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="lt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Less than.
 
 @param left
 @param right
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="minus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Subtraction.
 
 @param values
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="neq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Not equal.
 
 @param left
 @param right
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="not" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
            This value must be interpretable as a {@link Boolean}.
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="or" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param values
            These values must be interpretable as a {@link Boolean}.
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="piecewise" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param values
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="plus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param values
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="pow" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="base" type="org.sbml.jsbml.ASTNode"/>
      <param name="exponent" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param base
 @param exponent
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="root" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootExponent" type="org.sbml.jsbml.ASTNode"/>
      <param name="radiant" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param rootExponent
 @param radiant
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="root" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootExponent" type="double"/>
      <param name="radiant" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param rootExponent
 @param radiant
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="sec" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="sech" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="sin" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="sinh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="sqrt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="radiant" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Square root.
 
 @param radiant
            This value must be interpretable as a {@link Number}.
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="symbolTime" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="time" type="java.lang.String"/>
      <doc>
      <![CDATA[The simulation time.
 
 @param time
            The name of the time symbol.
 @return An {@link ASTNodeValue} that represents the current time.]]>
      </doc>
    </method>
    <method name="tan" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="tanh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="times" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Product of all given {@link ASTNode}s.
 
 @param values
            These values must be interpretable to {@link Number}.
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="uMinus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Unary minus, i.e., negation of the given {@link ASTNode}.
 
 @param value
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="unknownValue" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Dealing with a malformed {@link ASTNode}.
 
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="xor" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Exclusive or.
 
 @param values
            It must be possible to evaluate the given values to
            {@link Boolean}.
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A compiler for abstract syntax trees. This compiler evaluates the values
 represented by {@link ASTNode}s. It defines how to perform mathematical or
 other operations on these data types. Recursion can be performed as follows:
 
 <pre>
   public ASTNodeValue doSomeThing(ASTNode ast) {
     ...
     ASTNodeValue child = ast.compile(this);
     ...
     return new ASTNodeValue(doSomeThing(child), this);
   }
 </pre>
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.util.compilers.ASTNodeCompiler -->
  <!-- start class org.sbml.jsbml.util.compilers.ASTNodeValue -->
  <class name="ASTNodeValue" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ASTNodeValue" type="org.sbml.jsbml.util.compilers.ASTNodeCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ASTNodeValue" type="boolean, org.sbml.jsbml.util.compilers.ASTNodeCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </constructor>
    <constructor name="ASTNodeValue" type="double, org.sbml.jsbml.util.compilers.ASTNodeCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </constructor>
    <constructor name="ASTNodeValue" type="float, org.sbml.jsbml.util.compilers.ASTNodeCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </constructor>
    <constructor name="ASTNodeValue" type="long, org.sbml.jsbml.util.compilers.ASTNodeCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param value
 @param compiler]]>
      </doc>
    </constructor>
    <constructor name="ASTNodeValue" type="int, org.sbml.jsbml.util.compilers.ASTNodeCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </constructor>
    <constructor name="ASTNodeValue" type="org.sbml.jsbml.CallableSBase, org.sbml.jsbml.util.compilers.ASTNodeCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </constructor>
    <constructor name="ASTNodeValue" type="org.w3c.dom.Node, org.sbml.jsbml.util.compilers.ASTNodeCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param node
 @param compiler]]>
      </doc>
    </constructor>
    <constructor name="ASTNodeValue" type="java.lang.Number, org.sbml.jsbml.util.compilers.ASTNodeCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </constructor>
    <constructor name="ASTNodeValue" type="java.lang.String, org.sbml.jsbml.util.compilers.ASTNodeCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </constructor>
    <constructor name="ASTNodeValue" type="org.sbml.jsbml.UnitDefinition, org.sbml.jsbml.util.compilers.ASTNodeCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param unit]]>
      </doc>
    </constructor>
    <method name="containsUndeclaredUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Flag to indicate whether or not units have been fully declared for this
 value.
 
 @return]]>
      </doc>
    </method>
    <method name="getLevel" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the level of the SBML document that was the basis to create this
 {@link ASTNodeValue}.
 
 @return]]>
      </doc>
    </method>
    <method name="getType" return="org.sbml.jsbml.ASTNode.Type"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getUnits" return="org.sbml.jsbml.UnitDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getVersion" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the version]]>
      </doc>
    </method>
    <method name="isBoolean" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isDifference" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isCallableSBase" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isNode" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks whether the value encapsulated in this {@link ASTNodeValue} is an
 instance of {@link Node}.
 
 @return]]>
      </doc>
    </method>
    <method name="isNumber" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSetUnit" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Test if this value can be evaluated to a {@link UnitDefinition}
 
 @return]]>
      </doc>
    </method>
    <method name="isString" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isSum" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isUMinus" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="isUnary" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="printValueAndUnit" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="setLevel"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="int"/>
      <doc>
      <![CDATA[@param level
            the level to set]]>
      </doc>
    </method>
    <method name="setType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="org.sbml.jsbml.ASTNode.Type"/>
      <doc>
      <![CDATA[@param type]]>
      </doc>
    </method>
    <method name="setUIFlag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uiFlag" type="boolean"/>
      <doc>
      <![CDATA[@param uiFlag]]>
      </doc>
    </method>
    <method name="setUnits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[@param unit]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Boolean"/>
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="double"/>
      <doc>
      <![CDATA[@param d]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[@param i]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="long"/>
      <doc>
      <![CDATA[@param l]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.CallableSBase"/>
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.w3c.dom.Node"/>
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Number"/>
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="short"/>
      <doc>
      <![CDATA[@param s]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </method>
    <method name="setVersion"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="version" type="int"/>
      <doc>
      <![CDATA[@param version
            the version to set]]>
      </doc>
    </method>
    <method name="toBoolean" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Analog to the toDouble() method but this method tries to evaluate the
 value contained in this object to a boolean value. In case of numbers,
 one is considered true, all other values represent false.
 
 @return A boolean representing the value of this container. Note that if
         the value is an instance of {@link CallableSBase}, it
         can only be converted into a boolean value if the
         {@link ASTNodeCompiler} associated with this object compiles this
         value to an {@link ASTNodeValue} that contains a boolean or at
         least a {@link Number} value.
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="toDouble" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="toFloat" return="float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="toInteger" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[This method is analog to the toDouble method but tries to convert this
 value into an integer.
 
 @param compiler
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="toLong" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="toCallableSBase" return="org.sbml.jsbml.CallableSBase"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="toNode" return="org.w3c.dom.Node"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="toNumber" return="java.lang.Number"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Tries to convert the value contained in this object into a double number.
 
 @return The number value represented by this given {@link ASTNodeValue}.
         In case this {@link ASTNodeValue} contains an instance of
         {@link Boolean}, zero is returned for false and one for true. If
         the value is null or cannot be converted to any number,
         {@link Double.NaN} will be returned. Note that if the value of
         this container is an instance of
         {@link CallableSBase}, the value can only be
         converted to a number if the compiler associated with this
         {@link ASTNodeValue} compiles this
         {@link CallableSBase} to an {@link ASTNodeValue} that
         contains a {@link Number}.
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetUnit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the unit of this element, i.e., the unit will become invalid.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[When interpreting {@link ASTNode}s, the {@link ASTNodeCompiler} takes
 elements of this class as arguments and performs its operations on it. Hence,
 this class represents the union of all possible types to which an abstract
 syntax tree can be evaluated, i.e., {@link Boolean},
 {@link CallableSBase}, {@link Number}, or {@link String}. This
 class does not define what to do with these values or how to perform any
 operations on it. It is just the container of a value. The type of this value
 tells the {@link ASTNodeCompiler} which operation was performed to obtain the
 value stored in this object.
 
 @author Andreas Dr&auml;ger
 @date 2010-04-30
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.compilers.ASTNodeValue -->
  <!-- start class org.sbml.jsbml.util.compilers.FindUnitsCompiler -->
  <class name="FindUnitsCompiler" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.util.compilers.ASTNodeCompiler"/>
    <constructor name="FindUnitsCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isUnitsDefined" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="abs" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="and" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccos" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccosh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccot" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccoth" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccsc" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccsch" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsec" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsech" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsin" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsinh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arctan" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arctanh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="ceiling" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="org.sbml.jsbml.Compartment"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mantissa" type="double"/>
      <param name="exponent" type="int"/>
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="real" type="double"/>
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="integer" type="int"/>
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="org.sbml.jsbml.CallableSBase"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="cos" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="cosh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="cot" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="coth" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="csc" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="csch" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="delay" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="delayName" type="java.lang.String"/>
      <param name="x" type="org.sbml.jsbml.ASTNode"/>
      <param name="delay" type="org.sbml.jsbml.ASTNode"/>
      <param name="timeUnits" type="java.lang.String"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="eq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="exp" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="factorial" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="floor" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="frac" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="org.sbml.jsbml.ASTNode"/>
      <param name="denominator" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="frac" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="int"/>
      <param name="denominator" type="int"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="function" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="functionDefinition" type="org.sbml.jsbml.FunctionDefinition"/>
      <param name="args" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="function" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="functionDefinitionName" type="java.lang.String"/>
      <param name="args" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="geq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="getConstantAvogadro" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getConstantE" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstantFalse" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstantPi" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstantTrue" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNegativeInfinity" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="getPositiveInfinity" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="gt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="lambda" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="leq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="ln" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="log" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="log" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="base" type="org.sbml.jsbml.ASTNode"/>
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="lt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="minus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="neq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="not" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="or" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="piecewise" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="plus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="pow" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="base" type="org.sbml.jsbml.ASTNode"/>
      <param name="exponent" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="root" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootExponent" type="org.sbml.jsbml.ASTNode"/>
      <param name="radiant" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="root" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootExponent" type="double"/>
      <param name="radiant" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sec" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sech" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sin" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sinh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sqrt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="radiant" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="symbolTime" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="time" type="java.lang.String"/>
    </method>
    <method name="tan" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="tanh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="times" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="uMinus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="unknownValue" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="xor" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <doc>
    <![CDATA[Finds if an ASTNode is using any units attribute.
 
 This {@link ASTNodeCompiler} is basically empty, only methods related to
 'cn' elements are implemented 
 
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.compilers.FindUnitsCompiler -->
  <!-- start class org.sbml.jsbml.util.compilers.FormulaCompiler -->
  <class name="FormulaCompiler" extends="org.sbml.jsbml.util.StringTools"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.util.compilers.ASTNodeCompiler"/>
    <constructor name="FormulaCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="brackets" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.Object"/>
      <doc>
      <![CDATA[@param sb
 @return]]>
      </doc>
    </method>
    <method name="diff" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="subtrahents" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Returns the difference of the given elements as StringBuffer.
 
 @param subtrahents
 @return]]>
      </doc>
    </method>
    <method name="frac" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="java.lang.Object"/>
      <param name="denominator" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns a fraction with the given elements as numerator and denominator.
 
 @param numerator
 @param denominator
 @return]]>
      </doc>
    </method>
    <method name="getSpecies" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="ref" type="org.sbml.jsbml.SpeciesReference"/>
      <doc>
      <![CDATA[Returns the id of a PluginSpeciesReference object's belonging species as
 an object of type StringBuffer.
 
 @param ref
 @return]]>
      </doc>
    </method>
    <method name="getStoichiometry" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="ref" type="org.sbml.jsbml.SpeciesReference"/>
      <doc>
      <![CDATA[Returns the value of a PluginSpeciesReference object's stoichiometry
 either as a double or, if the stoichiometry has an integer value, as an
 int object.
 
 @param ref
 @return]]>
      </doc>
    </method>
    <method name="pow" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="basis" type="java.lang.Object"/>
      <param name="exponent" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns the basis to the power of the exponent as StringBuffer. Several
 special cases are treated.
 
 @param basis
 @param exponent
 @return]]>
      </doc>
    </method>
    <method name="root" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="exponent" type="java.lang.Object"/>
      <param name="basis" type="java.lang.Object"/>
      <exception name="NumberFormatException" type="java.lang.NumberFormatException"/>
      <doc>
      <![CDATA[Returns the exponent-th root of the basis as StringBuffer.
 
 @param exponent
 @param basis
 @return
 @throws IllegalFormatException
             If the given exponent represents a zero.]]>
      </doc>
    </method>
    <method name="sqrt" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="basis" type="java.lang.Object"/>
      <doc>
      <![CDATA[@param basis
 @return]]>
      </doc>
    </method>
    <method name="sum" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="summands" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Returns the sum of the given elements as StringBuffer.
 
 @param summands
 @return]]>
      </doc>
    </method>
    <method name="times" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="factors" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Returns the product of the given elements as StringBuffer.
 
 @param factors
 @return]]>
      </doc>
    </method>
    <method name="abs" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="and" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccos" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccosh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccot" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccoth" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccsc" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccsch" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsec" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsech" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsin" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsinh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arctan" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arctanh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="ceiling" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="org.sbml.jsbml.Compartment"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mantissa" type="double"/>
      <param name="exponent" type="int"/>
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="real" type="double"/>
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="integer" type="int"/>
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="org.sbml.jsbml.CallableSBase"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="cos" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="cosh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="cot" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="coth" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="csc" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="csch" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="delay" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="delayName" type="java.lang.String"/>
      <param name="x" type="org.sbml.jsbml.ASTNode"/>
      <param name="y" type="org.sbml.jsbml.ASTNode"/>
      <param name="timeUnits" type="java.lang.String"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="eq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="exp" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="factorial" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
    </method>
    <method name="floor" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="frac" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="org.sbml.jsbml.ASTNode"/>
      <param name="denominator" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="frac" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="int"/>
      <param name="denominator" type="int"/>
    </method>
    <method name="function" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="func" type="org.sbml.jsbml.FunctionDefinition"/>
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="function" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="nodes" type="org.sbml.jsbml.ASTNode[]"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param name
 @param nodes
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="function" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param name
 @param nodes
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="geq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="getConstantAvogadro" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getConstantE" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstantFalse" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstantPi" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstantTrue" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNegativeInfinity" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPositiveInfinity" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="gt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="lambda" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="leq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="ln" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="log" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="log" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="lt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="minus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="neq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="not" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="or" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="piecewise" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="plus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="pow" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="root" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootExponent" type="org.sbml.jsbml.ASTNode"/>
      <param name="radiant" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="root" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootExponent" type="double"/>
      <param name="radiant" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sec" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sech" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sin" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sinh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sqrt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="symbolTime" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="time" type="java.lang.String"/>
    </method>
    <method name="tan" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="tanh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="times" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="uMinus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="unknownValue" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="xor" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <doc>
    <![CDATA[This class creates C-like infix formula {@link String}s that represent the
 content of {@link ASTNode}s. These can be used to save equations in SBML with
 older than Level 2.
 
 @author Alexander D&ouml;rr
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.compilers.FormulaCompiler -->
  <!-- start class org.sbml.jsbml.util.compilers.FormulaCompilerNoPiecewise -->
  <class name="FormulaCompilerNoPiecewise" extends="org.sbml.jsbml.util.compilers.FormulaCompiler"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FormulaCompilerNoPiecewise"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="piecewise" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="getPiecewiseMap" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets a {@link Map} of the piecewise expressions that have been
 transformed.
 
 @return a {@link Map} of the piecewise expressions that have been
         transformed.]]>
      </doc>
    </method>
    <method name="getAndReplacement" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the String that will be used to replace ' and ' (the mathML
 &#60;and&#62; element) in the boolean expressions.
 
 @return the {@link String} that will be used to replace ' and ' (the
         mathML &#60;and&#62; element) in the boolean expressions.]]>
      </doc>
    </method>
    <method name="setAndReplacement"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="andReplacement" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@link String} that will be used to replace ' and ' (the mathML
 &#60;and&#62; element) in the boolean expressions. The default value used
 is ' & '. If null is given, no replacement will be performed.
 
 @param andReplacement]]>
      </doc>
    </method>
    <method name="getOrReplacement" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the String that will be used to replace ' or ' (the mathML
 &#60;or&#62; element) in the boolean expressions.
 
 @return the {@link String} that will be used to replace ' or ' (the
         mathML &#60;or&#62; element) in the boolean expressions.]]>
      </doc>
    </method>
    <method name="setOrReplacement"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="orReplacement" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@link String} that will be used to replace ' or ' (the mathML
 &#60;or&#62; element) in the boolean expressions. The default value is '
 | '. If null is given, no replacement will be performed.
 
 @param orReplacement]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Produces an infix formula like {@link FormulaCompiler} but removes all the
 piecewise functions. They are replaced by an id that is unique if you are
 using the same {@link FormulaCompilerNoPiecewise} instance. The content of
 the piecewise function is put in a {@link Map} and is transformed to use
 if/then/else.
 
 This class is used for example to create an SBML2XPP converter where (in XPP)
 the piecewise operator is not supported.
 
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.compilers.FormulaCompilerNoPiecewise -->
  <!-- start class org.sbml.jsbml.util.compilers.HTMLFormula -->
  <class name="HTMLFormula" extends="org.sbml.jsbml.util.compilers.MathMLCompiler"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HTMLFormula"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[@throws XMLStreamException]]>
      </doc>
    </constructor>
    <method name="pow" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="basis" type="java.lang.Object"/>
      <param name="exponent" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns the basis to the power of the exponent as StringBuffer. Several
 special cases are treated.
 
 @param basis
 @param exponent
 @return]]>
      </doc>
    </method>
    <method name="sum" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="summands" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Returns the sum of the given elements as StringBuffer.
 
 @param summands
 @return]]>
      </doc>
    </method>
    <method name="times" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="factors" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Returns the product of the given elements as StringBuffer.
 
 @param factors
 @return]]>
      </doc>
    </method>
    <method name="toHTML" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="u" type="org.sbml.jsbml.Unit"/>
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="toHTML" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ud" type="org.sbml.jsbml.UnitDefinition"/>
      <doc>
      <![CDATA[Creates an HTML string representation of this UnitDefinition.
 
 @return]]>
      </doc>
    </method>
    <method name="reactionEquation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reaction" type="org.sbml.jsbml.Reaction"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param reaction
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <field name="EMPTY_SET" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTML code for the empty set symbol &ldquo;&#8709;&rdquo;.]]>
      </doc>
    </field>
    <field name="REVERSIBLE_REACTION_ARROW" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTML code for the reversible reaction arrow whose upper side is directed
 to the right &ldquo;&#x21cc;&rdquo;.]]>
      </doc>
    </field>
    <field name="RIGHT_ARROW" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTML code for the right arrow &ldquo;&#8594;&rdquo;.]]>
      </doc>
    </field>
    <field name="C_DOT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Multiplication symbol &ldquo;&#8901;&rdquo;.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[@author Andreas Dr&auml;ger
 @date 2010-04-08
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.compilers.HTMLFormula -->
  <!-- start class org.sbml.jsbml.util.compilers.LaTeXCompiler -->
  <class name="LaTeXCompiler" extends="org.sbml.jsbml.util.StringTools"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.util.compilers.ASTNodeCompiler"/>
    <constructor name="LaTeXCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LaTeXCompiler" type="boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param settings]]>
      </doc>
    </constructor>
    <method name="getNumbering" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="number" type="long"/>
      <doc>
      <![CDATA[@param number
 @return]]>
      </doc>
    </method>
    <method name="maskSpecialChars" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <doc>
      <![CDATA[Masks all special characters used by LaTeX with a backslash including
 hyphen symbols.
 
 @param string
 @return]]>
      </doc>
    </method>
    <method name="maskSpecialChars" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <param name="hyphen" type="boolean"/>
      <doc>
      <![CDATA[@param string
 @param hyphen
            if true a hyphen symbol is introduced at each position where a
            special character has to be masked anyway.
 @return]]>
      </doc>
    </method>
    <method name="abs" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="and" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccos" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccosh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccot" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccoth" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccsc" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccsch" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsec" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsech" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsin" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsinh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arctan" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arctanh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="brackets" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="formula" type="java.lang.Object"/>
      <doc>
      <![CDATA[Encloses the given formula in brackets.
 
 @param formula
 @return]]>
      </doc>
    </method>
    <method name="ceiling" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="colorbox" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="color" type="java.lang.String"/>
      <param name="what" type="java.lang.Object"/>
      <doc>
      <![CDATA[@param color
 @param what
 @return]]>
      </doc>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="org.sbml.jsbml.Compartment"/>
      <doc>
      <![CDATA[This method returns the correct LaTeX expression for a function which
 returns the size of a compartment. This can be a volume, an area, a
 length or a point.]]>
      </doc>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mantissa" type="double"/>
      <param name="exponent" type="int"/>
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="real" type="double"/>
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="integer" type="int"/>
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="org.sbml.jsbml.CallableSBase"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="cos" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="cosh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="cot" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="coth" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="csc" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="csch" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="delay" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="delayName" type="java.lang.String"/>
      <param name="x" type="org.sbml.jsbml.ASTNode"/>
      <param name="delay" type="org.sbml.jsbml.ASTNode"/>
      <param name="timeUnits" type="java.lang.String"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="descriptionItem" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="item" type="java.lang.String"/>
      <param name="description" type="java.lang.Object"/>
      <doc>
      <![CDATA[This method simplifies the process of creating descriptions. There is an
 item entry together with a description. No new line or space is needed
 for separation.
 
 @param item
            e.g., "my item"
 @param description
            e.g., "my description"
 @return]]>
      </doc>
    </method>
    <method name="eq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="exp" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="factorial" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="floor" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="format" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[This method returns a <code>StringBuffer</code> representing a properly
 LaTeX formatted number.
 
 @param value
 @return]]>
      </doc>
    </method>
    <method name="frac" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="org.sbml.jsbml.ASTNode"/>
      <param name="denominator" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="frac" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="int"/>
      <param name="denominator" type="int"/>
    </method>
    <method name="frac" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="java.lang.Object"/>
      <param name="denominator" type="java.lang.Object"/>
      <doc>
      <![CDATA[@param numerator
 @param denominator
 @return]]>
      </doc>
    </method>
    <method name="function" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fun" type="org.sbml.jsbml.FunctionDefinition"/>
      <param name="args" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="function" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="functionDefinitionName" type="java.lang.String"/>
      <param name="args" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="geq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="getConstantAvogadro" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getConstantE" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstantFalse" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstantPi" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstantTrue" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNegativeInfinity" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPositiveInfinity" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="gt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="href" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="target" type="java.lang.String"/>
      <param name="text" type="java.lang.Object"/>
      <doc>
      <![CDATA[Creates a hyper link to the given target and the text to be visible in
 the document.
 
 @param target
            The target to which this link points to.
 @param text
            The text to be written in the link.
 @return]]>
      </doc>
    </method>
    <method name="hyperref" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="target" type="java.lang.String"/>
      <param name="text" type="java.lang.Object"/>
      <doc>
      <![CDATA[@param target
 @param text
 @return]]>
      </doc>
    </method>
    <method name="isPrintNameIfAvailable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="label" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
    </method>
    <method name="lambda" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="leq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="ln" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="log" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="log" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="base" type="org.sbml.jsbml.ASTNode"/>
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="longtableHead" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="columnDef" type="java.lang.String"/>
      <param name="caption" type="java.lang.String"/>
      <param name="headLine" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a head for a longtable in LaTeX.
 
 @param columnDef
            without leading and ending brackets, e.g., "lrrc",
 @param caption
            caption of this table without leading and ending brackets
 @param headLine
            table head without leading and ending brackets and without
            double backslashes at the end
 @return]]>
      </doc>
    </method>
    <method name="lt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="math" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="formula" type="java.lang.Object"/>
      <doc>
      <![CDATA[Encloses the given formula in dollar symbols (inline math mode).
 
 @param formula
 @return]]>
      </doc>
    </method>
    <method name="mathrm" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="symbol" type="char"/>
      <doc>
      <![CDATA[@param symbol
 @return]]>
      </doc>
    </method>
    <method name="mathrm" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="text" type="java.lang.String"/>
      <doc>
      <![CDATA[@param text
 @return]]>
      </doc>
    </method>
    <method name="mathtext" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="text" type="java.lang.String"/>
      <doc>
      <![CDATA[@param text
 @return]]>
      </doc>
    </method>
    <method name="mathtt" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the LaTeX code to set the given String in type writer font within
 a math environment.
 
 @param id
 @return]]>
      </doc>
    </method>
    <method name="mbox" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <doc>
      <![CDATA[@param s
 @return]]>
      </doc>
    </method>
    <method name="minus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="neq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="not" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="or" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="piecewise" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="plus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="pow" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="base" type="org.sbml.jsbml.ASTNode"/>
      <param name="exponent" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="root" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootExponent" type="org.sbml.jsbml.ASTNode"/>
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="root" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootExponent" type="double"/>
      <param name="radiant" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sec" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sech" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="section" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="title" type="java.lang.String"/>
      <param name="numbering" type="boolean"/>
      <doc>
      <![CDATA[@param title
 @param numbering
 @return]]>
      </doc>
    </method>
    <method name="setPrintNameIfAvailable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printNameIfAvailable" type="boolean"/>
      <doc>
      <![CDATA[@param printNameIfAvailable]]>
      </doc>
    </method>
    <method name="sin" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sinh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sqrt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="subsection" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="title" type="java.lang.String"/>
      <param name="numbering" type="boolean"/>
      <doc>
      <![CDATA[@param title
 @param numbering
 @return]]>
      </doc>
    </method>
    <method name="subsubsection" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="title" type="java.lang.String"/>
      <param name="numbering" type="boolean"/>
      <doc>
      <![CDATA[@param title
 @param numbering
 @return]]>
      </doc>
    </method>
    <method name="symbolTime" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="time" type="java.lang.String"/>
    </method>
    <method name="tan" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="tanh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="textcolor" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="color" type="java.lang.String"/>
      <param name="text" type="java.lang.Object"/>
      <doc>
      <![CDATA[@param color
 @param text
 @return]]>
      </doc>
    </method>
    <method name="texttt" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the LaTeX code to set the given String in type writer font.
 
 @param id
 @return]]>
      </doc>
    </method>
    <method name="timeDerivative" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="java.lang.String"/>
      <doc>
      <![CDATA[@param variable
 @return]]>
      </doc>
    </method>
    <method name="times" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="uMinus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="unknownValue" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="usepackage" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="latexPackage" type="java.lang.String"/>
      <param name="options" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Creates a usepackage command for the given package with the optional
 options.
 
 @param latexPackage
            the name of the latex package
 @param options
            options without commas
 @return usepackage command including system-dependent new line character.]]>
      </doc>
    </method>
    <method name="xor" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <field name="bottomrule" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Requires LaTeX package booktabs. Produces a fancy line at the bottom of a
 table. This variable also includes the <code>end{longtable}</code>
 command and a new line.]]>
      </doc>
    </field>
    <field name="CONSTANT_PI" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The constant pi]]>
      </doc>
    </field>
    <field name="descriptionBegin" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Surrounded by new line symbols. The begin of a description environment in
 LaTeX.]]>
      </doc>
    </field>
    <field name="descriptionEnd" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Surrounded by new line symbols. The end of a description environment.]]>
      </doc>
    </field>
    <field name="eqBegin" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Surrounded by new line symbols. Begin equation. This type of equation
 requires the LaTeX package breqn. It will produce equations with
 automatic line breaks (LaTeX will compute the optimal place for line
 breaks). Unfortunately, this does not work for very long denominators.]]>
      </doc>
    </field>
    <field name="eqEnd" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[End equation; cf. eqBegin. Surrounded by new line symbols.]]>
      </doc>
    </field>
    <field name="leftBrace" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Left parenthesis.]]>
      </doc>
    </field>
    <field name="leftQuotationMark" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[An opening quotation mark.]]>
      </doc>
    </field>
    <field name="lineBreak" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This is a LaTeX line break. The line break symbol double backslash
 followed by a new line symbol of the operating system.]]>
      </doc>
    </field>
    <field name="midrule" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Produces a fancy line in tables. Requires LaTeX package booktabs. Starts
 and ends with a new line.]]>
      </doc>
    </field>
    <field name="NEGATIVE_ININITY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="or" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="POSITIVE_INFINITY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="rightBrace" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="rightQuotationMark" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[An closing quotation mark.]]>
      </doc>
    </field>
    <field name="toprule" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Needed for the beginning of a table. Requires LaTeX package booktabs.
 Surrounded by new line symbols.]]>
      </doc>
    </field>
    <field name="wedge" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="xor" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CONSTANT_E" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CONSTANT_FALSE" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CONSTANT_TRUE" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Converts {@link ASTNodeValue} objects into a LaTeX {@link String} to be
 included into scientific writings or to be displayed in a GUI.
 
 @author Andreas Dr&auml;ger
 @date 2009-01-03
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.compilers.LaTeXCompiler -->
  <!-- start class org.sbml.jsbml.util.compilers.LibSBMLFormulaCompiler -->
  <class name="LibSBMLFormulaCompiler" extends="org.sbml.jsbml.util.compilers.FormulaCompiler"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LibSBMLFormulaCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="arccos" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccosh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccot" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccoth" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccsc" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccsch" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsec" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsech" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsin" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsinh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arctan" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arctanh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="and" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="or" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="xor" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="eq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="neq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="geq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="gt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="leq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="lt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="getNegativeInfinity" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPositiveInfinity" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="pow" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="ln" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="log" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="log" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="getConstantE" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="factorial" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
    </method>
    <method name="root" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootExponent" type="org.sbml.jsbml.ASTNode"/>
      <param name="radiant" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="root" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootExponent" type="double"/>
      <param name="radiant" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sqrt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
  </class>
  <!-- end class org.sbml.jsbml.util.compilers.LibSBMLFormulaCompiler -->
  <!-- start class org.sbml.jsbml.util.compilers.MathMLCompiler -->
  <class name="MathMLCompiler" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.util.compilers.ASTNodeCompiler"/>
    <constructor name="MathMLCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[@throws ParserConfigurationException]]>
      </doc>
    </constructor>
    <constructor name="MathMLCompiler" type="org.sbml.jsbml.ASTNode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param ast
 @throws XMLStreamException
 @throws SBMLException]]>
      </doc>
    </constructor>
    <method name="abs" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="and" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccos" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccosh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccot" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccoth" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccsc" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccsch" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsec" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsech" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsin" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsinh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arctan" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arctanh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="ceiling" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="org.sbml.jsbml.Compartment"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mantissa" type="double"/>
      <param name="exponent" type="int"/>
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="real" type="double"/>
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="integer" type="int"/>
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="org.sbml.jsbml.CallableSBase"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="cos" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="cosh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="cot" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="coth" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="csc" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="csch" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="delay" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="delayName" type="java.lang.String"/>
      <param name="x" type="org.sbml.jsbml.ASTNode"/>
      <param name="delay" type="org.sbml.jsbml.ASTNode"/>
      <param name="timeUnit" type="java.lang.String"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="eq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="exp" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="factorial" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="floor" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="frac" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="org.sbml.jsbml.ASTNode"/>
      <param name="denominator" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="frac" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="int"/>
      <param name="denominator" type="int"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="function" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="functionDefinition" type="org.sbml.jsbml.FunctionDefinition"/>
      <param name="args" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="function" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="functionDefinitionName" type="java.lang.String"/>
      <param name="args" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="geq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="getConstantAvogadro" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getConstantE" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstantFalse" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstantPi" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstantTrue" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDocument" return="org.w3c.dom.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@return the document
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="getLevel" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the level]]>
      </doc>
    </method>
    <method name="getNegativeInfinity" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="getPositiveInfinity" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="gt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="lambda" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="leq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="ln" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="log" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="log" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="base" type="org.sbml.jsbml.ASTNode"/>
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="lt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="minus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="neq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="not" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="or" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="piecewise" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="plus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="pow" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="base" type="org.sbml.jsbml.ASTNode"/>
      <param name="exponent" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[Allows to re-use this object to compile another {@link ASTNode}. Without
 reseting, this compiler can only be used one time. Otherwise it cannot be
 guaranteed that the results will be correct.
 
 @throws XMLStreamException]]>
      </doc>
    </method>
    <method name="root" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootExponent" type="org.sbml.jsbml.ASTNode"/>
      <param name="radiant" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="root" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootExponent" type="double"/>
      <param name="radiant" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sec" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sech" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sin" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sinh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sqrt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="symbolTime" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="time" type="java.lang.String"/>
    </method>
    <method name="tan" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="tanh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="times" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="toMathML" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="omitXMLDeclaration" type="boolean"/>
      <param name="indenting" type="boolean"/>
      <param name="indent" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param omitXMLDeclaration
 @param indenting
 @param indent
 @return
 @throws IOException
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="uMinus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="unknownValue" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="xor" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="DOMException" type="org.w3c.dom.DOMException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <doc>
    <![CDATA[With this compiler, an {@link ASTNode} can be transformed into a MathML
 string.
 
 @author Andreas Dr&auml;ger
 @date 2010-05-18
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.compilers.MathMLCompiler -->
  <!-- start class org.sbml.jsbml.util.compilers.MathMLXMLStreamCompiler -->
  <class name="MathMLXMLStreamCompiler" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MathMLXMLStreamCompiler" type="javax.xml.stream.XMLStreamWriter, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new MathMLXMLStreamCompiler.
 
 @param writer the writer
 @param indent the starting indentation
 
 @throws IllegalArgumentException if the writer is null]]>
      </doc>
    </constructor>
    <method name="toMathML" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="astNode" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Writes an {@link ASTNode} the mathML.
 
 @param astNode the {@link ASTNode} to serialize as mathML
 @return a String representing this ASTNode as mathML.]]>
      </doc>
    </method>
    <method name="isSBMLNamespaceNeeded" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="astNode" type="org.sbml.jsbml.ASTNode"/>
    </method>
    <method name="compile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="astNode" type="org.sbml.jsbml.ASTNode"/>
      <doc>
      <![CDATA[Compiles this {@link ASTNode} and produce an XMLStreamWriter representing this node in mathML.
 

 @throws SBMLException if any problems occur while checking the ASTNode tree.]]>
      </doc>
    </method>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
    </method>
    <doc>
    <![CDATA[Writes an {@link ASTNode} the mathML.
 
 @author rodrigue
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.compilers.MathMLXMLStreamCompiler -->
  <!-- start class org.sbml.jsbml.util.compilers.UnitException -->
  <class name="UnitException" extends="org.sbml.jsbml.SBMLException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UnitException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UnitException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param message]]>
      </doc>
    </constructor>
    <constructor name="UnitException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param cause]]>
      </doc>
    </constructor>
    <constructor name="UnitException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param message
 @param cause]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[Exception to be thrown if inconsistent units are used in mathematical
 expressions, i.e., instances of {@link ASTNode}.
 
 @author Andreas Dr&auml;ger
 @date 2011-01-20
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.compilers.UnitException -->
  <!-- start class org.sbml.jsbml.util.compilers.UnitsCompiler -->
  <class name="UnitsCompiler" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.util.compilers.ASTNodeCompiler"/>
    <constructor name="UnitsCompiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UnitsCompiler" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param level
 @param version]]>
      </doc>
    </constructor>
    <constructor name="UnitsCompiler" type="org.sbml.jsbml.Model"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param model]]>
      </doc>
    </constructor>
    <method name="abs" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="and" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccos" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccosh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccot" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccoth" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccsc" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arccsch" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsec" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsech" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsin" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arcsinh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arctan" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="arctanh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="ceiling" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="boolean"/>
      <doc>
      <![CDATA[Compile boolean values
 
 @param b
 @return]]>
      </doc>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="org.sbml.jsbml.Compartment"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mantissa" type="double"/>
      <param name="exponent" type="int"/>
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="real" type="double"/>
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="integer" type="int"/>
      <param name="units" type="java.lang.String"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="variable" type="org.sbml.jsbml.CallableSBase"/>
    </method>
    <method name="compile" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="cos" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="cosh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="cot" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="coth" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="csc" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="csch" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="delay" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="delayName" type="java.lang.String"/>
      <param name="x" type="org.sbml.jsbml.ASTNode"/>
      <param name="delay" type="org.sbml.jsbml.ASTNode"/>
      <param name="units" type="java.lang.String"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="eq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="exp" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="factorial" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="floor" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="frac" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="org.sbml.jsbml.ASTNode"/>
      <param name="denominator" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="frac" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numerator" type="int"/>
      <param name="denominator" type="int"/>
    </method>
    <method name="function" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="function" type="org.sbml.jsbml.FunctionDefinition"/>
      <param name="args" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="function" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="functionDefinitionName" type="java.lang.String"/>
      <param name="args" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="geq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="getConstantAvogadro" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getConstantE" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstantFalse" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstantPi" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConstantTrue" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNegativeInfinity" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPositiveInfinity" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="gt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="lambda" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="leq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="ln" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="log" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="log" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="number" type="org.sbml.jsbml.ASTNode"/>
      <param name="base" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="lt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="minus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="neq" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="left" type="org.sbml.jsbml.ASTNode"/>
      <param name="right" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="not" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="or" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="piecewise" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="plus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="pow" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="base" type="org.sbml.jsbml.ASTNode"/>
      <param name="exponent" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="root" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootExponent" type="org.sbml.jsbml.ASTNode"/>
      <param name="radiant" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="root" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rootExponent" type="double"/>
      <param name="radiant" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sec" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sech" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sin" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sinh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="sqrt" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="symbolTime" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="time" type="java.lang.String"/>
    </method>
    <method name="tan" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="tanh" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="times" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="uMinus" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.sbml.jsbml.ASTNode"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <method name="unknownValue" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="xor" return="org.sbml.jsbml.util.compilers.ASTNodeValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.List&lt;org.sbml.jsbml.ASTNode&gt;"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
    </method>
    <doc>
    <![CDATA[Derives the units from mathematical operations.
 
 @author Andreas Dr&auml;ger
 @date 2010-05-20
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.compilers.UnitsCompiler -->
  <doc>
  <![CDATA[The classes in this package can be used to evaluate the information
  represented by abstract syntax trees (ASTNode objects).]]>
  </doc>
</package>
<package name="org.sbml.jsbml.util.filters">
  <!-- start class org.sbml.jsbml.util.filters.AndFilter -->
  <class name="AndFilter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.util.filters.Filter"/>
    <constructor name="AndFilter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="AndFilter" type="org.sbml.jsbml.util.filters.Filter[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param filters]]>
      </doc>
    </constructor>
    <method name="accepts" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="addFilter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filter" type="org.sbml.jsbml.util.filters.Filter"/>
      <doc>
      <![CDATA[@param filter
 @return]]>
      </doc>
    </method>
    <method name="getFilters" return="java.util.Set&lt;org.sbml.jsbml.util.filters.Filter&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="removeFilter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filter" type="org.sbml.jsbml.util.filters.Filter"/>
      <doc>
      <![CDATA[@param filter
 @return]]>
      </doc>
    </method>
    <method name="setFilters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filters" type="java.util.Set&lt;org.sbml.jsbml.util.filters.Filter&gt;"/>
      <doc>
      <![CDATA[@param filters]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A {@link Filter} that accepts an item only if all of its internal filters
 also accept the given item.
 
 @author Andreas Dr&auml;ger
 @date 2010-05-26
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.filters.AndFilter -->
  <!-- start class org.sbml.jsbml.util.filters.AssignmentVariableFilter -->
  <class name="AssignmentVariableFilter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.util.filters.Filter"/>
    <constructor name="AssignmentVariableFilter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="AssignmentVariableFilter" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id]]>
      </doc>
    </constructor>
    <method name="accepts" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="getId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the id]]>
      </doc>
    </method>
    <method name="setId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[@param id the id to set]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This filter only accepts instances of {@link Assignment} with the variable as
 given in the constructor of this object.
 
 @author rodrigue
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.filters.AssignmentVariableFilter -->
  <!-- start class org.sbml.jsbml.util.filters.BoundaryConditionFilter -->
  <class name="BoundaryConditionFilter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.util.filters.Filter"/>
    <constructor name="BoundaryConditionFilter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new boundary condition filter.]]>
      </doc>
    </constructor>
    <method name="accepts" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[This filter accepts species whose boundary condition is set to true.
 
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.filters.BoundaryConditionFilter -->
  <!-- start class org.sbml.jsbml.util.filters.CVTermFilter -->
  <class name="CVTermFilter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.util.filters.Filter"/>
    <constructor name="CVTermFilter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CVTermFilter" type="org.sbml.jsbml.CVTerm.Qualifier"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param qualifier]]>
      </doc>
    </constructor>
    <constructor name="CVTermFilter" type="org.sbml.jsbml.CVTerm.Qualifier, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param qualifier
 @param pattern]]>
      </doc>
    </constructor>
    <method name="accepts" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="getPattern" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the pattern]]>
      </doc>
    </method>
    <method name="getQualifier" return="org.sbml.jsbml.CVTerm.Qualifier"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the qualifier]]>
      </doc>
    </method>
    <method name="setPattern"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pattern" type="java.lang.String"/>
      <doc>
      <![CDATA[@param pattern
            the pattern to set]]>
      </doc>
    </method>
    <method name="setQualifier"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="qualifier" type="org.sbml.jsbml.CVTerm.Qualifier"/>
      <doc>
      <![CDATA[@param qualifier
            the qualifier to set]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This filter accepts only instances of {@link CVTerm} with a certain content
 or instances of {@link SBase} that are annotated with appropriate
 {@link CVTerm} objects.
 
 @author Andreas Dr&auml;ger
 @date 2010-05-19
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.filters.CVTermFilter -->
  <!-- start interface org.sbml.jsbml.util.filters.Filter -->
  <interface name="Filter"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="accepts" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[This method checks whether the given object is of the correct type and
 has the desired properties set to be acceptable.
 
 @param o
            some object whose properties are to be checked.
 @return True if the object is sufficient to be acceptable or false if at
         least one of its properties or its class name does not fit into
         this filter criterion.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A filter is a general interface that allows to check an object for a certain
 property. An implementing class may check for the type of the object and then
 check some of its field values.
 
 @author Andreas Dr&auml;ger
 @date 2010-05-19
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.util.filters.Filter -->
  <!-- start class org.sbml.jsbml.util.filters.NameFilter -->
  <class name="NameFilter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.util.filters.Filter"/>
    <constructor name="NameFilter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="NameFilter" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id]]>
      </doc>
    </constructor>
    <constructor name="NameFilter" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id
 @param name]]>
      </doc>
    </constructor>
    <method name="accepts" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="getId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the id]]>
      </doc>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the name]]>
      </doc>
    </method>
    <method name="setId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[@param id the id to set]]>
      </doc>
    </method>
    <method name="setName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[@param name the name to set]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This filter only accepts instances of {@link NamedSBase} with the name as
 given in the constructor of this object.
 
 @author Andreas Dr&auml;ger
 @date 2010-05-19
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.filters.NameFilter -->
  <!-- start class org.sbml.jsbml.util.filters.OrFilter -->
  <class name="OrFilter" extends="org.sbml.jsbml.util.filters.AndFilter"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OrFilter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="OrFilter" type="org.sbml.jsbml.util.filters.Filter[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param filters]]>
      </doc>
    </constructor>
    <method name="accepts" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[This filter accepts an item if at least one of its filters accepts the given
 item.
 
 @author Andreas Dr&auml;ger
 @date 2010-05-26
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.filters.OrFilter -->
  <!-- start class org.sbml.jsbml.util.filters.SBOFilter -->
  <class name="SBOFilter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.util.filters.Filter"/>
    <constructor name="SBOFilter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Generates a new Filter for SBO terms but with an invalid SBO term as
 filter criterion.]]>
      </doc>
    </constructor>
    <constructor name="SBOFilter" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an SBO term filter with the given term as filter criterion.
 
 @param term
            The term of interest.]]>
      </doc>
    </constructor>
    <method name="accepts" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="getTerm" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the term]]>
      </doc>
    </method>
    <method name="setTerm"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="term" type="int"/>
      <doc>
      <![CDATA[@param term
            the term to set]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A {@link Filter} that accepts only instances of {@link SBase} whose SBO term
 field is set to a certain value of interest.
 
 @author Andreas Dr&auml;ger
 @date 2010-05-26
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.filters.SBOFilter -->
  <!-- start class org.sbml.jsbml.util.filters.SpeciesReferenceFilter -->
  <class name="SpeciesReferenceFilter" extends="org.sbml.jsbml.util.filters.NameFilter"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SpeciesReferenceFilter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link SpeciesReferenceFilter} with undefined properties.]]>
      </doc>
    </constructor>
    <constructor name="SpeciesReferenceFilter" type="org.sbml.jsbml.Species"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link SpeciesReferenceFilter} that only accepts instances of
 {@link SpeciesReference} pointing to the id of the given {@link Species}.
 
 @param species
        the {@link Species} of interest.]]>
      </doc>
    </constructor>
    <constructor name="SpeciesReferenceFilter" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id
        the identifier of a {@link Species} or {@link SpeciesReference} we
        are interested in. Whether we accept the id of a {@link Species} or
        a {@link SpeciesReference} depends on the flag that can be defined
        with {@link #setFilterForSpecies(boolean)}.
 @see #setFilterForSpecies(boolean)]]>
      </doc>
    </constructor>
    <constructor name="SpeciesReferenceFilter" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param id
        the identifier of a {@link Species} or {@link SpeciesReference} we
        are interested in. Whether we accept the id of a {@link Species} or
        a {@link SpeciesReference} depends on the flag that can be defined
        with {@link #setFilterForSpecies(boolean)}.
 @param name
        the name of the element we are interested in.
 @see #setFilterForSpecies(boolean)]]>
      </doc>
    </constructor>
    <method name="accepts" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="isFilterForSpecies" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the filterForSpecies]]>
      </doc>
    </method>
    <method name="setFilterForSpecies"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filterForSpecies" type="boolean"/>
      <doc>
      <![CDATA[@param filterForSpecies
            the filterForSpecies to set]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This is a special {@link NameFilter} that allows users to search for a
 {@link SimpleSpeciesReference} that refers to a {@link Species} with the
 given identifier attribute. The boolean switch {@link #filterForSpecies} that
 can be changed using the {@link #setFilterForSpecies(boolean)} method decides
 whether this {@link SpeciesReferenceFilter} should use the given identifier
 to filter for the actual {@link SimpleSpeciesReference} or for the referenced
 {@link Species}.
 
 @author Andreas Dr&auml;ger
 @date 2010-11-10
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.util.filters.SpeciesReferenceFilter -->
  <doc>
  <![CDATA[Filter are useful to decide whether or not to accept a certain item.
  All classes in this package implement the interface Filter that can
  be used to, e.g., select entries from a ListOf object.]]>
  </doc>
</package>
<package name="org.sbml.jsbml.validator">
  <!-- start class org.sbml.jsbml.validator.ModelOverdeterminedException -->
  <class name="ModelOverdeterminedException" extends="java.lang.Exception"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ModelOverdeterminedException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ModelOverdeterminedException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param message]]>
      </doc>
    </constructor>
    <constructor name="ModelOverdeterminedException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param message
 @param cause]]>
      </doc>
    </constructor>
    <constructor name="ModelOverdeterminedException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param cause]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[This class represents an exception that is thrown when the model to be
 simulated is overdetermined
 
 @author Alexander D&ouml;rr
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.validator.ModelOverdeterminedException -->
  <!-- start class org.sbml.jsbml.validator.OverdeterminationValidator -->
  <class name="OverdeterminationValidator" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OverdeterminationValidator" type="org.sbml.jsbml.Model"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new OverdeterminationValidator for the given model
 
 @param model]]>
      </doc>
    </constructor>
    <method name="getMatching" return="java.util.Map&lt;org.sbml.jsbml.SBase, org.sbml.jsbml.SBase&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the determined matching
 
 @return]]>
      </doc>
    </method>
    <method name="isOverdetermined" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a boolean that indicates whether the given model is over
 determined or not.
 
 @return]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class creates a bipartite graph and a matching for the given model using
 the algorithm by Hopcroft and Karp (1973).
 
 @author Alexander D&ouml;rr
 @date 2010-06-17
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.validator.OverdeterminationValidator -->
  <!-- start class org.sbml.jsbml.validator.SBMLValidator -->
  <class name="SBMLValidator" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SBMLValidator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <doc>
      <![CDATA[@param args]]>
      </doc>
    </method>
    <method name="checkConsistency" return="org.sbml.jsbml.SBMLErrorLog"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="parameters" type="java.util.HashMap&lt;java.lang.String, java.lang.String&gt;"/>
      <doc>
      <![CDATA[Validates an SBML model using the
 SBML.org online validator (http://sbml.org/validator/).
 
 <p>
 You can control the consistency checks that are performed when
 {@link #checkConsistency()} is called with the {@link HashMap} of 
 parameters given.
 It will fill the {@link SBMLErrorLog}
 with {@link SBMLError}s for each problem within this whole model.
 
 <p>
 If this method returns a non empty {@link SBMLErrorLog}, the failures may be
 due to warnings @em or errors.  Callers should inspect the severity
 flag in the individual SBMLError objects to determine the nature of the failures.
 
 @param fileName a file name
 @param parameters parameters for the libsbml checkConsistency()
 @return an {@link SBMLErrorLog} containing the list of errors.
 
 @see <a href="http://sbml.org/Facilities/Validator/Validator_Web_API">sbml.org Validator Web API</a>]]>
      </doc>
    </method>
    <method name="checkConsistency" return="org.sbml.jsbml.SBMLErrorLog"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlValidationString" type="java.lang.String"/>
      <doc>
      <![CDATA[Parses the XML String returned by the libSBML online validator or web services.
 
 <p>
 It will fill the {@link SBMLErrorLog}
 with {@link SBMLError}s for each problem within this whole model.
 
 <p>
 If this method returns a non empty {@link SBMLErrorLog}, the failures may be
 due to warnings @em or errors.  Callers should inspect the severity
 flag in the individual SBMLError objects to determine the nature of the failures.
 
 @param fileName a file name
 @param parameters parameters for the libsbml checkConsistency()
 @return an {@link SBMLErrorLog} containing the list of errors.
 
 @see <a href="http://sbml.org/Facilities/Validator/Validator_Web_API">sbml.org Validator Web API</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Validates the SBML document given by filename.xml or located at the http://
 URL. Output-format will always be xml
 <p>
 usage: java org.sbml.jsbml.validator.SBMLValidator [-h] [-d opt1[,opt2,...]]
 filename.xml
 <br> 
 usage: java validateSBML [-h] [-d opt1[,opt2,...]] http://...]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.validator.SBMLValidator -->
  <!-- start class org.sbml.jsbml.validator.SBMLValidator.CHECK_CATEGORY -->
  <class name="SBMLValidator.CHECK_CATEGORY" extends="java.lang.Enum&lt;org.sbml.jsbml.validator.SBMLValidator.CHECK_CATEGORY&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.sbml.jsbml.validator.SBMLValidator.CHECK_CATEGORY[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.sbml.jsbml.validator.SBMLValidator.CHECK_CATEGORY"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Enumerates the different possible check categories
 when performing the validation of an SBML document.]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.validator.SBMLValidator.CHECK_CATEGORY -->
  <doc>
  <![CDATA[<p>
    This package provides methods to validate the content of SBML models, whether
    given in a file or as a data structure.
  </p>]]>
  </doc>
</package>
<package name="org.sbml.jsbml.xml">
  <!-- start class org.sbml.jsbml.xml.XMLAttributes -->
  <class name="XMLAttributes" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="XMLAttributes"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new empty {@link XMLAttributes} set.]]>
      </doc>
    </constructor>
    <constructor name="XMLAttributes" type="org.sbml.jsbml.xml.XMLAttributes"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Copy constructor; creates a copy of this {@link XMLAttributes} set.]]>
      </doc>
    </constructor>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.Object"/>
      <doc>
      <![CDATA[Equality comparison method for XMLAttributes.

 @param sb a reference to an object to which the current object
 instance will be compared

 @return {@code true} if <code>sb</code> refers to the same underlying 
 native object as this one, {@code false} otherwise]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a hashcode for this XMLAttributes object.

 @return a hash code usable by Java methods that need them.]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.xml.XMLAttributes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a deep copy of this {@link XMLAttributes} set.
 <p>
 @return a (deep) copy of this {@link XMLAttributes} set.]]>
      </doc>
    </method>
    <method name="add" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="namespaceURI" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds an attribute (a name/value pair) to this {@link XMLAttributes} set optionally 
 with a prefix and URI defining a namespace.
 <p>
 @param name a string, the local name of the attribute.
 @param value a string, the value of the attribute.
 @param namespaceURI a string, the namespace URI of the attribute.
 @param prefix a string, the prefix of the namespace
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <p>
 @jsbml.note if local name with the same namespace URI already exists in this 
 attribute set, its value and prefix will be replaced.
 <p>]]>
      </doc>
    </method>
    <method name="add" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="namespaceURI" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds an attribute (a name/value pair) to this {@link XMLAttributes} set optionally 
 with a prefix and URI defining a namespace.
 <p>
 @param name a string, the local name of the attribute.
 @param value a string, the value of the attribute.
 @param namespaceURI a string, the namespace URI of the attribute.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <p>
 @jsbml.note if local name with the same namespace URI already exists in this 
 attribute set, its value and prefix will be replaced.
 <p>]]>
      </doc>
    </method>
    <method name="add" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds an attribute (a name/value pair) to this {@link XMLAttributes} set optionally 
 with a prefix and URI defining a namespace.
 <p>
 @param name a string, the local name of the attribute.
 @param value a string, the value of the attribute.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <p>
 @jsbml.note if local name with the same namespace URI already exists in this 
 attribute set, its value and prefix will be replaced.
 <p>]]>
      </doc>
    </method>
    <method name="add" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="triple" type="org.sbml.jsbml.xml.XMLTriple"/>
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds an attribute with the given {@link XMLTriple}/value pair to this {@link XMLAttributes} set.
 <p>
 @jsbml.note if local name with the same namespace URI already exists in this attribute set, 
 its value and prefix will be replaced.
 <p>
 @param triple an {@link XMLTriple}, the XML triple of the attribute.
 @param value a string, the value of the attribute.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS]]>
      </doc>
    </method>
    <method name="removeResource" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Removes an attribute with the given index from this {@link XMLAttributes} set.  
 <p>
 @param n an integer the index of the resource to be deleted
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> INDEX_EXCEEDS_SIZE]]>
      </doc>
    </method>
    <method name="remove" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Removes an attribute with the given index from this {@link XMLAttributes} set.  
 (This function is an alias of XMLAttributes.removeResource() ).
 <p>
 @param n an integer the index of the resource to be deleted
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> INDEX_EXCEEDS_SIZE]]>
      </doc>
    </method>
    <method name="remove" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes an attribute with the given local name and namespace URI from 
 this {@link XMLAttributes} set.  
 <p>
 @param name   a string, the local name of the attribute.
 @param uri    a string, the namespace URI of the attribute.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED;]]>
      </doc>
    </method>
    <method name="remove" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes an attribute with the given local name from 
 this {@link XMLAttributes} set.  
 <p>
 @param name   a string, the local name of the attribute.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED;]]>
      </doc>
    </method>
    <method name="remove" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="triple" type="org.sbml.jsbml.xml.XMLTriple"/>
      <doc>
      <![CDATA[Removes an attribute with the given {@link XMLTriple} from this {@link XMLAttributes} set.  
 <p>
 @param triple an {@link XMLTriple}, the XML triple of the attribute.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS]]>
      </doc>
    </method>
    <method name="clear" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clears (deletes) all attributes in this {@link XMLAttributes} object.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS]]>
      </doc>
    </method>
    <method name="getIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the index of an attribute with the given name.
 <p>
 @jsbml.note A namespace bound to the name is not checked by this function.
 Thus, if there are multiple attributes with the given local name and
 different namespaces, the smallest index among those attributes will
 be returned.  {@link XMLAttributes#getIndex(String name, String uri)} or
 {@link XMLAttributes#getIndex(XMLTriple  triple)} should be used to get an index of an
 attribute with the given local name and namespace.
 <p>
 @param name a string, the local name of the attribute for which the 
 index is required.
 <p>
 @return the index of an attribute with the given local name, or -1 if not present.]]>
      </doc>
    </method>
    <method name="getIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the index of an attribute with the given local name and namespace URI.
 <p>
 @param name a string, the local name of the attribute.
 @param uri  a string, the namespace URI of the attribute.
 <p>
 @return the index of an attribute with the given local name and namespace URI, 
 or -1 if not present.]]>
      </doc>
    </method>
    <method name="getIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="triple" type="org.sbml.jsbml.xml.XMLTriple"/>
      <doc>
      <![CDATA[Returns the index of an attribute with the given {@link XMLTriple}.
 <p>
 @param triple an {@link XMLTriple}, the XML triple of the attribute for which 
        the index is required.
 <p>
 @return the index of an attribute with the given {@link XMLTriple}, or -1 if not present.]]>
      </doc>
    </method>
    <method name="getLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of attributes in the set.
 <p>
 @return the number of attributes in this {@link XMLAttributes} set.]]>
      </doc>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the local name of an attribute in this {@link XMLAttributes} set (by position).
 <p>
 @param index an integer, the position of the attribute whose local name is 
 required.
 <p>
 @return the local name of an attribute in this list (by position).  
 <p>
 @jsbml.note If index is out of range, an empty string will be returned.  Use
 {@link XMLAttributes#hasAttribute(int index)} to test for the attribute
 existence.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the prefix of an attribute in this {@link XMLAttributes} set (by position).
 <p>
 @param index an integer, the position of the attribute whose prefix is 
 required.
 <p>
 @return the namespace prefix of an attribute in this list (by
 position).  
 <p>
 @jsbml.note If index is out of range, an empty string will be returned. Use
 {@link XMLAttributes#hasAttribute(int index)} to test for the attribute
 existence.]]>
      </doc>
    </method>
    <method name="getPrefixedName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the prefixed name of an attribute in this {@link XMLAttributes} set (by position).
 <p>
 @param index an integer, the position of the attribute whose prefixed 
 name is required.
 <p>
 @return the prefixed name of an attribute in this list (by
 position).  
 <p>
 @jsbml.note If index is out of range, an empty string will be returned.  Use
 {@link XMLAttributes#hasAttribute(int index)} to test for attribute existence.]]>
      </doc>
    </method>
    <method name="getURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the namespace URI of an attribute in this {@link XMLAttributes} set (by position).
 <p>
 @param index an integer, the position of the attribute whose namespace URI is 
 required.
 <p>
 @return the namespace URI of an attribute in this list (by position).
 <p>
 @jsbml.note If index is out of range, an empty string will be returned.  Use
 {@link XMLAttributes#hasAttribute(int index)} to test for attribute existence.]]>
      </doc>
    </method>
    <method name="getValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the value of an attribute in this {@link XMLAttributes} set (by position).
 <p>
 @param index an integer, the position of the attribute whose value is 
 required.
 <p>
 @return the value of an attribute in the list (by position).  
 <p>
 @jsbml.note If index is out of range, an empty string will be returned.  Use
 {@link XMLAttributes#hasAttribute(int index)} to test for attribute existence.]]>
      </doc>
    </method>
    <method name="getValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns an attribute's value by name.
 <p>
 @param name a string, the local name of the attribute whose value is required.
 <p>
 @return The attribute value as a string.  
 <p>
 @jsbml.note If an attribute with the given local name does not exist, an
 empty string will be returned.  Use {@link XMLAttributes#hasAttribute(String name, String uri)}
 to test for attribute existence.  A namespace bound to the local name
 is not checked by this function.  Thus, if there are multiple
 attributes with the given local name and different namespaces, the
 value of an attribute with the smallest index among those attributes
 will be returned.  {@link XMLAttributes#getValue(String name)} or
 {@link XMLAttributes#getValue(XMLTriple  triple)} should be used to get a value of an
 attribute with the given local name and namespace.]]>
      </doc>
    </method>
    <method name="getValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a value of an attribute with the given local name and namespace URI.
 <p>
 @param name a string, the local name of the attribute whose value is required.
 @param uri  a string, the namespace URI of the attribute.
 <p>
 @return The attribute value as a string.  
 <p>
 @jsbml.note If an attribute with the given local name and namespace URI does
 not exist, an empty string will be returned.  Use
 {@link XMLAttributes#hasAttribute(String name, String uri)}
 to test for attribute existence.]]>
      </doc>
    </method>
    <method name="getValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="triple" type="org.sbml.jsbml.xml.XMLTriple"/>
      <doc>
      <![CDATA[Returns a value of an attribute with the given {@link XMLTriple}.
 <p>
 @param triple an {@link XMLTriple}, the XML triple of the attribute whose 
        value is required.
 <p>
 @return The attribute value as a string.  
 <p>
 @jsbml.note If an attribute with the given {@link XMLTriple} does not exist, an
 empty string will be returned.  Use
 {@link XMLAttributes#hasAttribute(XMLTriple  triple)} to test for attribute existence.]]>
      </doc>
    </method>
    <method name="hasAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether
 an attribute with the given index exists in this {@link XMLAttributes}.
 <p>
 @param index an integer, the position of the attribute.
 <p>
 @return {@code true} if an attribute with the given index exists in this
 {@link XMLAttributes}, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="hasAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether
 an attribute with the given local name and namespace URI exists in this 
 {@link XMLAttributes}.
 <p>
 @param name a string, the local name of the attribute.
 @param uri  a string, the namespace URI of the attribute.
 <p>
 @return {@code true} if an attribute with the given local name and namespace 
 URI exists in this {@link XMLAttributes}, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="hasAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether
 an attribute with the given local name exists in this 
 {@link XMLAttributes}.
 <p>
 @param name a string, the local name of the attribute.
 <p>
 @return {@code true} if an attribute with the given local name
  exists in this {@link XMLAttributes}, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="hasAttribute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="triple" type="org.sbml.jsbml.xml.XMLTriple"/>
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether
 an attribute with the given XML triple exists in this {@link XMLAttributes}.
 <p>
 @param triple an {@link XMLTriple}, the XML triple of the attribute 
 <p>
 @return {@code true} if an attribute with the given XML triple exists in this
 {@link XMLAttributes}, {@code false} otherwise.
 <p>]]>
      </doc>
    </method>
    <method name="isEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether 
 this {@link XMLAttributes} set is empty.
 <p>
 @return {@code true} if this {@link XMLAttributes} set is empty, {@code false} otherwise.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Representation of the attributes on an XML node.
 <p>
 <em style='color: #555'>
 This class of objects is defined by jsbml only and has no direct
 equivalent in terms of SBML components.  This class is not prescribed by
 the SBML specifications, although it is used to implement features
 defined in SBML.
 </em>
 
 <p>
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.XMLAttributes -->
  <!-- start class org.sbml.jsbml.xml.XMLException -->
  <class name="XMLException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="XMLException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="XMLException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param message]]>
      </doc>
    </constructor>
    <constructor name="XMLException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param message
 @param cause]]>
      </doc>
    </constructor>
    <constructor name="XMLException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param cause]]>
      </doc>
    </constructor>
    <method name="getErrorId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This kind of {@link Error} indicates that an XML file could not be parsed
 correctly.
 
 @author Andreas Dr&auml;ger
 @date 2010-10-30
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.XMLException -->
  <!-- start class org.sbml.jsbml.xml.XMLNamespaces -->
  <class name="XMLNamespaces" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="XMLNamespaces"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new empty list of XML namespace declarations.]]>
      </doc>
    </constructor>
    <constructor name="XMLNamespaces" type="org.sbml.jsbml.xml.XMLNamespaces"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Copy constructor; creates a copy of this {@link XMLNamespaces} list.
 <p>
 @param orig the {@link XMLNamespaces} object to copy]]>
      </doc>
    </constructor>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.Object"/>
      <doc>
      <![CDATA[Equality comparison method for XMLNamespaces.

 @param sb a reference to an object to which the current object
 instance will be compared

 @return {@code true} if <code>sb</code> refers to the same underlying 
 native object as this one, {@code false} otherwise]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a hashcode for this XMLNamespaces object.

 @return a hash code usable by Java methods that need them.]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.xml.XMLNamespaces"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a deep copy of this {@link XMLNamespaces} list.
 <p>
 @return a (deep) copy of this {@link XMLNamespaces} list.]]>
      </doc>
    </method>
    <method name="add" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <doc>
      <![CDATA[Appends an XML namespace prefix and URI pair to this list of namespace
 declarations.
 <p>
 An XMLNamespace object stores a list of pairs of namespaces and their
 prefixes.  If there is an XML namespace with the given <code>uri</code> prefix
 in this list, then its corresponding URI will be overwritten by the
 new <code>uri</code>.  Calling programs could use one of the other {@link XMLNamespaces}
 methods, such as
 {@link XMLNamespaces#hasPrefix(String)}  and 
 {@link XMLNamespaces#hasURI(String)}  to
 inquire whether a given prefix and/or URI
 is already present in this {@link XMLNamespaces} object.
 <p>
 @param uri a string, the uri for the namespace
 @param prefix a string, the prefix for the namespace
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <p>]]>
      </doc>
    </method>
    <method name="add" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Appends an XML namespace URI with an empty prefix to this list of namespace
 declarations.
 <p>
 An XMLNamespace object stores a list of pairs of namespaces and their
 prefixes.  If there is an XML namespace with the given <code>uri</code> prefix
 in this list, then its corresponding URI will be overwritten by the
 new <code>uri</code>.  Calling programs could use one of the other {@link XMLNamespaces}
 methods, such as
 {@link XMLNamespaces#hasPrefix(String)}  and 
 {@link XMLNamespaces#hasURI(String)}  to
 inquire whether a given prefix and/or URI
 is already present in this {@link XMLNamespaces} object.
 <p>
 @param uri a string, the uri for the namespace
 @param prefix a string, the prefix for the namespace
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <p>]]>
      </doc>
    </method>
    <method name="remove" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Removes an XML Namespace stored in the given position of this list.
 <p>
 @param index an integer, position of the namespace to remove.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> INDEX_EXCEEDS_SIZE]]>
      </doc>
    </method>
    <method name="remove" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes an XML Namespace with the given prefix.
 <p>
 @param prefix a string, prefix of the required namespace.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <p>
 @see #remove(int index)]]>
      </doc>
    </method>
    <method name="clear" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clears (deletes) all XML namespace declarations in this {@link XMLNamespaces}
 object.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <p>
 @see #remove(int index)]]>
      </doc>
    </method>
    <method name="getIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets the index of an XML namespace declaration by URI.
 <p>
 An XMLNamespace object stores a list of pairs of namespaces and their
 prefixes.  If this {@link XMLNamespaces} object contains a pair with the given
 URI <code>uri</code>, this method returns its index in the list.
 <p>
 @param uri a string, the URI of the sought-after namespace.
 <p>
 @return the index of the given declaration, or <code>-1</code> if not
 present.]]>
      </doc>
    </method>
    <method name="getIndexByPrefix" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets the index of an XML namespace declaration by prefix.
 <p>
 An XMLNamespace object stores a list of pairs of namespaces and their
 prefixes.  If this {@link XMLNamespaces} object contains a pair with the given
 prefix <code>prefix</code>, this method returns its index in the list.
 <p>
 @param prefix a string, the prefix string of the sought-after
 namespace
 <p>
 @return the index of the given declaration, or <code>-1</code> if not
 present.]]>
      </doc>
    </method>
    <method name="getLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the total number of URI-and-prefix pairs stored in this
 particular {@link XMLNamespaces} instance.
 <p>
 @return the number of namespaces in this list.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Gets the prefix of an XML namespace declaration by its position.
 <p>
 An XMLNamespace object stores a list of pairs of namespaces and their
 prefixes.  This method returns the prefix of the <code>n</code>th
 element in that list (if it exists).  Callers should use
 XMLAttributes.getLength() first to find out how many namespaces are
 stored in the list.
 <p>
 @param index an integer, position of the sought-after prefix
 <p>
 @return the prefix of an XML namespace declaration in this list (by
 position), or an empty string if the <code>index</code> is out of range
 <p>
 @see #getLength()]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets the prefix of an XML namespace declaration by its URI.
 <p>
 An XMLNamespace object stores a list of pairs of namespaces and their
 prefixes.  This method returns the prefix for a pair that has the
 given <code>uri</code>.
 <p>
 @param uri a string, the URI of the prefix being sought
 <p>
 @return the prefix of an XML namespace declaration given its URI, or
 an empty string if no such <code>uri</code> exists in this {@link XMLNamespaces} object]]>
      </doc>
    </method>
    <method name="getURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Gets the URI of an XML namespace declaration by its position.
 <p>
 An XMLNamespace object stores a list of pairs of namespaces and their
 prefixes.  This method returns the URI of the <code>n</code>th element
 in that list (if it exists).  Callers should use
 XMLAttributes.getLength() first to find out how many namespaces are
 stored in the list.
 <p>
 @param index an integer, position of the required URI.
 <p>
 @return the URI of an XML namespace declaration in this list (by
 position), or an empty string if the <code>index</code> is out of range.
 <p>
 @see #getLength()]]>
      </doc>
    </method>
    <method name="getURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets the URI of an XML namespace declaration by its prefix.
 <p>
 An XMLNamespace object stores a list of pairs of namespaces and their
 prefixes.  This method returns the namespace URI for a pair that has
 the given <code>prefix</code>.
 <p>
 @param prefix a string, the prefix of the required URI
 <p>
 @return the URI of an XML namespace declaration having the given 
 <code>prefix</code>, or an empty string if no such prefix-and-URI pair exists
 in this {@link XMLNamespaces} object
 
 @see #getURI()]]>
      </doc>
    </method>
    <method name="getURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the URI of an XML namespace declaration by the empty prefix.
 <p>
 An XMLNamespace object stores a list of pairs of namespaces and their
 prefixes.  This method returns the namespace URI for a pair that has
 the empty <code>prefix</code>.
 <p>
 @return the URI of an XML namespace declaration having the empty 
 <code>prefix</code>, or an empty string if no such prefix-and-URI pair exists
 in this {@link XMLNamespaces} object
 
 @see #getURI()]]>
      </doc>
    </method>
    <method name="isEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether this
 {@link XMLNamespaces} list is empty.
 <p>
 @return {@code true} if this {@link XMLNamespaces} list is empty, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="hasURI" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether an XML
 Namespace with the given URI is contained in this {@link XMLNamespaces} list.
 <p>
 @param uri a string, the uri for the namespace
 <p>
 @return {@code true} if an XML Namespace with the given URI is contained in
 this {@link XMLNamespaces} list, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="hasPrefix" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether an XML
 Namespace with the given prefix is contained in this {@link XMLNamespaces}
 list.
 <p>
 @param prefix a string, the prefix for the namespace
 <p>
 @return {@code true} if an XML Namespace with the given URI is contained in
 this {@link XMLNamespaces} list, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="hasNS" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether an XML
 Namespace with the given URI and prefix pair is contained in this
 {@link XMLNamespaces} list.
 <p>
 @param uri a string, the URI for the namespace
 @param prefix a string, the prefix for the namespace
 <p>
 @return {@code true} if an XML Namespace with the given uri/prefix pair is
 contained in this {@link XMLNamespaces} list, {@code false} otherwise.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Representation of XML Namespaces.
 <p>
 <em style='color: #555'>
This class of objects is defined by jsbml only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</em>

 <p>
 This class serves to organize functionality for tracking XML namespaces
 in a document or data stream.  The namespace declarations are stored as
 a list of pairs of XML namespace URIs and prefix strings.  These
 correspond to the parts of a namespace declaration on an XML element.
 For example, in the following XML fragment,
 <div class='fragment'><pre>
&lt;annotation&gt;
    &lt;mysim:nodecolors xmlns:mysim='urn:lsid:mysim.org'
         mysim:bgcolor='green' mysim:fgcolor='white'/&gt;
&lt;/annotation&gt;
</pre></div>
 there is one namespace declaration.  Its URI is
 <code>urn:lsid:mysim.org</code> and its prefix is <code>mysim</code>.
 This pair could be stored as one item in an {@link XMLNamespaces} list.
 <p>
 {@link XMLNamespaces} provides various methods for manipulating the list of
 prefix-URI pairs.  Individual namespaces stored in a given XMLNamespace
 object instance can be retrieved based on their index using
 {@link XMLNamespaces#getPrefix(int index)}, or by their characteristics such as
 their URI or position in the list.
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.XMLNamespaces -->
  <!-- start class org.sbml.jsbml.xml.XMLNode -->
  <class name="XMLNode" extends="org.sbml.jsbml.xml.XMLToken"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="XMLNode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new empty {@link XMLNode} with no children.]]>
      </doc>
    </constructor>
    <constructor name="XMLNode" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a text {@link XMLNode}.
 <p>
 @param chars a string, the text to be added to the {@link XMLToken}]]>
      </doc>
    </constructor>
    <constructor name="XMLNode" type="java.lang.String, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a text {@link XMLNode}.
 <p>
 @param chars a string, the text to be added to the {@link XMLToken}
 @param line a long integer, the line number (default = 0).]]>
      </doc>
    </constructor>
    <constructor name="XMLNode" type="java.lang.String, long, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a text {@link XMLNode}.
 <p>
 @param chars a string, the text to be added to the {@link XMLToken}
 @param line a long integer, the line number (default = 0).
 @param column a long integer, the column number (default = 0).]]>
      </doc>
    </constructor>
    <constructor name="XMLNode" type="org.sbml.jsbml.xml.XMLNode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a copy of this {@link XMLNode}.
 <p>
 @param orig the {@link XMLNode} instance to copy.]]>
      </doc>
    </constructor>
    <constructor name="XMLNode" type="org.sbml.jsbml.xml.XMLToken"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link XMLNode} by copying token.
 <p>
 @param token {@link XMLToken} to be copied to {@link XMLNode}]]>
      </doc>
    </constructor>
    <constructor name="XMLNode" type="org.sbml.jsbml.xml.XMLTriple"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an end element {@link XMLNode}.
 <p>
 @param triple {@link XMLTriple}.]]>
      </doc>
    </constructor>
    <constructor name="XMLNode" type="org.sbml.jsbml.xml.XMLTriple, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an end element {@link XMLNode}.
 <p>
 @param triple {@link XMLTriple}.
 @param line a long integer, the line number (default = 0).]]>
      </doc>
    </constructor>
    <constructor name="XMLNode" type="org.sbml.jsbml.xml.XMLTriple, long, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an end element {@link XMLNode}.
 <p>
 @param triple {@link XMLTriple}.
 @param line a long integer, the line number (default = 0).
 @param column a long integer, the column number (default = 0).]]>
      </doc>
    </constructor>
    <constructor name="XMLNode" type="org.sbml.jsbml.xml.XMLTriple, org.sbml.jsbml.xml.XMLAttributes"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a start element {@link XMLNode} with the given set of attributes.
 <p>
 @param triple {@link XMLTriple}.
 @param attributes {@link XMLAttributes}, the attributes to set.]]>
      </doc>
    </constructor>
    <constructor name="XMLNode" type="org.sbml.jsbml.xml.XMLTriple, org.sbml.jsbml.xml.XMLAttributes, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a start element {@link XMLNode} with the given set of attributes.
 <p>
 @param triple {@link XMLTriple}.
 @param attributes {@link XMLAttributes}, the attributes to set.
 @param line a long integer, the line number (default = 0).]]>
      </doc>
    </constructor>
    <constructor name="XMLNode" type="org.sbml.jsbml.xml.XMLTriple, org.sbml.jsbml.xml.XMLAttributes, long, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a start element {@link XMLNode} with the given set of attributes.
 <p>
 @param triple {@link XMLTriple}.
 @param attributes {@link XMLAttributes}, the attributes to set.
 @param line a long integer, the line number (default = 0).
 @param column a long integer, the column number (default = 0).]]>
      </doc>
    </constructor>
    <constructor name="XMLNode" type="org.sbml.jsbml.xml.XMLTriple, org.sbml.jsbml.xml.XMLAttributes, org.sbml.jsbml.xml.XMLNamespaces"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new start element {@link XMLNode} with the given set of attributes and
 namespace declarations.
 <p>
 @param triple {@link XMLTriple}.
 @param attributes {@link XMLAttributes}, the attributes to set.
 @param namespaces {@link XMLNamespaces}, the namespaces to set.]]>
      </doc>
    </constructor>
    <constructor name="XMLNode" type="org.sbml.jsbml.xml.XMLTriple, org.sbml.jsbml.xml.XMLAttributes, org.sbml.jsbml.xml.XMLNamespaces, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new start element {@link XMLNode} with the given set of attributes and
 namespace declarations.
 <p>
 @param triple {@link XMLTriple}.
 @param attributes {@link XMLAttributes}, the attributes to set.
 @param namespaces {@link XMLNamespaces}, the namespaces to set.
 @param line a long integer, the line number (default = 0).]]>
      </doc>
    </constructor>
    <constructor name="XMLNode" type="org.sbml.jsbml.xml.XMLTriple, org.sbml.jsbml.xml.XMLAttributes, org.sbml.jsbml.xml.XMLNamespaces, long, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new start element {@link XMLNode} with the given set of attributes and
 namespace declarations.
 <p>
 @param triple {@link XMLTriple}.
 @param attributes {@link XMLAttributes}, the attributes to set.
 @param namespaces {@link XMLNamespaces}, the namespaces to set.
 @param line a long integer, the line number (default = 0).
 @param column a long integer, the column number (default = 0).]]>
      </doc>
    </constructor>
    <method name="convertStringToXMLNode" return="org.sbml.jsbml.xml.XMLNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlstr" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns an {@link XMLNode} which is derived from a string containing XML
 content.
 <p>
 The XML namespace must be defined using argument <code>xmlns</code> if the
 corresponding XML namespace attribute is not part of the string of the
 first argument.
 <p>
 @param xmlstr string to be converted to a XML node.
 @param xmlns {@link XMLNamespaces} the namespaces to set (default value is NULL).
 <p>
 @jsbml.note The caller owns the returned {@link XMLNode} and is reponsible for deleting it.
 The returned {@link XMLNode} object is a dummy root (container) {@link XMLNode} if the top-level 
 element in the given XML string is NOT <code>html</code>, <code>body</code>, <code>annotation</code>, <code>notes</code>.
 In the dummy root node, each top-level element in the given XML string is contained
 as a child {@link XMLNode}. XMLToken.isEOF() can be used to identify if the returned {@link XMLNode} 
 object is a dummy node.
 <p>
 @return a {@link XMLNode} which is converted from string <code>xmlstr</code>. NULL is returned
 if the conversion failed.]]>
      </doc>
    </method>
    <method name="convertStringToXMLNode" return="org.sbml.jsbml.xml.XMLNode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlstr" type="java.lang.String"/>
      <param name="xmlns" type="org.sbml.jsbml.xml.XMLNamespaces"/>
      <doc>
      <![CDATA[Returns an {@link XMLNode} which is derived from a string containing XML
 content.
 <p>
 The XML namespace must be defined using argument <code>xmlns</code> if the
 corresponding XML namespace attribute is not part of the string of the
 first argument.
 <p>
 @param xmlstr string to be converted to a XML node.
 @param xmlns {@link XMLNamespaces} the namespaces to set (default value is NULL). This argument is ignored at the moment.
 <p>
 @jsbml.note The caller owns the returned {@link XMLNode} and is reponsible for deleting it.
 The returned {@link XMLNode} object is a dummy root (container) {@link XMLNode} if the top-level 
 element in the given XML string is NOT <code>html</code>, <code>body</code>, <code>annotation</code>, <code>notes</code>.
 In the dummy root node, each top-level element in the given XML string is contained
 as a child {@link XMLNode}. XMLToken.isEOF() can be used to identify if the returned {@link XMLNode} 
 object is a dummy node.
 <p>
 @return a {@link XMLNode} which is converted from string <code>xmlstr</code>. NULL is returned
 if the conversion failed.]]>
      </doc>
    </method>
    <method name="convertXMLNodeToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.xml.XMLNode"/>
      <doc>
      <![CDATA[Returns a string representation of a given {@link XMLNode}. 
 <p>
 @param node the {@link XMLNode} to be represented as a string
 <p>
 @return a string-form representation of <code>node</code>]]>
      </doc>
    </method>
    <method name="addChild" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.sbml.jsbml.xml.XMLNode"/>
      <doc>
      <![CDATA[Adds a child to this {@link XMLNode}.
 <p>
 The given <code>node</code> is added at the end of the list of children.
 <p>
 @param node the {@link XMLNode} to be added as child.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED
 <p>
 @jsbml.note The given node is added at the end of the children list.]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.xml.XMLNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAllowsChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getChild" return="org.sbml.jsbml.xml.XMLNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #getChildAt(int)}">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Returns the <code>n</code>th child of this {@link XMLNode}.
 <p>
 If the index <code>n</code> is greater than the number of child nodes, or it is
 0 or less, this method returns an empty node.
 <p>
 @param n the index of the node to return
 <p>
 @return the  <code>n</code>th child of this {@link XMLNode}.
 @deprecated use {@link #getChildAt(int)}]]>
      </doc>
    </method>
    <method name="getChildAt" return="org.sbml.jsbml.xml.XMLNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="childIndex" type="int"/>
    </method>
    <method name="getChildCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNumChildren" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #getChildCount()}">
      <doc>
      <![CDATA[Returns the number of children for this {@link XMLNode}.
 <p>
 @return the number of children for this {@link XMLNode}.
 @deprecated use {@link #getChildCount()}]]>
      </doc>
    </method>
    <method name="insertChild" return="org.sbml.jsbml.xml.XMLNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <param name="node" type="org.sbml.jsbml.xml.XMLNode"/>
      <doc>
      <![CDATA[Inserts a node as the <code>n</code>th child of this
 {@link XMLNode}.
 <p>
 If the given index <code>n</code> is out of range for this {@link XMLNode} instance,
 the <code>node</code> is added at the end of the list of children.  Even in
 that situation, this method does not throw an error.
 <p>
 @param n an integer, the index at which the given node is inserted
 @param node an {@link XMLNode} to be inserted as <code>n</code>th child.
 <p>
 @return a reference to the newly-inserted child <code>node</code>]]>
      </doc>
    </method>
    <method name="removeChild" return="org.sbml.jsbml.xml.XMLNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="long"/>
      <doc>
      <![CDATA[Removes the <code>n</code>th child of this {@link XMLNode} and returns the
 removed node.
 <p>
 It is important to keep in mind that a given {@link XMLNode} may have more
 than one child.  Calling this method erases all existing references to
 child nodes <em>after</em> the given position <code>n</code>.  If the index <code>n</code> is
 greater than the number of child nodes in this {@link XMLNode}, this method
 takes no action (and returns NULL).
 <p>
 @param n an integer, the index of the node to be removed
 <p>
 @return the removed child, or NULL if <code>n</code> is greater than the number
 of children in this node
 <p>
 @jsbml.note The caller owns the returned node and is responsible for deleting it.]]>
      </doc>
    </method>
    <method name="removeChildren" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes all children from this node.
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS]]>
      </doc>
    </method>
    <method name="toXMLString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a string representation of this {@link XMLNode}. 
 <p>
 @return a string derived from this {@link XMLNode}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Representation of a node in an XML document tree.
 <p>
 Beginning with version 1.0, JSBML implements an XML abstraction layer, like
 LibSBML. The basic data object in the XML abstraction is a <em>node</em>,
 represented by {@link XMLNode}.
 <p>
 An {@link XMLNode} can contain any number of children. Each child is another
 {@link XMLNode}, thereby forming a tree. The methods
 {@link XMLNode#getNumChildren()} and {@link XMLNode#getChild(long n)} can be
 used to access the tree structure starting from a given node.
 <p>
 <p>
 Each {@link XMLNode} is subclassed from {@link XMLToken}, and thus has the
 same methods available as {@link XMLToken}. These methods include
 {@link XMLToken#getNamespaces()}, {@link XMLToken#getPrefix()},
 {@link XMLToken#getName()}, {@link XMLToken#getURI()}, and
 {@link XMLToken#getAttributes()}.
 <p>
 <h2>Conversion between an XML {@link String} and an {@link XMLNode}</h2>
 <p>
 JSBML provides the following utility functions for converting an XML
 {@link String} (e.g., &lt;annotation&gt;...&lt;/annotation&gt;) to/from an
 {@link XMLNode} object.
 <ul>
 <li>XMLNode{@link #toXMLString()} returns a {@link String} representation of
 the {@link XMLNode} object.
 <p>
 <li>{@link #convertXMLNodeToString(XMLNode)} (static function) returns a
 {@link String} representation of the given {@link XMLNode} object.
 <p>
 <li>{@link #convertStringToXMLNode(String)} (static function) returns an
 {@link XMLNode} object converted from the given XML {@link String}.
 </ul>
 <p>
 The returned {@link XMLNode} object by
 {@link XMLNode#convertStringToXMLNode(String)} is a dummy root (container)
 {@link XMLNode} if the given XML {@link String} has two or more top-level
 elements (e.g., '&lt;p&gt;...&lt;/p&gt;&lt;p&gt;...&lt;/p&gt;'). In the dummy
 root node, each top-level element in the given XML {@link String} is
 contained as a child {@link XMLNode}. {@link XMLToken#isEOF()} can be used to
 identify if the returned {@link XMLNode} object is a dummy node or not. Here
 is an example: <div class='fragment'>
 
 <pre>
 // Checks if the returned {@link XMLNode} object by XMLNode.convertStringToXMLNode() is a dummy root node:
 
 String str = '...';
 {@link XMLNode} xn = {@link XMLNode}.convertStringToXMLNode(str);
 if (xn == null)
 {
   // returned value is null (error)
   ...
 }
 else if ( xn.isEOF() )
 {
   // root node is a dummy node
   for (int i=0; i &lt; xn.getNumChildren(); i++)
   {
     // access to each child node of the dummy node.
     {@link XMLNode} xnChild = xn.getChild(i);
     ...
   }
 }
 else
 {
   // root node is NOT a dummy node
   ...
 }
 </pre>
 
 </div>
 <p>
 
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.XMLNode -->
  <!-- start class org.sbml.jsbml.xml.XMLToken -->
  <class name="XMLToken" extends="org.sbml.jsbml.AbstractTreeNode"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="XMLToken"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new empty {@link XMLToken}.]]>
      </doc>
    </constructor>
    <constructor name="XMLToken" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a text {@link XMLToken}.
 <p>
 @param chars a string, the text to be added to the {@link XMLToken}]]>
      </doc>
    </constructor>
    <constructor name="XMLToken" type="java.lang.String, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a text {@link XMLToken}.
 <p>
 @param chars a string, the text to be added to the {@link XMLToken}
 @param line a long integer, the line number (default = 0).]]>
      </doc>
    </constructor>
    <constructor name="XMLToken" type="java.lang.String, long, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a text {@link XMLToken}.
 <p>
 @param chars a {@link String}, the text to be added to the {@link XMLToken}
 @param line a long integer, the line number (default = 0).
 @param column a long integer, the column number (default = 0).
 <p>]]>
      </doc>
    </constructor>
    <constructor name="XMLToken" type="org.sbml.jsbml.xml.XMLToken"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Copy constructor; creates a copy of this {@link XMLToken}.]]>
      </doc>
    </constructor>
    <constructor name="XMLToken" type="org.sbml.jsbml.xml.XMLTriple"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an end element {@link XMLToken}.
 <p>
 @param triple {@link XMLTriple}.
 <p>]]>
      </doc>
    </constructor>
    <constructor name="XMLToken" type="org.sbml.jsbml.xml.XMLTriple, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an end element {@link XMLToken}.
 <p>
 @param triple {@link XMLTriple}.
 @param line a long integer, the line number (default = 0).
 <p>]]>
      </doc>
    </constructor>
    <constructor name="XMLToken" type="org.sbml.jsbml.xml.XMLTriple, long, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an end element {@link XMLToken}.
 <p>
 @param triple {@link XMLTriple}.
 @param line a long integer, the line number (default = 0).
 @param column a long integer, the column number (default = 0).
 <p>]]>
      </doc>
    </constructor>
    <constructor name="XMLToken" type="org.sbml.jsbml.xml.XMLTriple, org.sbml.jsbml.xml.XMLAttributes"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a start element {@link XMLToken} with the given set of attributes.
 <p>
 @param triple {@link XMLTriple}.
 @param attributes {@link XMLAttributes}, the attributes to set.
 <p>]]>
      </doc>
    </constructor>
    <constructor name="XMLToken" type="org.sbml.jsbml.xml.XMLTriple, org.sbml.jsbml.xml.XMLAttributes, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a start element {@link XMLToken} with the given set of attributes.
 <p>
 @param triple {@link XMLTriple}.
 @param attributes {@link XMLAttributes}, the attributes to set.
 @param line a long integer, the line number (default = 0).
 <p>]]>
      </doc>
    </constructor>
    <constructor name="XMLToken" type="org.sbml.jsbml.xml.XMLTriple, org.sbml.jsbml.xml.XMLAttributes, long, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a start element {@link XMLToken} with the given set of attributes.
 <p>
 @param triple {@link XMLTriple}.
 @param attributes {@link XMLAttributes}, the attributes to set.
 @param line a long integer, the line number (default = 0).
 @param column a long integer, the column number (default = 0).
 <p>]]>
      </doc>
    </constructor>
    <constructor name="XMLToken" type="org.sbml.jsbml.xml.XMLTriple, org.sbml.jsbml.xml.XMLAttributes, org.sbml.jsbml.xml.XMLNamespaces"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a start element {@link XMLToken} with the given set of attributes and
 namespace declarations.
 <p>
 @param triple {@link XMLTriple}.
 @param attributes {@link XMLAttributes}, the attributes to set.
 @param namespaces {@link XMLNamespaces}, the namespaces to set.
 <p>]]>
      </doc>
    </constructor>
    <constructor name="XMLToken" type="org.sbml.jsbml.xml.XMLTriple, org.sbml.jsbml.xml.XMLAttributes, org.sbml.jsbml.xml.XMLNamespaces, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a start element {@link XMLToken} with the given set of attributes and
 namespace declarations.
 <p>
 @param triple {@link XMLTriple}.
 @param attributes {@link XMLAttributes}, the attributes to set.
 @param namespaces {@link XMLNamespaces}, the namespaces to set.
 @param line a long integer, the line number (default = 0).
 <p>]]>
      </doc>
    </constructor>
    <constructor name="XMLToken" type="org.sbml.jsbml.xml.XMLTriple, org.sbml.jsbml.xml.XMLAttributes, org.sbml.jsbml.xml.XMLNamespaces, long, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a start element {@link XMLToken} with the given set of attributes and
 namespace declarations.
 <p>
 @param triple {@link XMLTriple}.
 @param attributes {@link XMLAttributes}, the attributes to set.
 @param namespaces {@link XMLNamespaces}, the namespaces to set.
 @param line a long integer, the line number (default = 0).
 @param column a long integer, the column number (default = 0).
 <p>]]>
      </doc>
    </constructor>
    <method name="addAttr" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds an attribute to the attribute set in this {@link XMLToken} optionally 
 with a prefix and URI defining a namespace.
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @param name a string, the local name of the attribute.
 @param value a string, the value of the attribute.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED
 <p>
 @jsbml.note if local name with the same namespace URI already exists in the
 attribute set, its value and prefix will be replaced.
 <p>]]>
      </doc>
    </method>
    <method name="addAttr" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="namespaceURI" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds an attribute to the attribute set in this {@link XMLToken} optionally 
 with a prefix and URI defining a namespace.
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @param name a string, the local name of the attribute.
 @param value a string, the value of the attribute.
 @param namespaceURI a string, the namespace URI of the attribute.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED
 <p>
 @jsbml.note if local name with the same namespace URI already exists in the
 attribute set, its value and prefix will be replaced.
 <p>]]>
      </doc>
    </method>
    <method name="addAttr" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="namespaceURI" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds an attribute to the attribute set in this {@link XMLToken} optionally 
 with a prefix and URI defining a namespace.
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @param name a string, the local name of the attribute.
 @param value a string, the value of the attribute.
 @param namespaceURI a string, the namespace URI of the attribute.
 @param prefix a string, the prefix of the namespace
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED
 <p>
 @jsbml.note if local name with the same namespace URI already exists in the
 attribute set, its value and prefix will be replaced.
 <p>]]>
      </doc>
    </method>
    <method name="addAttr" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="triple" type="org.sbml.jsbml.xml.XMLTriple"/>
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds an attribute with the given {@link XMLTriple}/value pair to the attribute set
 in this {@link XMLToken}.
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @jsbml.note if local name with the same namespace URI already exists in the 
 attribute set, its value and prefix will be replaced.
 <p>
 @param triple an {@link XMLTriple}, the XML triple of the attribute.
 @param value a string, the value of the attribute.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED]]>
      </doc>
    </method>
    <method name="addNamespace" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Appends an XML namespace prefix and URI pair to this {@link XMLToken}.
 If there is an XML namespace with the given prefix in this {@link XMLToken}, 
 then the existing XML namespace will be overwritten by the new one.
 <p>
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @param uri a string, the uri for the namespace
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED]]>
      </doc>
    </method>
    <method name="addNamespace" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <doc>
      <![CDATA[Appends an XML namespace prefix and URI pair to this {@link XMLToken}.
 If there is an XML namespace with the given prefix in this {@link XMLToken}, 
 then the existing XML namespace will be overwritten by the new one.
 <p>
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @param uri a string, the uri for the namespace
 @param prefix a string, the prefix for the namespace
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED]]>
      </doc>
    </method>
    <method name="append"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="chars" type="java.lang.String"/>
      <doc>
      <![CDATA[Appends characters to this XML text content.]]>
      </doc>
    </method>
    <method name="clearAttributes" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clears (deletes) all attributes in this {@link XMLToken}.
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED]]>
      </doc>
    </method>
    <method name="clearNamespaces" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clears (deletes) all XML namespace declarations in the {@link XMLNamespaces} of
 this {@link XMLToken}.
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.xml.XMLToken"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="getAttributes" return="org.sbml.jsbml.xml.XMLAttributes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the attributes of this element.
 <p>
 @return the {@link XMLAttributes} of this XML element.]]>
      </doc>
    </method>
    <method name="getAttributesLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of attributes in the attributes set.
 <p>
 @return the number of attributes in the attributes set in this {@link XMLToken}.]]>
      </doc>
    </method>
    <method name="getAttrIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the index of an attribute with the given local name.
 <p>
 @param name a string, the local name of the attribute.
 <p>
 @return the index of an attribute with the given local name, 
 or -1 if not present.]]>
      </doc>
    </method>
    <method name="getAttrIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the index of an attribute with the given local name and namespace URI.
 <p>
 @param name a string, the local name of the attribute.
 @param uri  a string, the namespace URI of the attribute.
 <p>
 @return the index of an attribute with the given local name and namespace URI, 
 or -1 if not present.]]>
      </doc>
    </method>
    <method name="getAttrIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="triple" type="org.sbml.jsbml.xml.XMLTriple"/>
      <doc>
      <![CDATA[Returns the index of an attribute with the given {@link XMLTriple}.
 <p>
 @param triple an {@link XMLTriple}, the XML triple of the attribute for which 
        the index is required.
 <p>
 @return the index of an attribute with the given {@link XMLTriple}, or -1 if not present.]]>
      </doc>
    </method>
    <method name="getAttrName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the local name of an attribute in the attributes set in this 
 {@link XMLToken} (by position).
 <p>
 @param index an integer, the position of the attribute whose local name 
 is required.
 <p>
 @return the local name of an attribute in this list (by position).  
 <p>
 @jsbml.note If index
 is out of range, an empty string will be returned.  Use hasAttr(index) 
 to test for the attribute existence.]]>
      </doc>
    </method>
    <method name="getAttrPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the prefix of an attribute in the attribute set in this 
 {@link XMLToken} (by position).
 <p>
 @param index an integer, the position of the attribute whose prefix is 
 required.
 <p>
 @return the namespace prefix of an attribute in the attribute set
 (by position).  
 <p>
 @jsbml.note If index is out of range, an empty string will be
 returned. Use hasAttr(index) to test for the attribute existence.]]>
      </doc>
    </method>
    <method name="getAttrPrefixedName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the prefixed name of an attribute in the attribute set in this 
 {@link XMLToken} (by position).
 <p>
 @param index an integer, the position of the attribute whose prefixed 
 name is required.
 <p>
 @return the prefixed name of an attribute in the attribute set 
 (by position).  
 <p>
 @jsbml.note If index is out of range, an empty string will be
 returned.  Use hasAttr(index) to test for attribute existence.]]>
      </doc>
    </method>
    <method name="getAttrURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the namespace URI of an attribute in the attribute set in this 
 {@link XMLToken} (by position).
 <p>
 @param index an integer, the position of the attribute whose namespace 
 URI is required.
 <p>
 @return the namespace URI of an attribute in the attribute set (by position).
 <p>
 @jsbml.note If index is out of range, an empty string will be returned.  Use
 hasAttr(index) to test for attribute existence.]]>
      </doc>
    </method>
    <method name="getAttrValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the value of an attribute in the attribute set in this {@link XMLToken}  
 (by position).
 <p>
 @param index an integer, the position of the attribute whose value is 
 required.
 <p>
 @return the value of an attribute in the attribute set (by position).  
 <p>
 @jsbml.note If index
 is out of range, an empty string will be returned. Use hasAttr(index)
 to test for attribute existence.]]>
      </doc>
    </method>
    <method name="getAttrValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a value of an attribute with the given local name.
 <p>
 @param name a string, the local name of the attribute whose value is required.
 <p>
 @return The attribute value as a string.  
 <p>
 @jsbml.note If an attribute with the 
 given local name does not exist, an empty string will be 
 returned.  
 Use hasAttr(name, uri) to test for attribute existence.]]>
      </doc>
    </method>
    <method name="getAttrValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a value of an attribute with the given local name and namespace URI.
 <p>
 @param name a string, the local name of the attribute whose value is required.
 @param uri  a string, the namespace URI of the attribute.
 <p>
 @return The attribute value as a string.  
 <p>
 @jsbml.note If an attribute with the 
 given local name and namespace URI does not exist, an empty string will be 
 returned.  
 Use hasAttr(name, uri) to test for attribute existence.]]>
      </doc>
    </method>
    <method name="getAttrValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="triple" type="org.sbml.jsbml.xml.XMLTriple"/>
      <doc>
      <![CDATA[Returns a value of an attribute with the given {@link XMLTriple}.
 <p>
 @param triple an {@link XMLTriple}, the XML triple of the attribute whose 
        value is required.
 <p>
 @return The attribute value as a string.  
 <p>
 @jsbml.note If an attribute with the
 given {@link XMLTriple} does not exist, an empty string will be returned.  
 Use hasAttr(triple) to test for attribute existence.]]>
      </doc>
    </method>
    <method name="getCharacters" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the text of this element.
 <p>
 @return the characters of this XML text.]]>
      </doc>
    </method>
    <method name="getColumn" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the column at which this {@link XMLToken} occurred in the input
 document or data stream.
 <p>
 @return the column at which this {@link XMLToken} occurred.]]>
      </doc>
    </method>
    <method name="getLine" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the line at which this {@link XMLToken} occurred in the input document
 or data stream.
 <p>
 @return the line at which this {@link XMLToken} occurred.]]>
      </doc>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the (unqualified) name of this XML element.
 <p>
 @return the (unqualified) name of this XML element.]]>
      </doc>
    </method>
    <method name="getNamespaceIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the index of an XML namespace declaration by URI.
 <p>
 @param uri a string, uri of the required namespace.
 <p>
 @return the index of the given declaration, or -1 if not present.]]>
      </doc>
    </method>
    <method name="getNamespaceIndexByPrefix" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the index of an XML namespace declaration by prefix.
 <p>
 @param prefix a string, prefix of the required namespace.
 <p>
 @return the index of the given declaration, or -1 if not present.]]>
      </doc>
    </method>
    <method name="getNamespacePrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the prefix of an XML namespace declaration by position.
 <p>
 Callers should use getNamespacesLength() to find out how many 
 namespaces are stored in the {@link XMLNamespaces}.
 <p>
 @param index an integer, position of the required prefix.
 <p>
 @return the prefix of an XML namespace declaration in the {@link XMLNamespaces} 
 (by position).  
 <p>
 @jsbml.note If index is out of range, an empty string will be
 returned.
 <p>
 @see #getNamespacesLength()]]>
      </doc>
    </method>
    <method name="getNamespacePrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the prefix of an XML namespace declaration by its URI.
 <p>
 @param uri a string, the URI of the prefix being sought
 <p>
 @return the prefix of an XML namespace declaration given its URI.  
 <p>
 @jsbml.note If <code>uri</code> does not exist, an empty string will be returned.]]>
      </doc>
    </method>
    <method name="getNamespaces" return="org.sbml.jsbml.xml.XMLNamespaces"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the XML namespace declarations for this XML element.
 <p>
 @return the XML namespace declarations for this XML element.]]>
      </doc>
    </method>
    <method name="getNamespacesLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of XML namespaces stored in the {@link XMLNamespaces} 
 of this {@link XMLToken}.
 <p>
 @return the number of namespaces in this list.]]>
      </doc>
    </method>
    <method name="getNamespaceURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URI of an XML namespace declaration for the empty prefix.
 <p>
 @return the URI of an XML namespace declaration for the empty prefix.
 <p>
 @jsbml.note If <code>prefix</code> does not exist, an empty string will be returned.]]>
      </doc>
    </method>
    <method name="getNamespaceURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the URI of an XML namespace declaration by its position.
 <p>
 @param index an integer, position of the required URI.
 <p>
 @return the URI of an XML namespace declaration in the {@link XMLNamespaces}
 (by position).  
 <p>
 @jsbml.note If <code>index</code> is out of range, an empty string will be
 returned.
 <p>
 @see #getNamespacesLength()]]>
      </doc>
    </method>
    <method name="getNamespaceURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the URI of an XML namespace declaration by its prefix.
 <p>
 @param prefix a string, the prefix of the required URI
 <p>
 @return the URI of an XML namespace declaration given its prefix.  
 <p>
 @jsbml.note If <code>prefix</code> does not exist, an empty string will be returned.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the namespace prefix of this XML element.
 <p>
 @return the namespace prefix of this XML element.  
 <p>
 @jsbml.note If no prefix
 exists, an empty string will be return.]]>
      </doc>
    </method>
    <method name="getURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the namespace URI of this XML element.
 <p>
 @return the namespace URI of this XML element.]]>
      </doc>
    </method>
    <method name="hasAttr" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether
 an attribute with the given index exists in the attribute set in this 
 {@link XMLToken}.
 <p>
 @param index an integer, the position of the attribute.
 <p>
 @return {@code true} if an attribute with the given index exists in the attribute 
 set in this {@link XMLToken}, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="hasAttr" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether
 an attribute with the given local name exists 
 in the attribute set in this {@link XMLToken}.
 <p>
 @param name a string, the local name of the attribute.
 <p>
 @return {@code true} if an attribute with the given local name
  exists in the attribute set in this {@link XMLToken}, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="hasAttr" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether
 an attribute with the given local name and namespace URI exists 
 in the attribute set in this {@link XMLToken}.
 <p>
 @param name a string, the local name of the attribute.
 @param uri  a string, the namespace URI of the attribute.
 <p>
 @return {@code true} if an attribute with the given local name and namespace 
 URI exists in the attribute set in this {@link XMLToken}, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="hasAttr" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="triple" type="org.sbml.jsbml.xml.XMLTriple"/>
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether
 an attribute with the given XML triple exists in the attribute set in 
 this {@link XMLToken} 
 <p>
 @param triple an {@link XMLTriple}, the XML triple of the attribute 
 <p>
 @return {@code true} if an attribute with the given XML triple exists
 in the attribute set in this {@link XMLToken}, {@code false} otherwise.
 <p>]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasNamespaceNS" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether 
 an XML Namespace with the given uri/prefix pair is contained in the 
 {@link XMLNamespaces} of this {@link XMLToken}.
 <p>
 @param uri a string, the uri for the namespace
 @param prefix a string, the prefix for the namespace
 <p>
 @return {@code true} if an XML Namespace with the given uri/prefix pair is 
 contained in the {@link XMLNamespaces} of this {@link XMLToken},  {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="hasNamespacePrefix" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether 
 an XML Namespace with the given prefix is contained in the {@link XMLNamespaces} of
 this {@link XMLToken}.
 <p>
 @param prefix a string, the prefix for the namespace
 <p>
 @return {@code true} if an XML Namespace with the given URI is contained in the
 {@link XMLNamespaces} of this {@link XMLToken}, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="hasNamespaceURI" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether 
 an XML Namespace with the given URI is contained in the {@link XMLNamespaces} of
 this {@link XMLToken}.
 <p>
 @param uri a string, the uri for the namespace
 <p>
 @return {@code true} if an XML Namespace with the given URI is contained in the
 {@link XMLNamespaces} of this {@link XMLToken},  {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isAttributesEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether 
 the attribute set in this {@link XMLToken} set is empty.
 <p>
 @return {@code true} if the attribute set in this {@link XMLToken} is empty, 
 {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether 
 this {@link XMLToken} is an XML element.
 <p>
 @return {@code true} if this {@link XMLToken} is an XML element, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isEnd" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether 
 this {@link XMLToken} is an XML end element.
 <p>
 @return {@code true} if this {@link XMLToken} is an XML end element, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isEndFor" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="element" type="org.sbml.jsbml.xml.XMLToken"/>
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether 
 this {@link XMLToken} is an XML end element for the given start element.
 <p>
 @param element {@link XMLToken}, element for which query is made.
 <p>
 @return {@code true} if this {@link XMLToken} is an XML end element for the given
 {@link XMLToken} start element, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isEOF" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether 
 this {@link XMLToken} is an end of file marker.
 <p>
 @return {@code true} if this {@link XMLToken} is an end of file (input) marker, {@code false}
 otherwise.]]>
      </doc>
    </method>
    <method name="isNamespacesEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether 
 the {@link XMLNamespaces} of this {@link XMLToken} is empty.
 <p>
 @return {@code true} if the {@link XMLNamespaces} of this {@link XMLToken} is empty, 
 {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isStart" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether 
 this {@link XMLToken} is an XML start element.
 <p>
 @return {@code true} if this {@link XMLToken} is an XML start element, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="isText" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} or {@code false} depending on whether 
 this {@link XMLToken} is an XML text element.
 <p>
 @return {@code true} if this {@link XMLToken} is an XML text element, {@code false} otherwise.]]>
      </doc>
    </method>
    <method name="removeAttr" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Removes an attribute with the given index from the attribute set in
 this {@link XMLToken}.
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @param n an integer the index of the resource to be deleted
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED
 <li> INDEX_EXCEEDS_SIZE]]>
      </doc>
    </method>
    <method name="removeAttr" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes an attribute with the given local name from 
 the attribute set in this {@link XMLToken}.
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @param name   a string, the local name of the attribute.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED]]>
      </doc>
    </method>
    <method name="removeAttr" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes an attribute with the given local name and namespace URI from 
 the attribute set in this {@link XMLToken}.
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @param name   a string, the local name of the attribute.
 @param uri    a string, the namespace URI of the attribute.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED]]>
      </doc>
    </method>
    <method name="removeAttr" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="triple" type="org.sbml.jsbml.xml.XMLTriple"/>
      <doc>
      <![CDATA[Removes an attribute with the given {@link XMLTriple} from the attribute set 
 in this {@link XMLToken}.  
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @param triple an {@link XMLTriple}, the XML triple of the attribute.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED]]>
      </doc>
    </method>
    <method name="removeNamespace" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Removes an XML Namespace stored in the given position of the {@link XMLNamespaces}
 of this {@link XMLToken}.
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @param index an integer, position of the removed namespace.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED
 <li> INDEX_EXCEEDS_SIZE]]>
      </doc>
    </method>
    <method name="removeNamespace" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes an XML Namespace with the given prefix.
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @param prefix a string, prefix of the required namespace.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED]]>
      </doc>
    </method>
    <method name="setAttributes" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributes" type="org.sbml.jsbml.xml.XMLAttributes"/>
      <doc>
      <![CDATA[Sets an {@link XMLAttributes} to this {@link XMLToken}.
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @param attributes {@link XMLAttributes} to be set to this {@link XMLToken}.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED
 <p>
 @jsbml.note This function replaces the existing {@link XMLAttributes} with the new one.]]>
      </doc>
    </method>
    <method name="setCharacters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="chars" type="java.lang.String"/>
      <doc>
      <![CDATA[@param chars the characters to set]]>
      </doc>
    </method>
    <method name="setEnd" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Declares this XML start element is also an end element.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS]]>
      </doc>
    </method>
    <method name="setEOF" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Declares this {@link XMLToken} is an end-of-file (input) marker.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED]]>
      </doc>
    </method>
    <method name="setNamespaces" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespaces" type="org.sbml.jsbml.xml.XMLNamespaces"/>
      <doc>
      <![CDATA[Sets an XMLnamespaces to this XML element.
 <p>
 Nothing will be done if this {@link XMLToken} is not a start element.
 <p>
 @param namespaces {@link XMLNamespaces} to be set to this {@link XMLToken}.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED
 
 <p>
 @jsbml.note This function replaces the existing {@link XMLNamespaces} with the new one.]]>
      </doc>
    </method>
    <method name="setTriple" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="triple" type="org.sbml.jsbml.xml.XMLTriple"/>
      <doc>
      <![CDATA[Sets the XMLTripe (name, uri and prefix) of this XML element.
 <p>
 Nothing will be done if this XML element is a text node.
 @param triple {@link XMLTriple} to be added to this XML element.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS
 <li> OPERATION_FAILED]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetEnd" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Declares this XML start/end element is no longer an end element.
 <p>
 @return integer value indicating success/failure of the
 function.   The possible values
 returned by this function are:
 <li> OPERATION_SUCCESS]]>
      </doc>
    </method>
    <field name="attributes" type="org.sbml.jsbml.xml.XMLAttributes"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="characters" type="java.lang.StringBuffer"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="column" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="isEndElement" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="isEOF" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="isStartElement" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="isText" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="line" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="namespaces" type="org.sbml.jsbml.xml.XMLNamespaces"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="triple" type="org.sbml.jsbml.xml.XMLTriple"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[the XMLTripe (name, uri and prefix) of this XML element.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Representation of a token in an XML stream.
 <p>
 <em style='color: #555'>
 This class of objects is defined by jsbml only and has no direct
 equivalent in terms of SBML components.  This class is not prescribed by
 the SBML specifications, although it is used to implement features
 defined in SBML.
 </em>
 
 <p>
 @author Nicolas Rodriguez
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.XMLToken -->
  <!-- start class org.sbml.jsbml.xml.XMLTriple -->
  <class name="XMLTriple" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="XMLTriple"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new, empty {@link XMLTriple}.]]>
      </doc>
    </constructor>
    <constructor name="XMLTriple" type="java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link XMLTriple} with the given <code>name</code>, <code>uri</code> and and 
 <code>prefix</code>.
 <p>
 @param name a string, name for the {@link XMLTriple}.
 @param uri a string, URI of the {@link XMLTriple}.
 @param prefix a string, prefix for the URI of the {@link XMLTriple},]]>
      </doc>
    </constructor>
    <constructor name="XMLTriple" type="java.lang.String, char"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link XMLTriple} by splitting the given <code>triplet</code> on the
 separator character <code>sepchar</code>.
 <p>
 Triplet may be in one of the following formats:
 <ul>
 <li> name
 <li> uri sepchar name
 <li> uri sepchar name sepchar prefix
 </ul>
 @param triplet a string representing the triplet as above
 @param sepchar a character, the sepchar used in the triplet
 <p>]]>
      </doc>
    </constructor>
    <constructor name="XMLTriple" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link XMLTriple} by splitting the given <code>triplet</code> 
 separated by space.
 <p>
 Triplet may be in one of the following formats:
 <ul>
 <li> name
 <li> uri  name
 <li> uri  name  prefix
 </ul>
 @param triplet a string representing the triplet as above
 <p>]]>
      </doc>
    </constructor>
    <constructor name="XMLTriple" type="org.sbml.jsbml.xml.XMLTriple"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a copy of this {@link XMLTriple} set.]]>
      </doc>
    </constructor>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.Object"/>
      <doc>
      <![CDATA[Equality comparison method for XMLTriple.
 <p>

 @param sb a reference to an object to which the current object
 instance will be compared

 @return {@code true} if <code>sb</code> refers to the same underlying 
 native object as this one, {@code false} otherwise]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a hashcode for this XMLTriple object.

 @return a hash code usable by Java methods that need them.]]>
      </doc>
    </method>
    <method name="clone" return="org.sbml.jsbml.xml.XMLTriple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a deep copy of this {@link XMLTriple} set.
 <p>
 @return a (deep) copy of this {@link XMLTriple} set.]]>
      </doc>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the <em>name</em> portion of this {@link XMLTriple}.
 <p>
 @return a string, the name from this {@link XMLTriple}.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the <em>prefix</em> portion of this {@link XMLTriple}.
 <p>
 @return a string, the <em>prefix</em> portion of this {@link XMLTriple}.]]>
      </doc>
    </method>
    <method name="getURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the <em>URI</em> portion of this {@link XMLTriple}.
 <p>
 @return URI a string, the <em>prefix</em> portion of this {@link XMLTriple}.]]>
      </doc>
    </method>
    <method name="getPrefixedName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the prefixed name from this {@link XMLTriple}.
 <p>
 @return a string, the prefixed name from this {@link XMLTriple}.]]>
      </doc>
    </method>
    <method name="isEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="libSBML internal">
      <doc>
      <![CDATA[Predicate returning {@code true} or {@code false} depending on whether 
 this {@link XMLTriple} is empty.
 <p>
 @return {@code true} if this {@link XMLTriple} is empty, {@code false} otherwise.
                   <p>
 @deprecated libSBML internal]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Representation of a qualified XML name.
 <p>
 <em style='color: #555'>
                This class of objects is defined by jsbml only and has no direct
                equivalent in terms of SBML components.  This class is not prescribed by
                the SBML specifications, although it is used to implement features
                defined in SBML.
                </em>

 <p>
 A 'triple' in the jsbml XML layer encapsulates the notion of qualified
 name, meaning an element name or an attribute name with an optional
 namespace qualifier.  An {@link XMLTriple} instance carries up to three data items:
 <p>
 <ul>
 <p>
 <li> The name of the attribute or element; that is, the attribute name
 as it appears in an XML document or data stream;
 <p>
 <li> The XML namespace prefix (if any) of the attribute.  For example,
 in the following fragment of XML, the namespace prefix is the string
 <code>mysim</code> and it appears on both the element
 <code>someelement</code> and the attribute <code>attribA</code>.  When
 both the element and the attribute are stored as {@link XMLTriple} objects,
 their <i>prefix</i> is <code>mysim</code>.
 <div class='fragment'><pre>
                &lt;mysim:someelement mysim:attribA='value' /&gt;
                </pre></div>
 <p>
 <li> The XML namespace URI with which the prefix is associated.  In
 XML, every namespace used must be declared and mapped to a URI.
 <p>
 </ul>
 <p>
 {@link XMLTriple} objects are the lowest-level data item in the XML layer
 of jsbml.  Other objects such as {@link XMLToken} make use of {@link XMLTriple}
 objects.
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.XMLTriple -->
  <doc>
  <![CDATA[<p>
    This package provides classes and methods to deal with SBML in form of XML elements,
    i.e., here you can find parsers and writers for SBML and also elements to define
    XML nodes to be used for notes or annotations.
  </p>]]>
  </doc>
</package>
<package name="org.sbml.jsbml.xml.parsers">
  <!-- start class org.sbml.jsbml.xml.parsers.AnnotationParser -->
  <class name="AnnotationParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.xml.parsers.ReadingParser"/>
    <constructor name="AnnotationParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="processAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="attributeName" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isLastAttribute" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processCharactersOf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="characters" type="java.lang.String"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processEndDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
    </method>
    <method name="processEndElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isNested" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="isLastNamespace" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processStartElement" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="hasNamespaces" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[The AnnotationParser is used when some subelements of an annotation XML node
 have a namespace URI/prefix which doesn't match any ReadingParser class and
 so can't be parsed with another ReadingParser than this one. This class
 allows to store the subelements of this annotation XML node into the
 'otherAnnotation' String of the matching Annotation instance.
 
 @author Marine Dumousseau
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.parsers.AnnotationParser -->
  <!-- start class org.sbml.jsbml.xml.parsers.BiologicalQualifierParser -->
  <class name="BiologicalQualifierParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.xml.parsers.ReadingParser"/>
    <constructor name="BiologicalQualifierParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a BiologicalQualifierParser instance and initialises the
 biologicalQualifierMap.]]>
      </doc>
    </constructor>
    <method name="getNamespaceURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the namespaceURI of this parser.]]>
      </doc>
    </method>
    <method name="processAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ElementName" type="java.lang.String"/>
      <param name="AttributeName" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isLastAttribute" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processCharactersOf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="characters" type="java.lang.String"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processEndDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
    </method>
    <method name="processEndElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ElementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isNested" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="isLastNamespace" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processStartElement" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="hasNamespaces" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[A BiologicalQualifierParser is used to parse the XML elements and attributes
 which have this namespace URI : http://biomodels.net/biology-qualifiers/.
 
 @author Marine Dumousseau
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.parsers.BiologicalQualifierParser -->
  <!-- start class org.sbml.jsbml.xml.parsers.CreatorParser -->
  <class name="CreatorParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.xml.parsers.ReadingParser"/>
    <constructor name="CreatorParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNamespaceURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the namespaceURI of this parser.]]>
      </doc>
    </method>
    <method name="processAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ElementName" type="java.lang.String"/>
      <param name="AttributeName" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isLastAttribute" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processCharactersOf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="characters" type="java.lang.String"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processEndDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
    </method>
    <method name="processEndElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isNested" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="isLastNamespace" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processStartElement" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="hasNamespaces" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[A CreatorParser is used to parser the subelements of an annotation element which have this namespaceURI :
 http://purl.org/dc/elements/1.1/.
 
 @author Marine Dumousseau 
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.parsers.CreatorParser -->
  <!-- start class org.sbml.jsbml.xml.parsers.DatesParser -->
  <class name="DatesParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.xml.parsers.ReadingParser"/>
    <constructor name="DatesParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNamespaceURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the namespaceURI]]>
      </doc>
    </method>
    <method name="processAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ElementName" type="java.lang.String"/>
      <param name="AttributeName" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isLastAttribute" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processCharactersOf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="characters" type="java.lang.String"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processEndDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
    </method>
    <method name="processEndElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isNested" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="isLastNamespace" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processStartElement" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="hasNamespaces" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[A DatesParser is used to parse the subNodes of an annotation which have this
 namespace URI : http://purl.org/dc/terms/.
 
 @author Marine Dumousseau
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.parsers.DatesParser -->
  <!-- start class org.sbml.jsbml.xml.parsers.MathMLParser -->
  <class name="MathMLParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="this class should not be used anymore, replaced by
             {@link MathMLStaxParser}. But we keep it in case somebody want to
             use {@link org.w3c.dom.Document}">
    <implements name="org.sbml.jsbml.xml.parsers.ReadingParser"/>
    <implements name="org.sbml.jsbml.xml.parsers.WritingParser"/>
    <constructor name="MathMLParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="checkContainsNumbersReferingToUnits" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.w3c.dom.Node"/>
      <doc>
      <![CDATA[Recursively checks whether the given {@link Node} contains any numbers
 that refer to unit declarations. This check is necessary because this
 feature has become available in SBML Level 3 and is therefore invalid in
 earlier levels.
 
 @param node
            A node to be checked.
 @return]]>
      </doc>
    </method>
    <method name="createMathMLDocumentFor" return="org.w3c.dom.Document"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.w3c.dom.Node"/>
      <param name="sbmlLevel" type="int"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param node
 @param sbmlLevel
 @return
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="getDefinitionURIavogadro" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getDefinitionURIdelay" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getDefinitionURItime" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getNamespaceURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the namespaceURI]]>
      </doc>
    </method>
    <method name="getSBMLNSAttribute" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getSBMLUnitsAttribute" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getXMLnamespaceSBML" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The additional MathML name space for units to numbers.
 @return]]>
      </doc>
    </method>
    <method name="toMathML" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="doc" type="org.w3c.dom.Document"/>
      <param name="omitXMLDeclaration" type="boolean"/>
      <param name="indenting" type="boolean"/>
      <param name="indent" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Write output as {@link String}.
 
 @param omitXMLDeclaration
 @param indenting
 @param indent
 @return
 @throws IOException
 @throws SBMLException
             If illegal references to units are made for numbers and the
             SBML Level has been set to values before level 3.]]>
      </doc>
    </method>
    <method name="toMathML"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.Writer"/>
      <param name="doc" type="org.w3c.dom.Document"/>
      <param name="omitXMLDeclaration" type="boolean"/>
      <param name="indenting" type="boolean"/>
      <param name="indent" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param out
 @param doc
 @param omitXMLDeclaration
 @param indenting
 @param indent
 @throws IOException
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="getIndent" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getIndenting" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getListOfSBMLElementsToWrite" return="java.util.ArrayList&lt;java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbase" type="java.lang.Object"/>
    </method>
    <method name="getOmitXMLDeclaration" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="processAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ElementName" type="java.lang.String"/>
      <param name="AttributeName" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isLastAttribute" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processCharactersOf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="characters" type="java.lang.String"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processEndDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
    </method>
    <method name="processEndElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ElementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isNested" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="isLastNamespace" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processStartElement" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ElementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="hasNamespaces" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="setIndent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="indent" type="int"/>
      <doc>
      <![CDATA[@param indent
            the indent to set]]>
      </doc>
    </method>
    <method name="setIndenting"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="indenting" type="boolean"/>
      <doc>
      <![CDATA[@param indenting
            the indenting to set]]>
      </doc>
    </method>
    <method name="setOmitXMLDeclaration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="omitXMLDeclaration" type="boolean"/>
      <doc>
      <![CDATA[@param omitXMLDeclaration
            the omitXMLDeclaration to set]]>
      </doc>
    </method>
    <method name="writeAttributes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
    </method>
    <method name="writeCharacters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
    </method>
    <method name="writeElement"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
    </method>
    <method name="writeNamespaces"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[A MathMLParser is used to parse the MathML expressions injected into a SBML
 file. This class use DOM to parse the mathML. The name space URI of this
 parser is {@link http://www.w3.org/1998/Math/MathML}. This parser is able to
 read and write MathML expressions (implements ReadingParser and
 WritingParser).
 
 @author Marine Dumousseau
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $
 
 @deprecated this class should not be used anymore, replaced by
             {@link MathMLStaxParser}. But we keep it in case somebody want to
             use {@link org.w3c.dom.Document}]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.parsers.MathMLParser -->
  <!-- start class org.sbml.jsbml.xml.parsers.MathMLStaxParser -->
  <class name="MathMLStaxParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.xml.parsers.ReadingParser"/>
    <constructor name="MathMLStaxParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getIndent" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getIndenting" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="getOmitXMLDeclaration" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="processAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="attributeName" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isLastAttribute" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processCharactersOf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="characters" type="java.lang.String"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processEndDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
    </method>
    <method name="processEndElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isNested" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="isLastNamespace" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processStartElement" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="hasNamespaces" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="setIndent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="indent" type="int"/>
      <doc>
      <![CDATA[@param indent
            the indent to set]]>
      </doc>
    </method>
    <method name="setIndenting"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="indenting" type="boolean"/>
      <doc>
      <![CDATA[@param indenting
            the indenting to set]]>
      </doc>
    </method>
    <method name="setOmitXMLDeclaration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="omitXMLDeclaration" type="boolean"/>
      <doc>
      <![CDATA[@param omitXMLDeclaration
            the omitXMLDeclaration to set]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A MathMLStaxParser is used to parse the MathML expressions injected into a SBML
 file. The name space URI of this parser is
 "http://www.w3.org/1998/Math/MathML". This parser is able to read and write
 MathML expressions (implements ReadingParser and WritingParser).
 
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.parsers.MathMLStaxParser -->
  <!-- start class org.sbml.jsbml.xml.parsers.ModelQualifierParser -->
  <class name="ModelQualifierParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.xml.parsers.ReadingParser"/>
    <constructor name="ModelQualifierParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a ModelQualifierParser instance and initialises the modelQualifierMap.]]>
      </doc>
    </constructor>
    <method name="getNamespaceURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the namespaceURI]]>
      </doc>
    </method>
    <method name="processAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ElementName" type="java.lang.String"/>
      <param name="AttributeName" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isLastAttribute" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processCharactersOf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="characters" type="java.lang.String"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processEndDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
    </method>
    <method name="processEndElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ElementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isNested" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="isLastNamespace" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processStartElement" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="hasNamespaces" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[A {@link ModelQualifierParser} is used to parse the XML elements and
 attributes which have this namespace URI :
 http://biomodels.net/model-qualifiers/.
 
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.parsers.ModelQualifierParser -->
  <!-- start class org.sbml.jsbml.xml.parsers.RDFAnnotationParser -->
  <class name="RDFAnnotationParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.xml.parsers.ReadingParser"/>
    <constructor name="RDFAnnotationParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNamespaceURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the namespaceURI]]>
      </doc>
    </method>
    <method name="processAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="attributeName" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isLastAttribute" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processCharactersOf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="characters" type="java.lang.String"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processEndDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <doc>
      <![CDATA[Checks if the sbmlDocument and all the  SBML components have a valid rdf:about value.
 
 @see org.sbml.jsbml.xml.ReadingParser#processEndDocument(SBMLDocument sbmlDocument)]]>
      </doc>
    </method>
    <method name="processEndElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isNested" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="isLastNamespace" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processStartElement" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="hasNamespaces" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[A RDFAnnotationParser is used to parser the subNodes of an annotation which
 have the namespace URI : "http://www.w3.org/1999/02/22-rdf-syntax-ns#". This
 parser can only read the RDF annotations.
 
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.parsers.RDFAnnotationParser -->
  <!-- start interface org.sbml.jsbml.xml.parsers.ReadingParser -->
  <interface name="ReadingParser"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="processAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="attributeName" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isLastAttribute" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
      <doc>
      <![CDATA[Process the XML attribute and modify 'contextObject' in consequence.
 
 For example, if the contextObject is an instance of Reaction and the attributeName is 'fast', 
 this method will set the 'fast' variable of the 'contextObject' to 'value'.
 Then it will return the modified Reaction instance.
 
 @param elementName : the localName of the XML element.
 @param attributeName : the attribute localName of the XML element.
 @param value : the value of the XML attribute.
 @param prefix : the attribute prefix 
 @param isLastAttribute : boolean value to know if this attribute is the last attribute of the XML element.
 @param contextObject : the object to set or modify depending on the identity of the current attribute. This object 
           represents the context of the XML attribute in the SBMLDocument.]]>
      </doc>
    </method>
    <method name="processCharactersOf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="characters" type="java.lang.String"/>
      <param name="contextObject" type="java.lang.Object"/>
      <doc>
      <![CDATA[Process the text of a XML element and modify 'contextObject' in consequence.
 
 For example, if the contextObject is an instance of ModelCreator and the elementName is 'Family',
 this method will set the familyName of the 'contextObject' to the text value. Then it will return the 
 changed ModelCreator instance.
 
 @param elementName : the localName of the XML element.
 @param characters : the text of this XML element.
 @param contextObject : the object to set or modify depending on the identity of the current element. This object 
            represents the context of the XML element in the SBMLDocument.]]>
      </doc>
    </method>
    <method name="processEndDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <doc>
      <![CDATA[Process the end of the document. Do the necessary changes in the SBMLDocument.
 
 For example, check if all the annotations are valid, etc.
 
 @param sbmlDocument : the final initialised SBMLDocument instance.]]>
      </doc>
    </method>
    <method name="processEndElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isNested" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
      <doc>
      <![CDATA[Process the end of the element 'elementName'. Modify or not the contextObject.
 
 @param elementName : the localName of the XML element.
 @param prefix : the prefix of the XML element.
 @param isNested : boolean value to know if the XML element is a nested element.
 @param contextObject : the object to set or modify depending on the identity of the current element. This object 
             represents the context of the XML element in the SBMLDocument.
 
 @return true to remove the contextObject from the stack, if false is returned the contextObject will stay on top 
             of the stack]]>
      </doc>
    </method>
    <method name="processNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="isLastNamespace" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
      <doc>
      <![CDATA[Process the namespace and modify the contextObject in consequence.
 
 For example, if the contextObject is an instance of SBMLDocument, the namespaces will be stored in the SBMLNamespaces HashMap 
 of this SBMLDocument.

 @param elementName : the localName of the XML element.
 @param URI : the URI of the namespace
 @param prefix : the prefix of the namespace.
 @param localName : the localName of the namespace.
 @param hasAttributes : boolean value to know if there are attributes after the namespace declarations.
 @param isLastNamespace : boolean value to know if this namespace is the last namespace of this element.
 @param contextObject : the object to set or modify depending on the identity of the current element. This object 
              represents the context of the XML element in the SBMLDocument.]]>
      </doc>
    </method>
    <method name="processStartElement" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="hasNamespaces" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
      <doc>
      <![CDATA[Process the XML element and modify 'contextObject' in consequence.
 
 For example, if the contextObject is an instance of Event and the elementName is 'trigger', this method 
 will create a new Trigger instance and will set the trigger instance of the 'contextObject' to the new Trigger.
 Then the method will return the new Trigger instance which is the new environment.

 @param elementName : the localName of the XML element to process
 @param prefix : the prefix of the XML element to process
 @param hasAttributes : boolean value to know if this XML element has attributes.
 @param hasNamespaces : boolean value to know if this XML element contains namespace declarations.
 @param contextObject : the object to set or modify depending on the identity of the current XML element. This object 
             represents the context of the XML element in the SBMLDocument.
 @return a new contextObject which represents the environment of the next node/subnode in the SBMLDocument. If null is returned,
             the contextObject will not change.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The interface to implement for the SBML parsers reading SBML files.
 
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.xml.parsers.ReadingParser -->
  <!-- start class org.sbml.jsbml.xml.parsers.SBMLCoreParser -->
  <class name="SBMLCoreParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.xml.parsers.ReadingParser"/>
    <implements name="org.sbml.jsbml.xml.parsers.WritingParser"/>
    <constructor name="SBMLCoreParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a SBMLCoreParser instance. Initializes the sbmlCoreElements of
 this Parser.]]>
      </doc>
    </constructor>
    <method name="getListOfSBMLElementsToWrite" return="java.util.ArrayList&lt;java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbase" type="java.lang.Object"/>
    </method>
    <method name="getLogger" return="org.sbml.jsbml.xml.stax.XMLLogger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the logger]]>
      </doc>
    </method>
    <method name="getNamespaceURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the namespace URI of this parser.]]>
      </doc>
    </method>
    <method name="processAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="attributeName" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isLastAttribute" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processCharactersOf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="characters" type="java.lang.String"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processEndDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
    </method>
    <method name="processEndElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isNested" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="isLastNamespace" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processStartElement" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="hasNamespaces" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="setLogger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="logger" type="org.sbml.jsbml.xml.stax.XMLLogger"/>
      <doc>
      <![CDATA[@param logger
            the logger to set]]>
      </doc>
    </method>
    <method name="writeAttributes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
    </method>
    <method name="writeCharacters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
    </method>
    <method name="writeElement"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
    </method>
    <method name="writeNamespaces"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[Parses the SBML core elements of an SBML file. It can read and write SBML
 core elements (implements {@link ReadingParser} and {@link WritingParser}).
 
 @author Nicolas Rodriguez
 @author Andreas Dr&auml;ger
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.parsers.SBMLCoreParser -->
  <!-- start class org.sbml.jsbml.xml.parsers.SBMLLevel1Version1Parser -->
  <class name="SBMLLevel1Version1Parser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.xml.parsers.ReadingParser"/>
    <implements name="org.sbml.jsbml.xml.parsers.WritingParser"/>
    <constructor name="SBMLLevel1Version1Parser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ClassNotFoundException" type="java.lang.ClassNotFoundException"/>
      <doc>
      <![CDATA[@throws ClassNotFoundException
 @throws IOException]]>
      </doc>
    </constructor>
    <method name="getListOfSBMLElementsToWrite" return="java.util.ArrayList&lt;java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbase" type="java.lang.Object"/>
    </method>
    <method name="getParserNamespace" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return]]>
      </doc>
    </method>
    <method name="processAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="attributeName" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isLastAttribute" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processCharactersOf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="characters" type="java.lang.String"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processEndDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
    </method>
    <method name="processEndElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isNested" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="isLastNamespace" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processStartElement" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="hasNamespaces" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="writeAttributes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
    </method>
    <method name="writeCharacters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
    </method>
    <method name="writeElement"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
    </method>
    <method name="writeNamespaces"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
    </method>
    <field name="SBMLCoreElements" type="java.util.HashMap&lt;java.lang.String, java.lang.Class&lt;? extends java.lang.Object&gt;&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.parsers.SBMLLevel1Version1Parser -->
  <!-- start class org.sbml.jsbml.xml.parsers.StringParser -->
  <class name="StringParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.xml.parsers.ReadingParser"/>
    <constructor name="StringParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getTypeOfNotes" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the typeOfNotes of this ReadingParser.]]>
      </doc>
    </method>
    <method name="processAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="attributeName" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isLastAttribute" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processCharactersOf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="characters" type="java.lang.String"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processEndDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
    </method>
    <method name="processEndElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isNested" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="isLastNamespace" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processStartElement" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="hasNamespaces" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="setTypeOfNotes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="typeOfNotes" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the typeOfNote of this parser.
 @param typeOfNotes]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A {@link StringParser} can be used to store the HTML expressions into an {@link XMLNode} in the
 SBML component.
 
 @author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.parsers.StringParser -->
  <!-- start class org.sbml.jsbml.xml.parsers.VCardParser -->
  <class name="VCardParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.sbml.jsbml.xml.parsers.ReadingParser"/>
    <constructor name="VCardParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNamespaceURI" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the namespaceURI]]>
      </doc>
    </method>
    <method name="processAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="attributeName" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isLastAttribute" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processCharactersOf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="characters" type="java.lang.String"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processEndDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
    </method>
    <method name="processEndElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="isNested" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="URI" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <param name="hasAttributes" type="boolean"/>
      <param name="isLastNamespace" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <method name="processStartElement" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="hasAttribute" type="boolean"/>
      <param name="hasNamespaces" type="boolean"/>
      <param name="contextObject" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[A {@link VCardParser} is used to parser the subNodes of an annotation which have this
 namespace URI : "http://www.w3.org/2001/vcard-rdf/3.0#".
 
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.parsers.VCardParser -->
  <!-- start interface org.sbml.jsbml.xml.parsers.WritingParser -->
  <interface name="WritingParser"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getListOfSBMLElementsToWrite" return="java.util.List&lt;java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="objectToWrite" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns the list of children of the <code>objectToWrite</code>.
 
 @param objectToWrite
            : the {@link SBase} component to write.
 @return the list of components that '{@link SBase}' contains. Represents
         the list of subNodes of this {@link SBase} component.]]>
      </doc>
    </method>
    <method name="writeAttributes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
      <doc>
      <![CDATA[Adds the XML attributes of the <code>sbmlElementToWrite</code> to the attributes
 HashMap of the <code>xmlObject</code>.
 
 @param xmlObject
            : contains the XML information about sbmlElement.
 @param sbmlElementToWrite
            : the {@link SBase} component to write]]>
      </doc>
    </method>
    <method name="writeCharacters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets the characters of xmlObject depending on the sbml element to write.
 
 @param xmlObject
            : contains the XML information about sbmlElement.
 @param sbmlElementToWrite
            : the {@link SBase} component to write]]>
      </doc>
    </method>
    <method name="writeElement"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets the name of xmlObject (if it is not set) to the element name of
 sbmlElementToWrite.
 
 @param xmlObject
            : contains the XML information about sbmlElement.
 @param sbmlElementToWrite
            : the {@link SBase} component to write]]>
      </doc>
    </method>
    <method name="writeNamespaces"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlObject" type="org.sbml.jsbml.xml.stax.SBMLObjectForXML"/>
      <param name="sbmlElementToWrite" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets the namespace of xmlObject (if it is not set) to the namespace of
 sbmlElementToWrite.
 
 @param xmlObject
            : contains the XML information about sbmlElement.
 @param sbmlElementToWrite
            : the {@link SBase} component to write]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The interface to implement for a parser which writes a SBML file.
 
 @author Marine Dumousseau
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </interface>
  <!-- end interface org.sbml.jsbml.xml.parsers.WritingParser -->
  <!-- start class org.sbml.jsbml.xml.parsers.XMLNodeWriter -->
  <class name="XMLNodeWriter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="XMLNodeWriter" type="javax.xml.stream.XMLStreamWriter, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param writer
 @param indent]]>
      </doc>
    </constructor>
    <method name="toXML" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlNode" type="org.sbml.jsbml.xml.XMLNode"/>
      <doc>
      <![CDATA[@param xmlNode
 @return]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlNode" type="org.sbml.jsbml.xml.XMLNode"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
    </method>
    <doc>
    <![CDATA[@author Nicolas Rodriguez
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.parsers.XMLNodeWriter -->
  <doc>
  <![CDATA[<p>Contains classes that implement <a href="ReadingParser.html">ReaderParser</a> and/or <a href="WritingParser.html">WritingParser</a> to read or write some specific parts of an SBML file.</p>]]>
  </doc>
</package>
<package name="org.sbml.jsbml.xml.stax">
  <!-- start class org.sbml.jsbml.xml.stax.DateProcessor -->
  <class name="DateProcessor" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DateProcessor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="convertToGMT" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="datetime" type="java.util.Date"/>
      <doc>
      <![CDATA[Convert timezone of datetime string to GMT.
 
 @param datetime
            Datetime.
 @return datetime string with GMT timezone.]]>
      </doc>
    </method>
    <method name="convertToGMT" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="datetime" type="java.lang.String"/>
      <doc>
      <![CDATA[Convert timezone of datetime string to GMT.
 
 @param datetime
            Datetime.
 @return datetime string with GMT timezone.]]>
      </doc>
    </method>
    <method name="convertToGMT" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="datetime" type="java.sql.Timestamp"/>
      <doc>
      <![CDATA[Convert timezone of datetime string to GMT.
 
 @param datetime
            Datetime.
 @return datetime string with GMT timezone.]]>
      </doc>
    </method>
    <method name="formatToW3CDTF" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="datetime" type="java.util.Date"/>
      <doc>
      <![CDATA[Format date to <a href="http://www.w3.org/TR/NOTE-datetime">W3CDTF</a>.
 
 @param datetime
            Datetime.
 @return datetime string in W3CDTF.]]>
      </doc>
    </method>
    <method name="formatToW3CDTF" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="datetime" type="java.lang.String"/>
      <doc>
      <![CDATA[Format datetime string to <a
 href="http://www.w3.org/TR/NOTE-datetime">W3CDTF</a>.
 
 @param datetime
            Datetime string.
 @return datetime string in W3CDTF.]]>
      </doc>
    </method>
    <method name="formatToW3CDTF" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="datetime" type="java.sql.Timestamp"/>
      <doc>
      <![CDATA[Format datetime to <a
 href="http://www.w3.org/TR/NOTE-datetime">W3CDTF</a>.
 
 @param datetime
            Datetime.
 @return datetime string in W3CDTF.]]>
      </doc>
    </method>
    <method name="stringToTimestamp" return="java.sql.Timestamp"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="datetime" type="java.lang.String"/>
      <doc>
      <![CDATA[Convert timezone of datetime string to GMT.
 
 @param datetime
            Datetime.
 @return datetime string with GMT timezone.]]>
      </doc>
    </method>
    <field name="instance" type="org.sbml.jsbml.xml.stax.DateProcessor"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ISO_8601_DATE_FORMAT" type="java.text.SimpleDateFormat"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[ISO 8601 [W3CDTF] date format for GMT]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Format time to W3DTF
 
 @author Chen Li
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.stax.DateProcessor -->
  <!-- start class org.sbml.jsbml.xml.stax.SBMLObjectForXML -->
  <class name="SBMLObjectForXML" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SBMLObjectForXML"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="addAttributes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributes" type="java.util.Map&lt;java.lang.String, java.lang.String&gt;"/>
      <doc>
      <![CDATA[Adds an attribute to this attributes HashMap.
 
 @param attributes
            the attributes to set]]>
      </doc>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets all the variable of this object to null.]]>
      </doc>
    </method>
    <method name="getAttributes" return="java.util.HashMap&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the attributes]]>
      </doc>
    </method>
    <method name="getCharacters" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the characters]]>
      </doc>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the name]]>
      </doc>
    </method>
    <method name="getNamespace" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the namespace]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the prefix]]>
      </doc>
    </method>
    <method name="isSetAttributes" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the attributes of this object is not null.]]>
      </doc>
    </method>
    <method name="isSetCharacters" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the characters of this object is not null.]]>
      </doc>
    </method>
    <method name="isSetName" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the name of this object is not null.]]>
      </doc>
    </method>
    <method name="isSetNamespace" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the namespace of this Object is not null;]]>
      </doc>
    </method>
    <method name="isSetPrefix" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if the prefix of this Object is not null.]]>
      </doc>
    </method>
    <method name="setCharacters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="characters" type="java.lang.String"/>
      <doc>
      <![CDATA[@param characters
            the characters to set]]>
      </doc>
    </method>
    <method name="setName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[@param name
            the name to set]]>
      </doc>
    </method>
    <method name="setNamespace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespace" type="java.lang.String"/>
      <doc>
      <![CDATA[@param namespace
            the namespace to set]]>
      </doc>
    </method>
    <method name="setPrefix"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <doc>
      <![CDATA[@param prefix
            the prefix to set]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[An SBMLObjectForXML is an object to store the localName, prefix, namespace
 URI, attributes and text of a SBML component we want to write.
 
 @author marine
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.stax.SBMLObjectForXML -->
  <!-- start class org.sbml.jsbml.xml.stax.SBMLReader -->
  <class name="SBMLReader" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SBMLReader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getReadingParsers" return="java.lang.Class&lt;? extends org.sbml.jsbml.xml.parsers.ReadingParser&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespace" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets the ReadingParser class associated with 'namespace'.
 
 @param namespace
 @return the ReadingParser class associated with 'namespace'. Null if
         there is not matching ReadingParser class.]]>
      </doc>
    </method>
    <method name="initializePackageParserNamespaces"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the packageParser {@link HashMap} of this class.]]>
      </doc>
    </method>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Reads the file that is passed as argument and write it to the console, 
 using the method {@link SBMLWriter.write}.
 
 @param args the command line arguments, we are taking the first one as 
 the file name to read.
 
 @throws IOException if the file name is not valid.
 @throws SBMLException if there are any problems reading or writing the SBML model.
 @throws XMLStreamException if there are any problems reading or writing the XML file.]]>
      </doc>
    </method>
    <method name="readSBML" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[@param file
 @return
 @throws XMLStreamException 
 @throws IOException]]>
      </doc>
    </method>
    <method name="readSBML" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[Reads a SBML String from the given file.
 
 @param file
            A file containing SBML content.
 @return the matching SBMLDocument instance.
 @throws IOException 
 @throws XMLStreamException]]>
      </doc>
    </method>
    <method name="readSBML" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Reads SBML from a given file.
 
 @param file
            The path to an SBML file.
 @return the matching SBMLDocument instance.
 @throws XMLStreamException
 @throws IOException]]>
      </doc>
    </method>
    <method name="readSBMLFile" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Reads the SBML file 'fileName' and creates/initialises a SBMLDocument
 instance.
 
 @param fileName
            : name of the SBML file to read.
 @return the initialised SBMLDocument.
 @throws XMLStreamException
 @throws IOException]]>
      </doc>
    </method>
    <method name="readSBML" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlEventReader" type="javax.xml.stream.XMLEventReader"/>
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[Reads an {@link SBMLDocument} from the given {@link XMLEventReader}
 
 @param xmlEventReader
 @param listener 
 @return
 @throws XMLStreamException]]>
      </doc>
    </method>
    <method name="readSBML" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlEventReader" type="javax.xml.stream.XMLEventReader"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[@param xmlEventReader
 @return
 @throws XMLStreamException]]>
      </doc>
    </method>
    <method name="readMathML" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mathML" type="java.lang.String"/>
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[Reads a mathML String into an {@link ASTNode}.
 
 @param mathML
 @param listener 
 @return an {@link ASTNode} representing the given mathML String.
 @throws XMLStreamException]]>
      </doc>
    </method>
    <method name="readMathML" return="org.sbml.jsbml.ASTNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mathML" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[@param mathML
 @return
 @throws XMLStreamException]]>
      </doc>
    </method>
    <method name="readNotes" return="org.sbml.jsbml.xml.XMLNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notesXHTML" type="java.lang.String"/>
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[Reads a notes XML String into an {@link XMLNode}.
 
 @param notesXHTML
 @param listener 
 @return an {@link XMLNode} representing the given notes String.
 @throws XMLStreamException]]>
      </doc>
    </method>
    <method name="readNotes" return="org.sbml.jsbml.xml.XMLNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notesXHTML" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[@param notesXHTML
 @return
 @throws XMLStreamException]]>
      </doc>
    </method>
    <method name="readSBMLFromStream" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.InputStream"/>
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[Reads a SBML document from the given <code>stream</code>. 
 
 @param stream
 @param listener 
 @return
 @throws XMLStreamException]]>
      </doc>
    </method>
    <method name="readSBMLFromStream" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.InputStream"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[@param stream
 @return
 @throws XMLStreamException]]>
      </doc>
    </method>
    <method name="readSBMLFromString" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xml" type="java.lang.String"/>
      <param name="listener" type="org.sbml.jsbml.util.TreeNodeChangeListener"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[Reads a SBML model from the given XML String.
 
 @param xml
 @param listener 
 @return]]>
      </doc>
    </method>
    <method name="readSBMLFromString" return="org.sbml.jsbml.SBMLDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xml" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <doc>
      <![CDATA[@param xml
 @return
 @throws XMLStreamException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Provides all the methods to read a SBML file.
 
 @author Marine Dumousseau
 @author Andreas Dr&auml;ger
 @author Nicolas Rodriguez
 @author Clemens Wrzodek
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.stax.SBMLReader -->
  <!-- start class org.sbml.jsbml.xml.stax.SBMLWriter -->
  <class name="SBMLWriter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SBMLWriter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link SBMLWriter} with default configuration for
 {@link #indentChar} and {@link #indentCount}.]]>
      </doc>
    </constructor>
    <constructor name="SBMLWriter" type="char, short"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link SBMLWriter} with the given configuration for the
 {@link #indentChar} and {@link #indentCount}, i.e., the symbol to be used
 to indent elements in the XML representation of SBML data objects and the
 number of these symbols to be concatenated at the beginning of each new
 line for a new element.
 
 @param indentChar
 @param indentCount]]>
      </doc>
    </constructor>
    <method name="getDefaultIndentChar" return="char"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return The default symbol to be used to indent new elements in the XML
         representation of SBML data structures.]]>
      </doc>
    </method>
    <method name="getDefaultIndentCount" return="short"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return The default number of indent symbols to be concatenated at the
         beginning of a new block in an XML representation of SBML data
         structures.]]>
      </doc>
    </method>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Tests this class
 
 @param args
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="getIndentationChar" return="char"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gives the symbol that is used to indent the SBML output for a better
 structure and to improve human-readability.
 
 @return the character to be used for indentation.]]>
      </doc>
    </method>
    <method name="getIndentationCount" return="short"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gives the number of indent symbols that are inserted in a line to better structure the SBML output.
 
 @return the indentCount]]>
      </doc>
    </method>
    <method name="getWritingParsers" return="java.lang.Class&lt;? extends org.sbml.jsbml.xml.parsers.WritingParser&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespace" type="java.lang.String"/>
      <doc>
      <![CDATA[@param namespace
 @return the WritingParser class associated with 'namespace'. Null if
         there is not matching WritingParser class.]]>
      </doc>
    </method>
    <method name="initializePackageParserNamespaces"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the packageParser {@link HasMap} of this class.]]>
      </doc>
    </method>
    <method name="setIndentationChar"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="indentSymbol" type="char"/>
      <doc>
      <![CDATA[Allows you to set another blank character for indentation. Allowed are
 only tabs and white spaces, i.e., <code>'\t'</code> and <code>' '</code>.
 
 @param the character to be used for indentation
            the indentSymbol to set]]>
      </doc>
    </method>
    <method name="setIndentationCount"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="indentCount" type="int"/>
      <doc>
      <![CDATA[@param indentCount
 @see SBMLWriter#setIndentationCount(short)]]>
      </doc>
    </method>
    <method name="setIndentationCount"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="indentCount" type="short"/>
      <doc>
      <![CDATA[@param indentCount the indentCount to set]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="document" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="file" type="java.io.File"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[@param document
 @param file
 @throws SBMLException
 @throws XMLStreamException
 @throws IOException
             if it is not possible to write to the given file, e.g., due
             to an invalid file name or missing permissions.]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="document" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="file" type="java.io.File"/>
      <param name="programName" type="java.lang.String"/>
      <param name="programVersion" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[@param document
 @param file
 @param programName
 @param programVersion
 @return
 @throws XMLStreamException
 @throws SBMLException
 @throws IOException
             if it is not possible to write to the given file, e.g., due
             to an invalid file name or missing permissions.]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="stream" type="java.io.OutputStream"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the SBMLDocument in a SBML file.
 
 @param sbmlDocument
            : the SBMLDocument to write
 @param stream
            : a stream where to write the content of the model to.
 @throws XMLStreamException
 @throws SBMLException
 @throws IOException]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="stream" type="java.io.OutputStream"/>
      <param name="programName" type="java.lang.String"/>
      <param name="programVersion" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param sbmlDocument
 @param stream
 @param programName
            can be null
 @param programVersion
            can be null
 @throws XMLStreamException
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="fileName" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="FileNotFoundException" type="java.io.FileNotFoundException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the XML representation of an {@link SBMLDocument} in a SBML file.
 
 @param sbmlDocument
            : the SBMLDocument to write
 @param fileName
            : the name of the file where to write the {@link SBMLDocument}
            
 
 @throws XMLStreamException
             if any error occur while creating the XML document.
 @throws FileNotFoundException
             if the file name is invalid
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbmlDocument" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="fileName" type="java.lang.String"/>
      <param name="programName" type="java.lang.String"/>
      <param name="programVersion" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="FileNotFoundException" type="java.io.FileNotFoundException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param sbmlDocument
 @param fileName
 @param programName
 @param programVersion
 
 @throws XMLStreamException
 @throws FileNotFoundException
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="writeAnnotation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sbase" type="org.sbml.jsbml.SBase"/>
      <doc>
      <![CDATA[@param sbase
 @return]]>
      </doc>
    </method>
    <method name="writeSBMLToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="doc" type="org.sbml.jsbml.SBMLDocument"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[Writes the given SBML document to an in-memory string.
 
 @param doc
            the <code>SBMLdocument</code>
 @return the XML representation of the <code>SBMLdocument</code> as a
         String.
 @throws XMLStreamException
             if any error occur while creating the XML document.
 @throws SBMLException]]>
      </doc>
    </method>
    <method name="writeSBMLToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="org.sbml.jsbml.SBMLDocument"/>
      <param name="programName" type="java.lang.String"/>
      <param name="programVersion" type="java.lang.String"/>
      <exception name="XMLStreamException" type="javax.xml.stream.XMLStreamException"/>
      <exception name="SBMLException" type="org.sbml.jsbml.SBMLException"/>
      <doc>
      <![CDATA[@param d
 @param programName
 @param programVersion
 @return
 @throws XMLStreamException
 @throws SBMLException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A SBMLWriter provides the methods to write a SBML file.
 
 @author Marine Dumousseau
 @author Nicolas Rodriguez
 @author Andreas Dr&auml;ger
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.stax.SBMLWriter -->
  <!-- start class org.sbml.jsbml.xml.stax.XMLLogger -->
  <class name="XMLLogger" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="XMLLogger"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
      <doc>
      <![CDATA[@param message]]>
      </doc>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
      <doc>
      <![CDATA[@param message]]>
      </doc>
    </method>
    <method name="fatal"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
      <doc>
      <![CDATA[@param message]]>
      </doc>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
      <doc>
      <![CDATA[@param message]]>
      </doc>
    </method>
    <method name="log"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="priority" type="org.apache.log4j.Priority"/>
      <param name="message" type="java.lang.String"/>
      <doc>
      <![CDATA[@param priority
 @param message]]>
      </doc>
    </method>
    <doc>
    <![CDATA[TODO: Comment missing
 @since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.stax.XMLLogger -->
  <doc>
  <![CDATA[<p>Contains classes that use the <a href="http://jcp.org/en/jsr/detail%3Fid=173">Streaming API for XML (StAX)</a> to read or write an SBML file.</p>]]>
  </doc>
</package>
<package name="org.sbml.jsbml.xml.xstream.converter">
  <!-- start class org.sbml.jsbml.xml.xstream.converter.MessageConverter -->
  <class name="MessageConverter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MessageConverter" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="canConvert" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="arg0" type="java.lang.Class"/>
    </method>
    <method name="marshal"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="currentObject" type="java.lang.Object"/>
      <param name="writer" type="HierarchicalStreamWriter"/>
      <param name="context" type="MarshallingContext"/>
    </method>
    <method name="unmarshal" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="HierarchicalStreamReader"/>
      <param name="context" type="UnmarshallingContext"/>
    </method>
    <doc>
    <![CDATA[@since 0.8
 @version $Rev: 1447 $]]>
    </doc>
  </class>
  <!-- end class org.sbml.jsbml.xml.xstream.converter.MessageConverter -->
  <doc>
  <![CDATA[<p>Contains classes that uses the <a href="http://xstream.codehaus.org/">XStream</a> to read or write XML.</p>
    
    <p>It is currently use only to parse the result of the libsbml validation process but might be use in future release to parse SBML</p>]]>
  </doc>
</package>

</api>
