#!/bin/bash
## ============================================================================
## File name   : update-from-github
## Description : Script to update local files to match a given remote git branch
## Author(s)   : Michael Hucka <mhucka@caltech.edu>
## Organization: California Institute of Technology
## Date created: 2019-03-19
#
# This checks a remote git repostiory for changes to a git repository, and if it
# detects that the remote is ahead of the local copy, it does a git rebase to
# synchronize the local copy with the remote.  The script takes an optional
# argument: the branch to compare against.  (The default is master.)
#
# To make it possible to clone the github repo, the repo must be public and
# the protocol used to create the initial git clone must be https instead of
# git (or else you will get permission denied errors when this script runs).
#
# Don't forget to do the first clone of the repo using --recursive!
#
# This is intended to be run from cron or a similar system daemon control
# system (e.g., Jenkins).  Here's an example of a cron entry:
#
#   */5 * * * * /home/hugo/sbml/admin/update-from-github >> /var/log/hugo/github-updates.log 2>&1
#
# If you want to update a branch, pass the branch name as an argument. For
# example, if you want to keep the branch 'develop' updated in a local repo
# instead of defaulting to 'master', you could do this:
#
#   */5 * * * * /home/hugo/sbml/admin/update-from-github develop >> /var/log/hugo/github-updates.log 2>&1
#
# Assumptions for purposes of the SBML.org site repository:
# - this script is located in the local repository copy
# - permissions on this script and other things are set up properly
# -----------------------------------------------------------------------------

# Because this is run from cron, we may need to include /usr/local/bin/.

PATH=/usr/local/bin:/opt/local/bin:/bin:/usr/bin

# Change to the directory where this file is located.  This is so that it
# works from cron.

cd $(dirname "${BASH_SOURCE[0]}") > /dev/null 2>&1

# Get the path of our local repo, based on the assumption that this file is
# located somewhere in the repo itself.

REPO=$(git rev-parse --show-toplevel)

# Get info about the remote origin.  The echo to /dev/null is because "git
# remote update" doesn't accept a --quiet argument.

echo "===== ${0##*/} started at $(/bin/date '+%G-%m-%d:%H%M') ====="

cd $REPO
git remote update > /dev/null

# The following code is based on http://stackoverflow.com/a/3278427/743730

UPSTREAM=${1:-'@{u}'}
LOCAL=$(git rev-parse @{0})
REMOTE=$(git rev-parse "$UPSTREAM")
BASE=$(git merge-base @{0} "$UPSTREAM")

RETVAL=0
if [ $LOCAL = $REMOTE ]; then
    echo "Up-to-date"
elif [ $LOCAL = $BASE ]; then
    # echo "Need to pull"
    git stash
    git pull --rebase origin $UPSTREAM
    RETVAL=$?
elif [ $REMOTE = $BASE ]; then
    echo "Need to push"
else
    echo "Diverged"
fi

echo "===== ${0##*/} stopped at $(/bin/date '+%G-%m-%d:%H%M') ====="
exit $RETVAL
