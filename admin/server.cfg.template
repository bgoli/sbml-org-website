## ============================================================================
## File name   : admin/config.cfg
## Description : General and environment variables for SBML.org Hugo-based site
## Author(s)   : Michael Hucka <mhucka@caltech.edu>
## Organization: California Institute of Technology
## Date created: 2019-03-19
##
## THIS FILE MUST BE EDITED TO CONFIGURE THE SERVER.
## The default settings only work for creating a local instance for testing.
## ============================================================================

sbmladmin=$(dirname "${BASH_SOURCE[0]}")

# Public site configuration.
# .............................................................................
# If you are running a local server for local preview and development, leave
# SITE_URL, SITE_IP and SITE_PORT undefined.

SITE_ROOT="$sbmladmin/../site"
SITE_URL=
SITE_IP=
SITE_PORT=


# System process configuration
# .............................................................................
# For security reasons, don't run Hugo as root on public servers.  This has
# two implications:
#
#  1) to let Hugo bind to port 80 as a non-root user, it's necessary to use
#     setcap on the hugo binary or create a redirection from a non-root port
#     to port 80 (e.g., using haproxy or similar).
#
#  2) The hugo binary can't write to directories in /var (such as /var/log)
#     unless special arrangements are made.  The instructions in the file
#     ../support-docs/how-tos/server-setup.md explain how to do this on CentOS
#     using standard CentOS 7.x system facilities.
#
# The default locations for the log and pid file, as set below, are in this
# SBML site directory tree, so that things are easier for users who are not
# doing a full server setup and just want to run their own local instance of
# the SBML website.  For actual server installations, these need to be changed
# to more appropriate locations.

# Where do we write the pid file on this system?
PID_FILE="$sbmladmin/../run/hugo.pid"

# What is the user identity of the hugo server process?
PROCESS_OWNER=hugo


# Hugo server configuration
# .............................................................................

# The executable we use to run Hugo.
HUGO="/usr/local/bin/hugo"

# Note: we don't run Hugo as root.  This means the hugo binary can't write
# to places in /var unless separate subdirectories are precreated by root.
HUGO_OUTPUTDIR="$sbmladmin/../run/hugo_output/"

# Production mode is detected by setting SITE_URL above.  Otherwise, we assume
# we're running in development mode, and use different arguments.  Note:
# --ignoreCache is added in production mode because without it, you get bad
# data if the google spreadsheet for SBML package is changed.  However, its
# use incurs a significant time cost to rebuild the site because getCSV is
# called multiple times and so page reloads during development take too long.
# So when working in development mode, we have to be conscious that the data
# fetched with getCSV is *not* updated even when a page is edited and Hugo
# rebuilds the site.  (With --ignoreCache, Hugo only refreshes the getCSV data
# from the source at the time Hugo starts up, and never again thereafter.)
#
# The --appendPort=false is needed because we put haproxy in front of hugo.
# Without this argument, Hugo puts the port number into URLs it generates in
# page headers, which breaks the URLs because the port used by Hugo is not
# the public port that users actually see on the other side of haproxy.
if [[ -n $SITE_URL ]]; then
    # Site url is set => public server, not local test/development server.
    SERVER_ARGS="--disableLiveReload --ignoreCache --appendPort=false"
    SERVER_ARGS+=" "
    SERVER_ARGS+="--baseURL $SITE_URL --bind $SITE_IP --port $SITE_PORT"
else
    SERVER_ARGS="--noHTTPCache --disableFastRender --templateMetrics --debug"
fi

# You would think that using the --logFile argument would be a smart
# way of writing Hugo's output to a log file. YOU WOULD BE WRONG, because
# Hugo doesn't send all its messages to the file given by --logFile.  Some
# messages are always printed to the terminal.  So, we don't use --logFile
# here, because it's kind of useless, and instead, our control script
# (server-control) redirects output to a log file explicitly.
HUGO_ARGS="--verbose --renderToDisk --cleanDestinationDir"
HUGO_ARGS+=" "
HUGO_ARGS+="--destination $HUGO_OUTPUTDIR"

HUGO_ARGS+=" "
HUGO_ARGS+=$SERVER_ARGS


# Miscellaneous parameters.
# .............................................................................

# Seconds to wait between stop and start when doing a restart.
RESTART_PAUSE=10
