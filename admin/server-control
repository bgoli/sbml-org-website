#! /bin/bash
## ============================================================================
## File name   : server-control
## Description : Simple script to start/stop/restart a Hugo-based server
## Author(s)   : Michael Hucka <mhucka@caltech.edu>
## Organization: California Institute of Technology
## Date created: 2019-03-19
##
## Note: we don't run Hugo as root. To have Hugo bind to port 80 as a non-root
## user, it's necessary to use setcap on the hugo binary (our approach) or
## create a redirection via iptables.  However, that means the hugo binary can't
## write to /var/log and /var/run unless separate subdirectories are precreated.
## In addition, if you run hugo as non-root and you have it write to ../site,
## it needs to have permissions to this directory, so make sure to chown and
## chgrp this entire repository clone on your destination system.
##
## Here's the complete sequence I used on a CentOS 7.6 system, assuming that
## the name of the hugo account is "hugo".
##
##  sudo useradd -M hugo
##  sudo chown -R hugo.hugo ..
##  sudo setcap 'cap_net_bind_service=+ep' /usr/local/bin/hugo
##  sudo mkdir /var/log/hugo /var/run/hugo
##  sudo chown hugo /var/log/hugo /var/run/hugo
##  sudo chgrp hugo /var/log/hugo /var/run/hugo
##
## ============================================================================

# Make sure we're NOT running as root.

if [[ $EUID -eq 0 ]]; then
   echo "This script must NOT be run as root."
   exit 1
fi


# Preliminary definitions.
# .............................................................................

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"

source $DIR/server.cfg
source $DIR/utilities.sh


# .............................................................................
# The rest below is generic and probably does not need to be changed.

case "$1" in
    start)
        cd "$SITE_ROOT"
        check_log_file $LOG_FILE
        log -s "Starting server process from directory `pwd`"

        line=`printf '=%.0s' {1..79}`
        start_time=$(/bin/date '+%G-%m-%d:%H%M')
        echo $line >> $LOG_FILE 2>&1 &
        echo "Starting Hugo on $start_time" >> $LOG_FILE 2>&1 &
        echo $line >> $LOG_FILE 2>&1 &
        # Problem: we need the PID from the first process in the pipe, but if
        # you use $! you'll get the PID of the last process in the pipe.
        # Solution: writes the PID to file descriptor 3, so that it can be
        # read from there on the following line.  Genius idea posted by user
        # John Kugelman, 2014-07-16, https://stackoverflow.com/a/3786955/743730
        TMPFILE=$(mktemp /tmp/corsproxy.XXXXXX)
        trap 'rm -f -- "$TMPFILE"' INT TERM HUP EXIT
        ( $HUGO server $HUGO_ARGS 2>&1 & echo $! >&3) 3>$TMPFILE | tee -a $LOG_FILE | $LOG &
        sleep 2
        PID=$(<$TMPFILE)
        if [[ -z $PID ]]; then
            log -s "Failed to start $HUGO process"
            exit 1
        else
            echo $PID > $PID_FILE
            log -s "Server started successfully with PID $PID."
        fi
        exit 0
        ;;

    stop)
        if [[ ! -e $PID_FILE ]]; then
            echo "PID file $PID_FILE does not exist."
            exit 2
        fi
        PID=$(<$PID_FILE)
        if [[ -z $PID ]]; then
            echo "Proxy server does not appear to be running"
            exit 0
        else
            if ! kill -TERM  $PID> /dev/null 2>&1 ; then
                # We don't want to start killing processes by name, because
                # there might be more than one server running.  Just give up.
                if ps -p $PID > /dev/null 2>&1 ; then
                    echo "Could not terminate process $PID."
                    exit 1
                else
                    echo "Process $PID no longer exists."
                    echo "" > $PID_FILE
                    exit 1
                fi
            else
                log -s "Process $PID killed."
                exit 0
            fi
        fi
        ;;

    restart)
        $0 stop
        if [[ $? -eq 0 ]]; then
            log -s "Pausing for $RESTART_PAUSE seconds."
            sleep $RESTART_PAUSE
        fi
        $0 start
        exit $?
        ;;

    status)
        if [[ ! -e $PID_FILE ]]; then
            echo "PID file $PID_FILE does not exist."
            exit 2
        fi
        PID=`cat $PID_FILE`
        if [[ -z $PID ]]; then
            echo "Proxy server does not appear to be running"
            exit 1
        elif ps -p $PID > /dev/null 2>&1 ; then
            echo "Process $PID running."
            exit 0
        else
            echo "Process $PID no longer exists."
            echo "" > $PID_FILE
            exit 1
        fi
        ;;

    *)
        echo "Usage: $0 {start|stop|restart|status}." >&2
        exit 3
        ;;
esac
